$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x87fe247d21642756dfc84028624196eaaa253934.sol
Total states:77
3.312333
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x1154D3A781e83cF44a1F11e67b1F70611Ce52953.sol
Total states:4414
5.757202
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x77a660753874723fa48460a179992cd29a5e617a.sol
Total states:50661
178.060229
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.826576
Transaction Length: 2
Severity: High
Contract: StandardToken
Function name: increaseApproval(address,uint256)
PC address: 4101
Estimated Gas Usage: 955 - 1430
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x77a660753874723fa48460a179992cd29a5e617a.sol:117

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:32.100267
Transaction Length: 2
Severity: Low
Contract: StandardToken
Function name: increaseApproval(address,uint256)
PC address: 4114
Estimated Gas Usage: 965 - 1440
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x77a660753874723fa48460a179992cd29a5e617a.sol:118

assert(c >= a)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.160558
Transaction Length: 2
Severity: High
Contract: MintableToken
Function name: increaseApproval(address,uint256)
PC address: 5869
Estimated Gas Usage: 955 - 1430
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x77a660753874723fa48460a179992cd29a5e617a.sol:117

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:32.402280
Transaction Length: 2
Severity: Low
Contract: MintableToken
Function name: increaseApproval(address,uint256)
PC address: 5882
Estimated Gas Usage: 965 - 1440
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x77a660753874723fa48460a179992cd29a5e617a.sol:118

assert(c >= a)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:02.819363
Transaction Length: 1
Severity: Low
Contract: FTIToken
Function name: contract_addr(uint256)
PC address: 6593
Estimated Gas Usage: 345 - 440
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x77a660753874723fa48460a179992cd29a5e617a.sol:374

address[5] public contract_addr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.019962
Transaction Length: 2
Severity: High
Contract: OptionsToken
Function name: increaseApproval(address,uint256)
PC address: 6601
Estimated Gas Usage: 955 - 1430
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x77a660753874723fa48460a179992cd29a5e617a.sol:117

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:33.793038
Transaction Length: 2
Severity: Low
Contract: OptionsToken
Function name: increaseApproval(address,uint256)
PC address: 6614
Estimated Gas Usage: 965 - 1440
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x77a660753874723fa48460a179992cd29a5e617a.sol:118

assert(c >= a)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:03.506260
Transaction Length: 1
Severity: Low
Contract: ContractableToken
Function name: contract_addr(uint256)
PC address: 7330
Estimated Gas Usage: 300 - 395
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x77a660753874723fa48460a179992cd29a5e617a.sol:374

address[5] public contract_addr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.202294
Transaction Length: 2
Severity: High
Contract: FTIToken
Function name: increaseApproval(address,uint256)
PC address: 7815
Estimated Gas Usage: 955 - 1430
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x77a660753874723fa48460a179992cd29a5e617a.sol:117

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:16.803832
Transaction Length: 2
Severity: Low
Contract: FTIToken
Function name: increaseApproval(address,uint256)
PC address: 7828
Estimated Gas Usage: 965 - 1440
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x77a660753874723fa48460a179992cd29a5e617a.sol:118

assert(c >= a)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.105533
Transaction Length: 2
Severity: High
Contract: ContractableToken
Function name: increaseApproval(address,uint256)
PC address: 8552
Estimated Gas Usage: 977 - 1452
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x77a660753874723fa48460a179992cd29a5e617a.sol:117

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:34.707044
Transaction Length: 2
Severity: Low
Contract: ContractableToken
Function name: increaseApproval(address,uint256)
PC address: 8565
Estimated Gas Usage: 987 - 1462
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x77a660753874723fa48460a179992cd29a5e617a.sol:118

assert(c >= a)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x8d704d4107cbe5ebe8c0236c5506b30bf8bad305.sol
Total states:272
83.023309
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.065125
Transaction Length: 0
Severity: High
Contract: VaultProRata
Function name: constructor
PC address: 408
Estimated Gas Usage: 82423 - 403508
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x8d704d4107cbe5ebe8c0236c5506b30bf8bad305.sol:34

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.612061
Transaction Length: 0
Severity: Low
Contract: VaultProRata
Function name: constructor
PC address: 422
Estimated Gas Usage: 82433 - 403518
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x8d704d4107cbe5ebe8c0236c5506b30bf8bad305.sol:35

assert(c >= a)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0xa90249101da7cdf0bc01795b9609c37719075275.sol
Total states:5149
63.244041
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.907721
Transaction Length: 1
Severity: High
Contract: UpsweepV1
Function name: reveal(uint8,string)
PC address: 1312
Estimated Gas Usage: 395 - 490
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xa90249101da7cdf0bc01795b9609c37719075275.sol:3

*/

//pragma solidity ^0.5.2;
pragm

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:23.182063
Transaction Length: 1
Severity: Low
Contract: UpsweepV1
Function name: balancesById(uint256,uint256)
PC address: 8333
Estimated Gas Usage: 412 - 697
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xa90249101da7cdf0bc01795b9609c37719075275.sol:53

mapping(uint => uint8[20]) public balancesById

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:28.751642
Transaction Length: 1
Severity: Low
Contract: UpsweepV1
Function name: bottleneckById(uint256,uint256)
PC address: 8389
Estimated Gas Usage: 434 - 719
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xa90249101da7cdf0bc01795b9609c37719075275.sol:54

mapping(uint => uint8[20]) public bottleneckById

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol
Total states:42108
472.120801
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:27.097931
Transaction Length: 1
Severity: High
Contract: Auction
Function name: disturbuteTokens(uint256,address[])
PC address: 3065
Estimated Gas Usage: 458 - 553
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:5

ontracts/InterFaces/I

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:31.886588
Transaction Length: 1
Severity: High
Contract: Auction
Function name: disturbuteTokens(uint256,address[])
PC address: 3067
Estimated Gas Usage: 458 - 553
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:3

*/

// File: contracts/InterFaces/IA

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:03.813569
Transaction Length: 1
Severity: Low
Contract: AuctionFundCollector
Function name: contributeWithEtherBehalf(address)
PC address: 9917
Estimated Gas Usage: 5965 - 77023
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1316

IWhiteList(whiteListAddress).addWalletBehalfExchange(msg.sender,_whom)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:06.343821
Transaction Length: 2
Severity: Low
Contract: AuctionFundCollector
Function name: contributeWithEtherBehalf(address)
PC address: 9917
Estimated Gas Usage: 5983 - 77041
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1316

IWhiteList(whiteListAddress).addWalletBehalfExchange(msg.sender,_whom)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:01:25.231272
Transaction Length: 1
Severity: Low
Contract: Auction
Function name: contributeWithEtherBehalf(address)
PC address: 14353
Estimated Gas Usage: 5943 - 77001
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1316

IWhiteList(whiteListAddress).addWalletBehalfExchange(msg.sender,_whom)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:01:47.040096
Transaction Length: 2
Severity: Low
Contract: Auction
Function name: contributeWithEtherBehalf(address)
PC address: 14353
Estimated Gas Usage: 5943 - 77001
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1316

IWhiteList(whiteListAddress).addWalletBehalfExchange(msg.sender,_whom)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x1940E2A20525B103dCC9884902b0186371227393.sol
Total states:3078
76.503309
==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.281240
Transaction Length: 1
Severity: High
Contract: Math
Function name: safeSub(uint256,uint256)
PC address: 601
Estimated Gas Usage: 527 - 622
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x1940E2A20525B103dCC9884902b0186371227393.sol:110

x - y

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:07.213500
Transaction Length: 1
Severity: Low
Contract: Math
Function name: safeDiv(uint256,uint256)
PC address: 689
Estimated Gas Usage: 542 - 637
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x1940E2A20525B103dCC9884902b0186371227393.sol:118

x / y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.931877
Transaction Length: 1
Severity: High
Contract: Math
Function name: rdiv(uint256,uint256)
PC address: 715
Estimated Gas Usage: 600 - 695
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x1940E2A20525B103dCC9884902b0186371227393.sol:114

x * y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.546926
Transaction Length: 1
Severity: High
Contract: Math
Function name: safeAdd(uint256,uint256)
PC address: 807
Estimated Gas Usage: 593 - 688
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x1940E2A20525B103dCC9884902b0186371227393.sol:106

x + y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:40.629634
Transaction Length: 1
Severity: High
Contract: Tranche
Function name: calcDisburse(address)
PC address: 4275
Estimated Gas Usage: 2548 - 37442
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x1940E2A20525B103dCC9884902b0186371227393.sol:5

sing https://da

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:38.701327
Transaction Length: 1
Severity: High
Contract: Tranche
Function name: calcDisburse(address)
PC address: 4278
Estimated Gas Usage: 2548 - 37442
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x1940E2A20525B103dCC9884902b0186371227393.sol:3



// Verified using https://dapp.tools

// 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:39.783077
Transaction Length: 1
Severity: High
Contract: Tranche
Function name: calcDisburse(address)
PC address: 4290
Estimated Gas Usage: 2548 - 37442
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x1940E2A20525B103dCC9884902b0186371227393.sol:310

epochTicker.lastEpochExecuted()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:44.837560
Transaction Length: 1
Severity: High
Contract: Tranche
Function name: tokenSupply()
PC address: 6164
Estimated Gas Usage: 2253 - 37147
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x1940E2A20525B103dCC9884902b0186371227393.sol:5

sing https://da

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:43.457566
Transaction Length: 1
Severity: High
Contract: Tranche
Function name: tokenSupply()
PC address: 6167
Estimated Gas Usage: 2253 - 37147
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x1940E2A20525B103dCC9884902b0186371227393.sol:3



// Verified using https://dapp.tools

// 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:44.202482
Transaction Length: 1
Severity: High
Contract: Tranche
Function name: tokenSupply()
PC address: 6179
Estimated Gas Usage: 2253 - 37147
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x1940E2A20525B103dCC9884902b0186371227393.sol:257

token.totalSupply()

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:47.482277
Transaction Length: 1
Severity: High
Contract: Tranche
Function name: safeSub(uint256,uint256)
PC address: 8512
Estimated Gas Usage: 595 - 690
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x1940E2A20525B103dCC9884902b0186371227393.sol:110

x - y

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:50.073280
Transaction Length: 1
Severity: Low
Contract: Tranche
Function name: safeDiv(uint256,uint256)
PC address: 8642
Estimated Gas Usage: 543 - 638
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x1940E2A20525B103dCC9884902b0186371227393.sol:118

x / y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:53.472147
Transaction Length: 1
Severity: High
Contract: Tranche
Function name: balance()
PC address: 8866
Estimated Gas Usage: 2912 - 38231
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x1940E2A20525B103dCC9884902b0186371227393.sol:5

sing https://da

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:51.728740
Transaction Length: 1
Severity: High
Contract: Tranche
Function name: balance()
PC address: 8869
Estimated Gas Usage: 2912 - 38231
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x1940E2A20525B103dCC9884902b0186371227393.sol:3



// Verified using https://dapp.tools

// 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:52.555333
Transaction Length: 1
Severity: High
Contract: Tranche
Function name: balance()
PC address: 8881
Estimated Gas Usage: 2912 - 38231
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x1940E2A20525B103dCC9884902b0186371227393.sol:253

currency.balanceOf(self)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:14.160414
Transaction Length: 1
Severity: High
Contract: Tranche
Function name: rmul(uint256,uint256)
PC address: 9230
Estimated Gas Usage: 636 - 731
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x1940E2A20525B103dCC9884902b0186371227393.sol:114

x * y

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:41.444582
Transaction Length: 1
Severity: High
Contract: Tranche
Function name: calcDisburse(address)
PC address: 13393
Estimated Gas Usage: 2548 - 37442
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x1940E2A20525B103dCC9884902b0186371227393.sol:81

 == 1); _; }
}

////// 

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0xfF535F02CE0Df35D52c7A1bdace447101D2514D3.sol
Total states:407
9.038234
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x8cad8fc4ff9f6478a0011cc369b098bea857cdec.sol
Total states:3610
81.653757
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.042392
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: initialize(uint256,uint256,address[],uint256[],address)
PC address: 787
Estimated Gas Usage: 461 - 556
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x8cad8fc4ff9f6478a0011cc369b098bea857cdec.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.673569
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: initialize(uint256,uint256,address[],uint256[],address)
PC address: 789
Estimated Gas Usage: 461 - 556
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x8cad8fc4ff9f6478a0011cc369b098bea857cdec.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:14.055493
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: initialize(uint256,uint256,address[],uint256[],address)
PC address: 872
Estimated Gas Usage: 637 - 732
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x8cad8fc4ff9f6478a0011cc369b098bea857cdec.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:23.676321
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: initialize(uint256,uint256,address[],uint256[],address)
PC address: 874
Estimated Gas Usage: 637 - 732
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x8cad8fc4ff9f6478a0011cc369b098bea857cdec.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:32.705906
Transaction Length: 1
Severity: Medium
Contract: LidTeamLock
Function name: startRelease()
PC address: 1025
Estimated Gas Usage: 20818 - 150697
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 4521
Offset: 4885
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop1/0x8cad8fc4ff9f6478a0011cc369b098bea857cdec.sol:694

function startRelease() external {

        require(releaseStart == 0, "Has already started.");

        require(address(this).balance != 0, "Must have some ether deposited.");

        require(lidToken.balanceOf(address(this)) != 0, "Must have some lid deposited.");

        startingLid = lidToken.balanceOf(address(this));

        startingEth = address(this).balance;

        releaseStart = now.add(24 hours);

    }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:00.673787
Transaction Length: 2
Severity: Medium
Contract: LidTeamLock
Function name: startRelease()
PC address: 1025
Estimated Gas Usage: 20818 - 150697
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 4521
Offset: 4885
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop1/0x8cad8fc4ff9f6478a0011cc369b098bea857cdec.sol:694

function startRelease() external {

        require(releaseStart == 0, "Has already started.");

        require(address(this).balance != 0, "Must have some ether deposited.");

        require(lidToken.balanceOf(address(this)) != 0, "Must have some lid deposited.");

        startingLid = lidToken.balanceOf(address(this));

        startingEth = address(this).balance;

        releaseStart = now.add(24 hours);

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:33.972046
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 1163
Estimated Gas Usage: 407 - 502
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x8cad8fc4ff9f6478a0011cc369b098bea857cdec.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:36.853848
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 1165
Estimated Gas Usage: 407 - 502
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x8cad8fc4ff9f6478a0011cc369b098bea857cdec.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:42.517944
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 1248
Estimated Gas Usage: 583 - 678
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x8cad8fc4ff9f6478a0011cc369b098bea857cdec.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:55.016888
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 1250
Estimated Gas Usage: 583 - 678
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x8cad8fc4ff9f6478a0011cc369b098bea857cdec.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.771734
Transaction Length: 1
Severity: Low
Contract: LidTeamLock
Function name: teamMemberBPs(uint256)
PC address: 1624
Estimated Gas Usage: 679 - 774
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x8cad8fc4ff9f6478a0011cc369b098bea857cdec.sol:572

uint[] public teamMemberBPs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:18.113763
Transaction Length: 1
Severity: Low
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 5028
Estimated Gas Usage: 1070 - 1165
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x8cad8fc4ff9f6478a0011cc369b098bea857cdec.sol:720

teamMemberAddresses[0]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:18.573174
Transaction Length: 1
Severity: Low
Contract: LidTeamLock
Function name: teamMemberAddresses(uint256)
PC address: 5599
Estimated Gas Usage: 678 - 773
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x8cad8fc4ff9f6478a0011cc369b098bea857cdec.sol:570

address payable[] public teamMemberAddresses

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:31.717856
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: startRelease()
PC address: 6647
Estimated Gas Usage: 15758 - 125637
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x8cad8fc4ff9f6478a0011cc369b098bea857cdec.sol:186

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x49d184cb5665e197286db0379d1ee84a37a44fd8.sol
Total states:1721
2.201298
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0xe353b9104d6b6135042ca147f19a39b3388bacc4.sol
Total states:654
0.608933
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0xf3a3601406227c93ee3460834ad8f23f457f0c33.sol
Total states:14395
57.087796
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.466315
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1004
Estimated Gas Usage: 417 - 512
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xf3a3601406227c93ee3460834ad8f23f457f0c33.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.650528
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1006
Estimated Gas Usage: 417 - 512
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xf3a3601406227c93ee3460834ad8f23f457f0c33.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:14.203496
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1089
Estimated Gas Usage: 593 - 688
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xf3a3601406227c93ee3460834ad8f23f457f0c33.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:22.627909
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1091
Estimated Gas Usage: 593 - 688
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xf3a3601406227c93ee3460834ad8f23f457f0c33.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.000622
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeBP(uint256)
PC address: 2585
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xf3a3601406227c93ee3460834ad8f23f457f0c33.sol:629

uint[] public bonusRangeBP

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:36.147492
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeStart(uint256)
PC address: 6017
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xf3a3601406227c93ee3460834ad8f23f457f0c33.sol:628

uint[] public bonusRangeStart

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:33.407872
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: calculateRatePerEth(uint256,uint256,uint256)
PC address: 6866
Estimated Gas Usage: 955 - 1050
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xf3a3601406227c93ee3460834ad8f23f457f0c33.sol:163

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0xB0DC5E382651A35a7d7d5ec2034De3c2E6C86b1a.sol
Total states:18383
808.831465
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.871665
Transaction Length: 1
Severity: High
Contract: Cryptography
Function name: recover(bytes32,bytes)
PC address: 170
Estimated Gas Usage: 323 - 418
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xB0DC5E382651A35a7d7d5ec2034De3c2E6C86b1a.sol:3

*/

// File: contracts/common/Valid

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.861848
Transaction Length: 1
Severity: High
Contract: WithEntry
Function name: recover(bytes32,bytes)
PC address: 170
Estimated Gas Usage: 323 - 418
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xB0DC5E382651A35a7d7d5ec2034De3c2E6C86b1a.sol:3

*/

// File: contracts/common/Valid

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.820981
Transaction Length: 1
Severity: High
Contract: MerkleProof
Function name: checkProofOrdered(bytes,bytes32,bytes32,uint256)
PC address: 193
Estimated Gas Usage: 296 - 391
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xB0DC5E382651A35a7d7d5ec2034De3c2E6C86b1a.sol:3

*/

// File: contracts/common/Valid

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:00.189189
Transaction Length: 1
Severity: Medium
Contract: RegistryLogic
Function name: switchOff()
PC address: 288
Estimated Gas Usage: 11676 - 102987
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 1619
Offset: 1899
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop1/0xB0DC5E382651A35a7d7d5ec2034De3c2E6C86b1a.sol:495

function switchOff() external onlyOwner {
    uint32 totalAppsCount = GluonView(gluon).totalAppsCount();
    for (uint32 i = 2; i < totalAppsCount; i++) {
      AppState appState = AppState(GluonView(gluon).current(i));
      require(!appState.isOn(), "One of the apps is still ON");
    }
    switchOff_();
  }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:04.530651
Transaction Length: 2
Severity: Medium
Contract: RegistryLogic
Function name: switchOff()
PC address: 288
Estimated Gas Usage: 11676 - 102987
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 1619
Offset: 1899
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop1/0xB0DC5E382651A35a7d7d5ec2034De3c2E6C86b1a.sol:495

function switchOff() external onlyOwner {
    uint32 totalAppsCount = GluonView(gluon).totalAppsCount();
    for (uint32 i = 2; i < totalAppsCount; i++) {
      AppState appState = AppState(GluonView(gluon).current(i));
      require(!appState.isOn(), "One of the apps is still ON");
    }
    switchOff_();
  }

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.647946
Transaction Length: 1
Severity: Low
Contract: SubChain
Function name: subChains(uint256)
PC address: 431
Estimated Gas Usage: 634 - 729
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xB0DC5E382651A35a7d7d5ec2034De3c2E6C86b1a.sol:25

address[] public subChains

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.894135
Transaction Length: 2
Severity: Low
Contract: SubChain
Function name: subChains(uint256)
PC address: 431
Estimated Gas Usage: 634 - 729
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xB0DC5E382651A35a7d7d5ec2034De3c2E6C86b1a.sol:25

address[] public subChains

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.911905
Transaction Length: 1
Severity: High
Contract: RegistryLogic
Function name: debit(address,bytes)
PC address: 906
Estimated Gas Usage: 396 - 491
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xB0DC5E382651A35a7d7d5ec2034De3c2E6C86b1a.sol:3

*/

// File: contracts/common/Valid

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:06.462467
Transaction Length: 1
Severity: Medium
Contract: RegistryLogic
Function name: translate(address)
PC address: 1262
Estimated Gas Usage: 4566 - 74726
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 4666
Offset: 4967
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop1/0xB0DC5E382651A35a7d7d5ec2034De3c2E6C86b1a.sol:469

function translate(address apiKey) public view returns (address) {
    address account = data.accounts(apiKey);
    if (account == address(0x0)) account = old.translate(apiKey);
    return account;
  }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:12.695268
Transaction Length: 2
Severity: Medium
Contract: RegistryLogic
Function name: translate(address)
PC address: 1262
Estimated Gas Usage: 4566 - 74726
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 4666
Offset: 4967
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop1/0xB0DC5E382651A35a7d7d5ec2034De3c2E6C86b1a.sol:469

function translate(address apiKey) public view returns (address) {
    address account = data.accounts(apiKey);
    if (account == address(0x0)) account = old.translate(apiKey);
    return account;
  }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:15.269846
Transaction Length: 1
Severity: High
Contract: MerkleProof
Function name: checkProofOrdered(bytes,bytes32,bytes32,uint256)
PC address: 1359
Estimated Gas Usage: 1224 - 5313
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xB0DC5E382651A35a7d7d5ec2034De3c2E6C86b1a.sol:96

abi.encodePacked(abi.encodePacked(element, hash))

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:07:53.732656
Transaction Length: 1
Severity: High
Contract: MerkleProof
Function name: checkProofOrdered(bytes,bytes32,bytes32,uint256)
PC address: 1536
Estimated Gas Usage: 1249 - 5668
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xB0DC5E382651A35a7d7d5ec2034De3c2E6C86b1a.sol:99

abi.encodePacked(abi.encodePacked(hash, element))

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:10.498178
Transaction Length: 2
Severity: Low
Contract: RegistryLogic
Function name: upgrade()
PC address: 5934
Estimated Gas Usage: 9246 - 31809
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop1/0xB0DC5E382651A35a7d7d5ec2034De3c2E6C86b1a.sol:385

appGovernance.activate(id)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x3aD683B550b75942B0Bc89c1E1E7fF5D64A2Cc24.sol
Total states:1508
23.198337
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol
Total states:1104
6.679188
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.448064
Transaction Length: 1
Severity: Low
Contract: LoihiStorage
Function name: reserves(uint256)
PC address: 1334
Estimated Gas Usage: 767 - 862
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol:187

address[] public reserves

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.846084
Transaction Length: 1
Severity: Low
Contract: LoihiStorage
Function name: numeraires(uint256)
PC address: 1491
Estimated Gas Usage: 700 - 795
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol:186

address[] public numeraires

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.338092
Transaction Length: 1
Severity: Low
Contract: LoihiStorage
Function name: derivatives(uint256)
PC address: 1596
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol:185

address[] public derivatives

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x3a72d1595f3c2765d9c5f8fcc6d6bf88fb08a739.sol
Total states:426
0.791448
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x2545ca44b7220e4a640b40696e7318b360e18920.sol
Total states:2709
12.119644
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0xad81748b316716070005c6664e8ef562dfb9d6022.sol
Total states:736
1.397793
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x2f34e7326319d9f250161b2c2c479f22621390a7.sol
Total states:1781
2.479699
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0xa784a7e961e6d400e2ce1f66f6468be5fe2ad0fb.sol
Total states:16824
34.932446
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.716688
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3044
Estimated Gas Usage: 989 - 1464
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xa784a7e961e6d400e2ce1f66f6468be5fe2ad0fb.sol:38

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.484659
Transaction Length: 1
Severity: Low
Contract: BOCClassic
Function name: lockState(address,uint256)
PC address: 4015
Estimated Gas Usage: 830 - 1115
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xa784a7e961e6d400e2ce1f66f6468be5fe2ad0fb.sol:319

lockInfo[_holder][_idx]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.382084
Transaction Length: 2
Severity: High
Contract: BOCClassic
Function name: increaseAllowance(address,uint256)
PC address: 11746
Estimated Gas Usage: 968 - 1443
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xa784a7e961e6d400e2ce1f66f6468be5fe2ad0fb.sol:38

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x1d2dcb87edc36c5078659fae40d70e503a7fe7b8.sol
Total states:2324
1.830056
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x52f6373a7c534153d005382c25b5c23b94a76b19.sol
Total states:18066
29.627456
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.364904
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3244
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x52f6373a7c534153d005382c25b5c23b94a76b19.sol:134

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:05.661575
Transaction Length: 1
Severity: Low
Contract: SpringField
Function name: stakers(uint256)
PC address: 8265
Estimated Gas Usage: 788 - 883
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x52f6373a7c534153d005382c25b5c23b94a76b19.sol:556

address[] public stakers

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.166368
Transaction Length: 1
Severity: High
Contract: SpringField
Function name: enter(uint256)
PC address: 9939
Estimated Gas Usage: 42946 - 187108
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x52f6373a7c534153d005382c25b5c23b94a76b19.sol:134

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol
Total states:20921
143.018022
==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:41.777907
Transaction Length: 2
Severity: Medium
Contract: PooledStaking
Function name: changeDependentContractAddress()
PC address: 968
Estimated Gas Usage: 32191 - 205455
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 5147
Offset: 5444
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop1/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol:1428

function changeDependentContractAddress() public {

    token = NXMToken(master.tokenAddress());
    tokenController = ITokenController(master.getLatestAddress("TC"));

    if (!initialized) {
      initialize();
    }

    if (REWARD_ROUNDS_START == 0) {
      initializeRewardRoundsStart();
    }
  }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.551300
Transaction Length: 1
Severity: High
Contract: PooledStaking
Function name: requestUnstake(address[],uint256[],uint256)
PC address: 2425
Estimated Gas Usage: 386 - 481
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.164097
Transaction Length: 1
Severity: High
Contract: PooledStaking
Function name: requestUnstake(address[],uint256[],uint256)
PC address: 2427
Estimated Gas Usage: 386 - 481
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.800173
Transaction Length: 1
Severity: High
Contract: PooledStaking
Function name: requestUnstake(address[],uint256[],uint256)
PC address: 2510
Estimated Gas Usage: 562 - 657
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:23.420934
Transaction Length: 1
Severity: High
Contract: PooledStaking
Function name: requestUnstake(address[],uint256[],uint256)
PC address: 2512
Estimated Gas Usage: 562 - 657
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:37.131432
Transaction Length: 1
Severity: High
Contract: PooledStaking
Function name: depositAndStake(uint256,address[],uint256[])
PC address: 3108
Estimated Gas Usage: 412 - 507
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:42.281000
Transaction Length: 1
Severity: High
Contract: PooledStaking
Function name: depositAndStake(uint256,address[],uint256[])
PC address: 3110
Estimated Gas Usage: 412 - 507
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:50.192730
Transaction Length: 1
Severity: High
Contract: PooledStaking
Function name: depositAndStake(uint256,address[],uint256[])
PC address: 3193
Estimated Gas Usage: 588 - 683
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:00.807715
Transaction Length: 1
Severity: High
Contract: PooledStaking
Function name: depositAndStake(uint256,address[],uint256[])
PC address: 3195
Estimated Gas Usage: 588 - 683
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:17.203107
Transaction Length: 1
Severity: High
Contract: PooledStaking
Function name: pushRewards(address[])
PC address: 4565
Estimated Gas Usage: 384 - 479
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:20.560490
Transaction Length: 1
Severity: High
Contract: PooledStaking
Function name: pushRewards(address[])
PC address: 4567
Estimated Gas Usage: 384 - 479
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol:3

*/

/**
 *Submitted for verification

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:04.071705
Transaction Length: 1
Severity: Low
Contract: PooledStaking
Function name: initialize()
PC address: 10776
Estimated Gas Usage: 2014 - 3145
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop1/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol:1412

tokenController.addToWhitelist(address(this))

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:53.222403
Transaction Length: 2
Severity: Low
Contract: PooledStaking
Function name: changeDependentContractAddress()
PC address: 10776
Estimated Gas Usage: 17504 - 129314
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop1/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol:1412

tokenController.addToWhitelist(address(this))

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:14.191759
Transaction Length: 1
Severity: Low
Contract: PooledStaking
Function name: contractStakerAtIndex(address,uint256)
PC address: 21609
Estimated Gas Usage: 915 - 1200
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol:618

contractStakers[contractAddress][stakerIndex]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:15.359293
Transaction Length: 1
Severity: Low
Contract: PooledStaking
Function name: stakerContractAtIndex(address,uint256)
PC address: 22203
Estimated Gas Usage: 899 - 1184
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol:649

stakers[staker].contracts[contractIndex]

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x333efdc7465f516744186a007378fc005cb0b456.sol
Total states:138
317.813057
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.495872
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: convertOddToCvpAndSendToPayout(address[])
PC address: 514
Estimated Gas Usage: 364 - 459
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x333efdc7465f516744186a007378fc005cb0b456.sol:6

/powerpool.finance/



--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.770378
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: convertOddToCvpAndSendToPayout(address[])
PC address: 516
Estimated Gas Usage: 364 - 459
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x333efdc7465f516744186a007378fc005cb0b456.sol:3

*/

/*
https://powerpool.finance/

 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:10.734051
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: getEthAndTokensIn(uint256,address[])
PC address: 991
Estimated Gas Usage: 390 - 485
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x333efdc7465f516744186a007378fc005cb0b456.sol:6

/powerpool.finance/



--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:14.217486
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: getEthAndTokensIn(uint256,address[])
PC address: 993
Estimated Gas Usage: 390 - 485
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x333efdc7465f516744186a007378fc005cb0b456.sol:3

*/

/*
https://powerpool.finance/

 

--------------------

==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:15.011739
Transaction Length: 1
Severity: Medium
Contract: EthPiptSwap
Function name: convertOddToCvpAndSendToPayout(address[])
PC address: 3217
Estimated Gas Usage: 574 - 3351
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../contracts/m_loop/loop1/0x333efdc7465f516744186a007378fc005cb0b456.sol:856

tx.origin

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:58.969734
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: swapEthToPipt()
PC address: 6285
Estimated Gas Usage: 2976 - 38248
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x333efdc7465f516744186a007378fc005cb0b456.sol:6

werpool.finance

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:09.518608
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: swapEthToPipt()
PC address: 6288
Estimated Gas Usage: 3069 - 38434
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x333efdc7465f516744186a007378fc005cb0b456.sol:3



/*
https://powerpool.finance/

          

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:12.507177
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: swapEthToPipt()
PC address: 6309
Estimated Gas Usage: 3069 - 38434
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x333efdc7465f516744186a007378fc005cb0b456.sol:750

pipt.getCurrentTokens()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:03.464017
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: swapEthToPipt()
PC address: 6334
Estimated Gas Usage: 3069 - 38434
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x333efdc7465f516744186a007378fc005cb0b456.sol:2


*/

/*
https://power

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:15.473979
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: swapEthToPipt()
PC address: 6340
Estimated Gas Usage: 3069 - 38434
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x333efdc7465f516744186a007378fc005cb0b456.sol:8

r wrr
        

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:25.351066
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: swapEthToPipt()
PC address: 6360
Estimated Gas Usage: 3127 - 38585
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x333efdc7465f516744186a007378fc005cb0b456.sol:10

prrrr0    r0
        

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:29.240984
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: swapEthToPipt()
PC address: 6362
Estimated Gas Usage: 3127 - 38585
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x333efdc7465f516744186a007378fc005cb0b456.sol:10

wrrr pp   pr  prrrr0  prrrr0    r0
        r

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:04:57.368876
Transaction Length: 1
Severity: Low
Contract: EthPiptSwap
Function name: getEthAndTokensIn(uint256,address[])
PC address: 6967
Estimated Gas Usage: 3152 - 41149
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x333efdc7465f516744186a007378fc005cb0b456.sol:896

tokens[0]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.952098
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: getAmountOut(uint256,uint256,uint256)
PC address: 16919
Estimated Gas Usage: 500 - 595
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x333efdc7465f516744186a007378fc005cb0b456.sol:289

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:06.822737
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: swapEthToPipt()
PC address: 17364
Estimated Gas Usage: 3069 - 38434
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x333efdc7465f516744186a007378fc005cb0b456.sol:251

sub(a, b, "SafeMath: subtraction overflow")

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x181cfd48e5d22233e8b5c5dd3908123a2d9ef733.sol
Total states:1742
2.981899
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:02.255886
Transaction Length: 1
Severity: Low
Contract: YFMSVault
Function name: stakers(uint256)
PC address: 5093
Estimated Gas Usage: 766 - 861
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x181cfd48e5d22233e8b5c5dd3908123a2d9ef733.sol:89

address[] public stakers

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x3721dcd1c1793f945006a967a91da81562d1b588.sol
Total states:1986
19.951695
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.167235
Transaction Length: 1
Severity: High
Contract: StrategyAddTwoSidesOptimal
Function name: execute(address,uint256,bytes)
PC address: 726
Estimated Gas Usage: 376 - 471
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x3721dcd1c1793f945006a967a91da81562d1b588.sol:3

*/

// File: openzeppelin-solidity-

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:00.189840
Transaction Length: 0
Severity: Medium
Contract: StrategyAddTwoSidesOptimal
Function name: constructor
PC address: 867
Estimated Gas Usage: 38791 - 235224
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 375
Offset: 664
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop1/0x3721dcd1c1793f945006a967a91da81562d1b588.sol:619

contract StrategyAddTwoSidesOptimal is Ownable, ReentrancyGuard, Strategy {
    using SafeToken for address;
    using SafeMath for uint256;

    IUniswapV2Factory public factory;
    IUniswapV2Router02 public router;
    address public weth;
    address public goblin;

    /// @dev Create a new add two-side optimal strategy instance.
    /// @param _router The Uniswap router smart contract.
    constructor(IUniswapV2Router02 _router, address _goblin) public {
        factory = IUniswapV2Factory(_router.factory());
        router = _router;
        weth = _router.WETH();
        goblin = _goblin;
    }
    
    /// @dev Throws if called by any account other than the goblin.
    modifier onlyGoblin() {
        require(isGoblin(), "caller is not the goblin");
        _;
    }

    /// @dev Returns true if the caller is the current goblin.
    function isGoblin() public view returns (bool) {
        return msg.sender == goblin;
    }

    /// @dev Compute optimal deposit amount
    /// @param amtA amount of token A desired to deposit
    /// @param amtB amonut of token B desired to deposit
    /// @param resA amount of token A in reserve
    /// @param resB amount of token B in reserve
    function optimalDeposit(
        uint256 amtA,
        uint256 amtB,
        uint256 resA,
        uint256 resB
    ) internal pure returns (uint256 swapAmt, bool isReversed) {
        if (amtA.mul(resB) >= amtB.mul(resA)) {
            swapAmt = _optimalDepositA(amtA, amtB, resA, resB);
            isReversed = false;
        } else {
            swapAmt = _optimalDepositA(amtB, amtA, resB, resA);
            isReversed = true;
        }
    }

    /// @dev Compute optimal deposit amount helper
    /// @param amtA amount of token A desired to deposit
    /// @param amtB amonut of token B desired to deposit
    /// @param resA amount of token A in reserve
    /// @param resB amount of token B in reserve
    function _optimalDepositA(
        uint256 amtA,
        uint256 amtB,
        uint256 resA,
        uint256 resB
    ) internal pure returns (uint256) {
        require(amtA.mul(resB) >= amtB.mul(resA), "Reversed");

        uint256 a = 997;
        uint256 b = uint256(1997).mul(resA);
        uint256 _c = (amtA.mul(resB)).sub(amtB.mul(resA));
        uint256 c = _c.mul(1000).div(amtB.add(resB)).mul(resA);

        uint256 d = a.mul(c).mul(4);
        uint256 e = Math.sqrt(b.mul(b).add(d));

        uint256 numerator = e.sub(b);
        uint256 denominator = a.mul(2);

        return numerator.div(denominator);
    }

    /// @dev Execute worker strategy. Take LP tokens + ETH. Return LP tokens + ETH.
    /// @param user User address
    /// @param data Extra calldata information passed along to this strategy.
    function execute(address user, uint256, /* debt */ bytes calldata data) 
        external         
        payable  
        onlyGoblin       
        nonReentrant 
    {
        // 1. Find out what farming token we are dealing with.
        (address fToken, uint256 fAmount, uint256 minLPAmount) = abi.decode(data, (address, uint256, uint256));
        IUniswapV2Pair lpToken = IUniswapV2Pair(factory.getPair(fToken, weth));        
        // 2. Compute the optimal amount of ETH and fToken to be converted.  
        if (fAmount > 0) {  
            fToken.safeTransferFrom(user, address(this), fAmount);            
        }
        uint256 ethBalance = address(this).balance;
        uint256 swapAmt;
        bool isReversed;
        {
            (uint256 r0, uint256 r1, ) = lpToken.getReserves();
            (uint256 ethReserve, uint256 fReserve) = lpToken.token0() == weth ? (r0, r1) : (r1, r0);
            (swapAmt, isReversed) = optimalDeposit(ethBalance, fToken.myBalance(), ethReserve, fReserve);
        }
        // 3. Convert between ETH and farming tokens
        fToken.safeApprove(address(router), 0);
        fToken.safeApprove(address(router), uint256(-1));
        address[] memory path = new address[](2);
        (path[0], path[1]) = isReversed ? (fToken, weth) : (weth, fToken);
        if (isReversed) {
            router.swapExactTokensForETH(swapAmt, 0, path, address(this), now); // farming tokens to ETH
        } else {
            router.swapExactETHForTokens.value(swapAmt)(0, path, address(this), now); // ETH to farming tokens
        }
        // 4. Mint more LP tokens and return all LP tokens to the sender.
        (,, uint256 moreLPAmount) = router.addLiquidityETH.value(address(this).balance)(
            fToken, fToken.myBalance(), 0, 0, address(this), now
        );
        require(moreLPAmount >= minLPAmount, "insufficient LP tokens received");
        lpToken.transfer(msg.sender, lpToken.balanceOf(address(this)));
    }

    /// @dev Recover ERC20 tokens that were accidentally sent to this smart contract.
    /// @param token The token contract. Can be anything. This contract should not hold ERC20 tokens.
    /// @param to The address to send the tokens to.
    /// @param value The number of tokens to transfer to `to`.
    function recover(address token, address to, uint256 value) external onlyOwner nonReentrant {
        token.safeTransfer(to, value);
    }

    function() external payable {}
}

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x71151b7ae78459093f1b29583f2b24aef603cb70.sol
Total states:2905
26.411637
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.357985
Transaction Length: 1
Severity: High
Contract: Treasury
Function name: convertToDefaultToken(address[],uint256)
PC address: 1481
Estimated Gas Usage: 384 - 479
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x71151b7ae78459093f1b29583f2b24aef603cb70.sol:5

ontracts/SafeMath.sol

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.438158
Transaction Length: 1
Severity: High
Contract: Treasury
Function name: convertToDefaultToken(address[],uint256)
PC address: 1483
Estimated Gas Usage: 384 - 479
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x71151b7ae78459093f1b29583f2b24aef603cb70.sol:3

*/

// File: contracts/SafeMath.sol


--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:22.598318
Transaction Length: 1
Severity: Low
Contract: Treasury
Function name: convertToDefaultToken(address[],uint256)
PC address: 4286
Estimated Gas Usage: 946 - 1371
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x71151b7ae78459093f1b29583f2b24aef603cb70.sol:678

routeDetails[0]

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x5F705b4f5bcbD3A3536B20420cC581cbBE280bFF.sol
Total states:28040
185.961209
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:59.658950
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3645
Estimated Gas Usage: 1025 - 1500
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x5F705b4f5bcbD3A3536B20420cC581cbBE280bFF.sol:60

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:45.176078
Transaction Length: 2
Severity: High
Contract: ERC20Burnable
Function name: increaseAllowance(address,uint256)
PC address: 3818
Estimated Gas Usage: 1025 - 1500
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x5F705b4f5bcbD3A3536B20420cC581cbBE280bFF.sol:60

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:35.438928
Transaction Length: 2
Severity: High
Contract: ERC20Pausable
Function name: increaseAllowance(address,uint256)
PC address: 6145
Estimated Gas Usage: 1511 - 2316
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x5F705b4f5bcbD3A3536B20420cC581cbBE280bFF.sol:60

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x307463106fd5259ddf0754bee997baa97f34b7b9.sol
Total states:18086
226.869561
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:03:23.125494
Transaction Length: 1
Severity: Low
Contract: MainnetAUsdtToUsdtAssimilator
Function name: outputRawAndGetBalance(address,uint256)
PC address: 2348
Estimated Gas Usage: 2827 - 37955
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop1/0x307463106fd5259ddf0754bee997baa97f34b7b9.sol:1060

pool.deposit(address(usdt), _amount, 0)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:03:25.858562
Transaction Length: 1
Severity: Low
Contract: MainnetAUsdtToUsdtAssimilator
Function name: intakeRawAndGetBalance(uint256)
PC address: 4082
Estimated Gas Usage: 4801 - 75607
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop1/0x307463106fd5259ddf0754bee997baa97f34b7b9.sol:1009

_ausdt.transferFrom(msg.sender, address(this), _amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:03:28.289885
Transaction Length: 1
Severity: Low
Contract: MainnetAUsdtToUsdtAssimilator
Function name: intakeRawAndGetBalance(uint256)
PC address: 4371
Estimated Gas Usage: 6471 - 111839
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop1/0x307463106fd5259ddf0754bee997baa97f34b7b9.sol:1013

_ausdt.redeem(_amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:03:30.586158
Transaction Length: 1
Severity: Low
Contract: MainnetAUsdtToUsdtAssimilator
Function name: outputRaw(address,uint256)
PC address: 5332
Estimated Gas Usage: 2811 - 37939
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop1/0x307463106fd5259ddf0754bee997baa97f34b7b9.sol:1081

pool.deposit(address(usdt), _amount, 0)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:03:42.816717
Transaction Length: 1
Severity: Low
Contract: MainnetAUsdtToUsdtAssimilator
Function name: intakeRaw(uint256)
PC address: 6005
Estimated Gas Usage: 4886 - 75692
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop1/0x307463106fd5259ddf0754bee997baa97f34b7b9.sol:1030

_ausdt.transferFrom(msg.sender, address(this), _amount)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x091dcd914fceb1d47423e532955d1e62d1b2daef.sol
Total states:5931
175.111829
==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:07.526671
Transaction Length: 1
Severity: Medium
Contract: GenArt721Minter
Function name: getYourBalanceOfProjectERC20(uint256)
PC address: 787
Estimated Gas Usage: 4075 - 73905
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 5444
Offset: 5655
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop1/0x091dcd914fceb1d47423e532955d1e62d1b2daef.sol:436

function getYourBalanceOfProjectERC20(uint256 _projectId) public view returns (uint256){

    uint256 balance = ERC20(artblocksContract.projectIdToCurrencyAddress(_projectId)).balanceOf(msg.sender);

    return balance;

  }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:01:20.685911
Transaction Length: 1
Severity: Medium
Contract: GenArt721Minter
Function name: checkYourAllowanceOfProjectERC20(uint256)
PC address: 932
Estimated Gas Usage: 4150 - 74075
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 5889
Offset: 6152
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop1/0x091dcd914fceb1d47423e532955d1e62d1b2daef.sol:446

function checkYourAllowanceOfProjectERC20(uint256 _projectId) public view returns (uint256){

    uint256 remaining = ERC20(artblocksContract.projectIdToCurrencyAddress(_projectId)).allowance(msg.sender, address(this));

    return remaining;

  }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.246176
Transaction Length: 1
Severity: High
Contract: GenArt721Minter
Function name: purchase(uint256)
PC address: 1510
Estimated Gas Usage: 2569 - 38263
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x091dcd914fceb1d47423e532955d1e62d1b2daef.sol:486

abi.encodePacked("ETH")

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:13.614827
Transaction Length: 1
Severity: High
Contract: GenArt721Minter
Function name: purchase(uint256)
PC address: 1561
Estimated Gas Usage: 2569 - 38263
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x091dcd914fceb1d47423e532955d1e62d1b2daef.sol:3

ication at Etherscan.

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.830098
Transaction Length: 1
Severity: High
Contract: GenArt721Minter
Function name: purchaseTo(address,uint256)
PC address: 1757
Estimated Gas Usage: 2426 - 37979
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x091dcd914fceb1d47423e532955d1e62d1b2daef.sol:9

ontracts/libs/S

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.150335
Transaction Length: 1
Severity: High
Contract: GenArt721Minter
Function name: purchaseTo(address,uint256)
PC address: 1760
Estimated Gas Usage: 2569 - 38263
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x091dcd914fceb1d47423e532955d1e62d1b2daef.sol:5

*/



// File contracts/libs/SafeMath.sol



--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:15.845021
Transaction Length: 1
Severity: High
Contract: GenArt721Minter
Function name: purchase(uint256)
PC address: 1781
Estimated Gas Usage: 2569 - 38263
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x091dcd914fceb1d47423e532955d1e62d1b2daef.sol:486

artblocksContract.projectIdToCurrencySymbol(_projectId)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.287597
Transaction Length: 1
Severity: High
Contract: GenArt721Minter
Function name: purchase(uint256)
PC address: 1806
Estimated Gas Usage: 2569 - 38263
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x091dcd914fceb1d47423e532955d1e62d1b2daef.sol:3

0

*/



// File cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:18.180110
Transaction Length: 1
Severity: High
Contract: GenArt721Minter
Function name: purchase(uint256)
PC address: 1812
Estimated Gas Usage: 2569 - 38263
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x091dcd914fceb1d47423e532955d1e62d1b2daef.sol:13

ile: openzeppe

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:21.228911
Transaction Length: 1
Severity: High
Contract: GenArt721Minter
Function name: purchase(uint256)
PC address: 1834
Estimated Gas Usage: 2627 - 38414
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x091dcd914fceb1d47423e532955d1e62d1b2daef.sol:24

ations with added overflow

 * checks.

 *


--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:43.521107
Transaction Length: 1
Severity: High
Contract: GenArt721Minter
Function name: purchase(uint256)
PC address: 1952
Estimated Gas Usage: 2815 - 38976
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x091dcd914fceb1d47423e532955d1e62d1b2daef.sol:486

abi.encodePacked(artblocksContract.projectIdToCurrencySymbol(_projectId))

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x1368581bb74c87119a84979f8652e28932ce925e.sol
Total states:1986
20.372837
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.181144
Transaction Length: 1
Severity: High
Contract: StrategyAddTwoSidesOptimal
Function name: execute(address,uint256,bytes)
PC address: 726
Estimated Gas Usage: 376 - 471
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x1368581bb74c87119a84979f8652e28932ce925e.sol:3

*/

// File: openzeppelin-solidity-

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:00.180048
Transaction Length: 0
Severity: Medium
Contract: StrategyAddTwoSidesOptimal
Function name: constructor
PC address: 867
Estimated Gas Usage: 38791 - 235224
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 375
Offset: 664
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop1/0x1368581bb74c87119a84979f8652e28932ce925e.sol:619

contract StrategyAddTwoSidesOptimal is Ownable, ReentrancyGuard, Strategy {
    using SafeToken for address;
    using SafeMath for uint256;

    IUniswapV2Factory public factory;
    IUniswapV2Router02 public router;
    address public weth;
    address public goblin;

    /// @dev Create a new add two-side optimal strategy instance.
    /// @param _router The Uniswap router smart contract.
    constructor(IUniswapV2Router02 _router, address _goblin) public {
        factory = IUniswapV2Factory(_router.factory());
        router = _router;
        weth = _router.WETH();
        goblin = _goblin;
    }
    
    /// @dev Throws if called by any account other than the goblin.
    modifier onlyGoblin() {
        require(isGoblin(), "caller is not the goblin");
        _;
    }

    /// @dev Returns true if the caller is the current goblin.
    function isGoblin() public view returns (bool) {
        return msg.sender == goblin;
    }

    /// @dev Compute optimal deposit amount
    /// @param amtA amount of token A desired to deposit
    /// @param amtB amonut of token B desired to deposit
    /// @param resA amount of token A in reserve
    /// @param resB amount of token B in reserve
    function optimalDeposit(
        uint256 amtA,
        uint256 amtB,
        uint256 resA,
        uint256 resB
    ) internal pure returns (uint256 swapAmt, bool isReversed) {
        if (amtA.mul(resB) >= amtB.mul(resA)) {
            swapAmt = _optimalDepositA(amtA, amtB, resA, resB);
            isReversed = false;
        } else {
            swapAmt = _optimalDepositA(amtB, amtA, resB, resA);
            isReversed = true;
        }
    }

    /// @dev Compute optimal deposit amount helper
    /// @param amtA amount of token A desired to deposit
    /// @param amtB amonut of token B desired to deposit
    /// @param resA amount of token A in reserve
    /// @param resB amount of token B in reserve
    function _optimalDepositA(
        uint256 amtA,
        uint256 amtB,
        uint256 resA,
        uint256 resB
    ) internal pure returns (uint256) {
        require(amtA.mul(resB) >= amtB.mul(resA), "Reversed");

        uint256 a = 997;
        uint256 b = uint256(1997).mul(resA);
        uint256 _c = (amtA.mul(resB)).sub(amtB.mul(resA));
        uint256 c = _c.mul(1000).div(amtB.add(resB)).mul(resA);

        uint256 d = a.mul(c).mul(4);
        uint256 e = Math.sqrt(b.mul(b).add(d));

        uint256 numerator = e.sub(b);
        uint256 denominator = a.mul(2);

        return numerator.div(denominator);
    }

    /// @dev Execute worker strategy. Take LP tokens + ETH. Return LP tokens + ETH.
    /// @param user User address
    /// @param data Extra calldata information passed along to this strategy.
    function execute(address user, uint256, /* debt */ bytes calldata data) 
        external         
        payable  
        onlyGoblin       
        nonReentrant 
    {
        // 1. Find out what farming token we are dealing with.
        (address fToken, uint256 fAmount, uint256 minLPAmount) = abi.decode(data, (address, uint256, uint256));
        IUniswapV2Pair lpToken = IUniswapV2Pair(factory.getPair(fToken, weth));        
        // 2. Compute the optimal amount of ETH and fToken to be converted.  
        if (fAmount > 0) {  
            fToken.safeTransferFrom(user, address(this), fAmount);            
        }
        uint256 ethBalance = address(this).balance;
        uint256 swapAmt;
        bool isReversed;
        {
            (uint256 r0, uint256 r1, ) = lpToken.getReserves();
            (uint256 ethReserve, uint256 fReserve) = lpToken.token0() == weth ? (r0, r1) : (r1, r0);
            (swapAmt, isReversed) = optimalDeposit(ethBalance, fToken.myBalance(), ethReserve, fReserve);
        }
        // 3. Convert between ETH and farming tokens
        fToken.safeApprove(address(router), 0);
        fToken.safeApprove(address(router), uint256(-1));
        address[] memory path = new address[](2);
        (path[0], path[1]) = isReversed ? (fToken, weth) : (weth, fToken);
        if (isReversed) {
            router.swapExactTokensForETH(swapAmt, 0, path, address(this), now); // farming tokens to ETH
        } else {
            router.swapExactETHForTokens.value(swapAmt)(0, path, address(this), now); // ETH to farming tokens
        }
        // 4. Mint more LP tokens and return all LP tokens to the sender.
        (,, uint256 moreLPAmount) = router.addLiquidityETH.value(address(this).balance)(
            fToken, fToken.myBalance(), 0, 0, address(this), now
        );
        require(moreLPAmount >= minLPAmount, "insufficient LP tokens received");
        lpToken.transfer(msg.sender, lpToken.balanceOf(address(this)));
    }

    /// @dev Recover ERC20 tokens that were accidentally sent to this smart contract.
    /// @param token The token contract. Can be anything. This contract should not hold ERC20 tokens.
    /// @param to The address to send the tokens to.
    /// @param value The number of tokens to transfer to `to`.
    function recover(address token, address to, uint256 value) external onlyOwner nonReentrant {
        token.safeTransfer(to, value);
    }

    function() external payable {}
}

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x191fc78635cc1409e922978629c51a0572bd2759.sol
Total states:16493
41.665994
==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.977856
Transaction Length: 1
Severity: High
Contract: QuickCash
Function name: transferFrom(address,address,uint256)
PC address: 8734
Estimated Gas Usage: 1429 - 2044
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x191fc78635cc1409e922978629c51a0572bd2759.sol:14

x - y

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol
Total states:43926
6715.004486
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.128967
Transaction Length: 1
Severity: High
Contract: ClaimIssuer
Function name: isClaimRevoked(bytes)
PC address: 754
Estimated Gas Usage: 408 - 503
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:3



*/



// File: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:48.216915
Transaction Length: 1
Severity: High
Contract: ClaimIssuer
Function name: isClaimValid(address,bytes32,uint256,bytes,bytes)
PC address: 1030
Estimated Gas Usage: 517 - 612
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:3



*/



// File: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.749386
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchSetAddressFrozen(address[],bool[])
PC address: 1082
Estimated Gas Usage: 386 - 481
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:9

e: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.214348
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchSetAddressFrozen(address[],bool[])
PC address: 1084
Estimated Gas Usage: 386 - 481
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:3



*/



// File: @onchain-id/solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.854779
Transaction Length: 1
Severity: High
Contract: ERC734
Function name: execute(address,uint256,bytes)
PC address: 1102
Estimated Gas Usage: 399 - 494
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:3



*/



// File: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.011716
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchSetAddressFrozen(address[],bool[])
PC address: 1167
Estimated Gas Usage: 562 - 657
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:9

e: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:27.709530
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchSetAddressFrozen(address[],bool[])
PC address: 1169
Estimated Gas Usage: 562 - 657
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:3



*/



// File: @onchain-id/solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:59.404156
Transaction Length: 1
Severity: High
Contract: ClaimIssuer
Function name: isClaimValid(address,bytes32,uint256,bytes,bytes)
PC address: 1181
Estimated Gas Usage: 859 - 3636
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:3



*/



// File: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.086521
Transaction Length: 1
Severity: High
Contract: Identity
Function name: addClaim(uint256,uint256,address,bytes,bytes,string)
PC address: 1396
Estimated Gas Usage: 450 - 545
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:3



*/



// File: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:14.706277
Transaction Length: 1
Severity: High
Contract: Identity
Function name: addClaim(uint256,uint256,address,bytes,bytes,string)
PC address: 1547
Estimated Gas Usage: 792 - 3569
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:3



*/



// File: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:29.900318
Transaction Length: 1
Severity: High
Contract: ERC734
Function name: getKeyPurposes(bytes32)
PC address: 1601
Estimated Gas Usage: 1442 - 2479
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:423

function getKeyPurposes(bytes32 _key)

    public

    view

    returns(uint256[] memory _purposes)

    {

        return (keys[_key].purposes);

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:43.788231
Transaction Length: 1
Severity: High
Contract: ERC734
Function name: getKeyPurposes(bytes32)
PC address: 1641
Estimated Gas Usage: 1592 - 3005
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:423

function getKeyPurposes(bytes32 _key)

    public

    view

    returns(uint256[] memory _purposes)

    {

        return (keys[_key].purposes);

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:35.441920
Transaction Length: 1
Severity: High
Contract: Identity
Function name: addClaim(uint256,uint256,address,bytes,bytes,string)
PC address: 1698
Estimated Gas Usage: 1134 - 6593
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:3



*/



// File: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:04.777167
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchForcedTransfer(address[],address[],uint256[])
PC address: 1826
Estimated Gas Usage: 452 - 547
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:9

e: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:08.725204
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchForcedTransfer(address[],address[],uint256[])
PC address: 1828
Estimated Gas Usage: 452 - 547
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:3



*/



// File: @onchain-id/solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:14.548479
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchForcedTransfer(address[],address[],uint256[])
PC address: 1911
Estimated Gas Usage: 628 - 723
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:9

e: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:28.328785
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchForcedTransfer(address[],address[],uint256[])
PC address: 1913
Estimated Gas Usage: 628 - 723
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:3



*/



// File: @onchain-id/solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:54.180564
Transaction Length: 1
Severity: High
Contract: Identity
Function name: execute(address,uint256,bytes)
PC address: 1947
Estimated Gas Usage: 421 - 516
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:3



*/



// File: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:51.811604
Transaction Length: 1
Severity: High
Contract: Identity
Function name: execute(address,uint256,bytes)
PC address: 1989
Estimated Gas Usage: 19184 - 83569
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:645

function execute(address _to, uint256 _value, bytes memory _data)

    public

    payable

    returns (uint256 executionId)

    {

        require(!executions[executionNonce].executed, "Already executed");

        executions[executionNonce].to = _to;

        executions[executionNonce].value = _value;

        executions[executionNonce].data = _data;



        emit ExecutionRequested(executionNonce, _to, _value, _data);



        if (keyHasPurpose(keccak256(abi.encode(msg.sender)), 2)) {

            approve(executionNonce, true);

        }



        executionNonce++;

        return executionNonce-1;

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:46.769528
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchForcedTransfer(address[],address[],uint256[])
PC address: 1996
Estimated Gas Usage: 804 - 899
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:9

e: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:13.072250
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchForcedTransfer(address[],address[],uint256[])
PC address: 1998
Estimated Gas Usage: 804 - 899
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:3



*/



// File: @onchain-id/solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:33.074135
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchUnfreezePartialTokens(address[],uint256[])
PC address: 2117
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:9

e: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:36.629322
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchUnfreezePartialTokens(address[],uint256[])
PC address: 2119
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:3



*/



// File: @onchain-id/solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:42.134683
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchUnfreezePartialTokens(address[],uint256[])
PC address: 2202
Estimated Gas Usage: 539 - 634
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:9

e: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:57.757958
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchUnfreezePartialTokens(address[],uint256[])
PC address: 2204
Estimated Gas Usage: 539 - 634
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:3



*/



// File: @onchain-id/solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:47:55.393364
Transaction Length: 1
Severity: High
Contract: Identity
Function name: getClaim(bytes32)
PC address: 2314
Estimated Gas Usage: 5415 - 8771
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:1325

function getClaim(bytes32 _claimId)

    public

    view

    returns(

        uint256 topic,

        uint256 scheme,

        address issuer,

        bytes memory signature,

        bytes memory data,

        string memory uri

    )

    {

        return (

            claims[_claimId].topic,

            claims[_claimId].scheme,

            claims[_claimId].issuer,

            claims[_claimId].signature,

            claims[_claimId].data,

            claims[_claimId].uri

        );

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:18:51.949140
Transaction Length: 1
Severity: High
Contract: Identity
Function name: getClaim(bytes32)
PC address: 2416
Estimated Gas Usage: 5569 - 9301
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:1325

function getClaim(bytes32 _claimId)

    public

    view

    returns(

        uint256 topic,

        uint256 scheme,

        address issuer,

        bytes memory signature,

        bytes memory data,

        string memory uri

    )

    {

        return (

            claims[_claimId].topic,

            claims[_claimId].scheme,

            claims[_claimId].issuer,

            claims[_claimId].signature,

            claims[_claimId].data,

            claims[_claimId].uri

        );

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:14:02.980903
Transaction Length: 1
Severity: High
Contract: Identity
Function name: getClaim(bytes32)
PC address: 2518
Estimated Gas Usage: 5723 - 9831
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:1325

function getClaim(bytes32 _claimId)

    public

    view

    returns(

        uint256 topic,

        uint256 scheme,

        address issuer,

        bytes memory signature,

        bytes memory data,

        string memory uri

    )

    {

        return (

            claims[_claimId].topic,

            claims[_claimId].scheme,

            claims[_claimId].issuer,

            claims[_claimId].signature,

            claims[_claimId].data,

            claims[_claimId].uri

        );

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:33.188886
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchTransfer(address[],uint256[])
PC address: 2673
Estimated Gas Usage: 430 - 525
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:9

e: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:37.022965
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchTransfer(address[],uint256[])
PC address: 2675
Estimated Gas Usage: 430 - 525
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:3



*/



// File: @onchain-id/solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:43.804594
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchTransfer(address[],uint256[])
PC address: 2758
Estimated Gas Usage: 606 - 701
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:9

e: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:02.547043
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchTransfer(address[],uint256[])
PC address: 2760
Estimated Gas Usage: 606 - 701
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:3



*/



// File: @onchain-id/solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.848682
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3044
Estimated Gas Usage: 989 - 1464
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:2017

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:34.225687
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchFreezePartialTokens(address[],uint256[])
PC address: 4219
Estimated Gas Usage: 450 - 545
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:9

e: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:37.975335
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchFreezePartialTokens(address[],uint256[])
PC address: 4221
Estimated Gas Usage: 450 - 545
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:3



*/



// File: @onchain-id/solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:44.828163
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchFreezePartialTokens(address[],uint256[])
PC address: 4304
Estimated Gas Usage: 626 - 721
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:9

e: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:04.455588
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchFreezePartialTokens(address[],uint256[])
PC address: 4306
Estimated Gas Usage: 626 - 721
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:3



*/



// File: @onchain-id/solidit

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:01.502426
Transaction Length: 1
Severity: Low
Contract: TransferManager
Function name: batchSetAddressFrozen(address[],bool[])
PC address: 5155
Estimated Gas Usage: 763 - 858
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:3724

freeze[i]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:04:11.035995
Transaction Length: 2
Severity: Low
Contract: TransferManager
Function name: batchSetAddressFrozen(address[],bool[])
PC address: 5155
Estimated Gas Usage: 763 - 858
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:3724

freeze[i]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:15.115472
Transaction Length: 1
Severity: High
Contract: ClaimIssuer
Function name: isClaimValid(address,bytes32,uint256,bytes,bytes)
PC address: 5311
Estimated Gas Usage: 1375 - 7681
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:1562

abi.encode(_identity, claimTopic, data)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:03:31.268273
Transaction Length: 1
Severity: Low
Contract: TransferManager
Function name: batchUnfreezePartialTokens(address[],uint256[])
PC address: 7908
Estimated Gas Usage: 740 - 835
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:3838

amounts[i]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:04:52.938032
Transaction Length: 2
Severity: Low
Contract: TransferManager
Function name: batchUnfreezePartialTokens(address[],uint256[])
PC address: 7908
Estimated Gas Usage: 740 - 835
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:3838

amounts[i]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:03:31.840281
Transaction Length: 1
Severity: Low
Contract: TransferManager
Function name: claimsNotInNewAddress(uint256)
PC address: 8404
Estimated Gas Usage: 702 - 797
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:3132

bytes32[] public claimsNotInNewAddress

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:04:55.361436
Transaction Length: 2
Severity: Low
Contract: TransferManager
Function name: claimsNotInNewAddress(uint256)
PC address: 8404
Estimated Gas Usage: 702 - 797
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:3132

bytes32[] public claimsNotInNewAddress

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:04:30.836965
Transaction Length: 1
Severity: Low
Contract: TransferManager
Function name: batchTransfer(address[],uint256[])
PC address: 8994
Estimated Gas Usage: 807 - 902
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:3316

_values[i]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:05:16.471810
Transaction Length: 2
Severity: Low
Contract: TransferManager
Function name: batchTransfer(address[],uint256[])
PC address: 8994
Estimated Gas Usage: 807 - 902
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:3316

_values[i]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:20.005349
Transaction Length: 1
Severity: High
Contract: Identity
Function name: execute(address,uint256,bytes)
PC address: 10576
Estimated Gas Usage: 19184 - 83569
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:661

executions[executionNonce].data = _data

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:50.816158
Transaction Length: 1
Severity: High
Contract: Identity
Function name: execute(address,uint256,bytes)
PC address: 12318
Estimated Gas Usage: 14140 - 58525
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:1065

contract Identity is ERC734, IERC735 {



    mapping (bytes32 => Claim) private claims;

    mapping (uint256 => bytes32[]) private claimsByTopic;



    /**

       * @notice Implementation of the addClaim function from the ERC-735 standard

       *  Require that the msg.sender has claim signer key.

       *

       * @param _topic The type of claim

       * @param _scheme The scheme with which this claim SHOULD be verified or how it should be processed.

       * @param _issuer The issuers identity contract address, or the address used to sign the above signature.

       * @param _signature Signature which is the proof that the claim issuer issued a claim of topic for this identity.

       * it MUST be a signed message of the following structure: keccak256(address identityHolder_address, uint256 _ topic, bytes data)

       * or keccak256(abi.encode(identityHolder_address, topic, data))

       * @param _data The hash of the claim data, sitting in another location, a bit-mask, call data, or actual data based on the claim scheme.

       * @param _uri The location of the claim, this can be HTTP links, swarm hashes, IPFS hashes, and such.

       *

       * @return Returns claimRequestId: COULD be send to the approve function, to approve or reject this claim.

       * triggers ClaimAdded event.

       */



    function addClaim(

        uint256 _topic,

        uint256 _scheme,

        address _issuer,

        bytes memory _signature,

        bytes memory _data,

        string memory _uri

    )

    public

    returns (bytes32 claimRequestId)

    {

        bytes32 claimId = keccak256(abi.encode(_issuer, _topic));



        if (msg.sender != address(this)) {

            require(keyHasPurpose(keccak256(abi.encode(msg.sender)), 3), "Permissions: Sender does not have claim signer key");

        }



        if (claims[claimId].issuer != _issuer) {

            claimsByTopic[_topic].push(claimId);

            claims[claimId].topic = _topic;

            claims[claimId].scheme = _scheme;

            claims[claimId].issuer = _issuer;

            claims[claimId].signature = _signature;

            claims[claimId].data = _data;

            claims[claimId].uri = _uri;



            emit ClaimAdded(

                claimId,

                _topic,

                _scheme,

                _issuer,

                _signature,

                _data,

                _uri

            );

        } else {

            claims[claimId].topic = _topic;

            claims[claimId].scheme = _scheme;

            claims[claimId].issuer = _issuer;

            claims[claimId].signature = _signature;

            claims[claimId].data = _data;

            claims[claimId].uri = _uri;



            emit ClaimChanged(

                claimId,

                _topic,

                _scheme,

                _issuer,

                _signature,

                _data,

                _uri

            );

        }



        return claimId;

    }



    /**

       * @notice Implementation of the removeClaim function from the ERC-735 standard

       * Require that the msg.sender has management key.

       * Can only be removed by the claim issuer, or the claim holder itself.

       *

       * @param _claimId The identity of the claim i.e. keccak256(address issuer_address + uint256 topic)

       *

       * @return Returns TRUE when the claim was removed.

       * triggers ClaimRemoved event

       */



    function removeClaim(bytes32 _claimId) public returns (bool success) {

        if (msg.sender != address(this)) {

            require(keyHasPurpose(keccak256(abi.encode(msg.sender)), 1), "Permissions: Sender does not have CLAIM key");

        }



        if (claims[_claimId].topic == 0) {

            revert("NonExisting: There is no claim with this ID");

        }



        uint claimIndex = 0;

        while (claimsByTopic[claims[_claimId].topic][claimIndex] != _claimId) {

            claimIndex++;

        }



        claimsByTopic[claims[_claimId].topic][claimIndex] = claimsByTopic[claims[_claimId].topic][claimsByTopic[claims[_claimId].topic].length - 1];

        claimsByTopic[claims[_claimId].topic].pop();



        emit ClaimRemoved(

            _claimId,

            claims[_claimId].topic,

            claims[_claimId].scheme,

            claims[_claimId].issuer,

            claims[_claimId].signature,

            claims[_claimId].data,

            claims[_claimId].uri

        );



        delete claims[_claimId];



        return true;

    }



    /**

        * @notice Implementation of the getClaim function from the ERC-735 standard.

        *

        * @param _claimId The identity of the claim i.e. keccak256(address issuer_address + uint256 topic)

        *

        * @return Returns all the parameters of the claim for the specified _claimId (topic, scheme, signature, issuer, data, uri) .

        */



    function getClaim(bytes32 _claimId)

    public

    view

    returns(

        uint256 topic,

        uint256 scheme,

        address issuer,

        bytes memory signature,

        bytes memory data,

        string memory uri

    )

    {

        return (

            claims[_claimId].topic,

            claims[_claimId].scheme,

            claims[_claimId].issuer,

            claims[_claimId].signature,

            claims[_claimId].data,

            claims[_claimId].uri

        );

    }



    /**

        * @notice Implementation of the getClaimIdsByTopic function from the ERC-735 standard.

        * used to get all the claims from the specified topic

        *

        * @param _topic The identity of the claim i.e. keccak256(address issuer_address + uint256 topic)

        *

        * @return Returns an array of claim IDs by topic.

        */



    function getClaimIdsByTopic(uint256 _topic)

    public

    view

    returns(bytes32[] memory claimIds)

    {

        return claimsByTopic[_topic];

    }

}

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:37.083929
Transaction Length: 1
Severity: High
Contract: Identity
Function name: execute(address,uint256,bytes)
PC address: 12332
Estimated Gas Usage: 19184 - 83569
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:1065

contract Identity is ERC734, IERC735 {



    mapping (bytes32 => Claim) private claims;

    mapping (uint256 => bytes32[]) private claimsByTopic;



    /**

       * @notice Implementation of the addClaim function from the ERC-735 standard

       *  Require that the msg.sender has claim signer key.

       *

       * @param _topic The type of claim

       * @param _scheme The scheme with which this claim SHOULD be verified or how it should be processed.

       * @param _issuer The issuers identity contract address, or the address used to sign the above signature.

       * @param _signature Signature which is the proof that the claim issuer issued a claim of topic for this identity.

       * it MUST be a signed message of the following structure: keccak256(address identityHolder_address, uint256 _ topic, bytes data)

       * or keccak256(abi.encode(identityHolder_address, topic, data))

       * @param _data The hash of the claim data, sitting in another location, a bit-mask, call data, or actual data based on the claim scheme.

       * @param _uri The location of the claim, this can be HTTP links, swarm hashes, IPFS hashes, and such.

       *

       * @return Returns claimRequestId: COULD be send to the approve function, to approve or reject this claim.

       * triggers ClaimAdded event.

       */



    function addClaim(

        uint256 _topic,

        uint256 _scheme,

        address _issuer,

        bytes memory _signature,

        bytes memory _data,

        string memory _uri

    )

    public

    returns (bytes32 claimRequestId)

    {

        bytes32 claimId = keccak256(abi.encode(_issuer, _topic));



        if (msg.sender != address(this)) {

            require(keyHasPurpose(keccak256(abi.encode(msg.sender)), 3), "Permissions: Sender does not have claim signer key");

        }



        if (claims[claimId].issuer != _issuer) {

            claimsByTopic[_topic].push(claimId);

            claims[claimId].topic = _topic;

            claims[claimId].scheme = _scheme;

            claims[claimId].issuer = _issuer;

            claims[claimId].signature = _signature;

            claims[claimId].data = _data;

            claims[claimId].uri = _uri;



            emit ClaimAdded(

                claimId,

                _topic,

                _scheme,

                _issuer,

                _signature,

                _data,

                _uri

            );

        } else {

            claims[claimId].topic = _topic;

            claims[claimId].scheme = _scheme;

            claims[claimId].issuer = _issuer;

            claims[claimId].signature = _signature;

            claims[claimId].data = _data;

            claims[claimId].uri = _uri;



            emit ClaimChanged(

                claimId,

                _topic,

                _scheme,

                _issuer,

                _signature,

                _data,

                _uri

            );

        }



        return claimId;

    }



    /**

       * @notice Implementation of the removeClaim function from the ERC-735 standard

       * Require that the msg.sender has management key.

       * Can only be removed by the claim issuer, or the claim holder itself.

       *

       * @param _claimId The identity of the claim i.e. keccak256(address issuer_address + uint256 topic)

       *

       * @return Returns TRUE when the claim was removed.

       * triggers ClaimRemoved event

       */



    function removeClaim(bytes32 _claimId) public returns (bool success) {

        if (msg.sender != address(this)) {

            require(keyHasPurpose(keccak256(abi.encode(msg.sender)), 1), "Permissions: Sender does not have CLAIM key");

        }



        if (claims[_claimId].topic == 0) {

            revert("NonExisting: There is no claim with this ID");

        }



        uint claimIndex = 0;

        while (claimsByTopic[claims[_claimId].topic][claimIndex] != _claimId) {

            claimIndex++;

        }



        claimsByTopic[claims[_claimId].topic][claimIndex] = claimsByTopic[claims[_claimId].topic][claimsByTopic[claims[_claimId].topic].length - 1];

        claimsByTopic[claims[_claimId].topic].pop();



        emit ClaimRemoved(

            _claimId,

            claims[_claimId].topic,

            claims[_claimId].scheme,

            claims[_claimId].issuer,

            claims[_claimId].signature,

            claims[_claimId].data,

            claims[_claimId].uri

        );



        delete claims[_claimId];



        return true;

    }



    /**

        * @notice Implementation of the getClaim function from the ERC-735 standard.

        *

        * @param _claimId The identity of the claim i.e. keccak256(address issuer_address + uint256 topic)

        *

        * @return Returns all the parameters of the claim for the specified _claimId (topic, scheme, signature, issuer, data, uri) .

        */



    function getClaim(bytes32 _claimId)

    public

    view

    returns(

        uint256 topic,

        uint256 scheme,

        address issuer,

        bytes memory signature,

        bytes memory data,

        string memory uri

    )

    {

        return (

            claims[_claimId].topic,

            claims[_claimId].scheme,

            claims[_claimId].issuer,

            claims[_claimId].signature,

            claims[_claimId].data,

            claims[_claimId].uri

        );

    }



    /**

        * @notice Implementation of the getClaimIdsByTopic function from the ERC-735 standard.

        * used to get all the claims from the specified topic

        *

        * @param _topic The identity of the claim i.e. keccak256(address issuer_address + uint256 topic)

        *

        * @return Returns an array of claim IDs by topic.

        */



    function getClaimIdsByTopic(uint256 _topic)

    public

    view

    returns(bytes32[] memory claimIds)

    {

        return claimsByTopic[_topic];

    }

}

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:30.101277
Transaction Length: 1
Severity: High
Contract: Identity
Function name: execute(address,uint256,bytes)
PC address: 12349
Estimated Gas Usage: 29324 - 133895
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:1065

contract Identity is ERC734, IERC735 {



    mapping (bytes32 => Claim) private claims;

    mapping (uint256 => bytes32[]) private claimsByTopic;



    /**

       * @notice Implementation of the addClaim function from the ERC-735 standard

       *  Require that the msg.sender has claim signer key.

       *

       * @param _topic The type of claim

       * @param _scheme The scheme with which this claim SHOULD be verified or how it should be processed.

       * @param _issuer The issuers identity contract address, or the address used to sign the above signature.

       * @param _signature Signature which is the proof that the claim issuer issued a claim of topic for this identity.

       * it MUST be a signed message of the following structure: keccak256(address identityHolder_address, uint256 _ topic, bytes data)

       * or keccak256(abi.encode(identityHolder_address, topic, data))

       * @param _data The hash of the claim data, sitting in another location, a bit-mask, call data, or actual data based on the claim scheme.

       * @param _uri The location of the claim, this can be HTTP links, swarm hashes, IPFS hashes, and such.

       *

       * @return Returns claimRequestId: COULD be send to the approve function, to approve or reject this claim.

       * triggers ClaimAdded event.

       */



    function addClaim(

        uint256 _topic,

        uint256 _scheme,

        address _issuer,

        bytes memory _signature,

        bytes memory _data,

        string memory _uri

    )

    public

    returns (bytes32 claimRequestId)

    {

        bytes32 claimId = keccak256(abi.encode(_issuer, _topic));



        if (msg.sender != address(this)) {

            require(keyHasPurpose(keccak256(abi.encode(msg.sender)), 3), "Permissions: Sender does not have claim signer key");

        }



        if (claims[claimId].issuer != _issuer) {

            claimsByTopic[_topic].push(claimId);

            claims[claimId].topic = _topic;

            claims[claimId].scheme = _scheme;

            claims[claimId].issuer = _issuer;

            claims[claimId].signature = _signature;

            claims[claimId].data = _data;

            claims[claimId].uri = _uri;



            emit ClaimAdded(

                claimId,

                _topic,

                _scheme,

                _issuer,

                _signature,

                _data,

                _uri

            );

        } else {

            claims[claimId].topic = _topic;

            claims[claimId].scheme = _scheme;

            claims[claimId].issuer = _issuer;

            claims[claimId].signature = _signature;

            claims[claimId].data = _data;

            claims[claimId].uri = _uri;



            emit ClaimChanged(

                claimId,

                _topic,

                _scheme,

                _issuer,

                _signature,

                _data,

                _uri

            );

        }



        return claimId;

    }



    /**

       * @notice Implementation of the removeClaim function from the ERC-735 standard

       * Require that the msg.sender has management key.

       * Can only be removed by the claim issuer, or the claim holder itself.

       *

       * @param _claimId The identity of the claim i.e. keccak256(address issuer_address + uint256 topic)

       *

       * @return Returns TRUE when the claim was removed.

       * triggers ClaimRemoved event

       */



    function removeClaim(bytes32 _claimId) public returns (bool success) {

        if (msg.sender != address(this)) {

            require(keyHasPurpose(keccak256(abi.encode(msg.sender)), 1), "Permissions: Sender does not have CLAIM key");

        }



        if (claims[_claimId].topic == 0) {

            revert("NonExisting: There is no claim with this ID");

        }



        uint claimIndex = 0;

        while (claimsByTopic[claims[_claimId].topic][claimIndex] != _claimId) {

            claimIndex++;

        }



        claimsByTopic[claims[_claimId].topic][claimIndex] = claimsByTopic[claims[_claimId].topic][claimsByTopic[claims[_claimId].topic].length - 1];

        claimsByTopic[claims[_claimId].topic].pop();



        emit ClaimRemoved(

            _claimId,

            claims[_claimId].topic,

            claims[_claimId].scheme,

            claims[_claimId].issuer,

            claims[_claimId].signature,

            claims[_claimId].data,

            claims[_claimId].uri

        );



        delete claims[_claimId];



        return true;

    }



    /**

        * @notice Implementation of the getClaim function from the ERC-735 standard.

        *

        * @param _claimId The identity of the claim i.e. keccak256(address issuer_address + uint256 topic)

        *

        * @return Returns all the parameters of the claim for the specified _claimId (topic, scheme, signature, issuer, data, uri) .

        */



    function getClaim(bytes32 _claimId)

    public

    view

    returns(

        uint256 topic,

        uint256 scheme,

        address issuer,

        bytes memory signature,

        bytes memory data,

        string memory uri

    )

    {

        return (

            claims[_claimId].topic,

            claims[_claimId].scheme,

            claims[_claimId].issuer,

            claims[_claimId].signature,

            claims[_claimId].data,

            claims[_claimId].uri

        );

    }



    /**

        * @notice Implementation of the getClaimIdsByTopic function from the ERC-735 standard.

        * used to get all the claims from the specified topic

        *

        * @param _topic The identity of the claim i.e. keccak256(address issuer_address + uint256 topic)

        *

        * @return Returns an array of claim IDs by topic.

        */



    function getClaimIdsByTopic(uint256 _topic)

    public

    view

    returns(bytes32[] memory claimIds)

    {

        return claimsByTopic[_topic];

    }

}

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:05:40.757012
Transaction Length: 1
Severity: Low
Contract: TransferManager
Function name: batchFreezePartialTokens(address[],uint256[])
PC address: 16383
Estimated Gas Usage: 827 - 922
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:3782

amounts[i]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:05:42.065548
Transaction Length: 2
Severity: Low
Contract: TransferManager
Function name: batchFreezePartialTokens(address[],uint256[])
PC address: 16383
Estimated Gas Usage: 827 - 922
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:3782

amounts[i]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:18.495691
Transaction Length: 2
Severity: High
Contract: TransferManager
Function name: increaseAllowance(address,uint256)
PC address: 18797
Estimated Gas Usage: 1012 - 1487
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:2017

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x28681d373aF03A0Eb00ACE262c5dad9A0C65F276.sol
Total states:4368
573.140831
==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.005737
Transaction Length: 0
Severity: Medium
Contract: Governance
Function name: constructor
PC address: 18
Estimated Gas Usage: 42 - 137
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../contracts/m_loop/loop1/0x28681d373aF03A0Eb00ACE262c5dad9A0C65F276.sol:639

tx.origin

--------------------

==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.030731
Transaction Length: 0
Severity: Medium
Contract: LPTokenWrapper
Function name: constructor
PC address: 241
Estimated Gas Usage: 16419 - 77504
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../contracts/m_loop/loop1/0x28681d373aF03A0Eb00ACE262c5dad9A0C65F276.sol:639

tx.origin

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.270663
Transaction Length: 0
Severity: High
Contract: UniswapReward
Function name: constructor
PC address: 516
Estimated Gas Usage: 37837 - 179912
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x28681d373aF03A0Eb00ACE262c5dad9A0C65F276.sol:796

now + 365 days

--------------------

==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.719493
Transaction Length: 0
Severity: Medium
Contract: UniswapReward
Function name: constructor
PC address: 582
Estimated Gas Usage: 78340 - 380745
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../contracts/m_loop/loop1/0x28681d373aF03A0Eb00ACE262c5dad9A0C65F276.sol:639

tx.origin

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.757533
Transaction Length: 1
Severity: High
Contract: LPTokenWrapper
Function name: stake(uint256,string)
PC address: 873
Estimated Gas Usage: 411 - 506
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x28681d373aF03A0Eb00ACE262c5dad9A0C65F276.sol:3

*/

/***
 *    ██████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.630462
Transaction Length: 1
Severity: High
Contract: UniswapReward
Function name: stake(uint256,string)
PC address: 2435
Estimated Gas Usage: 456 - 551
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x28681d373aF03A0Eb00ACE262c5dad9A0C65F276.sol:3

*/

/***
 *    ██████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:54.564841
Transaction Length: 1
Severity: High
Contract: UniswapReward
Function name: seize(address,uint256)
PC address: 13914
Estimated Gas Usage: 2651 - 5713
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x28681d373aF03A0Eb00ACE262c5dad9A0C65F276.sol:544

address(token).call(abi.encodeWithSelector(SELECTOR, to, value))

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:06:41.326432
Transaction Length: 1
Severity: Medium
Contract: UniswapReward
Function name: seize(address,uint256)
PC address: 13931
Estimated Gas Usage: 2976 - 7118
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../contracts/m_loop/loop1/0x28681d373aF03A0Eb00ACE262c5dad9A0C65F276.sol:544

address(token).call(abi.encodeWithSelector(SELECTOR, to, value))

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0xe1f6d0f809BE316f89CdFe837997B77f46D1a9ED.sol
Total states:18680
147.652318
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.852172
Transaction Length: 1
Severity: High
Contract: goalfinance
Function name: bulkTransfer(address[],uint256[])
PC address: 757
Estimated Gas Usage: 408 - 503
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xe1f6d0f809BE316f89CdFe837997B77f46D1a9ED.sol:5

olidity ^0.5.13;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.965124
Transaction Length: 1
Severity: High
Contract: goalfinance
Function name: bulkTransfer(address[],uint256[])
PC address: 759
Estimated Gas Usage: 408 - 503
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xe1f6d0f809BE316f89CdFe837997B77f46D1a9ED.sol:3

*/

//pragma solidity ^0.5.13;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.582031
Transaction Length: 1
Severity: High
Contract: goalfinance
Function name: bulkTransfer(address[],uint256[])
PC address: 842
Estimated Gas Usage: 584 - 679
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xe1f6d0f809BE316f89CdFe837997B77f46D1a9ED.sol:5

olidity ^0.5.13;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:26.520225
Transaction Length: 1
Severity: High
Contract: goalfinance
Function name: bulkTransfer(address[],uint256[])
PC address: 844
Estimated Gas Usage: 584 - 679
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xe1f6d0f809BE316f89CdFe837997B77f46D1a9ED.sol:3

*/

//pragma solidity ^0.5.13;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:45.345656
Transaction Length: 1
Severity: High
Contract: goalfinance
Function name: transferAndCall(address,uint256,bytes)
PC address: 1417
Estimated Gas Usage: 511 - 606
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xe1f6d0f809BE316f89CdFe837997B77f46D1a9ED.sol:3

*/

//pragma solidity ^0.5.13;
prag

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:51.827586
Transaction Length: 1
Severity: Low
Contract: goalfinance
Function name: unfreeze(uint256)
PC address: 6429
Estimated Gas Usage: 1375 - 1660
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xe1f6d0f809BE316f89CdFe837997B77f46D1a9ED.sol:212

_burnedAmount * FLOAT_SCALAR / info.totalFrozen

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:22.205271
Transaction Length: 2
Severity: Low
Contract: goalfinance
Function name: unfreeze(uint256)
PC address: 6429
Estimated Gas Usage: 1375 - 1660
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xe1f6d0f809BE316f89CdFe837997B77f46D1a9ED.sol:212

_burnedAmount * FLOAT_SCALAR / info.totalFrozen

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x881041242edbb74642d4944d08f9d3fe59306bff.sol
Total states:426
0.822943
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0xc4583235e541fab2544e35a1152396df8c3b9e07.sol
Total states:2324
1.829558
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x190804ae027b6fa084defc47cfae6bc589d4d14b.sol
Total states:911
1.290448
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.127421
Transaction Length: 0
Severity: High
Contract: StablePriceOracle
Function name: constructor
PC address: 120
Estimated Gas Usage: 287 - 3153
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x190804ae027b6fa084defc47cfae6bc589d4d14b.sol:13

on of "user permissio

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x7adcacc6d4b3cb8fe456b57ef6d9a9ab3368d0e8.sol
Total states:1880
90.818111
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.271787
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShip(address[])
PC address: 360
Estimated Gas Usage: 342 - 437
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x7adcacc6d4b3cb8fe456b57ef6d9a9ab3368d0e8.sol:5

penzeppelin-solidity/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.623891
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShip(address[])
PC address: 362
Estimated Gas Usage: 342 - 437
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x7adcacc6d4b3cb8fe456b57ef6d9a9ab3368d0e8.sol:3

*/

// File: openzeppelin-solidity/c

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:35.692599
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShipWithHowMany(address[],uint256)
PC address: 776
Estimated Gas Usage: 341 - 436
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x7adcacc6d4b3cb8fe456b57ef6d9a9ab3368d0e8.sol:5

penzeppelin-solidity/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:38.531655
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShipWithHowMany(address[],uint256)
PC address: 778
Estimated Gas Usage: 341 - 436
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x7adcacc6d4b3cb8fe456b57ef6d9a9ab3368d0e8.sol:3

*/

// File: openzeppelin-solidity/c

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:28.315525
Transaction Length: 1
Severity: Low
Contract: BeneficiaryOperations
Function name: allOperations(uint256)
PC address: 1715
Estimated Gas Usage: 701 - 796
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x7adcacc6d4b3cb8fe456b57ef6d9a9ab3368d0e8.sol:386

bytes32[] public allOperations

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:25.616323
Transaction Length: 1
Severity: Low
Contract: BeneficiaryOperations
Function name: beneficiaries(uint256)
PC address: 4636
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x7adcacc6d4b3cb8fe456b57ef6d9a9ab3368d0e8.sol:385

address[] public beneficiaries

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0xF9C8ca8FE9E00786bEE5D914072Eea5A0510F5Fd.sol
Total states:1328
77.836414
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.215080
Transaction Length: 1
Severity: High
Contract: Resolver
Function name: getPositions(string[],address)
PC address: 2557
Estimated Gas Usage: 635 - 1013
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xF9C8ca8FE9E00786bEE5D914072Eea5A0510F5Fd.sol:32

on balanceOf(address user) ext

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:15.432954
Transaction Length: 1
Severity: High
Contract: Resolver
Function name: getPositions(string[],address)
PC address: 2630
Estimated Gas Usage: 635 - 1013
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xF9C8ca8FE9E00786bEE5D914072Eea5A0510F5Fd.sol:41


  function getCu

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.943542
Transaction Length: 1
Severity: High
Contract: InstaCurveGaugeResolver
Function name: getPositions(string[],address)
PC address: 2655
Estimated Gas Usage: 651 - 1029
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xF9C8ca8FE9E00786bEE5D914072Eea5A0510F5Fd.sol:32

on balanceOf(address user) ext

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:16.552856
Transaction Length: 1
Severity: High
Contract: InstaCurveGaugeResolver
Function name: getPositions(string[],address)
PC address: 2728
Estimated Gas Usage: 651 - 1029
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xF9C8ca8FE9E00786bEE5D914072Eea5A0510F5Fd.sol:41


  function getCu

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0xf9f794CE408b206fd63FC2CA9D2f7224B24d9516.sol
Total states:504
3.332895
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:00.613219
Transaction Length: 1
Severity: Low
Contract: SpellAction
Function name: execute()
PC address: 215
Estimated Gas Usage: 939 - 1315
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop1/0xf9f794CE408b206fd63FC2CA9D2f7224B24d9516.sol:100

PotAbstract(MCD_POT).drip()

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:01.579905
Transaction Length: 1
Severity: Low
Contract: SpellAction
Function name: execute()
PC address: 458
Estimated Gas Usage: 2612 - 37645
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop1/0xf9f794CE408b206fd63FC2CA9D2f7224B24d9516.sol:106

PotAbstract(MCD_POT).file("dsr", ZERO_PCT_RATE)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.755499
Transaction Length: 1
Severity: High
Contract: SpellAction
Function name: execute()
PC address: 644
Estimated Gas Usage: 4958 - 108460
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xf9f794CE408b206fd63FC2CA9D2f7224B24d9516.sol:5

(C) 2020 Maker 

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0xcce695ec0e874dee88a0a92f0a2dc430abe3c19a.sol
Total states:2324
1.791941
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0xE0384c1741c051333BC28585321217d9B8E9d9882.sol
Total states:1055
2.506242
==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.005832
Transaction Length: 0
Severity: Medium
Contract: Governance
Function name: constructor
PC address: 18
Estimated Gas Usage: 42 - 137
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../contracts/m_loop/loop1/0xE0384c1741c051333BC28585321217d9B8E9d9882.sol:220

tx.origin

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x7c490872bef3d0683d8da030c1ad5e9c13e88b48.sol
Total states:149
2.71139
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x647d2460d8cb322fc5328afbf9dd402af2d1ba11.sol
Total states:77
3.272112
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x80c09d3cc108fa52b7b63cdcc071daebc059a494.sol
Total states:3620
5.854681
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0xbb6e1141d2c228f9cfcbe9c72f5889b1be616936.sol
Total states:3647
85.044831
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.006660
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: initialize(uint256,uint256,address[],uint256[],address)
PC address: 798
Estimated Gas Usage: 439 - 534
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xbb6e1141d2c228f9cfcbe9c72f5889b1be616936.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.937476
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: initialize(uint256,uint256,address[],uint256[],address)
PC address: 800
Estimated Gas Usage: 439 - 534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xbb6e1141d2c228f9cfcbe9c72f5889b1be616936.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.657109
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: initialize(uint256,uint256,address[],uint256[],address)
PC address: 883
Estimated Gas Usage: 615 - 710
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xbb6e1141d2c228f9cfcbe9c72f5889b1be616936.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:22.675707
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: initialize(uint256,uint256,address[],uint256[],address)
PC address: 885
Estimated Gas Usage: 615 - 710
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xbb6e1141d2c228f9cfcbe9c72f5889b1be616936.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:34.434519
Transaction Length: 1
Severity: Medium
Contract: LidTeamLock
Function name: startRelease()
PC address: 1036
Estimated Gas Usage: 20796 - 150675
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 4623
Offset: 4987
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop1/0xbb6e1141d2c228f9cfcbe9c72f5889b1be616936.sol:694

function startRelease() external {

        require(releaseStart == 0, "Has already started.");

        require(address(this).balance != 0, "Must have some ether deposited.");

        require(lidToken.balanceOf(address(this)) != 0, "Must have some lid deposited.");

        startingLid = lidToken.balanceOf(address(this));

        startingEth = address(this).balance;

        releaseStart = now.add(24 hours);

    }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:00.624752
Transaction Length: 2
Severity: Medium
Contract: LidTeamLock
Function name: startRelease()
PC address: 1036
Estimated Gas Usage: 20796 - 150675
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 4623
Offset: 4987
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop1/0xbb6e1141d2c228f9cfcbe9c72f5889b1be616936.sol:694

function startRelease() external {

        require(releaseStart == 0, "Has already started.");

        require(address(this).balance != 0, "Must have some ether deposited.");

        require(lidToken.balanceOf(address(this)) != 0, "Must have some lid deposited.");

        startingLid = lidToken.balanceOf(address(this));

        startingEth = address(this).balance;

        releaseStart = now.add(24 hours);

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:35.629178
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 1174
Estimated Gas Usage: 385 - 480
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xbb6e1141d2c228f9cfcbe9c72f5889b1be616936.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:38.630024
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 1176
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xbb6e1141d2c228f9cfcbe9c72f5889b1be616936.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:44.526034
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 1259
Estimated Gas Usage: 561 - 656
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xbb6e1141d2c228f9cfcbe9c72f5889b1be616936.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:59.638583
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 1261
Estimated Gas Usage: 561 - 656
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xbb6e1141d2c228f9cfcbe9c72f5889b1be616936.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.813666
Transaction Length: 1
Severity: Low
Contract: LidTeamLock
Function name: teamMemberBPs(uint256)
PC address: 1726
Estimated Gas Usage: 746 - 841
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xbb6e1141d2c228f9cfcbe9c72f5889b1be616936.sol:572

uint[] public teamMemberBPs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:20.731424
Transaction Length: 1
Severity: Low
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 5130
Estimated Gas Usage: 1048 - 1143
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xbb6e1141d2c228f9cfcbe9c72f5889b1be616936.sol:736

teamMemberAddresses[0]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:21.144880
Transaction Length: 1
Severity: Low
Contract: LidTeamLock
Function name: teamMemberAddresses(uint256)
PC address: 5701
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xbb6e1141d2c228f9cfcbe9c72f5889b1be616936.sol:570

address payable[] public teamMemberAddresses

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:21.769728
Transaction Length: 1
Severity: Low
Contract: LidTeamLock
Function name: migrateMember(uint256,address)
PC address: 6593
Estimated Gas Usage: 755 - 850
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xbb6e1141d2c228f9cfcbe9c72f5889b1be616936.sol:714

teamMemberAddresses[0]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:33.416882
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: startRelease()
PC address: 7187
Estimated Gas Usage: 15736 - 125615
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xbb6e1141d2c228f9cfcbe9c72f5889b1be616936.sol:186

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x54b6dbae1e882c5d1fc3547c540f2cf881d9272a.sol
Total states:9788
22.319607
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.255441
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3244
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x54b6dbae1e882c5d1fc3547c540f2cf881d9272a.sol:58

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x4f6990b63500ae3b1cd0b689756503199c10149c.sol
Total states:195
1177.816972
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:41.251519
Transaction Length: 1
Severity: High
Contract: Core
Function name: whitelistTokens(address[])
PC address: 887
Estimated Gas Usage: 364 - 459
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x4f6990b63500ae3b1cd0b689756503199c10149c.sol:9

ma solidity 0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:44.708970
Transaction Length: 1
Severity: High
Contract: Core
Function name: whitelistTokens(address[])
PC address: 889
Estimated Gas Usage: 364 - 459
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x4f6990b63500ae3b1cd0b689756503199c10149c.sol:3



*/



//pragma solidity 0.5.17;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:09.918704
Transaction Length: 1
Severity: High
Contract: Core
Function name: whitelistPeak(address,uint256[],uint256,bool)
PC address: 1096
Estimated Gas Usage: 441 - 536
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x4f6990b63500ae3b1cd0b689756503199c10149c.sol:9

ma solidity 0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:14.476991
Transaction Length: 1
Severity: High
Contract: Core
Function name: whitelistPeak(address,uint256[],uint256,bool)
PC address: 1098
Estimated Gas Usage: 441 - 536
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x4f6990b63500ae3b1cd0b689756503199c10149c.sol:3



*/



//pragma solidity 0.5.17;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.165039
Transaction Length: 1
Severity: High
Contract: Core
Function name: currentSystemState()
PC address: 2994
Estimated Gas Usage: 2276 - 37170
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x4f6990b63500ae3b1cd0b689756503199c10149c.sol:9

solidity 0.5.17

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.785778
Transaction Length: 1
Severity: High
Contract: Core
Function name: currentSystemState()
PC address: 2997
Estimated Gas Usage: 2322 - 37309
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x4f6990b63500ae3b1cd0b689756503199c10149c.sol:5

*/



//pragma solidity 0.5.17;
pragma soli

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.477414
Transaction Length: 1
Severity: High
Contract: Core
Function name: totalSystemAssets()
PC address: 3018
Estimated Gas Usage: 2322 - 37309
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x4f6990b63500ae3b1cd0b689756503199c10149c.sol:728

oracle.getPriceFeed()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.069967
Transaction Length: 1
Severity: High
Contract: Core
Function name: totalSystemAssets()
PC address: 3043
Estimated Gas Usage: 2322 - 37309
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x4f6990b63500ae3b1cd0b689756503199c10149c.sol:3

5

*/



//pragma sol

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.323506
Transaction Length: 1
Severity: High
Contract: Core
Function name: totalSystemAssets()
PC address: 3049
Estimated Gas Usage: 2322 - 37309
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x4f6990b63500ae3b1cd0b689756503199c10149c.sol:10

=0.5 <0.7.17;


--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.449084
Transaction Length: 1
Severity: High
Contract: Core
Function name: totalSystemAssets()
PC address: 3069
Estimated Gas Usage: 2380 - 37460
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x4f6990b63500ae3b1cd0b689756503199c10149c.sol:20

s the amount of token

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.549161
Transaction Length: 1
Severity: High
Contract: Core
Function name: totalSystemAssets()
PC address: 3071
Estimated Gas Usage: 2380 - 37460
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x4f6990b63500ae3b1cd0b689756503199c10149c.sol:19

/**
     * @dev Returns the amount of tokens

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:38.232397
Transaction Length: 1
Severity: High
Contract: Core
Function name: dusdToUsd(uint256,bool)
PC address: 13475
Estimated Gas Usage: 2367 - 37354
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x4f6990b63500ae3b1cd0b689756503199c10149c.sol:185

div(a, b, "SafeMath: division by zero")

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x633992502d7c13E8f95A8B8E44f17BA17EB2Db6D2.sol
Total states:5382
22.121187
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0xc540e6e4b95d2fbe481810a89f9088c0cab514bd.sol
Total states:38890
89.76379
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.915968
Transaction Length: 1
Severity: Low
Contract: LockableToken
Function name: grantedLocks(address,uint256)
PC address: 2420
Estimated Gas Usage: 820 - 1105
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xc540e6e4b95d2fbe481810a89f9088c0cab514bd.sol:526

mapping (address => Lock[]) public grantedLocks

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.709163
Transaction Length: 1
Severity: Low
Contract: DCASHToken
Function name: grantedLocks(address,uint256)
PC address: 2887
Estimated Gas Usage: 798 - 1083
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xc540e6e4b95d2fbe481810a89f9088c0cab514bd.sol:526

mapping (address => Lock[]) public grantedLocks

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.309579
Transaction Length: 2
Severity: High
Contract: StandardToken
Function name: increaseAllowance(address,uint256)
PC address: 4619
Estimated Gas Usage: 1474 - 2279
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xc540e6e4b95d2fbe481810a89f9088c0cab514bd.sol:265

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.111026
Transaction Length: 2
Severity: High
Contract: MintableToken
Function name: increaseAllowance(address,uint256)
PC address: 5093
Estimated Gas Usage: 1496 - 2301
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xc540e6e4b95d2fbe481810a89f9088c0cab514bd.sol:265

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.626217
Transaction Length: 2
Severity: High
Contract: BurnableToken
Function name: increaseAllowance(address,uint256)
PC address: 5241
Estimated Gas Usage: 1496 - 2301
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xc540e6e4b95d2fbe481810a89f9088c0cab514bd.sol:265

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.686059
Transaction Length: 2
Severity: High
Contract: LockableToken
Function name: increaseAllowance(address,uint256)
PC address: 6998
Estimated Gas Usage: 1518 - 2323
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xc540e6e4b95d2fbe481810a89f9088c0cab514bd.sol:265

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.716254
Transaction Length: 2
Severity: High
Contract: DCASHToken
Function name: increaseAllowance(address,uint256)
PC address: 7543
Estimated Gas Usage: 1452 - 2257
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xc540e6e4b95d2fbe481810a89f9088c0cab514bd.sol:265

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x34905bf0a490df50680a82a5ab089a963ee11224.sol
Total states:4506
32.635575
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.993297
Transaction Length: 1
Severity: High
Contract: Core
Function name: whitelistTokens(address[])
PC address: 963
Estimated Gas Usage: 408 - 503
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x34905bf0a490df50680a82a5ab089a963ee11224.sol:9

ma solidity 0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.192170
Transaction Length: 1
Severity: High
Contract: Core
Function name: whitelistTokens(address[])
PC address: 965
Estimated Gas Usage: 408 - 503
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x34905bf0a490df50680a82a5ab089a963ee11224.sol:3



*/



//pragma solidity 0.5.17;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.880446
Transaction Length: 1
Severity: High
Contract: Core
Function name: whitelistPeak(address,uint256[],bool)
PC address: 1172
Estimated Gas Usage: 418 - 513
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x34905bf0a490df50680a82a5ab089a963ee11224.sol:9

ma solidity 0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:15.078685
Transaction Length: 1
Severity: High
Contract: Core
Function name: whitelistPeak(address,uint256[],bool)
PC address: 1174
Estimated Gas Usage: 418 - 513
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x34905bf0a490df50680a82a5ab089a963ee11224.sol:3



*/



//pragma solidity 0.5.17;
pr

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:19.634090
Transaction Length: 1
Severity: Low
Contract: Core
Function name: systemCoins(uint256)
PC address: 9745
Estimated Gas Usage: 723 - 818
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x34905bf0a490df50680a82a5ab089a963ee11224.sol:472

address[] public systemCoins

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:21.768690
Transaction Length: 1
Severity: Low
Contract: Core
Function name: peaksAddresses(uint256)
PC address: 10602
Estimated Gas Usage: 701 - 796
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x34905bf0a490df50680a82a5ab089a963ee11224.sol:487

address[] public peaksAddresses

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:21.993009
Transaction Length: 1
Severity: High
Contract: Core
Function name: syncSystem()
PC address: 14675
Estimated Gas Usage: 2239 - 37133
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x34905bf0a490df50680a82a5ab089a963ee11224.sol:9

solidity 0.5.17

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0xd29e369886b583319a37eb7d8d420ff031c0373b.sol
Total states:1986
20.541305
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.177599
Transaction Length: 1
Severity: High
Contract: StrategyAddTwoSidesOptimal
Function name: execute(address,uint256,bytes)
PC address: 726
Estimated Gas Usage: 376 - 471
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xd29e369886b583319a37eb7d8d420ff031c0373b.sol:3

*/

// File: openzeppelin-solidity-

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:00.178039
Transaction Length: 0
Severity: Medium
Contract: StrategyAddTwoSidesOptimal
Function name: constructor
PC address: 867
Estimated Gas Usage: 38791 - 235224
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 375
Offset: 664
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop1/0xd29e369886b583319a37eb7d8d420ff031c0373b.sol:619

contract StrategyAddTwoSidesOptimal is Ownable, ReentrancyGuard, Strategy {
    using SafeToken for address;
    using SafeMath for uint256;

    IUniswapV2Factory public factory;
    IUniswapV2Router02 public router;
    address public weth;
    address public goblin;

    /// @dev Create a new add two-side optimal strategy instance.
    /// @param _router The Uniswap router smart contract.
    constructor(IUniswapV2Router02 _router, address _goblin) public {
        factory = IUniswapV2Factory(_router.factory());
        router = _router;
        weth = _router.WETH();
        goblin = _goblin;
    }
    
    /// @dev Throws if called by any account other than the goblin.
    modifier onlyGoblin() {
        require(isGoblin(), "caller is not the goblin");
        _;
    }

    /// @dev Returns true if the caller is the current goblin.
    function isGoblin() public view returns (bool) {
        return msg.sender == goblin;
    }

    /// @dev Compute optimal deposit amount
    /// @param amtA amount of token A desired to deposit
    /// @param amtB amonut of token B desired to deposit
    /// @param resA amount of token A in reserve
    /// @param resB amount of token B in reserve
    function optimalDeposit(
        uint256 amtA,
        uint256 amtB,
        uint256 resA,
        uint256 resB
    ) internal pure returns (uint256 swapAmt, bool isReversed) {
        if (amtA.mul(resB) >= amtB.mul(resA)) {
            swapAmt = _optimalDepositA(amtA, amtB, resA, resB);
            isReversed = false;
        } else {
            swapAmt = _optimalDepositA(amtB, amtA, resB, resA);
            isReversed = true;
        }
    }

    /// @dev Compute optimal deposit amount helper
    /// @param amtA amount of token A desired to deposit
    /// @param amtB amonut of token B desired to deposit
    /// @param resA amount of token A in reserve
    /// @param resB amount of token B in reserve
    function _optimalDepositA(
        uint256 amtA,
        uint256 amtB,
        uint256 resA,
        uint256 resB
    ) internal pure returns (uint256) {
        require(amtA.mul(resB) >= amtB.mul(resA), "Reversed");

        uint256 a = 997;
        uint256 b = uint256(1997).mul(resA);
        uint256 _c = (amtA.mul(resB)).sub(amtB.mul(resA));
        uint256 c = _c.mul(1000).div(amtB.add(resB)).mul(resA);

        uint256 d = a.mul(c).mul(4);
        uint256 e = Math.sqrt(b.mul(b).add(d));

        uint256 numerator = e.sub(b);
        uint256 denominator = a.mul(2);

        return numerator.div(denominator);
    }

    /// @dev Execute worker strategy. Take LP tokens + ETH. Return LP tokens + ETH.
    /// @param user User address
    /// @param data Extra calldata information passed along to this strategy.
    function execute(address user, uint256, /* debt */ bytes calldata data) 
        external         
        payable  
        onlyGoblin       
        nonReentrant 
    {
        // 1. Find out what farming token we are dealing with.
        (address fToken, uint256 fAmount, uint256 minLPAmount) = abi.decode(data, (address, uint256, uint256));
        IUniswapV2Pair lpToken = IUniswapV2Pair(factory.getPair(fToken, weth));        
        // 2. Compute the optimal amount of ETH and fToken to be converted.  
        if (fAmount > 0) {  
            fToken.safeTransferFrom(user, address(this), fAmount);            
        }
        uint256 ethBalance = address(this).balance;
        uint256 swapAmt;
        bool isReversed;
        {
            (uint256 r0, uint256 r1, ) = lpToken.getReserves();
            (uint256 ethReserve, uint256 fReserve) = lpToken.token0() == weth ? (r0, r1) : (r1, r0);
            (swapAmt, isReversed) = optimalDeposit(ethBalance, fToken.myBalance(), ethReserve, fReserve);
        }
        // 3. Convert between ETH and farming tokens
        fToken.safeApprove(address(router), 0);
        fToken.safeApprove(address(router), uint256(-1));
        address[] memory path = new address[](2);
        (path[0], path[1]) = isReversed ? (fToken, weth) : (weth, fToken);
        if (isReversed) {
            router.swapExactTokensForETH(swapAmt, 0, path, address(this), now); // farming tokens to ETH
        } else {
            router.swapExactETHForTokens.value(swapAmt)(0, path, address(this), now); // ETH to farming tokens
        }
        // 4. Mint more LP tokens and return all LP tokens to the sender.
        (,, uint256 moreLPAmount) = router.addLiquidityETH.value(address(this).balance)(
            fToken, fToken.myBalance(), 0, 0, address(this), now
        );
        require(moreLPAmount >= minLPAmount, "insufficient LP tokens received");
        lpToken.transfer(msg.sender, lpToken.balanceOf(address(this)));
    }

    /// @dev Recover ERC20 tokens that were accidentally sent to this smart contract.
    /// @param token The token contract. Can be anything. This contract should not hold ERC20 tokens.
    /// @param to The address to send the tokens to.
    /// @param value The number of tokens to transfer to `to`.
    function recover(address token, address to, uint256 value) external onlyOwner nonReentrant {
        token.safeTransfer(to, value);
    }

    function() external payable {}
}

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0xb30e0b440eb666fa42281ec224f6d6b34f4d031e.sol
Total states:5340
64.009438
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:13.934468
Transaction Length: 1
Severity: Low
Contract: UniswapZAP
Function name: fallback
PC address: 1249
Estimated Gas Usage: 2242 - 3656
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop1/0xb30e0b440eb666fa42281ec224f6d6b34f4d031e.sol:274

_WETH.deposit.value(msg.value)()

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:48.165863
Transaction Length: 2
Severity: Low
Contract: UniswapZAP
Function name: fallback
PC address: 1249
Estimated Gas Usage: 2242 - 3656
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop1/0xb30e0b440eb666fa42281ec224f6d6b34f4d031e.sol:274

_WETH.deposit.value(msg.value)()

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:00:38.405530
Transaction Length: 2
Severity: Medium
Contract: UniswapZAP
Function name: addLiquidityETHOnly(address)
PC address: 1249
Estimated Gas Usage: 1776 - 2860
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../contracts/m_loop/loop1/0xb30e0b440eb666fa42281ec224f6d6b34f4d031e.sol:274

_WETH.deposit.value(msg.value)()

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x1098633D31B6fe64a5964d289F549503E0c7b7F73.sol
Total states:1104
6.687496
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.461363
Transaction Length: 1
Severity: Low
Contract: LoihiStorage
Function name: reserves(uint256)
PC address: 1334
Estimated Gas Usage: 767 - 862
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x1098633D31B6fe64a5964d289F549503E0c7b7F73.sol:186

address[] public reserves

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.868077
Transaction Length: 1
Severity: Low
Contract: LoihiStorage
Function name: numeraires(uint256)
PC address: 1491
Estimated Gas Usage: 700 - 795
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x1098633D31B6fe64a5964d289F549503E0c7b7F73.sol:185

address[] public numeraires

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.364206
Transaction Length: 1
Severity: Low
Contract: LoihiStorage
Function name: derivatives(uint256)
PC address: 1596
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x1098633D31B6fe64a5964d289F549503E0c7b7F73.sol:184

address[] public derivatives

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x1098633D31B6fe64a5964d289F549503E0c7b7F7.sol
Total states:1104
6.574094
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.462427
Transaction Length: 1
Severity: Low
Contract: LoihiStorage
Function name: reserves(uint256)
PC address: 1334
Estimated Gas Usage: 767 - 862
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x1098633D31B6fe64a5964d289F549503E0c7b7F7.sol:186

address[] public reserves

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.875541
Transaction Length: 1
Severity: Low
Contract: LoihiStorage
Function name: numeraires(uint256)
PC address: 1491
Estimated Gas Usage: 700 - 795
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x1098633D31B6fe64a5964d289F549503E0c7b7F7.sol:185

address[] public numeraires

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.370896
Transaction Length: 1
Severity: Low
Contract: LoihiStorage
Function name: derivatives(uint256)
PC address: 1596
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x1098633D31B6fe64a5964d289F549503E0c7b7F7.sol:184

address[] public derivatives

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x10f62065e73b11beb8ec75b7506c18e17f946be5.sol
Total states:426
0.885685
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x7ccf879361a594685cbcad53de5926dc0477876e.sol
Total states:22501
271.454562
==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.052595
Transaction Length: 1
Severity: High
Contract: Periods
Function name: getCurrentPeriod()
PC address: 2579
Estimated Gas Usage: 1102 - 1857
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x7ccf879361a594685cbcad53de5926dc0477876e.sol:349

_total_periods-1

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.062134
Transaction Length: 1
Severity: High
Contract: Subscriptions
Function name: getCurrentPeriod()
PC address: 6527
Estimated Gas Usage: 1147 - 1902
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x7ccf879361a594685cbcad53de5926dc0477876e.sol:349

_total_periods-1

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.304171
Transaction Length: 1
Severity: High
Contract: Cert
Function name: getCurrentPeriod()
PC address: 16501
Estimated Gas Usage: 1236 - 1991
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x7ccf879361a594685cbcad53de5926dc0477876e.sol:349

_total_periods-1

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x72b6aca6158ae91c312445bc7cba6d2a79206c3e.sol
Total states:35189
146.454705
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.124845
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1004
Estimated Gas Usage: 417 - 512
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x72b6aca6158ae91c312445bc7cba6d2a79206c3e.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.511258
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1006
Estimated Gas Usage: 417 - 512
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x72b6aca6158ae91c312445bc7cba6d2a79206c3e.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.837365
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1089
Estimated Gas Usage: 593 - 688
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x72b6aca6158ae91c312445bc7cba6d2a79206c3e.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:23.336987
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1091
Estimated Gas Usage: 593 - 688
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x72b6aca6158ae91c312445bc7cba6d2a79206c3e.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.833740
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1261
Estimated Gas Usage: 462 - 557
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x72b6aca6158ae91c312445bc7cba6d2a79206c3e.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.860793
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1263
Estimated Gas Usage: 462 - 557
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x72b6aca6158ae91c312445bc7cba6d2a79206c3e.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.255061
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1346
Estimated Gas Usage: 638 - 733
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x72b6aca6158ae91c312445bc7cba6d2a79206c3e.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:18.968385
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1348
Estimated Gas Usage: 638 - 733
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x72b6aca6158ae91c312445bc7cba6d2a79206c3e.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.881931
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeBP(uint256)
PC address: 2585
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x72b6aca6158ae91c312445bc7cba6d2a79206c3e.sol:784

uint[] public bonusRangeBP

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.386706
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3691
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x72b6aca6158ae91c312445bc7cba6d2a79206c3e.sol:1226

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:03.967631
Transaction Length: 2
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3691
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x72b6aca6158ae91c312445bc7cba6d2a79206c3e.sol:1226

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:37.827097
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeStart(uint256)
PC address: 6017
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x72b6aca6158ae91c312445bc7cba6d2a79206c3e.sol:783

uint[] public bonusRangeStart

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:13.087955
Transaction Length: 1
Severity: Low
Contract: LidStaking
Function name: stakeHandlers(uint256)
PC address: 6118
Estimated Gas Usage: 790 - 885
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x72b6aca6158ae91c312445bc7cba6d2a79206c3e.sol:961

IStakeHandler[] public stakeHandlers

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.821918
Transaction Length: 2
Severity: High
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6315
Estimated Gas Usage: 1699 - 2124
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x72b6aca6158ae91c312445bc7cba6d2a79206c3e.sol:1111

stakeHandlers.length-1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:08.259357
Transaction Length: 2
Severity: Low
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6326
Estimated Gas Usage: 1709 - 2134
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x72b6aca6158ae91c312445bc7cba6d2a79206c3e.sol:1111

stakeHandlers[stakeHandlers.length-1]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:34.499558
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: calculateRatePerEth(uint256,uint256,uint256)
PC address: 6866
Estimated Gas Usage: 955 - 1050
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x72b6aca6158ae91c312445bc7cba6d2a79206c3e.sol:162

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.300724
Transaction Length: 1
Severity: High
Contract: LidStaking
Function name: findTaxAmount(uint256,uint256)
PC address: 13348
Estimated Gas Usage: 474 - 569
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x72b6aca6158ae91c312445bc7cba6d2a79206c3e.sol:162

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:31.399454
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPoolBPs(uint256)
PC address: 15578
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x72b6aca6158ae91c312445bc7cba6d2a79206c3e.sol:1227

uint[] public tokenPoolBPs

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0xcd9a9783ec3e181836f19bbd3dc37908ea203905.sol
Total states:2324
1.924086
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x6a2c9f1e5a2b7bef07f2af6a83b6fdce1df003a3.sol
Total states:13659
319.467793
==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:03:44.832367
Transaction Length: 2
Severity: Medium
Contract: etherATM
Function name: fallback()
PC address: 125
Estimated Gas Usage: 38111 - 227523
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 565
Offset: 886
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop1/0x6a2c9f1e5a2b7bef07f2af6a83b6fdce1df003a3.sol:14

contract etherATM {

    struct Person {

        address payable etherAddress;

        uint256 amount;

    }



    Person[] public persons;



    uint256 public payoutIdx = 0;

    uint256 public collectedFees;

    uint256 public balance = 0;



    address payable owner;



    modifier onlyowner {

        if (msg.sender == owner) _;

    }



    constructor() public {

        owner = 0xF51a48488be6AbEFFb56d4B1B666C19F2F66Cf1e;

    }



    function enter() public payable {

        if (msg.value < 0.8 ether) {

            msg.sender.transfer(msg.value);

            return;

        }

        uint256 amount;

        if (msg.value > 40 ether) {

            msg.sender.transfer(msg.value - 40 ether);

            amount = 40 ether;

        } else {

            amount = msg.value;

        }



        uint256 idx = persons.length;

        persons.length += 1;

        persons[idx].etherAddress = msg.sender;

        persons[idx].amount = amount;



        if (idx != 0) {

            collectedFees += 0;

            owner.transfer(collectedFees);

            collectedFees = 0;

            balance += amount;

        } else {

            balance += amount;

        }



        while (balance > (persons[payoutIdx].amount / 100) * 180) {

            uint256 transactionAmount = (persons[payoutIdx].amount / 100) * 180;

            persons[payoutIdx].etherAddress.transfer(transactionAmount);

            balance -= transactionAmount;

            payoutIdx += 1;

        }

    }



    function() external {

        enter();

    }



    function setOwner(address payable _owner) internal onlyowner {

        owner = _owner;

    }

}

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:14.102983
Transaction Length: 1
Severity: Low
Contract: etherATM
Function name: persons(uint256)
PC address: 1269
Estimated Gas Usage: 656 - 751
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x6a2c9f1e5a2b7bef07f2af6a83b6fdce1df003a3.sol:26

Person[] public persons

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0xbabf02ff4d487d2cd482582875f12b6b5952a67e.sol
Total states:8157
18.378591
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x3D1BE3fEf769399CcE7e504E85324d622F23Cf85.sol
Total states:2301
2.152027
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.038680
Transaction Length: 0
Severity: High
Contract: ERC20
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x3D1BE3fEf769399CcE7e504E85324d622F23Cf85.sol:12

ns; to access them see `ERC20Detailed`.
 */

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.042974
Transaction Length: 0
Severity: High
Contract: TulipToken
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x3D1BE3fEf769399CcE7e504E85324d622F23Cf85.sol:12

ns; to access them see `ERC20Detailed`.
 */

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0xCCe54a99CB6eF7600e2f17e9A0b161e5300D02Be.sol
Total states:41678
451.94266
==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:00.377883
Transaction Length: 1
Severity: Medium
Contract: VoteProxy
Function name: freeAll()
PC address: 349
Estimated Gas Usage: 9777 - 150153
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 1496
Offset: 1637
Offset: 1944
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop1/0xCCe54a99CB6eF7600e2f17e9A0b161e5300D02Be.sol:852

function freeAll() public auth {
        chief.free(chief.deposits(address(this)));
        gov.push(cold, gov.balanceOf(address(this)));
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.436602
Transaction Length: 1
Severity: High
Contract: DSChiefApprovals
Function name: etch(address[])
PC address: 707
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xCCe54a99CB6eF7600e2f17e9A0b161e5300D02Be.sol:5

sol -- API for the ER

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.250033
Transaction Length: 1
Severity: High
Contract: DSChiefApprovals
Function name: etch(address[])
PC address: 709
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xCCe54a99CB6eF7600e2f17e9A0b161e5300D02Be.sol:3

*/

/// erc20.sol -- API for the ERC

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.925405
Transaction Length: 1
Severity: High
Contract: VoteProxy
Function name: vote(address[])
PC address: 717
Estimated Gas Usage: 384 - 479
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xCCe54a99CB6eF7600e2f17e9A0b161e5300D02Be.sol:5

sol -- API for the ER

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.670221
Transaction Length: 1
Severity: High
Contract: VoteProxy
Function name: vote(address[])
PC address: 719
Estimated Gas Usage: 384 - 479
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xCCe54a99CB6eF7600e2f17e9A0b161e5300D02Be.sol:3

*/

/// erc20.sol -- API for the ERC

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:00.251188
Transaction Length: 0
Severity: Low
Contract: VoteProxy
Function name: constructor
PC address: 1065
Estimated Gas Usage: 33385 - 208626
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop1/0xCCe54a99CB6eF7600e2f17e9A0b161e5300D02Be.sol:833

gov.approve(address(chief), uint256(-1))

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.389930
Transaction Length: 1
Severity: High
Contract: DSChief
Function name: etch(address[])
PC address: 1231
Estimated Gas Usage: 386 - 481
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xCCe54a99CB6eF7600e2f17e9A0b161e5300D02Be.sol:5

sol -- API for the ER

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.453895
Transaction Length: 1
Severity: High
Contract: DSChief
Function name: etch(address[])
PC address: 1233
Estimated Gas Usage: 386 - 481
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xCCe54a99CB6eF7600e2f17e9A0b161e5300D02Be.sol:3

*/

/// erc20.sol -- API for the ERC

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:00.330159
Transaction Length: 0
Severity: Low
Contract: VoteProxy
Function name: constructor
PC address: 1391
Estimated Gas Usage: 35933 - 246491
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop1/0xCCe54a99CB6eF7600e2f17e9A0b161e5300D02Be.sol:834

iou.approve(address(chief), uint256(-1))

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:00.382770
Transaction Length: 0
Severity: Medium
Contract: VoteProxy
Function name: constructor
PC address: 1467
Estimated Gas Usage: 37224 - 284272
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 418
Offset: 676
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop1/0xCCe54a99CB6eF7600e2f17e9A0b161e5300D02Be.sol:819

contract VoteProxy {
    address public cold;
    address public hot;
    DSToken public gov;
    DSToken public iou;
    DSChief public chief;

    constructor(DSChief _chief, address _cold, address _hot) public {
        chief = _chief;
        cold = _cold;
        hot = _hot;

        gov = chief.GOV();
        iou = chief.IOU();
        gov.approve(address(chief), uint256(-1));
        iou.approve(address(chief), uint256(-1));
    }

    modifier auth() {
        require(msg.sender == hot || msg.sender == cold, "Sender must be a Cold or Hot Wallet");
        _;
    }

    function lock(uint256 wad) public auth {
        gov.pull(cold, wad);   // mkr from cold
        chief.lock(wad);       // mkr out, ious in
    }

    function free(uint256 wad) public auth {
        chief.free(wad);       // ious out, mkr in
        gov.push(cold, wad);   // mkr to cold
    }

    function freeAll() public auth {
        chief.free(chief.deposits(address(this)));
        gov.push(cold, gov.balanceOf(address(this)));
    }

    function vote(address[] memory yays) public auth returns (bytes32) {
        return chief.vote(yays);
    }

    function vote(bytes32 slate) public auth {
        chief.vote(slate);
    }
}

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x75a660c394d69cf386d8cc290c2eca39faa72404.sol
Total states:77
3.420527
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0xc7d80e916469d317237c19dd8bbab55757243ee7.sol
Total states:2324
1.817862
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0xcEe014dE7992D0C5C8a10c6769A12C81b69d0063.sol
Total states:5938
23.792014
==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:04.416888
Transaction Length: 1
Severity: Medium
Contract: RewardProxyActions
Function name: claimReward(address)
PC address: 144
Estimated Gas Usage: 5139 - 108825
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 250
Offset: 409
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop1/0xcEe014dE7992D0C5C8a10c6769A12C81b69d0063.sol:1271

function claimReward(address rewarder) public {
        uint256 reward = StakingRewards(rewarder).getReward();
        IERC20(StakingRewards(rewarder).gov()).transfer(msg.sender, reward);
    }

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:00:01.710603
Transaction Length: 1
Severity: Medium
Contract: RewardProxyActions
Function name: claimReward(address)
PC address: 250
Estimated Gas Usage: 1019 - 1395
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../contracts/m_loop/loop1/0xcEe014dE7992D0C5C8a10c6769A12C81b69d0063.sol:1272

StakingRewards(rewarder).getReward()

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:04.274562
Transaction Length: 1
Severity: Low
Contract: RewardProxyActions
Function name: claimReward(address)
PC address: 630
Estimated Gas Usage: 4314 - 73814
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop1/0xcEe014dE7992D0C5C8a10c6769A12C81b69d0063.sol:1273

IERC20(StakingRewards(rewarder).gov()).transfer(msg.sender, reward)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0xb898ceae9b41ff87b2bc22a41e63755604fe4771.sol
Total states:2759
86.661967
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.356317
Transaction Length: 1
Severity: High
Contract: CryptoLott
Function name: playerRegister(string,uint64[])
PC address: 1740
Estimated Gas Usage: 360 - 455
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xb898ceae9b41ff87b2bc22a41e63755604fe4771.sol:3



*/



//pragma solidity >=0.5.0 <

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.108451
Transaction Length: 1
Severity: High
Contract: CryptoLott
Function name: playerRegister(string,uint64[])
PC address: 1889
Estimated Gas Usage: 702 - 3479
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xb898ceae9b41ff87b2bc22a41e63755604fe4771.sol:9

ma solidity >=0.5.0 <

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:25.683655
Transaction Length: 1
Severity: High
Contract: CryptoLott
Function name: playerRegister(string,uint64[])
PC address: 1891
Estimated Gas Usage: 702 - 3479
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xb898ceae9b41ff87b2bc22a41e63755604fe4771.sol:3



*/



//pragma solidity >=0.5.0 <0

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:49.796180
Transaction Length: 1
Severity: High
Contract: CryptoLott
Function name: playerRegister(string,uint64[])
PC address: 5099
Estimated Gas Usage: 2369 - 8674
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xb898ceae9b41ff87b2bc22a41e63755604fe4771.sol:280

minPrice * numbers.length

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0xce868872e3a3479bead233af3eb184a80a2b7a34.sol
Total states:10807
20.740377
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.676452
Transaction Length: 1
Severity: Low
Contract: TokenVaultStorage
Function name: spenders(uint256)
PC address: 611
Estimated Gas Usage: 656 - 751
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xce868872e3a3479bead233af3eb184a80a2b7a34.sol:51

address[] public spenders

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.747711
Transaction Length: 1
Severity: Low
Contract: TokenRegistery
Function name: spenders(uint256)
PC address: 4501
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xce868872e3a3479bead233af3eb184a80a2b7a34.sol:51

address[] public spenders

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.766509
Transaction Length: 1
Severity: Low
Contract: TokenSpenders
Function name: spenders(uint256)
PC address: 4707
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xce868872e3a3479bead233af3eb184a80a2b7a34.sol:51

address[] public spenders

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.922160
Transaction Length: 1
Severity: Low
Contract: TokenVault
Function name: spenders(uint256)
PC address: 7386
Estimated Gas Usage: 767 - 862
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xce868872e3a3479bead233af3eb184a80a2b7a34.sol:51

address[] public spenders

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:00:06.286784
Transaction Length: 1
Severity: Medium
Contract: TokenVault
Function name: depositeToken(address,address,uint256)
PC address: 12549
Estimated Gas Usage: 1262 - 1828
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../contracts/m_loop/loop1/0xce868872e3a3479bead233af3eb184a80a2b7a34.sol:376

_token.transfer(_to, _amount)

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:00:04.013295
Transaction Length: 1
Severity: Medium
Contract: TokenVault
Function name: depositeToken(address,address,uint256)
PC address: 12944
Estimated Gas Usage: 1295 - 1956
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../contracts/m_loop/loop1/0xce868872e3a3479bead233af3eb184a80a2b7a34.sol:379

_token.transferFrom(_from, _to, _amount)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x3FF5c0A14121Ca39211C95f6cEB221b86A90729E.sol
Total states:1695
40.101517
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x47b7b0983bf3b1d8d5b773006809edcb208af191.sol
Total states:1214
239.458008
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.306121
Transaction Length: 1
Severity: High
Contract: PickleVoteProxy
Function name: sqrt(uint256)
PC address: 1141
Estimated Gas Usage: 319 - 414
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x47b7b0983bf3b1d8d5b773006809edcb208af191.sol:84

x + 1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:03:59.072213
Transaction Length: 1
Severity: Low
Contract: PickleVoteProxy
Function name: sqrt(uint256)
PC address: 1181
Estimated Gas Usage: 371 - 466
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x47b7b0983bf3b1d8d5b773006809edcb208af191.sol:88

x / z

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0xaa7b4ee26fa21e2a9e49559779894bec982cd87c.sol
Total states:4414
5.866036
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x514dfb37fd6f9d8f0bf653828aada3fd1d96bf8c.sol
Total states:10402
103.931765
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:02.102221
Transaction Length: 1
Severity: Low
Contract: ETH_2X
Function name: users(uint256)
PC address: 2361
Estimated Gas Usage: 702 - 797
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x514dfb37fd6f9d8f0bf653828aada3fd1d96bf8c.sol:234

User[] public users

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x48c7c3392e1c542641d14516f2bda078e242df79.sol
Total states:18066
32.651652
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.971007
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3244
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x48c7c3392e1c542641d14516f2bda078e242df79.sol:134

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:05.908138
Transaction Length: 1
Severity: Low
Contract: SpringField
Function name: stakers(uint256)
PC address: 8265
Estimated Gas Usage: 788 - 883
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x48c7c3392e1c542641d14516f2bda078e242df79.sol:556

address[] public stakers

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.262388
Transaction Length: 1
Severity: High
Contract: SpringField
Function name: enter(uint256)
PC address: 9939
Estimated Gas Usage: 42946 - 187108
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x48c7c3392e1c542641d14516f2bda078e242df79.sol:134

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x5e602265a972ae4d3ba11f21afbb676b4ed25191.sol
Total states:426
0.795252
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x350c8b96cf7cbb04a4508abff2e995a013875a7e.sol
Total states:55558
244.956225
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.078997
Transaction Length: 0
Severity: High
Contract: MultiSigWallet
Function name: constructor
PC address: 110
Estimated Gas Usage: 257 - 3030
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x350c8b96cf7cbb04a4508abff2e995a013875a7e.sol:26

 *  Events

     */



--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.094339
Transaction Length: 0
Severity: High
Contract: MultiSigWallet
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x350c8b96cf7cbb04a4508abff2e995a013875a7e.sol:20

llet {



    /*

     *  Events

     */

 

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x24d48513eac38449ec7c310a79584f87785f856f.sol
Total states:55558
250.700305
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.077985
Transaction Length: 0
Severity: High
Contract: MultiSigWallet
Function name: constructor
PC address: 110
Estimated Gas Usage: 257 - 3030
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x24d48513eac38449ec7c310a79584f87785f856f.sol:26

 *  Events

     */



--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.093310
Transaction Length: 0
Severity: High
Contract: MultiSigWallet
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x24d48513eac38449ec7c310a79584f87785f856f.sol:20

llet {



    /*

     *  Events

     */

 

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x8fff32c2fc7e5c904ee05374e0b484d7313ebfd0.sol
Total states:10936
29.291267
==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.714179
Transaction Length: 1
Severity: High
Contract: pTUSDVault
Function name: availableWithdraw(address)
PC address: 1869
Estimated Gas Usage: 1088 - 1373
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x8fff32c2fc7e5c904ee05374e0b484d7313ebfd0.sol:640

_rewardCount - 1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.923939
Transaction Length: 1
Severity: Low
Contract: pTUSDVault
Function name: addressIndices(uint256)
PC address: 2343
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x8fff32c2fc7e5c904ee05374e0b484d7313ebfd0.sol:456

address[] public addressIndices

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.977724
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3244
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x8fff32c2fc7e5c904ee05374e0b484d7313ebfd0.sol:214

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.837175
Transaction Length: 1
Severity: High
Contract: pTUSDVault
Function name: deposit(uint256)
PC address: 5691
Estimated Gas Usage: 11933 - 52453
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x8fff32c2fc7e5c904ee05374e0b484d7313ebfd0.sol:252

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0xbeb49ad4e0ef9b3a56cc4a280fa4f5bc41ee3ef9.sol
Total states:17208
75.577681
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:15.134894
Transaction Length: 1
Severity: High
Contract: ProtocolSettings
Function name: getLoanPoolsList(uint256,uint256)
PC address: 15523
Estimated Gas Usage: 621 - 716
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xbeb49ad4e0ef9b3a56cc4a280fa4f5bc41ee3ef9.sol:189

start + count

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0xbf5243de081c697f0f24568ab86eb643d8a0700f.sol
Total states:13378
49.391822
==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.068183
Transaction Length: 0
Severity: Medium
Contract: IBNEST
Function name: constructor
PC address: 256
Estimated Gas Usage: 27547 - 129290
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../contracts/m_loop/loop1/0xbf5243de081c697f0f24568ab86eb643d8a0700f.sol:335

tx.origin

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.889178
Transaction Length: 2
Severity: High
Contract: StandardToken
Function name: increaseApproval(address,uint256)
PC address: 5840
Estimated Gas Usage: 955 - 1430
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xbf5243de081c697f0f24568ab86eb643d8a0700f.sol:119

_a + _b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:17.484435
Transaction Length: 2
Severity: Low
Contract: StandardToken
Function name: increaseApproval(address,uint256)
PC address: 5853
Estimated Gas Usage: 965 - 1440
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xbf5243de081c697f0f24568ab86eb643d8a0700f.sol:120

assert(c >= _a)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.736510
Transaction Length: 2
Severity: High
Contract: IBNEST
Function name: increaseApproval(address,uint256)
PC address: 7665
Estimated Gas Usage: 977 - 1452
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xbf5243de081c697f0f24568ab86eb643d8a0700f.sol:119

_a + _b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:21.024369
Transaction Length: 2
Severity: Low
Contract: IBNEST
Function name: increaseApproval(address,uint256)
PC address: 7678
Estimated Gas Usage: 987 - 1462
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xbf5243de081c697f0f24568ab86eb643d8a0700f.sol:120

assert(c >= _a)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x0ee7ee94903b46e7860c5011e6c52f535439d2f4.sol
Total states:18334
2720.574709
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.647123
Transaction Length: 1
Severity: High
Contract: master
Function name: airdrop(address,address[],uint256[])
PC address: 458
Estimated Gas Usage: 375 - 470
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x0ee7ee94903b46e7860c5011e6c52f535439d2f4.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.709373
Transaction Length: 1
Severity: High
Contract: master
Function name: airdrop(address,address[],uint256[])
PC address: 460
Estimated Gas Usage: 375 - 470
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x0ee7ee94903b46e7860c5011e6c52f535439d2f4.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:16.400783
Transaction Length: 1
Severity: High
Contract: master
Function name: airdrop(address,address[],uint256[])
PC address: 606
Estimated Gas Usage: 717 - 3494
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x0ee7ee94903b46e7860c5011e6c52f535439d2f4.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:27.836726
Transaction Length: 1
Severity: High
Contract: master
Function name: airdrop(address,address[],uint256[])
PC address: 608
Estimated Gas Usage: 717 - 3494
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x0ee7ee94903b46e7860c5011e6c52f535439d2f4.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:14.649485
Transaction Length: 1
Severity: High
Contract: master
Function name: name()
PC address: 790
Estimated Gas Usage: 1914 - 3044
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x0ee7ee94903b46e7860c5011e6c52f535439d2f4.sol:72

function name() public view returns(string memory) {
        return _name;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:11:02.043182
Transaction Length: 1
Severity: High
Contract: master
Function name: symbol()
PC address: 1757
Estimated Gas Usage: 1957 - 3087
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x0ee7ee94903b46e7860c5011e6c52f535439d2f4.sol:76

function symbol() public view returns(string memory) {
        return _symbol;
    }

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:14:06.511521
Transaction Length: 1
Severity: Low
Contract: master
Function name: decreaseAllowance(address,uint256)
PC address: 9553
Estimated Gas Usage: 973 - 1448
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x0ee7ee94903b46e7860c5011e6c52f535439d2f4.sol:44

assert(b <= a)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:27:56.734298
Transaction Length: 2
Severity: Low
Contract: master
Function name: decreaseAllowance(address,uint256)
PC address: 9553
Estimated Gas Usage: 973 - 1448
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x0ee7ee94903b46e7860c5011e6c52f535439d2f4.sol:44

assert(b <= a)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:18:55.359737
Transaction Length: 2
Severity: High
Contract: master
Function name: increaseAllowance(address,uint256)
PC address: 9571
Estimated Gas Usage: 1003 - 1478
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x0ee7ee94903b46e7860c5011e6c52f535439d2f4.sol:49

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:25:42.606937
Transaction Length: 2
Severity: Low
Contract: master
Function name: increaseAllowance(address,uint256)
PC address: 9584
Estimated Gas Usage: 1013 - 1488
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x0ee7ee94903b46e7860c5011e6c52f535439d2f4.sol:50

assert(c >= a)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol
Total states:10775
201.846504
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.244941
Transaction Length: 1
Severity: High
Contract: SLErc20
Function name: getCash()
PC address: 12580
Estimated Gas Usage: 2505 - 37494
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol:5

racts/Comptroll

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.122811
Transaction Length: 1
Severity: High
Contract: SLErc20
Function name: getCash()
PC address: 12583
Estimated Gas Usage: 2505 - 37494
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol:3



// File: contracts/ComptrollerInterface.s

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.700944
Transaction Length: 1
Severity: High
Contract: SLErc20
Function name: getCash()
PC address: 12595
Estimated Gas Usage: 2505 - 37494
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol:2780

token.balanceOf(address(this))

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:02.780273
Transaction Length: 1
Severity: High
Contract: SLErc20
Function name: getCash()
PC address: 28487
Estimated Gas Usage: 2505 - 37494
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol:254

emed
     */
    event 

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x294309E42e1b3863a316BEb52df91B1CcB15eef9.sol
Total states:3078
79.218042
==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.536736
Transaction Length: 1
Severity: High
Contract: Math
Function name: safeSub(uint256,uint256)
PC address: 601
Estimated Gas Usage: 527 - 622
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x294309E42e1b3863a316BEb52df91B1CcB15eef9.sol:110

x - y

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:07.472078
Transaction Length: 1
Severity: Low
Contract: Math
Function name: safeDiv(uint256,uint256)
PC address: 689
Estimated Gas Usage: 542 - 637
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x294309E42e1b3863a316BEb52df91B1CcB15eef9.sol:118

x / y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.966132
Transaction Length: 1
Severity: High
Contract: Math
Function name: rdiv(uint256,uint256)
PC address: 715
Estimated Gas Usage: 600 - 695
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x294309E42e1b3863a316BEb52df91B1CcB15eef9.sol:114

x * y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.782376
Transaction Length: 1
Severity: High
Contract: Math
Function name: safeAdd(uint256,uint256)
PC address: 807
Estimated Gas Usage: 593 - 688
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x294309E42e1b3863a316BEb52df91B1CcB15eef9.sol:106

x + y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:42.543412
Transaction Length: 1
Severity: High
Contract: Tranche
Function name: calcDisburse(address)
PC address: 4275
Estimated Gas Usage: 2548 - 37442
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x294309E42e1b3863a316BEb52df91B1CcB15eef9.sol:5

sing https://da

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:40.501234
Transaction Length: 1
Severity: High
Contract: Tranche
Function name: calcDisburse(address)
PC address: 4278
Estimated Gas Usage: 2548 - 37442
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x294309E42e1b3863a316BEb52df91B1CcB15eef9.sol:3



// Verified using https://dapp.tools

// 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:41.643063
Transaction Length: 1
Severity: High
Contract: Tranche
Function name: calcDisburse(address)
PC address: 4290
Estimated Gas Usage: 2548 - 37442
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x294309E42e1b3863a316BEb52df91B1CcB15eef9.sol:310

epochTicker.lastEpochExecuted()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:46.977929
Transaction Length: 1
Severity: High
Contract: Tranche
Function name: tokenSupply()
PC address: 6164
Estimated Gas Usage: 2253 - 37147
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x294309E42e1b3863a316BEb52df91B1CcB15eef9.sol:5

sing https://da

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:45.518954
Transaction Length: 1
Severity: High
Contract: Tranche
Function name: tokenSupply()
PC address: 6167
Estimated Gas Usage: 2253 - 37147
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x294309E42e1b3863a316BEb52df91B1CcB15eef9.sol:3



// Verified using https://dapp.tools

// 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:46.307569
Transaction Length: 1
Severity: High
Contract: Tranche
Function name: tokenSupply()
PC address: 6179
Estimated Gas Usage: 2253 - 37147
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x294309E42e1b3863a316BEb52df91B1CcB15eef9.sol:257

token.totalSupply()

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:49.688213
Transaction Length: 1
Severity: High
Contract: Tranche
Function name: safeSub(uint256,uint256)
PC address: 8512
Estimated Gas Usage: 595 - 690
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x294309E42e1b3863a316BEb52df91B1CcB15eef9.sol:110

x - y

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:52.356320
Transaction Length: 1
Severity: Low
Contract: Tranche
Function name: safeDiv(uint256,uint256)
PC address: 8642
Estimated Gas Usage: 543 - 638
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x294309E42e1b3863a316BEb52df91B1CcB15eef9.sol:118

x / y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:55.908508
Transaction Length: 1
Severity: High
Contract: Tranche
Function name: balance()
PC address: 8866
Estimated Gas Usage: 2912 - 38231
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x294309E42e1b3863a316BEb52df91B1CcB15eef9.sol:5

sing https://da

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:54.079604
Transaction Length: 1
Severity: High
Contract: Tranche
Function name: balance()
PC address: 8869
Estimated Gas Usage: 2912 - 38231
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x294309E42e1b3863a316BEb52df91B1CcB15eef9.sol:3



// Verified using https://dapp.tools

// 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:54.946275
Transaction Length: 1
Severity: High
Contract: Tranche
Function name: balance()
PC address: 8881
Estimated Gas Usage: 2912 - 38231
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x294309E42e1b3863a316BEb52df91B1CcB15eef9.sol:253

currency.balanceOf(self)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:14.963102
Transaction Length: 1
Severity: High
Contract: Tranche
Function name: rmul(uint256,uint256)
PC address: 9230
Estimated Gas Usage: 636 - 731
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x294309E42e1b3863a316BEb52df91B1CcB15eef9.sol:114

x * y

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:43.411813
Transaction Length: 1
Severity: High
Contract: Tranche
Function name: calcDisburse(address)
PC address: 13393
Estimated Gas Usage: 2548 - 37442
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x294309E42e1b3863a316BEb52df91B1CcB15eef9.sol:81

 == 1); _; }
}

////// 

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x3c2ce84e7b253fb2c52a73b152db5cbe5ec62a6e.sol
Total states:16824
36.290678
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.778437
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3044
Estimated Gas Usage: 989 - 1464
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x3c2ce84e7b253fb2c52a73b152db5cbe5ec62a6e.sol:74

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.879833
Transaction Length: 1
Severity: Low
Contract: SectorOfLand
Function name: lockState(address,uint256)
PC address: 4016
Estimated Gas Usage: 830 - 1115
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x3c2ce84e7b253fb2c52a73b152db5cbe5ec62a6e.sol:636

lockInfo[_holder][_idx]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.552186
Transaction Length: 2
Severity: High
Contract: SectorOfLand
Function name: increaseAllowance(address,uint256)
PC address: 11747
Estimated Gas Usage: 968 - 1443
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x3c2ce84e7b253fb2c52a73b152db5cbe5ec62a6e.sol:74

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x035663085dca095f5b1c94f6ecc5e81415381002.sol
Total states:1021
5.983316
==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:00:05.604943
Transaction Length: 1
Severity: Medium
Contract: ControllerMaster
Function name: save(address)
PC address: 977
Estimated Gas Usage: 5935 - 109716
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../contracts/m_loop/loop1/0x035663085dca095f5b1c94f6ecc5e81415381002.sol:34

IIStrategy(_strategy).withdraw(
                IIStrategy(_strategy).balanceOf()
            )

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x667fF577BF5E5D9d438D7f7C90d11d3f0f00A364.sol
Total states:537
3.53283
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x9548c495afd48593c3c5100e2b41b5f30c021fc8.sol
Total states:1351
220.101247
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.098532
Transaction Length: 1
Severity: High
Contract: BulkSender
Function name: multisendToken(address,address[],uint256[])
PC address: 304
Estimated Gas Usage: 351 - 446
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x9548c495afd48593c3c5100e2b41b5f30c021fc8.sol:9

ma solidity ^0.5.16;


--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.921215
Transaction Length: 1
Severity: High
Contract: BulkSender
Function name: multisendToken(address,address[],uint256[])
PC address: 306
Estimated Gas Usage: 351 - 446
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x9548c495afd48593c3c5100e2b41b5f30c021fc8.sol:3



*/



//pragma solidity ^0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:20.885534
Transaction Length: 1
Severity: High
Contract: BulkSender
Function name: multisendToken(address,address[],uint256[])
PC address: 452
Estimated Gas Usage: 693 - 3470
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x9548c495afd48593c3c5100e2b41b5f30c021fc8.sol:9

ma solidity ^0.5.16;


--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:31.924748
Transaction Length: 1
Severity: High
Contract: BulkSender
Function name: multisendToken(address,address[],uint256[])
PC address: 454
Estimated Gas Usage: 693 - 3470
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x9548c495afd48593c3c5100e2b41b5f30c021fc8.sol:3



*/



//pragma solidity ^0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:51.630106
Transaction Length: 1
Severity: High
Contract: BulkSender
Function name: bulksend(address[],uint256[])
PC address: 636
Estimated Gas Usage: 316 - 411
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x9548c495afd48593c3c5100e2b41b5f30c021fc8.sol:9

ma solidity ^0.5.16;


--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:55.232886
Transaction Length: 1
Severity: High
Contract: BulkSender
Function name: bulksend(address[],uint256[])
PC address: 638
Estimated Gas Usage: 316 - 411
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x9548c495afd48593c3c5100e2b41b5f30c021fc8.sol:3



*/



//pragma solidity ^0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:21.538168
Transaction Length: 1
Severity: High
Contract: BulkSender
Function name: bulksend(address[],uint256[])
PC address: 784
Estimated Gas Usage: 649 - 3426
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x9548c495afd48593c3c5100e2b41b5f30c021fc8.sol:9

ma solidity ^0.5.16;


--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:37.678959
Transaction Length: 1
Severity: High
Contract: BulkSender
Function name: bulksend(address[],uint256[])
PC address: 786
Estimated Gas Usage: 649 - 3426
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x9548c495afd48593c3c5100e2b41b5f30c021fc8.sol:3



*/



//pragma solidity ^0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:20.066525
Transaction Length: 1
Severity: High
Contract: BulkSender
Function name: multisendToken2(address,address[],uint256[])
PC address: 1100
Estimated Gas Usage: 417 - 512
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x9548c495afd48593c3c5100e2b41b5f30c021fc8.sol:9

ma solidity ^0.5.16;


--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:25.601151
Transaction Length: 1
Severity: High
Contract: BulkSender
Function name: multisendToken2(address,address[],uint256[])
PC address: 1102
Estimated Gas Usage: 417 - 512
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x9548c495afd48593c3c5100e2b41b5f30c021fc8.sol:3



*/



//pragma solidity ^0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:54.779352
Transaction Length: 1
Severity: High
Contract: BulkSender
Function name: multisendToken2(address,address[],uint256[])
PC address: 1248
Estimated Gas Usage: 750 - 3527
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x9548c495afd48593c3c5100e2b41b5f30c021fc8.sol:9

ma solidity ^0.5.16;


--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:05.892032
Transaction Length: 1
Severity: High
Contract: BulkSender
Function name: multisendToken2(address,address[],uint256[])
PC address: 1250
Estimated Gas Usage: 750 - 3527
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x9548c495afd48593c3c5100e2b41b5f30c021fc8.sol:3



*/



//pragma solidity ^0.5.16;
p

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x52d829076ddaefb5742c26478551f9f1fc4c14fe.sol
Total states:149
2.706679
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x991f36d2fec39d442ab6ba43f110704414d91b62.sol
Total states:20925
202.092376
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.861696
Transaction Length: 1
Severity: High
Contract: Token
Function name: bulkTransfer(address[],uint256[])
PC address: 735
Estimated Gas Usage: 408 - 503
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x991f36d2fec39d442ab6ba43f110704414d91b62.sol:5

olidity ^0.5.13;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.789452
Transaction Length: 1
Severity: High
Contract: Token
Function name: bulkTransfer(address[],uint256[])
PC address: 737
Estimated Gas Usage: 408 - 503
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x991f36d2fec39d442ab6ba43f110704414d91b62.sol:3

*/

//pragma solidity ^0.5.13;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.257932
Transaction Length: 1
Severity: High
Contract: Token
Function name: bulkTransfer(address[],uint256[])
PC address: 820
Estimated Gas Usage: 584 - 679
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x991f36d2fec39d442ab6ba43f110704414d91b62.sol:5

olidity ^0.5.13;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:23.876260
Transaction Length: 1
Severity: High
Contract: Token
Function name: bulkTransfer(address[],uint256[])
PC address: 822
Estimated Gas Usage: 584 - 679
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x991f36d2fec39d442ab6ba43f110704414d91b62.sol:3

*/

//pragma solidity ^0.5.13;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:42.045819
Transaction Length: 1
Severity: High
Contract: Token
Function name: transferAndCall(address,uint256,bytes)
PC address: 1277
Estimated Gas Usage: 489 - 584
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x991f36d2fec39d442ab6ba43f110704414d91b62.sol:3

*/

//pragma solidity ^0.5.13;
prag

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:41.163213
Transaction Length: 1
Severity: Low
Contract: Token
Function name: unstake(uint256)
PC address: 5728
Estimated Gas Usage: 1353 - 1638
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x991f36d2fec39d442ab6ba43f110704414d91b62.sol:253

(_feeAmount * FLOAT_SCALAR) /
            info.totalStaked

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:18.997950
Transaction Length: 2
Severity: Low
Contract: Token
Function name: unstake(uint256)
PC address: 5728
Estimated Gas Usage: 1353 - 1638
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x991f36d2fec39d442ab6ba43f110704414d91b62.sol:253

(_feeAmount * FLOAT_SCALAR) /
            info.totalStaked

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x57b8ac23309d36b8cde4e2b8d2509bfd5f6daaab.sol
Total states:3610
83.937367
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.009587
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: initialize(uint256,uint256,address[],uint256[],address)
PC address: 787
Estimated Gas Usage: 461 - 556
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x57b8ac23309d36b8cde4e2b8d2509bfd5f6daaab.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.992049
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: initialize(uint256,uint256,address[],uint256[],address)
PC address: 789
Estimated Gas Usage: 461 - 556
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x57b8ac23309d36b8cde4e2b8d2509bfd5f6daaab.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:14.589848
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: initialize(uint256,uint256,address[],uint256[],address)
PC address: 872
Estimated Gas Usage: 637 - 732
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x57b8ac23309d36b8cde4e2b8d2509bfd5f6daaab.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:24.564591
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: initialize(uint256,uint256,address[],uint256[],address)
PC address: 874
Estimated Gas Usage: 637 - 732
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x57b8ac23309d36b8cde4e2b8d2509bfd5f6daaab.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:33.963387
Transaction Length: 1
Severity: Medium
Contract: LidTeamLock
Function name: startRelease()
PC address: 1025
Estimated Gas Usage: 20818 - 150697
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 4521
Offset: 4885
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop1/0x57b8ac23309d36b8cde4e2b8d2509bfd5f6daaab.sol:694

function startRelease() external {

        require(releaseStart == 0, "Has already started.");

        require(address(this).balance != 0, "Must have some ether deposited.");

        require(lidToken.balanceOf(address(this)) != 0, "Must have some lid deposited.");

        startingLid = lidToken.balanceOf(address(this));

        startingEth = address(this).balance;

        releaseStart = now.add(24 hours);

    }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:00.675262
Transaction Length: 2
Severity: Medium
Contract: LidTeamLock
Function name: startRelease()
PC address: 1025
Estimated Gas Usage: 20818 - 150697
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 4521
Offset: 4885
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop1/0x57b8ac23309d36b8cde4e2b8d2509bfd5f6daaab.sol:694

function startRelease() external {

        require(releaseStart == 0, "Has already started.");

        require(address(this).balance != 0, "Must have some ether deposited.");

        require(lidToken.balanceOf(address(this)) != 0, "Must have some lid deposited.");

        startingLid = lidToken.balanceOf(address(this));

        startingEth = address(this).balance;

        releaseStart = now.add(24 hours);

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:35.170202
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 1163
Estimated Gas Usage: 407 - 502
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x57b8ac23309d36b8cde4e2b8d2509bfd5f6daaab.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:38.230859
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 1165
Estimated Gas Usage: 407 - 502
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x57b8ac23309d36b8cde4e2b8d2509bfd5f6daaab.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:43.846537
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 1248
Estimated Gas Usage: 583 - 678
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x57b8ac23309d36b8cde4e2b8d2509bfd5f6daaab.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:57.131282
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 1250
Estimated Gas Usage: 583 - 678
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x57b8ac23309d36b8cde4e2b8d2509bfd5f6daaab.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.773657
Transaction Length: 1
Severity: Low
Contract: LidTeamLock
Function name: teamMemberBPs(uint256)
PC address: 1624
Estimated Gas Usage: 679 - 774
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x57b8ac23309d36b8cde4e2b8d2509bfd5f6daaab.sol:572

uint[] public teamMemberBPs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:20.335989
Transaction Length: 1
Severity: Low
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 5028
Estimated Gas Usage: 1070 - 1165
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x57b8ac23309d36b8cde4e2b8d2509bfd5f6daaab.sol:720

teamMemberAddresses[0]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:20.806090
Transaction Length: 1
Severity: Low
Contract: LidTeamLock
Function name: teamMemberAddresses(uint256)
PC address: 5599
Estimated Gas Usage: 678 - 773
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x57b8ac23309d36b8cde4e2b8d2509bfd5f6daaab.sol:570

address payable[] public teamMemberAddresses

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:32.917451
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: startRelease()
PC address: 6647
Estimated Gas Usage: 15758 - 125637
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x57b8ac23309d36b8cde4e2b8d2509bfd5f6daaab.sol:186

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x021868c129a953a39846e1b9d47b7249407be584.sol
Total states:426
0.90727
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0xc672d13d806de8e23d9965fb5dcae145dfcde92e.sol
Total states:52549
1343.64808
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.854645
Transaction Length: 1
Severity: High
Contract: AccessChecker
Function name: getModuleAddress(string)
PC address: 416
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xc672d13d806de8e23d9965fb5dcae145dfcde92e.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.310575
Transaction Length: 1
Severity: High
Contract: Module
Function name: getModuleAddress(string)
PC address: 416
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xc672d13d806de8e23d9965fb5dcae145dfcde92e.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.353442
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(string,string,uint8)
PC address: 1000
Estimated Gas Usage: 409 - 504
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xc672d13d806de8e23d9965fb5dcae145dfcde92e.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.879370
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(string,string,uint8)
PC address: 1151
Estimated Gas Usage: 751 - 3528
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xc672d13d806de8e23d9965fb5dcae145dfcde92e.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.488706
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[],uint256)
PC address: 2226
Estimated Gas Usage: 429 - 524
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xc672d13d806de8e23d9965fb5dcae145dfcde92e.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.367748
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[],uint256)
PC address: 2228
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xc672d13d806de8e23d9965fb5dcae145dfcde92e.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.812115
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[])
PC address: 2357
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xc672d13d806de8e23d9965fb5dcae145dfcde92e.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:15.085284
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[])
PC address: 2359
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xc672d13d806de8e23d9965fb5dcae145dfcde92e.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.048615
Transaction Length: 1
Severity: High
Contract: InvestingModule
Function name: deposit(address,address[],uint256[])
PC address: 2437
Estimated Gas Usage: 507 - 602
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xc672d13d806de8e23d9965fb5dcae145dfcde92e.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.112171
Transaction Length: 1
Severity: High
Contract: SavingsModule
Function name: deposit(address,address[],uint256[])
PC address: 2437
Estimated Gas Usage: 507 - 602
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xc672d13d806de8e23d9965fb5dcae145dfcde92e.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.362205
Transaction Length: 1
Severity: High
Contract: InvestingModule
Function name: deposit(address,address[],uint256[])
PC address: 2439
Estimated Gas Usage: 507 - 602
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xc672d13d806de8e23d9965fb5dcae145dfcde92e.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.069661
Transaction Length: 1
Severity: High
Contract: SavingsModule
Function name: deposit(address,address[],uint256[])
PC address: 2439
Estimated Gas Usage: 507 - 602
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xc672d13d806de8e23d9965fb5dcae145dfcde92e.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:30.896543
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: getModuleAddress(string)
PC address: 2526
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xc672d13d806de8e23d9965fb5dcae145dfcde92e.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:21.210835
Transaction Length: 1
Severity: High
Contract: InvestingModule
Function name: deposit(address,address[],uint256[])
PC address: 2585
Estimated Gas Usage: 840 - 3617
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xc672d13d806de8e23d9965fb5dcae145dfcde92e.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:22.429527
Transaction Length: 1
Severity: High
Contract: SavingsModule
Function name: deposit(address,address[],uint256[])
PC address: 2585
Estimated Gas Usage: 840 - 3617
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xc672d13d806de8e23d9965fb5dcae145dfcde92e.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:33.798484
Transaction Length: 1
Severity: High
Contract: InvestingModule
Function name: deposit(address,address[],uint256[])
PC address: 2587
Estimated Gas Usage: 840 - 3617
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xc672d13d806de8e23d9965fb5dcae145dfcde92e.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:36.370902
Transaction Length: 1
Severity: High
Contract: SavingsModule
Function name: deposit(address,address[],uint256[])
PC address: 2587
Estimated Gas Usage: 840 - 3617
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xc672d13d806de8e23d9965fb5dcae145dfcde92e.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:25.074379
Transaction Length: 1
Severity: High
Contract: InvestingModule
Function name: getModuleAddress(string)
PC address: 2950
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xc672d13d806de8e23d9965fb5dcae145dfcde92e.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:36.277174
Transaction Length: 1
Severity: High
Contract: SavingsModule
Function name: getModuleAddress(string)
PC address: 2950
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xc672d13d806de8e23d9965fb5dcae145dfcde92e.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:20.901689
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(address,string,string)
PC address: 3179
Estimated Gas Usage: 485 - 580
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xc672d13d806de8e23d9965fb5dcae145dfcde92e.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.161775
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3249
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xc672d13d806de8e23d9965fb5dcae145dfcde92e.sol:34

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:41.322206
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(address,string,string)
PC address: 3330
Estimated Gas Usage: 827 - 3604
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xc672d13d806de8e23d9965fb5dcae145dfcde92e.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.397415
Transaction Length: 1
Severity: Low
Contract: DistributionToken
Function name: distributions(uint256)
PC address: 3405
Estimated Gas Usage: 724 - 819
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xc672d13d806de8e23d9965fb5dcae145dfcde92e.sol:1323

Distribution[] public distributions

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.515495
Transaction Length: 2
Severity: High
Contract: ERC20Burnable
Function name: increaseAllowance(address,uint256)
PC address: 3429
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xc672d13d806de8e23d9965fb5dcae145dfcde92e.sol:34

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.853191
Transaction Length: 2
Severity: High
Contract: ERC20Mintable
Function name: increaseAllowance(address,uint256)
PC address: 4214
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xc672d13d806de8e23d9965fb5dcae145dfcde92e.sol:34

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:36.522394
Transaction Length: 1
Severity: Low
Contract: PoolToken
Function name: distributions(uint256)
PC address: 6392
Estimated Gas Usage: 768 - 863
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xc672d13d806de8e23d9965fb5dcae145dfcde92e.sol:1323

Distribution[] public distributions

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.095645
Transaction Length: 2
Severity: High
Contract: DistributionToken
Function name: increaseAllowance(address,uint256)
PC address: 6759
Estimated Gas Usage: 1104 - 1579
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xc672d13d806de8e23d9965fb5dcae145dfcde92e.sol:34

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:54.186643
Transaction Length: 1
Severity: Low
Contract: InvestingModule
Function name: registeredPoolTokens()
PC address: 14663
Estimated Gas Usage: 1220 - 1691
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xc672d13d806de8e23d9965fb5dcae145dfcde92e.sol:2322

registeredProtocols[i]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:59.082490
Transaction Length: 1
Severity: Low
Contract: SavingsModule
Function name: registeredPoolTokens()
PC address: 14663
Estimated Gas Usage: 1220 - 1691
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xc672d13d806de8e23d9965fb5dcae145dfcde92e.sol:2322

registeredProtocols[i]

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0xeb724ac5d7488a29d6cf76262a1db561f068b2df.sol
Total states:1061
26.757205
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.613429
Transaction Length: 1
Severity: Low
Contract: etherATM
Function name: persons(uint256)
PC address: 753
Estimated Gas Usage: 678 - 773
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xeb724ac5d7488a29d6cf76262a1db561f068b2df.sol:28

Person[] public persons

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x4f20fd6d8ef9ed98a4eaa58a3d6450d7952acab5.sol
Total states:3463
5.032735
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.039209
Transaction Length: 0
Severity: High
Contract: ERC20
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x4f20fd6d8ef9ed98a4eaa58a3d6450d7952acab5.sol:12

ns; to access them see `ERC20Detailed`.
 */

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.041854
Transaction Length: 0
Severity: High
Contract: TulipToken
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x4f20fd6d8ef9ed98a4eaa58a3d6450d7952acab5.sol:12

ns; to access them see `ERC20Detailed`.
 */

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x9c50fee33c9fa86d2a8d178860b08ec5694a6353.sol
Total states:2632
12.054069
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x7729b6278ac7c6c1fcf40d8d505e37488fbc0ec03.sol
Total states:3685
108.712379
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x9236088b5c0718932099eEb3dB07117e8D042471.sol
Total states:120
249.855261
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.286542
Transaction Length: 1
Severity: High
Contract: PublicResolver
Function name: setDNSRecords(bytes32,bytes)
PC address: 561
Estimated Gas Usage: 391 - 486
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x9236088b5c0718932099eEb3dB07117e8D042471.sol:3

*/

/**
 *Submitted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.473185
Transaction Length: 1
Severity: High
Contract: PublicResolver
Function name: setText(bytes32,string,string)
PC address: 692
Estimated Gas Usage: 413 - 508
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x9236088b5c0718932099eEb3dB07117e8D042471.sol:3

*/

/**
 *Submitted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:17.701462
Transaction Length: 1
Severity: High
Contract: PublicResolver
Function name: setText(bytes32,string,string)
PC address: 777
Estimated Gas Usage: 589 - 684
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x9236088b5c0718932099eEb3dB07117e8D042471.sol:3

*/

/**
 *Submitted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:33.116902
Transaction Length: 1
Severity: High
Contract: PublicResolver
Function name: ABI(bytes32,uint256)
PC address: 1099
Estimated Gas Usage: 832 - 2152
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x9236088b5c0718932099eEb3dB07117e8D042471.sol:116

function ABI(bytes32 node, uint256 contentTypes) external view returns (uint256, bytes memory) {
        mapping(uint256=>bytes) storage abiset = abis[node];

        for (uint256 contentType = 1; contentType <= contentTypes; contentType <<= 1) {
            if ((contentType & contentTypes) != 0 && abiset[contentType].length > 0) {
                return (contentType, abiset[contentType]);
            }
        }

        return (0, bytes(""));
    }

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x800933440fe46a5f74cc3f88165bf0727664e0e82.sol
Total states:14395
55.800207
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.968703
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1004
Estimated Gas Usage: 417 - 512
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x800933440fe46a5f74cc3f88165bf0727664e0e82.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.084975
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1006
Estimated Gas Usage: 417 - 512
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x800933440fe46a5f74cc3f88165bf0727664e0e82.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.918019
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1089
Estimated Gas Usage: 593 - 688
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x800933440fe46a5f74cc3f88165bf0727664e0e82.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:21.452089
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1091
Estimated Gas Usage: 593 - 688
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x800933440fe46a5f74cc3f88165bf0727664e0e82.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.787703
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeBP(uint256)
PC address: 2585
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x800933440fe46a5f74cc3f88165bf0727664e0e82.sol:629

uint[] public bonusRangeBP

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:35.218970
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeStart(uint256)
PC address: 6017
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x800933440fe46a5f74cc3f88165bf0727664e0e82.sol:628

uint[] public bonusRangeStart

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:32.463320
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: calculateRatePerEth(uint256,uint256,uint256)
PC address: 6866
Estimated Gas Usage: 955 - 1050
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x800933440fe46a5f74cc3f88165bf0727664e0e82.sol:163

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x2cbe8406380e784ea1a24aeedfbf79788e2721ac.sol
Total states:5340
61.619646
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:14.153439
Transaction Length: 1
Severity: Low
Contract: UniswapZAP
Function name: fallback
PC address: 1249
Estimated Gas Usage: 2242 - 3656
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop1/0x2cbe8406380e784ea1a24aeedfbf79788e2721ac.sol:274

_WETH.deposit.value(msg.value)()

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:45.565981
Transaction Length: 2
Severity: Low
Contract: UniswapZAP
Function name: fallback
PC address: 1249
Estimated Gas Usage: 2242 - 3656
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop1/0x2cbe8406380e784ea1a24aeedfbf79788e2721ac.sol:274

_WETH.deposit.value(msg.value)()

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:00:36.893923
Transaction Length: 2
Severity: Medium
Contract: UniswapZAP
Function name: addLiquidityETHOnly(address)
PC address: 1249
Estimated Gas Usage: 1776 - 2860
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../contracts/m_loop/loop1/0x2cbe8406380e784ea1a24aeedfbf79788e2721ac.sol:274

_WETH.deposit.value(msg.value)()

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/noloop/noloop1/0x532e68fdd932811f35577edc6653f4852ace5c64.sol
Total states:3586
5.989653
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/noloop/noloop1/0x17d5c3ffe2a7c7a1e4567c7501d166b0532c8826.sol
Total states:1389
2.207331
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/noloop/noloop1/0xa56913df48decb9b4815dddf307a31f07ef1f19a.sol
Total states:13173
26.591566
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.056832
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3244
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/noloop/noloop1/0xa56913df48decb9b4815dddf307a31f07ef1f19a.sol:145

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/noloop/noloop1/0x6AC7575A340a3DAb2Ae9ca07c4DbFC6bf8E7E281.sol
Total states:3825
22.15658
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.461426
Transaction Length: 0
Severity: Low
Contract: CRVStrategySwerve
Function name: salvage(address,address,uint256)
PC address: 800
Estimated Gas Usage: 48750 - 234010
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/noloop/noloop1/0x6AC7575A340a3DAb2Ae9ca07c4DbFC6bf8E7E281.sol:1159

function setArbTolerance(uint256 tolerance) external onlyGovernance {
    require(tolerance <= 100, "at most 100");
    arbTolerance = tolerance;
  }

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x52cc59d4a92ca8cb6b82f7741bae005766fc4912.sol
Total states:35615
173.47701
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.052784
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1004
Estimated Gas Usage: 417 - 512
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x52cc59d4a92ca8cb6b82f7741bae005766fc4912.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.892102
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1006
Estimated Gas Usage: 417 - 512
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x52cc59d4a92ca8cb6b82f7741bae005766fc4912.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.129850
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1089
Estimated Gas Usage: 593 - 688
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x52cc59d4a92ca8cb6b82f7741bae005766fc4912.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:23.020051
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1091
Estimated Gas Usage: 593 - 688
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x52cc59d4a92ca8cb6b82f7741bae005766fc4912.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.209176
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1261
Estimated Gas Usage: 462 - 557
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x52cc59d4a92ca8cb6b82f7741bae005766fc4912.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.690081
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1263
Estimated Gas Usage: 462 - 557
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x52cc59d4a92ca8cb6b82f7741bae005766fc4912.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.284874
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1346
Estimated Gas Usage: 638 - 733
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x52cc59d4a92ca8cb6b82f7741bae005766fc4912.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:22.026459
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1348
Estimated Gas Usage: 638 - 733
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x52cc59d4a92ca8cb6b82f7741bae005766fc4912.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.732304
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeBP(uint256)
PC address: 2585
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x52cc59d4a92ca8cb6b82f7741bae005766fc4912.sol:784

uint[] public bonusRangeBP

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.474307
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3707
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x52cc59d4a92ca8cb6b82f7741bae005766fc4912.sol:1226

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:04.096984
Transaction Length: 2
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3707
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x52cc59d4a92ca8cb6b82f7741bae005766fc4912.sol:1226

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:37.211313
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeStart(uint256)
PC address: 6017
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x52cc59d4a92ca8cb6b82f7741bae005766fc4912.sol:783

uint[] public bonusRangeStart

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:32.963709
Transaction Length: 1
Severity: Low
Contract: LidStaking
Function name: stakeHandlers(uint256)
PC address: 6118
Estimated Gas Usage: 790 - 885
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x52cc59d4a92ca8cb6b82f7741bae005766fc4912.sol:961

IStakeHandler[] public stakeHandlers

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.676744
Transaction Length: 2
Severity: High
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6315
Estimated Gas Usage: 1699 - 2124
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x52cc59d4a92ca8cb6b82f7741bae005766fc4912.sol:1111

stakeHandlers.length-1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:07.485110
Transaction Length: 2
Severity: Low
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6326
Estimated Gas Usage: 1709 - 2134
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x52cc59d4a92ca8cb6b82f7741bae005766fc4912.sol:1111

stakeHandlers[stakeHandlers.length-1]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:33.596466
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: calculateRatePerEth(uint256,uint256,uint256)
PC address: 6866
Estimated Gas Usage: 955 - 1050
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x52cc59d4a92ca8cb6b82f7741bae005766fc4912.sol:162

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.732084
Transaction Length: 1
Severity: High
Contract: LidStaking
Function name: findTaxAmount(uint256,uint256)
PC address: 13348
Estimated Gas Usage: 474 - 569
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x52cc59d4a92ca8cb6b82f7741bae005766fc4912.sol:162

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:36.025015
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPoolBPs(uint256)
PC address: 15577
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x52cc59d4a92ca8cb6b82f7741bae005766fc4912.sol:1227

uint[] public tokenPoolBPs

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x64f7099a592c37a4823efeaf75cf3a08cad41b4b.sol
Total states:20457
318.764188
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.085782
Transaction Length: 1
Severity: High
Contract: UNI3d
Function name: transferAndCall(address,uint256,bytes)
PC address: 1121
Estimated Gas Usage: 401 - 496
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x64f7099a592c37a4823efeaf75cf3a08cad41b4b.sol:3

*/

//
// UNI3d
// Uniswap in Three

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:00:23.998024
Transaction Length: 1
Severity: Medium
Contract: UNI3d
Function name: transferAndCall(address,uint256,bytes)
PC address: 3932
Estimated Gas Usage: 27338 - 111980
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../contracts/m_loop/loop2/0x64f7099a592c37a4823efeaf75cf3a08cad41b4b.sol:115

Callable(_to).tokenCallback(msg.sender, _tokens, _data)

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:04:38.850240
Transaction Length: 2
Severity: Medium
Contract: UNI3d
Function name: transferAndCall(address,uint256,bytes)
PC address: 3932
Estimated Gas Usage: 27338 - 111980
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../contracts/m_loop/loop2/0x64f7099a592c37a4823efeaf75cf3a08cad41b4b.sol:115

Callable(_to).tokenCallback(msg.sender, _tokens, _data)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:26.992588
Transaction Length: 1
Severity: Low
Contract: UNI3d
Function name: buy(uint256)
PC address: 5341
Estimated Gas Usage: 1637 - 2628
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x64f7099a592c37a4823efeaf75cf3a08cad41b4b.sol:66

info.uni.transferFrom(msg.sender, address(this), _amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:04:43.849958
Transaction Length: 2
Severity: Low
Contract: UNI3d
Function name: buy(uint256)
PC address: 5341
Estimated Gas Usage: 1634 - 2625
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x64f7099a592c37a4823efeaf75cf3a08cad41b4b.sol:66

info.uni.transferFrom(msg.sender, address(this), _amount)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0xa3128cc400e2878571368ae0a83f588eb838552b.sol
Total states:2220
100.916582
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.297000
Transaction Length: 1
Severity: High
Contract: Balancer_ZapIn_General_V2_6
Function name: ZapIn(address,address,uint256,uint256)
PC address: 9636
Estimated Gas Usage: 10377 - 67601
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xa3128cc400e2878571368ae0a83f588eb838552b.sol:101

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x038c12e33625736d28b55c137f974ef47315eacf.sol
Total states:736
1.429786
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x72FaD6ffF363ec7f39136331416491Aba01EAF4a.sol
Total states:34206
405.828022
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.036340
Transaction Length: 1
Severity: High
Contract: DSChiefApprovals
Function name: etch(address[])
PC address: 707
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x72FaD6ffF363ec7f39136331416491Aba01EAF4a.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.502392
Transaction Length: 1
Severity: High
Contract: DSChiefApprovals
Function name: etch(address[])
PC address: 709
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x72FaD6ffF363ec7f39136331416491Aba01EAF4a.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.548372
Transaction Length: 1
Severity: High
Contract: DSChief
Function name: etch(address[])
PC address: 1231
Estimated Gas Usage: 386 - 481
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x72FaD6ffF363ec7f39136331416491Aba01EAF4a.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.564472
Transaction Length: 1
Severity: High
Contract: DSChief
Function name: etch(address[])
PC address: 1233
Estimated Gas Usage: 386 - 481
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x72FaD6ffF363ec7f39136331416491Aba01EAF4a.sol:3

*/

/**
 *Submitted for verification

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x8c0929691A458f454cf3438Cf2EF8Bc901a72CcA.sol
Total states:5938
25.223624
==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:05.465993
Transaction Length: 1
Severity: Medium
Contract: RewardProxyActions
Function name: claimReward(address)
PC address: 144
Estimated Gas Usage: 5139 - 108825
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 250
Offset: 409
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop2/0x8c0929691A458f454cf3438Cf2EF8Bc901a72CcA.sol:1271

function claimReward(address rewarder) public {
        uint256 reward = StakingRewards(rewarder).getReward();
        IERC20(StakingRewards(rewarder).gov()).transfer(msg.sender, reward);
    }

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:00:02.273457
Transaction Length: 1
Severity: Medium
Contract: RewardProxyActions
Function name: claimReward(address)
PC address: 250
Estimated Gas Usage: 1019 - 1395
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../contracts/m_loop/loop2/0x8c0929691A458f454cf3438Cf2EF8Bc901a72CcA.sol:1272

StakingRewards(rewarder).getReward()

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:05.328111
Transaction Length: 1
Severity: Low
Contract: RewardProxyActions
Function name: claimReward(address)
PC address: 630
Estimated Gas Usage: 4314 - 73814
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x8c0929691A458f454cf3438Cf2EF8Bc901a72CcA.sol:1273

IERC20(StakingRewards(rewarder).gov()).transfer(msg.sender, reward)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x151af502425c1f9cf741314d565a40b729e6b351.sol
Total states:2324
1.848801
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0xb25ba6bb96a8427603df2ead98280cffa0bb1a16.sol
Total states:46543
130.775194
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.510421
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3244
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xb25ba6bb96a8427603df2ead98280cffa0bb1a16.sol:145

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.673171
Transaction Length: 1
Severity: Low
Contract: LockupContract
Function name: lockedAllocationData(address,uint256)
PC address: 3295
Estimated Gas Usage: 821 - 1106
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0xb25ba6bb96a8427603df2ead98280cffa0bb1a16.sol:911

mapping(address => uint256[]) public lockedAllocationData

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.835643
Transaction Length: 2
Severity: High
Contract: LockupContract
Function name: getUnlockedBalance(address,uint256,uint256)
PC address: 3578
Estimated Gas Usage: 2951 - 4089
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xb25ba6bb96a8427603df2ead98280cffa0bb1a16.sol:978

uint256[] memory  addressLockupData = lockedAllocationData[_address]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.135441
Transaction Length: 2
Severity: High
Contract: LockupContract
Function name: getUnlockedBalance(address,uint256,uint256)
PC address: 3603
Estimated Gas Usage: 2951 - 4089
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xb25ba6bb96a8427603df2ead98280cffa0bb1a16.sol:978

uint256[] memory  addressLockupData = lockedAllocationData[_address]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.292397
Transaction Length: 2
Severity: High
Contract: LockupContract
Function name: getUnlockedBalance(address,uint256,uint256)
PC address: 3605
Estimated Gas Usage: 2951 - 4089
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xb25ba6bb96a8427603df2ead98280cffa0bb1a16.sol:978

uint256[] memory  addressLockupData = lockedAllocationData[_address]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.998517
Transaction Length: 2
Severity: High
Contract: ERC20Mintable
Function name: increaseAllowance(address,uint256)
PC address: 3847
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xb25ba6bb96a8427603df2ead98280cffa0bb1a16.sol:145

a + b

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:01.945501
Transaction Length: 1
Severity: Low
Contract: CLIAllocator
Function name: unlockManuallyLockedBalances(address)
PC address: 4785
Estimated Gas Usage: 5545 - 76368
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0xb25ba6bb96a8427603df2ead98280cffa0bb1a16.sol:1265

lockupContract.setManuallyLockedForAddress(
            _holder,
            0
        )

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.500728
Transaction Length: 1
Severity: High
Contract: LockupContract
Function name: allocationLog(address,uint256,uint256,uint256,uint256,uint256)
PC address: 5243
Estimated Gas Usage: 13852 - 89787
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xb25ba6bb96a8427603df2ead98280cffa0bb1a16.sol:2

ification at Ether

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.528251
Transaction Length: 1
Severity: High
Contract: LockupContract
Function name: allocationLog(address,uint256,uint256,uint256,uint256,uint256)
PC address: 5255
Estimated Gas Usage: 24473 - 140693
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xb25ba6bb96a8427603df2ead98280cffa0bb1a16.sol:958

lockedAllocationData[_address].push(_amount)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.621784
Transaction Length: 1
Severity: High
Contract: LockupContract
Function name: allocationLog(address,uint256,uint256,uint256,uint256,uint256)
PC address: 5348
Estimated Gas Usage: 24473 - 140693
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xb25ba6bb96a8427603df2ead98280cffa0bb1a16.sol:2

ification at Ether

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:10.588371
Transaction Length: 1
Severity: High
Contract: LockupContract
Function name: allocationLog(address,uint256,uint256,uint256,uint256,uint256)
PC address: 5360
Estimated Gas Usage: 35094 - 191599
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xb25ba6bb96a8427603df2ead98280cffa0bb1a16.sol:959

lockedAllocationData[_address].push(_lockPeriodInSeconds)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.178912
Transaction Length: 1
Severity: High
Contract: LockupContract
Function name: allocationLog(address,uint256,uint256,uint256,uint256,uint256)
PC address: 5453
Estimated Gas Usage: 35094 - 191599
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xb25ba6bb96a8427603df2ead98280cffa0bb1a16.sol:2

ification at Ether

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.937753
Transaction Length: 2
Severity: High
Contract: CLIReferral
Function name: getReferrerTokens(address,uint256)
PC address: 8130
Estimated Gas Usage: 1789 - 2404
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xb25ba6bb96a8427603df2ead98280cffa0bb1a16.sol:199

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x19c36da0293e6dccd1e5fba44a7a2d7eaff030e82.sol
Total states:2398
19.452457
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x1495304c6c1fab2a75f88983a524ac783c128ea8.sol
Total states:2324
1.802247
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x26653c1a589749396189b6a96b4cdf00b4bb5275.sol
Total states:28040
204.429923
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:05.636815
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3645
Estimated Gas Usage: 1025 - 1500
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x26653c1a589749396189b6a96b4cdf00b4bb5275.sol:56

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:50.039304
Transaction Length: 2
Severity: High
Contract: ERC20Burnable
Function name: increaseAllowance(address,uint256)
PC address: 3818
Estimated Gas Usage: 1025 - 1500
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x26653c1a589749396189b6a96b4cdf00b4bb5275.sol:56

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:36.394213
Transaction Length: 2
Severity: High
Contract: ERC20Pausable
Function name: increaseAllowance(address,uint256)
PC address: 6145
Estimated Gas Usage: 1511 - 2316
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x26653c1a589749396189b6a96b4cdf00b4bb5275.sol:56

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x42cabe2d06cb87a75bc8bef50ee6d95d6fa651c7.sol
Total states:16824
37.39163
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.511151
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3044
Estimated Gas Usage: 989 - 1464
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x42cabe2d06cb87a75bc8bef50ee6d95d6fa651c7.sol:38

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.606127
Transaction Length: 1
Severity: Low
Contract: ZETCAB
Function name: lockState(address,uint256)
PC address: 4016
Estimated Gas Usage: 830 - 1115
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x42cabe2d06cb87a75bc8bef50ee6d95d6fa651c7.sol:319

lockInfo[_holder][_idx]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.763863
Transaction Length: 2
Severity: High
Contract: ZETCAB
Function name: increaseAllowance(address,uint256)
PC address: 11747
Estimated Gas Usage: 968 - 1443
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x42cabe2d06cb87a75bc8bef50ee6d95d6fa651c7.sol:38

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x619108560f0a3a0f2b38840b40e9456070294fa0.sol
Total states:426
0.781937
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0xfd8af7910fcef63d0115474dfb98363c42f23a83.sol
Total states:1308
1.117933
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x408019bf8f9cda619a44cd67725342979ccaa7be.sol
Total states:782
2.610081
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x84078967e5a353fc1c73366887010a8eef8387dc.sol
Total states:35215
177.961848
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.030586
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1004
Estimated Gas Usage: 417 - 512
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x84078967e5a353fc1c73366887010a8eef8387dc.sol:5

olidity>=0.5.1;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.116735
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1006
Estimated Gas Usage: 417 - 512
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x84078967e5a353fc1c73366887010a8eef8387dc.sol:3

*/

//pragma solidity>=0.5.1;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.372558
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1089
Estimated Gas Usage: 593 - 688
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x84078967e5a353fc1c73366887010a8eef8387dc.sol:5

olidity>=0.5.1;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:26.993791
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1091
Estimated Gas Usage: 593 - 688
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x84078967e5a353fc1c73366887010a8eef8387dc.sol:3

*/

//pragma solidity>=0.5.1;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.137480
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1261
Estimated Gas Usage: 462 - 557
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x84078967e5a353fc1c73366887010a8eef8387dc.sol:5

olidity>=0.5.1;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.949112
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1263
Estimated Gas Usage: 462 - 557
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x84078967e5a353fc1c73366887010a8eef8387dc.sol:3

*/

//pragma solidity>=0.5.1;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.505519
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1346
Estimated Gas Usage: 638 - 733
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x84078967e5a353fc1c73366887010a8eef8387dc.sol:5

olidity>=0.5.1;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:21.236488
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1348
Estimated Gas Usage: 638 - 733
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x84078967e5a353fc1c73366887010a8eef8387dc.sol:3

*/

//pragma solidity>=0.5.1;
pragma

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.789561
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeBP(uint256)
PC address: 2585
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x84078967e5a353fc1c73366887010a8eef8387dc.sol:784

uint[] public bonusRangeBP

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.438352
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3691
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x84078967e5a353fc1c73366887010a8eef8387dc.sol:1226

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:03.904028
Transaction Length: 2
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3691
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x84078967e5a353fc1c73366887010a8eef8387dc.sol:1226

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:41.733392
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeStart(uint256)
PC address: 6017
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x84078967e5a353fc1c73366887010a8eef8387dc.sol:783

uint[] public bonusRangeStart

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:35.334678
Transaction Length: 1
Severity: Low
Contract: LidStaking
Function name: stakeHandlers(uint256)
PC address: 6118
Estimated Gas Usage: 790 - 885
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x84078967e5a353fc1c73366887010a8eef8387dc.sol:961

IStakeHandler[] public stakeHandlers

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.685561
Transaction Length: 2
Severity: High
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6315
Estimated Gas Usage: 1699 - 2124
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x84078967e5a353fc1c73366887010a8eef8387dc.sol:1111

stakeHandlers.length-1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:08.434037
Transaction Length: 2
Severity: Low
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6326
Estimated Gas Usage: 1709 - 2134
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x84078967e5a353fc1c73366887010a8eef8387dc.sol:1111

stakeHandlers[stakeHandlers.length-1]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:37.713517
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: calculateRatePerEth(uint256,uint256,uint256)
PC address: 6866
Estimated Gas Usage: 955 - 1050
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x84078967e5a353fc1c73366887010a8eef8387dc.sol:162

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.480335
Transaction Length: 1
Severity: High
Contract: LidStaking
Function name: findTaxAmount(uint256,uint256)
PC address: 13348
Estimated Gas Usage: 474 - 569
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x84078967e5a353fc1c73366887010a8eef8387dc.sol:162

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:33.223636
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPoolBPs(uint256)
PC address: 15437
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x84078967e5a353fc1c73366887010a8eef8387dc.sol:1227

uint[] public tokenPoolBPs

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x5921e451931cb279032fbaaf9fd8282f95a0c201.sol
Total states:35615
156.104075
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.197480
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1004
Estimated Gas Usage: 417 - 512
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x5921e451931cb279032fbaaf9fd8282f95a0c201.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.528639
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1006
Estimated Gas Usage: 417 - 512
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x5921e451931cb279032fbaaf9fd8282f95a0c201.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.431357
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1089
Estimated Gas Usage: 593 - 688
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x5921e451931cb279032fbaaf9fd8282f95a0c201.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:22.290969
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1091
Estimated Gas Usage: 593 - 688
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x5921e451931cb279032fbaaf9fd8282f95a0c201.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.120686
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1261
Estimated Gas Usage: 462 - 557
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x5921e451931cb279032fbaaf9fd8282f95a0c201.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.258023
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1263
Estimated Gas Usage: 462 - 557
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x5921e451931cb279032fbaaf9fd8282f95a0c201.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.585533
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1346
Estimated Gas Usage: 638 - 733
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x5921e451931cb279032fbaaf9fd8282f95a0c201.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:19.088681
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1348
Estimated Gas Usage: 638 - 733
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x5921e451931cb279032fbaaf9fd8282f95a0c201.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.833484
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeBP(uint256)
PC address: 2585
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x5921e451931cb279032fbaaf9fd8282f95a0c201.sol:784

uint[] public bonusRangeBP

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.466745
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3707
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x5921e451931cb279032fbaaf9fd8282f95a0c201.sol:1226

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:04.104900
Transaction Length: 2
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3707
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x5921e451931cb279032fbaaf9fd8282f95a0c201.sol:1226

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:37.183149
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeStart(uint256)
PC address: 6017
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x5921e451931cb279032fbaaf9fd8282f95a0c201.sol:783

uint[] public bonusRangeStart

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:20.412038
Transaction Length: 1
Severity: Low
Contract: LidStaking
Function name: stakeHandlers(uint256)
PC address: 6118
Estimated Gas Usage: 790 - 885
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x5921e451931cb279032fbaaf9fd8282f95a0c201.sol:961

IStakeHandler[] public stakeHandlers

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.725315
Transaction Length: 2
Severity: High
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6315
Estimated Gas Usage: 1699 - 2124
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x5921e451931cb279032fbaaf9fd8282f95a0c201.sol:1111

stakeHandlers.length-1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:08.848877
Transaction Length: 2
Severity: Low
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6326
Estimated Gas Usage: 1709 - 2134
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x5921e451931cb279032fbaaf9fd8282f95a0c201.sol:1111

stakeHandlers[stakeHandlers.length-1]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:33.622459
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: calculateRatePerEth(uint256,uint256,uint256)
PC address: 6866
Estimated Gas Usage: 955 - 1050
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x5921e451931cb279032fbaaf9fd8282f95a0c201.sol:162

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.531026
Transaction Length: 1
Severity: High
Contract: LidStaking
Function name: findTaxAmount(uint256,uint256)
PC address: 13348
Estimated Gas Usage: 474 - 569
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x5921e451931cb279032fbaaf9fd8282f95a0c201.sol:162

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:31.294068
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPoolBPs(uint256)
PC address: 15577
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x5921e451931cb279032fbaaf9fd8282f95a0c201.sol:1227

uint[] public tokenPoolBPs

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x81ed79fa03a8194e62f415ec47e23ac89076f1bc.sol
Total states:23598
70.866419
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.097681
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3244
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x81ed79fa03a8194e62f415ec47e23ac89076f1bc.sol:121

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.161589
Transaction Length: 1
Severity: High
Contract: CreamUSD
Function name: swapExactAmountOut(address,address,uint256,uint256,uint256)
PC address: 11869
Estimated Gas Usage: 2280 - 37172
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x81ed79fa03a8194e62f415ec47e23ac89076f1bc.sol:140

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.805197
Transaction Length: 2
Severity: High
Contract: CreamUSD
Function name: increaseAllowance(address,uint256)
PC address: 12798
Estimated Gas Usage: 1037 - 1512
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x81ed79fa03a8194e62f415ec47e23ac89076f1bc.sol:121

a + b

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:09.906736
Transaction Length: 1
Severity: High
Contract: CreamUSD
Function name: getInExactOut(address,int256,int256,int256)
PC address: 14651
Estimated Gas Usage: 538 - 633
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x81ed79fa03a8194e62f415ec47e23ac89076f1bc.sol:229

a - b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:22.376176
Transaction Length: 1
Severity: High
Contract: CreamUSD
Function name: getOutExactIn(address,int256,int256,int256)
PC address: 15945
Estimated Gas Usage: 583 - 678
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x81ed79fa03a8194e62f415ec47e23ac89076f1bc.sol:235

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.091222
Transaction Length: 1
Severity: High
Contract: CreamUSD
Function name: getInExactOut(address,int256,int256,int256)
PC address: 17070
Estimated Gas Usage: 788 - 883
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x81ed79fa03a8194e62f415ec47e23ac89076f1bc.sol:215

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x43a041ee9ac82f4e375a67f67685b750c0c7c9af.sol
Total states:3225
104.619314
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0xAD6E6594e2E9Cca9326dd80BFFD7BaEf4e2a10F1.sol
Total states:18028
257.158005
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:03:57.498499
Transaction Length: 1
Severity: Low
Contract: MainnetUsdcToUsdcAssimilator
Function name: outputRawAndGetBalance(address,uint256)
PC address: 2028
Estimated Gas Usage: 1179 - 1745
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0xAD6E6594e2E9Cca9326dd80BFFD7BaEf4e2a10F1.sol:883

usdc.transfer(_dst, _amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:03:59.088123
Transaction Length: 1
Severity: Low
Contract: MainnetUsdcToUsdcAssimilator
Function name: intakeRawAndGetBalance(uint256)
PC address: 3172
Estimated Gas Usage: 1131 - 1792
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0xAD6E6594e2E9Cca9326dd80BFFD7BaEf4e2a10F1.sol:849

usdc.transferFrom(msg.sender, address(this), _amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:04:01.022556
Transaction Length: 1
Severity: Low
Contract: MainnetUsdcToUsdcAssimilator
Function name: outputRaw(address,uint256)
PC address: 4094
Estimated Gas Usage: 1169 - 1735
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0xAD6E6594e2E9Cca9326dd80BFFD7BaEf4e2a10F1.sol:897

usdc.transfer(_dst, _amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:04:13.175812
Transaction Length: 1
Severity: Low
Contract: MainnetUsdcToUsdcAssimilator
Function name: intakeRaw(uint256)
PC address: 4572
Estimated Gas Usage: 1210 - 1871
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0xAD6E6594e2E9Cca9326dd80BFFD7BaEf4e2a10F1.sol:863

usdc.transferFrom(msg.sender, address(this), _amount)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0xe08fdd8d4e6526750aa541de3be4e815372b82af.sol
Total states:563
23.978266
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.333864
Transaction Length: 1
Severity: High
Contract: DropToken
Function name: dropTKN(address[],address,uint256,bytes32)
PC address: 158
Estimated Gas Usage: 296 - 391
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xe08fdd8d4e6526750aa541de3be4e815372b82af.sol:5

olidity 0.5.17;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.766677
Transaction Length: 1
Severity: High
Contract: DropToken
Function name: dropTKN(address[],address,uint256,bytes32)
PC address: 160
Estimated Gas Usage: 296 - 391
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xe08fdd8d4e6526750aa541de3be4e815372b82af.sol:3

*/

//pragma solidity 0.5.17;
pragma

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:23.868131
Transaction Length: 1
Severity: Low
Contract: DropToken
Function name: dropTKN(address[],address,uint256,bytes32)
PC address: 270
Estimated Gas Usage: 486 - 581
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0xe08fdd8d4e6526750aa541de3be4e815372b82af.sol:17

amount / recipients.length

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:00:21.374110
Transaction Length: 1
Severity: Medium
Contract: DropToken
Function name: dropTKN(address[],address,uint256,bytes32)
PC address: 551
Estimated Gas Usage: 3349 - 38762
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../contracts/m_loop/loop2/0xe08fdd8d4e6526750aa541de3be4e815372b82af.sol:19

token.transferFrom(msg.sender, recipients[i], amounts)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x0b7df9dbcf0f29f074296adbe1266ffab53d8111.sol
Total states:745
1.483652
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x6ee4d72d3d17a05dd7f0449e095670119b7d5829.sol
Total states:149
2.721375
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0xd1c8f6057585af75df2e386dabefd11cbf32906e.sol
Total states:41276
116.236713
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.509931
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3244
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xd1c8f6057585af75df2e386dabefd11cbf32906e.sol:145

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.467224
Transaction Length: 1
Severity: Low
Contract: LockupContract
Function name: lockedAllocationData(address,uint256)
PC address: 3295
Estimated Gas Usage: 821 - 1106
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0xd1c8f6057585af75df2e386dabefd11cbf32906e.sol:1025

mapping(address => uint256[]) public lockedAllocationData

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.160907
Transaction Length: 2
Severity: High
Contract: LockupContract
Function name: getUnlockedBalance(address,uint256,uint256)
PC address: 3578
Estimated Gas Usage: 2951 - 4089
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xd1c8f6057585af75df2e386dabefd11cbf32906e.sol:1092

uint256[] memory  addressLockupData = lockedAllocationData[_address]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.399120
Transaction Length: 2
Severity: High
Contract: LockupContract
Function name: getUnlockedBalance(address,uint256,uint256)
PC address: 3603
Estimated Gas Usage: 2951 - 4089
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xd1c8f6057585af75df2e386dabefd11cbf32906e.sol:1092

uint256[] memory  addressLockupData = lockedAllocationData[_address]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.465919
Transaction Length: 2
Severity: High
Contract: LockupContract
Function name: getUnlockedBalance(address,uint256,uint256)
PC address: 3605
Estimated Gas Usage: 2951 - 4089
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xd1c8f6057585af75df2e386dabefd11cbf32906e.sol:1092

uint256[] memory  addressLockupData = lockedAllocationData[_address]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.638269
Transaction Length: 2
Severity: High
Contract: ERC20Mintable
Function name: increaseAllowance(address,uint256)
PC address: 3847
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xd1c8f6057585af75df2e386dabefd11cbf32906e.sol:145

a + b

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:01.814938
Transaction Length: 1
Severity: Low
Contract: CLIAllocator
Function name: unlockManuallyLockedBalances(address)
PC address: 4785
Estimated Gas Usage: 5545 - 76368
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0xd1c8f6057585af75df2e386dabefd11cbf32906e.sol:1208

lockupContract.setManuallyLockedForAddress(
            _holder,
            0
        )

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.357739
Transaction Length: 1
Severity: High
Contract: LockupContract
Function name: allocationLog(address,uint256,uint256,uint256,uint256,uint256)
PC address: 5243
Estimated Gas Usage: 13852 - 89787
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xd1c8f6057585af75df2e386dabefd11cbf32906e.sol:2

ification at Ether

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.295922
Transaction Length: 1
Severity: High
Contract: LockupContract
Function name: allocationLog(address,uint256,uint256,uint256,uint256,uint256)
PC address: 5255
Estimated Gas Usage: 24473 - 140693
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xd1c8f6057585af75df2e386dabefd11cbf32906e.sol:1072

lockedAllocationData[_address].push(_amount)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.184996
Transaction Length: 1
Severity: High
Contract: LockupContract
Function name: allocationLog(address,uint256,uint256,uint256,uint256,uint256)
PC address: 5348
Estimated Gas Usage: 24473 - 140693
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xd1c8f6057585af75df2e386dabefd11cbf32906e.sol:2

ification at Ether

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:10.693862
Transaction Length: 1
Severity: High
Contract: LockupContract
Function name: allocationLog(address,uint256,uint256,uint256,uint256,uint256)
PC address: 5360
Estimated Gas Usage: 35094 - 191599
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xd1c8f6057585af75df2e386dabefd11cbf32906e.sol:1073

lockedAllocationData[_address].push(_lockPeriodInSeconds)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.721323
Transaction Length: 1
Severity: High
Contract: LockupContract
Function name: allocationLog(address,uint256,uint256,uint256,uint256,uint256)
PC address: 5453
Estimated Gas Usage: 35094 - 191599
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xd1c8f6057585af75df2e386dabefd11cbf32906e.sol:2

ification at Ether

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x1542e790a742333ea6a2f171c5d07a2e7794eef4.sol
Total states:854
9.302747
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x46ee0eefe6d8d7bb757d3fca2713a18001fb71fe.sol
Total states:240
21.674131
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0xe6179bb571d2d69837be731da88c76e377ec4738.sol
Total states:594
1.514925
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0xd9ba52162a5eea7c82521b96eb2103deeb67a7ac.sol
Total states:1308
0.992156
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x404789fd049f56bd9924419f12afba1b2573fc20.sol
Total states:2126
21.020315
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.530295
Transaction Length: 1
Severity: High
Contract: KYF
Function name: removeMultiple(address[])
PC address: 927
Estimated Gas Usage: 428 - 523
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x404789fd049f56bd9924419f12afba1b2573fc20.sol:7

    |  __    / ____|


--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.412277
Transaction Length: 1
Severity: High
Contract: KYF
Function name: removeMultiple(address[])
PC address: 929
Estimated Gas Usage: 428 - 523
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x404789fd049f56bd9924419f12afba1b2573fc20.sol:3

*/

/*

    /     |  __    / ____|
 

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0xc2999a44d3bb440c17fc82fe499fdd581352a8d7.sol
Total states:35050
168.574831
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.179038
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1004
Estimated Gas Usage: 417 - 512
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xc2999a44d3bb440c17fc82fe499fdd581352a8d7.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.481226
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1006
Estimated Gas Usage: 417 - 512
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xc2999a44d3bb440c17fc82fe499fdd581352a8d7.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.416247
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1089
Estimated Gas Usage: 593 - 688
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xc2999a44d3bb440c17fc82fe499fdd581352a8d7.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:18.561812
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1091
Estimated Gas Usage: 593 - 688
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xc2999a44d3bb440c17fc82fe499fdd581352a8d7.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.333346
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1250
Estimated Gas Usage: 462 - 557
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xc2999a44d3bb440c17fc82fe499fdd581352a8d7.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.356553
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1252
Estimated Gas Usage: 462 - 557
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xc2999a44d3bb440c17fc82fe499fdd581352a8d7.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.855962
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1335
Estimated Gas Usage: 638 - 733
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xc2999a44d3bb440c17fc82fe499fdd581352a8d7.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:19.665409
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1337
Estimated Gas Usage: 638 - 733
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xc2999a44d3bb440c17fc82fe499fdd581352a8d7.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.819246
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeBP(uint256)
PC address: 2585
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0xc2999a44d3bb440c17fc82fe499fdd581352a8d7.sol:784

uint[] public bonusRangeBP

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.583767
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3621
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0xc2999a44d3bb440c17fc82fe499fdd581352a8d7.sol:1226

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:04.099047
Transaction Length: 2
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3621
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0xc2999a44d3bb440c17fc82fe499fdd581352a8d7.sol:1226

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:32.675075
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeStart(uint256)
PC address: 6017
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0xc2999a44d3bb440c17fc82fe499fdd581352a8d7.sol:783

uint[] public bonusRangeStart

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:35.863143
Transaction Length: 1
Severity: Low
Contract: LidStaking
Function name: stakeHandlers(uint256)
PC address: 6118
Estimated Gas Usage: 790 - 885
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0xc2999a44d3bb440c17fc82fe499fdd581352a8d7.sol:961

IStakeHandler[] public stakeHandlers

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.776663
Transaction Length: 2
Severity: High
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6315
Estimated Gas Usage: 1699 - 2124
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xc2999a44d3bb440c17fc82fe499fdd581352a8d7.sol:1111

stakeHandlers.length-1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:08.499471
Transaction Length: 2
Severity: Low
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6326
Estimated Gas Usage: 1709 - 2134
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0xc2999a44d3bb440c17fc82fe499fdd581352a8d7.sol:1111

stakeHandlers[stakeHandlers.length-1]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:28.620886
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: calculateRatePerEth(uint256,uint256,uint256)
PC address: 6866
Estimated Gas Usage: 955 - 1050
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xc2999a44d3bb440c17fc82fe499fdd581352a8d7.sol:162

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.319370
Transaction Length: 1
Severity: High
Contract: LidStaking
Function name: findTaxAmount(uint256,uint256)
PC address: 13348
Estimated Gas Usage: 474 - 569
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xc2999a44d3bb440c17fc82fe499fdd581352a8d7.sol:162

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:33.166315
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPoolBPs(uint256)
PC address: 15373
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0xc2999a44d3bb440c17fc82fe499fdd581352a8d7.sol:1227

uint[] public tokenPoolBPs

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x9447dd070e8d4896073e8e4fba9f013142b78f57.sol
Total states:2023
5.36694
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0xd4260e4bfb354259f5e30279cb0d7f784ea5f37a.sol
Total states:822
10.258252
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0xf8345037Da48e90A68A9590C4bBAad6fbbd62661.sol
Total states:60
1.113794
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.132928
Transaction Length: 0
Severity: High
Contract: Msign
Function name: constructor
PC address: 120
Estimated Gas Usage: 287 - 3153
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xf8345037Da48e90A68A9590C4bBAad6fbbd62661.sol:11

ic Set type with
    

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0xa2cdf1944c40f2511cb3fdd975b45ff0d217296c.sol
Total states:1880
96.452396
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.598574
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShip(address[])
PC address: 360
Estimated Gas Usage: 342 - 437
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xa2cdf1944c40f2511cb3fdd975b45ff0d217296c.sol:5

penzeppelin-solidity/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.695752
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShip(address[])
PC address: 362
Estimated Gas Usage: 342 - 437
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xa2cdf1944c40f2511cb3fdd975b45ff0d217296c.sol:3

*/

// File: openzeppelin-solidity/c

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:39.547330
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShipWithHowMany(address[],uint256)
PC address: 776
Estimated Gas Usage: 341 - 436
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xa2cdf1944c40f2511cb3fdd975b45ff0d217296c.sol:5

penzeppelin-solidity/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:42.435371
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShipWithHowMany(address[],uint256)
PC address: 778
Estimated Gas Usage: 341 - 436
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xa2cdf1944c40f2511cb3fdd975b45ff0d217296c.sol:3

*/

// File: openzeppelin-solidity/c

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:31.720657
Transaction Length: 1
Severity: Low
Contract: BeneficiaryOperations
Function name: allOperations(uint256)
PC address: 1715
Estimated Gas Usage: 701 - 796
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0xa2cdf1944c40f2511cb3fdd975b45ff0d217296c.sol:386

bytes32[] public allOperations

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:31.159883
Transaction Length: 1
Severity: Low
Contract: BeneficiaryOperations
Function name: beneficiaries(uint256)
PC address: 4636
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0xa2cdf1944c40f2511cb3fdd975b45ff0d217296c.sol:385

address[] public beneficiaries

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x15c41b6e5541d4c31334b5339975a163d1ec27b5.sol
Total states:843
32.433456
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.096027
Transaction Length: 0
Severity: High
Contract: ETHDropOpenAdd
Function name: constructor
PC address: 101
Estimated Gas Usage: 263 - 3129
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x15c41b6e5541d4c31334b5339975a163d1ec27b5.sol:28

 {

        bool exis

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.432613
Transaction Length: 1
Severity: High
Contract: ETHDropFactory
Function name: newETHDropOpenAdd(uint256,address[])
PC address: 166
Estimated Gas Usage: 299 - 394
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x15c41b6e5541d4c31334b5339975a163d1ec27b5.sol:9

ma solidity 0.5.14;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.584424
Transaction Length: 1
Severity: High
Contract: ETHDropFactory
Function name: newETHDropOpenAdd(uint256,address[])
PC address: 168
Estimated Gas Usage: 299 - 394
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x15c41b6e5541d4c31334b5339975a163d1ec27b5.sol:3



*/



//pragma solidity 0.5.14;
pr

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.167696
Transaction Length: 0
Severity: Low
Contract: ETHDropOpenAdd
Function name: constructor
PC address: 701
Estimated Gas Usage: 5784 - 28743
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x15c41b6e5541d4c31334b5339975a163d1ec27b5.sol:84

members[0]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:31.736135
Transaction Length: 1
Severity: Low
Contract: ETHDropFactory
Function name: drops(uint256)
PC address: 878
Estimated Gas Usage: 656 - 751
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x15c41b6e5541d4c31334b5339975a163d1ec27b5.sol:236

address[] public drops

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x9f152426bc5b9157dbfb5cf9354dd4e79df21496.sol
Total states:2324
2.238683
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x49d6f49c854279633c78905371e5e17e9abd65e7.sol
Total states:723
5.836134
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0xbad9103654c05517cc86673c20c77be2781be196.sol
Total states:822
10.373068
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x95a93641b9b8cc91ba7fa729d5e099d677129080.sol
Total states:2324
1.870897
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x7679a6dba4435cad1f876fc50e0e09a93afa2d08.sol
Total states:594
1.500052
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0xD2f7D8A940324F12DFe623D5529b077E353314d3.sol
Total states:11221
61.102942
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.851898
Transaction Length: 1
Severity: High
Contract: Staking
Function name: stake(uint256,bytes)
PC address: 668
Estimated Gas Usage: 414 - 509
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xD2f7D8A940324F12DFe623D5529b077E353314d3.sol:3

*/

// File: contracts/lib/os/ERC20

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.317485
Transaction Length: 1
Severity: High
Contract: Staking
Function name: stakeFor(address,uint256,bytes)
PC address: 831
Estimated Gas Usage: 469 - 564
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xD2f7D8A940324F12DFe623D5529b077E353314d3.sol:3

*/

// File: contracts/lib/os/ERC20

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.223646
Transaction Length: 1
Severity: High
Contract: Staking
Function name: allowManagerAndLock(uint256,address,uint256,bytes)
PC address: 1004
Estimated Gas Usage: 518 - 613
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xD2f7D8A940324F12DFe623D5529b077E353314d3.sol:3

*/

// File: contracts/lib/os/ERC20

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:18.045385
Transaction Length: 1
Severity: High
Contract: Staking
Function name: receiveApproval(address,uint256,address,bytes)
PC address: 2656
Estimated Gas Usage: 456 - 551
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xD2f7D8A940324F12DFe623D5529b077E353314d3.sol:3

*/

// File: contracts/lib/os/ERC20

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:23.371532
Transaction Length: 1
Severity: High
Contract: Staking
Function name: allowManager(address,uint256,bytes)
PC address: 2975
Estimated Gas Usage: 489 - 584
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xD2f7D8A940324F12DFe623D5529b077E353314d3.sol:3

*/

// File: contracts/lib/os/ERC20

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:27.312136
Transaction Length: 1
Severity: High
Contract: Staking
Function name: unstake(uint256,bytes)
PC address: 3174
Estimated Gas Usage: 412 - 507
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xD2f7D8A940324F12DFe623D5529b077E353314d3.sol:3

*/

// File: contracts/lib/os/ERC20

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x0c073c92e7684031cfc297b83ecc33619e864d18.sol
Total states:782
2.458907
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x26572bf2620108cb5006987e6348c07dc4e14a0f.sol
Total states:272
74.389946
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.065400
Transaction Length: 0
Severity: High
Contract: VaultProRata
Function name: constructor
PC address: 408
Estimated Gas Usage: 82423 - 403508
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x26572bf2620108cb5006987e6348c07dc4e14a0f.sol:34

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.690797
Transaction Length: 0
Severity: Low
Contract: VaultProRata
Function name: constructor
PC address: 422
Estimated Gas Usage: 82433 - 403518
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x26572bf2620108cb5006987e6348c07dc4e14a0f.sol:35

assert(c >= a)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0xBA940b56CF4D6fd48DB5C574145618F1116470392.sol
Total states:1387
1.34506
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.601659
Transaction Length: 1
Severity: Low
Contract: KYFToken
Function name: kyfInstancesArray(uint256)
PC address: 1788
Estimated Gas Usage: 723 - 818
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0xBA940b56CF4D6fd48DB5C574145618F1116470392.sol:78

address[] public kyfInstancesArray

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0xa0a9c17def31a03908bc3da719d0ba02d375d923.sol
Total states:1759
6.346106
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x8496b5ce2851b1da7833e61b84043890b4b94bfa.sol
Total states:2097
64.734285
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.672336
Transaction Length: 1
Severity: High
Contract: SecretSanta
Function name: sendPrize(address[],uint256[])
PC address: 608
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x8496b5ce2851b1da7833e61b84043890b4b94bfa.sol:9

e: @openzeppelin/cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.365640
Transaction Length: 1
Severity: High
Contract: SecretSanta
Function name: sendPrize(address[],uint256[])
PC address: 610
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x8496b5ce2851b1da7833e61b84043890b4b94bfa.sol:3



*/



// File: @openzeppelin/contr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.638342
Transaction Length: 1
Severity: High
Contract: SecretSanta
Function name: sendPrize(address[],uint256[])
PC address: 693
Estimated Gas Usage: 539 - 634
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x8496b5ce2851b1da7833e61b84043890b4b94bfa.sol:9

e: @openzeppelin/cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:24.909732
Transaction Length: 1
Severity: High
Contract: SecretSanta
Function name: sendPrize(address[],uint256[])
PC address: 695
Estimated Gas Usage: 539 - 634
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x8496b5ce2851b1da7833e61b84043890b4b94bfa.sol:3



*/



// File: @openzeppelin/contr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:57.557651
Transaction Length: 1
Severity: High
Contract: SecretSanta
Function name: updateWhitelist(address[],bool)
PC address: 1122
Estimated Gas Usage: 407 - 502
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x8496b5ce2851b1da7833e61b84043890b4b94bfa.sol:9

e: @openzeppelin/cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:00.647264
Transaction Length: 1
Severity: High
Contract: SecretSanta
Function name: updateWhitelist(address[],bool)
PC address: 1124
Estimated Gas Usage: 407 - 502
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x8496b5ce2851b1da7833e61b84043890b4b94bfa.sol:3



*/



// File: @openzeppelin/contr

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.490621
Transaction Length: 1
Severity: Low
Contract: SecretSanta
Function name: prizeTokensId(uint256)
PC address: 1565
Estimated Gas Usage: 680 - 775
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x8496b5ce2851b1da7833e61b84043890b4b94bfa.sol:276

uint256[] public prizeTokensId

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.911611
Transaction Length: 1
Severity: Low
Contract: SecretSanta
Function name: prizeTokens(uint256)
PC address: 1606
Estimated Gas Usage: 724 - 819
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x8496b5ce2851b1da7833e61b84043890b4b94bfa.sol:274

address[] public prizeTokens

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.944563
Transaction Length: 1
Severity: High
Contract: SecretSanta
Function name: claimPrize()
PC address: 1661
Estimated Gas Usage: 1053 - 1148
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x8496b5ce2851b1da7833e61b84043890b4b94bfa.sol:498

lastPresentAt + prizeDelay

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:36.215060
Transaction Length: 1
Severity: High
Contract: SecretSanta
Function name: sendPrize(address[],uint256[])
PC address: 2810
Estimated Gas Usage: 1460 - 1555
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x8496b5ce2851b1da7833e61b84043890b4b94bfa.sol:356

lastPresentAt + prizeDelay

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:02.708539
Transaction Length: 1
Severity: High
Contract: SecretSanta
Function name: isTooLate()
PC address: 4106
Estimated Gas Usage: 1100 - 1195
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x8496b5ce2851b1da7833e61b84043890b4b94bfa.sol:582

lastPresentAt + prizeDelay

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:03.372992
Transaction Length: 1
Severity: High
Contract: SecretSanta
Function name: sendPresent(address,uint256)
PC address: 4408
Estimated Gas Usage: 1100 - 1195
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x8496b5ce2851b1da7833e61b84043890b4b94bfa.sol:432

lastPresentAt + prizeDelay

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x044a4C29dcAD5FE3DA932155F949FC0564F8fCae.sol
Total states:12671
40.632911
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol
Total states:14979
203.666419
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.035031
Transaction Length: 0
Severity: High
Contract: ERC721Metadata
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:12

PDX-License-Identifier: GPL-3.0-or-later

/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.045172
Transaction Length: 0
Severity: High
Contract: Title
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:12

PDX-License-Identifier: GPL-3.0-or-later

/

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:22.781471
Transaction Length: 1
Severity: High
Contract: Math
Function name: safeSub(uint256,uint256)
PC address: 820
Estimated Gas Usage: 309 - 404
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:545

x - y

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:25.180326
Transaction Length: 1
Severity: Low
Contract: Math
Function name: safeDiv(uint256,uint256)
PC address: 959
Estimated Gas Usage: 324 - 419
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:553

x / y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.388584
Transaction Length: 1
Severity: High
Contract: Math
Function name: rdiv(uint256,uint256)
PC address: 985
Estimated Gas Usage: 382 - 477
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:549

x * y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.205892
Transaction Length: 1
Severity: High
Contract: Math
Function name: rdiv(uint256,uint256)
PC address: 1128
Estimated Gas Usage: 496 - 591
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:541

x + y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.339923
Transaction Length: 1
Severity: High
Contract: ERC721
Function name: safeTransferFrom(address,address,uint256,bytes)
PC address: 1136
Estimated Gas Usage: 477 - 572
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:3

*/

// Verified using https://dapp.

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:42.546835
Transaction Length: 1
Severity: Medium
Contract: Shelf
Function name: issue(address,uint256)
PC address: 1819
Estimated Gas Usage: 22744 - 157449
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 11416
Offset: 12054
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop2/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1410

function issue(address registry_, uint token_) external note returns (uint) {
        require(NFTLike_2(registry_).ownerOf(token_) == msg.sender, "nft-not-owned");
        bytes32 nft = keccak256(abi.encodePacked(registry_, token_));
        require(nftlookup[nft] == 0, "nft-in-use");
        uint loan = title.issue(msg.sender);
        nftlookup[nft] = loan;
        shelf[loan].registry = registry_;
        shelf[loan].tokenId = token_;

        return loan;
    }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:53.310579
Transaction Length: 2
Severity: Medium
Contract: Shelf
Function name: lock(uint256)
PC address: 2627
Estimated Gas Usage: 7640 - 81359
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 15479
Offset: 16139
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop2/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1513

function lock(uint loan) external owner(loan) note {
        if(address(subscriber) != address(0)) {
            subscriber.unlockEvent(loan);
        }
        NFTLike_2(shelf[loan].registry).transferFrom(msg.sender, address(this), shelf[loan].tokenId);
    }

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:01.774072
Transaction Length: 1
Severity: Low
Contract: Shelf
Function name: withdraw(uint256,uint256,address)
PC address: 4850
Estimated Gas Usage: 1674 - 2475
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1289

title.ownerOf(loan)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:06.734710
Transaction Length: 2
Severity: Low
Contract: Shelf
Function name: withdraw(uint256,uint256,address)
PC address: 4850
Estimated Gas Usage: 1674 - 2475
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1289

title.ownerOf(loan)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:03.328207
Transaction Length: 1
Severity: Low
Contract: Shelf
Function name: close(uint256)
PC address: 6219
Estimated Gas Usage: 1577 - 2378
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1423

pile.debt(loan)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:12.675168
Transaction Length: 2
Severity: Low
Contract: Shelf
Function name: close(uint256)
PC address: 6219
Estimated Gas Usage: 1577 - 2378
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1423

pile.debt(loan)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:36.168474
Transaction Length: 1
Severity: Low
Contract: Shelf
Function name: borrow(uint256,uint256)
PC address: 8042
Estimated Gas Usage: 1618 - 2419
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1289

title.ownerOf(loan)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:18.351774
Transaction Length: 2
Severity: Low
Contract: Shelf
Function name: borrow(uint256,uint256)
PC address: 8042
Estimated Gas Usage: 1618 - 2419
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1289

title.ownerOf(loan)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:37.751620
Transaction Length: 1
Severity: Low
Contract: Shelf
Function name: unlock(uint256)
PC address: 9574
Estimated Gas Usage: 1591 - 2392
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1289

title.ownerOf(loan)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:24.725361
Transaction Length: 2
Severity: Low
Contract: Shelf
Function name: unlock(uint256)
PC address: 9574
Estimated Gas Usage: 1591 - 2392
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1289

title.ownerOf(loan)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:39.150760
Transaction Length: 1
Severity: Low
Contract: Shelf
Function name: unlock(uint256)
PC address: 9832
Estimated Gas Usage: 3739 - 39432
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1523

pile.debt(loan)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:31.427164
Transaction Length: 2
Severity: Low
Contract: Shelf
Function name: unlock(uint256)
PC address: 9832
Estimated Gas Usage: 3739 - 39432
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1523

pile.debt(loan)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:41.849074
Transaction Length: 1
Severity: Low
Contract: Shelf
Function name: issue(address,uint256)
PC address: 12054
Estimated Gas Usage: 3994 - 40206
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1414

title.issue(msg.sender)

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:43.018405
Transaction Length: 1
Severity: High
Contract: Shelf
Function name: safeSub(uint256,uint256)
PC address: 14144
Estimated Gas Usage: 399 - 494
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:545

x - y

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:45.352288
Transaction Length: 1
Severity: Low
Contract: Shelf
Function name: safeDiv(uint256,uint256)
PC address: 14283
Estimated Gas Usage: 325 - 420
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:553

x / y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.486243
Transaction Length: 1
Severity: High
Contract: Shelf
Function name: rdiv(uint256,uint256)
PC address: 14439
Estimated Gas Usage: 472 - 567
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:549

x * y

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:47.035499
Transaction Length: 1
Severity: Low
Contract: Shelf
Function name: repay(uint256,uint256)
PC address: 14748
Estimated Gas Usage: 1639 - 2440
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1289

title.ownerOf(loan)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:38.732599
Transaction Length: 2
Severity: Low
Contract: Shelf
Function name: repay(uint256,uint256)
PC address: 14748
Estimated Gas Usage: 1639 - 2440
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1289

title.ownerOf(loan)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:48.516100
Transaction Length: 1
Severity: Low
Contract: Shelf
Function name: lock(uint256)
PC address: 15479
Estimated Gas Usage: 1545 - 2346
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1289

title.ownerOf(loan)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:44.757093
Transaction Length: 2
Severity: Low
Contract: Shelf
Function name: lock(uint256)
PC address: 15479
Estimated Gas Usage: 1545 - 2346
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1289

title.ownerOf(loan)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:50.586491
Transaction Length: 1
Severity: Low
Contract: Shelf
Function name: lock(uint256)
PC address: 16139
Estimated Gas Usage: 4797 - 41390
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1517

NFTLike_2(shelf[loan].registry).transferFrom(msg.sender, address(this), shelf[loan].tokenId)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:52.254375
Transaction Length: 2
Severity: Low
Contract: Shelf
Function name: lock(uint256)
PC address: 16139
Estimated Gas Usage: 4797 - 41390
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1517

NFTLike_2(shelf[loan].registry).transferFrom(msg.sender, address(this), shelf[loan].tokenId)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:23.019046
Transaction Length: 1
Severity: High
Contract: Shelf
Function name: rdiv(uint256,uint256)
PC address: 16964
Estimated Gas Usage: 586 - 681
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:541

x + y

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x6032d6e0ad0446d77118b9171f8f2e2cfd433069.sol
Total states:1759
6.528483
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x1f5aac1f2f6b74220996f2bbfb59e786c798ce23.sol
Total states:2324
2.328335
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x3e06b9de07c7b6c4b714ce32f15ebffc038392b0.sol
Total states:426
0.754955
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0xEe87b220d9b0e762f0643C501fADeFd6d9cc5B7E.sol
Total states:629
1.456054
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0xD85e2772912213e0c584d80B2694c79D6a09E39A.sol
Total states:1634
1.494847
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.584009
Transaction Length: 1
Severity: Low
Contract: KYFToken
Function name: kyfInstancesArray(uint256)
PC address: 1854
Estimated Gas Usage: 701 - 796
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0xD85e2772912213e0c584d80B2694c79D6a09E39A.sol:182

address[] public kyfInstancesArray

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0xcda1fdce80d324f3f4a5de323d51428bd402d41c.sol
Total states:150
32.947172
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.291634
Transaction Length: 1
Severity: High
Contract: MStableStrat
Function name: setAllowances(address,address[],bool)
PC address: 480
Estimated Gas Usage: 375 - 470
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xcda1fdce80d324f3f4a5de323d51428bd402d41c.sol:5

ontracts/vaults/IStra

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.416569
Transaction Length: 1
Severity: High
Contract: MStableStrat
Function name: setAllowances(address,address[],bool)
PC address: 482
Estimated Gas Usage: 375 - 470
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xcda1fdce80d324f3f4a5de323d51428bd402d41c.sol:3

*/

// File: contracts/vaults/IStrat

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:15.060170
Transaction Length: 1
Severity: Low
Contract: MStableStrat
Function name: exchangeRewardForWant(bool)
PC address: 3392
Estimated Gas Usage: 5172 - 41905
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0xcda1fdce80d324f3f4a5de323d51428bd402d41c.sol:866

balProxy.smartSwapExactIn(
            mta,
            musd,
            exchangeAll ? swapAmt : swapAmt.mul(8000).div(DENOM),
            0,
            numPools
        )

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:16.803582
Transaction Length: 1
Severity: Low
Contract: MStableStrat
Function name: exchangeRewardForWant(bool)
PC address: 3789
Estimated Gas Usage: 8631 - 81296
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0xcda1fdce80d324f3f4a5de323d51428bd402d41c.sol:875

balProxy.smartSwapExactIn(
            musd,
            want,
            swapAmt,
            0,
            numPools
        )

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:12.671740
Transaction Length: 1
Severity: Low
Contract: MStableStrat
Function name: exitMGov()
PC address: 4064
Estimated Gas Usage: 1425 - 2131
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0xcda1fdce80d324f3f4a5de323d51428bd402d41c.sol:843

mtaGov.withdraw()

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:13.466505
Transaction Length: 1
Severity: Low
Contract: MStableStrat
Function name: exitMGov()
PC address: 4361
Estimated Gas Usage: 2609 - 39052
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0xcda1fdce80d324f3f4a5de323d51428bd402d41c.sol:846

address(this).call(
            abi.encodeWithSignature(
                "exchangeRewardForWant(bool)",
                true
            )
        )

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x071124f489b96101e4a6b1ce78a0c4b9eba881a2.sol
Total states:77
3.315086
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x36F1d6a9DCf388C7524B26b70857d0c26d91A53D.sol
Total states:17402
535.109349
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:08:21.864257
Transaction Length: 1
Severity: Low
Contract: MainnetStableXToIStableXAssimilator
Function name: outputRawAndGetBalance(address,uint256)
PC address: 2348
Estimated Gas Usage: 1141 - 1612
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x36F1d6a9DCf388C7524B26b70857d0c26d91A53D.sol:903

istablex.unstake(_amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:08:24.130421
Transaction Length: 1
Severity: Low
Contract: MainnetStableXToIStableXAssimilator
Function name: outputRawAndGetBalance(address,uint256)
PC address: 2594
Estimated Gas Usage: 2829 - 37957
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x36F1d6a9DCf388C7524B26b70857d0c26d91A53D.sol:905

stablex.transfer(_dst, _amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:08:25.682713
Transaction Length: 1
Severity: Low
Contract: MainnetStableXToIStableXAssimilator
Function name: intakeRawAndGetBalance(uint256)
PC address: 3963
Estimated Gas Usage: 1131 - 1792
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x36F1d6a9DCf388C7524B26b70857d0c26d91A53D.sol:863

stablex.transferFrom(msg.sender, address(this), _amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:08:27.815895
Transaction Length: 1
Severity: Low
Contract: MainnetStableXToIStableXAssimilator
Function name: intakeRawAndGetBalance(uint256)
PC address: 4245
Estimated Gas Usage: 2804 - 38027
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x36F1d6a9DCf388C7524B26b70857d0c26d91A53D.sol:867

istablex.stake(_amount)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:08:28.209890
Transaction Length: 1
Severity: High
Contract: MainnetStableXToIStableXAssimilator
Function name: intakeRawAndGetBalance(uint256)
PC address: 4555
Estimated Gas Usage: 5467 - 109438
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x36F1d6a9DCf388C7524B26b70857d0c26d91A53D.sol:871

_balance * _index

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:08:30.995972
Transaction Length: 1
Severity: High
Contract: MainnetStableXToIStableXAssimilator
Function name: viewNumeraireBalance(address)
PC address: 5052
Estimated Gas Usage: 3721 - 72845
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x36F1d6a9DCf388C7524B26b70857d0c26d91A53D.sol:959

_balance * _index

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:08:35.150339
Transaction Length: 1
Severity: Low
Contract: MainnetStableXToIStableXAssimilator
Function name: outputRaw(address,uint256)
PC address: 5221
Estimated Gas Usage: 1134 - 1605
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x36F1d6a9DCf388C7524B26b70857d0c26d91A53D.sol:919

istablex.unstake(_amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:08:37.165033
Transaction Length: 1
Severity: Low
Contract: MainnetStableXToIStableXAssimilator
Function name: outputRaw(address,uint256)
PC address: 5466
Estimated Gas Usage: 2813 - 37941
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x36F1d6a9DCf388C7524B26b70857d0c26d91A53D.sol:921

stablex.transfer(_dst, _amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:08:49.187721
Transaction Length: 1
Severity: Low
Contract: MainnetStableXToIStableXAssimilator
Function name: intakeRaw(uint256)
PC address: 5954
Estimated Gas Usage: 1210 - 1871
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x36F1d6a9DCf388C7524B26b70857d0c26d91A53D.sol:879

stablex.transferFrom(msg.sender, address(this), _amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:08:51.035122
Transaction Length: 1
Severity: Low
Contract: MainnetStableXToIStableXAssimilator
Function name: intakeRaw(uint256)
PC address: 6234
Estimated Gas Usage: 2880 - 38103
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x36F1d6a9DCf388C7524B26b70857d0c26d91A53D.sol:883

istablex.stake(_amount)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x6b41459ced638645092a1c6d50726b428a66348a.sol
Total states:596
1.626604
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x1eae93c8544c7935815aadea5cc5aedd04326680.sol
Total states:30
0.222941
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x92ec47df1aa167806dfa4916d9cfb99da6953b8f.sol
Total states:235
0.506203
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0xab6adbf1a0b140663d33026b0bfdeafef97370d8.sol
Total states:4261
24.938605
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.115215
Transaction Length: 1
Severity: High
Contract: Core
Function name: whitelistTokens(address[])
PC address: 762
Estimated Gas Usage: 341 - 436
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xab6adbf1a0b140663d33026b0bfdeafef97370d8.sol:9

ma solidity 0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.886709
Transaction Length: 1
Severity: High
Contract: Core
Function name: whitelistTokens(address[])
PC address: 764
Estimated Gas Usage: 341 - 436
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xab6adbf1a0b140663d33026b0bfdeafef97370d8.sol:3



*/



//pragma solidity 0.5.17;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.906336
Transaction Length: 1
Severity: High
Contract: Core
Function name: whitelistPeak(address,uint256[],uint256,bool)
PC address: 1039
Estimated Gas Usage: 440 - 535
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xab6adbf1a0b140663d33026b0bfdeafef97370d8.sol:9

ma solidity 0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.862802
Transaction Length: 1
Severity: High
Contract: Core
Function name: whitelistPeak(address,uint256[],uint256,bool)
PC address: 1041
Estimated Gas Usage: 440 - 535
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xab6adbf1a0b140663d33026b0bfdeafef97370d8.sol:3



*/



//pragma solidity 0.5.17;
pr

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:18.098561
Transaction Length: 1
Severity: Low
Contract: Core
Function name: systemCoins(uint256)
PC address: 6996
Estimated Gas Usage: 767 - 862
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0xab6adbf1a0b140663d33026b0bfdeafef97370d8.sol:504

address[] public systemCoins

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:20.149382
Transaction Length: 1
Severity: Low
Contract: Core
Function name: peaksAddresses(uint256)
PC address: 7847
Estimated Gas Usage: 701 - 796
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0xab6adbf1a0b140663d33026b0bfdeafef97370d8.sol:522

address[] public peaksAddresses

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:20.825741
Transaction Length: 1
Severity: Low
Contract: Core
Function name: feed(uint256)
PC address: 8610
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0xab6adbf1a0b140663d33026b0bfdeafef97370d8.sol:505

uint[] public feed

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0xf6e53b3aae671319a0f9d9ca7fac5f41599bc7a5.sol
Total states:2858
30.279835
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.195604
Transaction Length: 1
Severity: High
Contract: MerkleDrop
Function name: addFunder(address)
PC address: 2988
Estimated Gas Usage: 2509 - 37403
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xf6e53b3aae671319a0f9d9ca7fac5f41599bc7a5.sol:5

dity 0.5.16;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.544363
Transaction Length: 1
Severity: High
Contract: MerkleDrop
Function name: addFunder(address)
PC address: 2991
Estimated Gas Usage: 2509 - 37403
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xf6e53b3aae671319a0f9d9ca7fac5f41599bc7a5.sol:3



//pragma solidity 0.5.16;
pragma solidity

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.401888
Transaction Length: 1
Severity: High
Contract: MerkleDrop
Function name: addFunder(address)
PC address: 3003
Estimated Gas Usage: 2509 - 37403
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xf6e53b3aae671319a0f9d9ca7fac5f41599bc7a5.sol:550

nexus.governor()

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:03.062250
Transaction Length: 1
Severity: High
Contract: MerkleDrop
Function name: addFunder(address)
PC address: 6995
Estimated Gas Usage: 2509 - 37403
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xf6e53b3aae671319a0f9d9ca7fac5f41599bc7a5.sol:123

ry instead of the unche

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.082161
Transaction Length: 1
Severity: High
Contract: MerkleDrop
Function name: claimWeeks(address,uint256[],uint256[],bytes32[][])
PC address: 9667
Estimated Gas Usage: 688 - 876
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xf6e53b3aae671319a0f9d9ca7fac5f41599bc7a5.sol:679

  mapping(uint256

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0xf64ba2fA3595612cd56f7290E9FCf0293007E7bb.sol
Total states:2391
19.777955
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x05bd31d5ca9ca645fd4d0efb7a0ad383ca78566f.sol
Total states:22531
42.614456
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.502474
Transaction Length: 1
Severity: High
Contract: AuctionProtection
Function name: distributionStackInBatch(address[])
PC address: 2364
Estimated Gas Usage: 452 - 547
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x05bd31d5ca9ca645fd4d0efb7a0ad383ca78566f.sol:5

ontracts/InterFaces/I

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.851855
Transaction Length: 1
Severity: High
Contract: AuctionProtection
Function name: distributionStackInBatch(address[])
PC address: 2366
Estimated Gas Usage: 452 - 547
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x05bd31d5ca9ca645fd4d0efb7a0ad383ca78566f.sol:3

*/

// File: contracts/InterFaces/IA

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:12.490968
Transaction Length: 1
Severity: Low
Contract: AuctionProtection
Function name: cancelInvestment()
PC address: 17105
Estimated Gas Usage: 2028 - 2924
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x05bd31d5ca9ca645fd4d0efb7a0ad383ca78566f.sol:777

IAuction(auctionAddress).auctionDay()

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:06.572153
Transaction Length: 2
Severity: Low
Contract: AuctionProtection
Function name: cancelInvestment()
PC address: 17105
Estimated Gas Usage: 2028 - 2924
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x05bd31d5ca9ca645fd4d0efb7a0ad383ca78566f.sol:777

IAuction(auctionAddress).auctionDay()

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:02.077246
Transaction Length: 1
Severity: Low
Contract: AuctionProtection
Function name: unlockTokenFromStack()
PC address: 18781
Estimated Gas Usage: 2794 - 4070
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x05bd31d5ca9ca645fd4d0efb7a0ad383ca78566f.sol:420

_token.transfer(_to, _amount)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x0eadd31db1d0f367a54eff9e4c76beb4f121e729.sol
Total states:22554
103.64572
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.146483
Transaction Length: 0
Severity: High
Contract: Town
Function name: constructor
PC address: 844
Estimated Gas Usage: 558 - 3889
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x0eadd31db1d0f367a54eff9e4c76beb4f121e729.sol:1404

distributionPeriod * 1 days

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:21.464010
Transaction Length: 0
Severity: High
Contract: Town
Function name: constructor
PC address: 1422
Estimated Gas Usage: 46536 - 230197
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x0eadd31db1d0f367a54eff9e4c76beb4f121e729.sol:303

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.451480
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3044
Estimated Gas Usage: 989 - 1464
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x0eadd31db1d0f367a54eff9e4c76beb4f121e729.sol:225

a + b

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:03.145644
Transaction Length: 1
Severity: Low
Contract: TownToken
Function name: transfer(address,uint256)
PC address: 3334
Estimated Gas Usage: 2044 - 3175
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x0eadd31db1d0f367a54eff9e4c76beb4f121e729.sol:1100

_town.checkProposal(recipient)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.049130
Transaction Length: 2
Severity: High
Contract: ExternalTokenTemplate
Function name: increaseAllowance(address,uint256)
PC address: 3494
Estimated Gas Usage: 922 - 1397
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x0eadd31db1d0f367a54eff9e4c76beb4f121e729.sol:225

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:03.764475
Transaction Length: 1
Severity: Low
Contract: TownToken
Function name: getHolderByIndex(uint256)
PC address: 4982
Estimated Gas Usage: 725 - 820
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x0eadd31db1d0f367a54eff9e4c76beb4f121e729.sol:1076

_holders[index]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.710222
Transaction Length: 2
Severity: High
Contract: TownToken
Function name: increaseAllowance(address,uint256)
PC address: 6628
Estimated Gas Usage: 967 - 1442
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x0eadd31db1d0f367a54eff9e4c76beb4f121e729.sol:225

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x6ed094545751da48bcccc91b59a606be8472a24f.sol
Total states:2324
2.197551
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x884d2d79657bac17b964bc5d8bdfd80c3712db74.sol
Total states:10936
27.212044
==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.695599
Transaction Length: 1
Severity: High
Contract: pLINKVault
Function name: availableWithdraw(address)
PC address: 1869
Estimated Gas Usage: 1088 - 1373
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x884d2d79657bac17b964bc5d8bdfd80c3712db74.sol:640

_rewardCount - 1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.652895
Transaction Length: 1
Severity: Low
Contract: pLINKVault
Function name: addressIndices(uint256)
PC address: 2343
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x884d2d79657bac17b964bc5d8bdfd80c3712db74.sol:456

address[] public addressIndices

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.486600
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3244
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x884d2d79657bac17b964bc5d8bdfd80c3712db74.sol:214

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.586563
Transaction Length: 1
Severity: High
Contract: pLINKVault
Function name: deposit(uint256)
PC address: 5691
Estimated Gas Usage: 11933 - 52453
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x884d2d79657bac17b964bc5d8bdfd80c3712db74.sol:252

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0xa46ddf8d1c3f9c7b594c25bbb7b500eecb237781.sol
Total states:12852
466.773963
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.400073
Transaction Length: 1
Severity: High
Contract: Module
Function name: getModuleAddress(string)
PC address: 416
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xa46ddf8d1c3f9c7b594c25bbb7b500eecb237781.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.527139
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SBTC
Function name: handleDeposit(address[],uint256[])
PC address: 1722
Estimated Gas Usage: 452 - 547
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xa46ddf8d1c3f9c7b594c25bbb7b500eecb237781.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.321336
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SBTC
Function name: handleDeposit(address[],uint256[])
PC address: 1724
Estimated Gas Usage: 452 - 547
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xa46ddf8d1c3f9c7b594c25bbb7b500eecb237781.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:15.836059
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SBTC
Function name: handleDeposit(address[],uint256[])
PC address: 1870
Estimated Gas Usage: 785 - 3562
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xa46ddf8d1c3f9c7b594c25bbb7b500eecb237781.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:29.344317
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SBTC
Function name: handleDeposit(address[],uint256[])
PC address: 1872
Estimated Gas Usage: 785 - 3562
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xa46ddf8d1c3f9c7b594c25bbb7b500eecb237781.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:36.273133
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SBTC
Function name: getModuleAddress(string)
PC address: 2154
Estimated Gas Usage: 407 - 502
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xa46ddf8d1c3f9c7b594c25bbb7b500eecb237781.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:13.277519
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SBTC
Function name: withdraw(address,uint256[])
PC address: 2519
Estimated Gas Usage: 397 - 492
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xa46ddf8d1c3f9c7b594c25bbb7b500eecb237781.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:17.668893
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SBTC
Function name: withdraw(address,uint256[])
PC address: 2521
Estimated Gas Usage: 397 - 492
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xa46ddf8d1c3f9c7b594c25bbb7b500eecb237781.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:43.022718
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SBTC
Function name: supportedTokens()
PC address: 3026
Estimated Gas Usage: 1250 - 2097
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xa46ddf8d1c3f9c7b594c25bbb7b500eecb237781.sol:1309

function supportedTokens() public view returns(address[] memory){
        return _registeredTokens;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:16.204307
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SBTC
Function name: supportedTokens()
PC address: 3066
Estimated Gas Usage: 1400 - 2623
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xa46ddf8d1c3f9c7b594c25bbb7b500eecb237781.sol:1309

function supportedTokens() public view returns(address[] memory){
        return _registeredTokens;
    }

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x28414d8735831e660f19e2293234ba7962ee00ab.sol
Total states:77
3.300526
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0xf19ed2025effdb2b22d1376c09b4884f26475dd1.sol
Total states:22554
100.903575
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.305913
Transaction Length: 0
Severity: High
Contract: Town
Function name: constructor
PC address: 844
Estimated Gas Usage: 558 - 3889
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xf19ed2025effdb2b22d1376c09b4884f26475dd1.sol:705

distributionPeriod * 1 days

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:20.368056
Transaction Length: 0
Severity: High
Contract: Town
Function name: constructor
PC address: 1422
Estimated Gas Usage: 46536 - 230197
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xf19ed2025effdb2b22d1376c09b4884f26475dd1.sol:153

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.352571
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3044
Estimated Gas Usage: 989 - 1464
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xf19ed2025effdb2b22d1376c09b4884f26475dd1.sol:114

a + b

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:02.873617
Transaction Length: 1
Severity: Low
Contract: TownToken
Function name: transfer(address,uint256)
PC address: 3334
Estimated Gas Usage: 2044 - 3175
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0xf19ed2025effdb2b22d1376c09b4884f26475dd1.sol:553

_town.checkProposal(recipient)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.899336
Transaction Length: 2
Severity: High
Contract: ExternalTokenTemplate
Function name: increaseAllowance(address,uint256)
PC address: 3494
Estimated Gas Usage: 922 - 1397
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xf19ed2025effdb2b22d1376c09b4884f26475dd1.sol:114

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:03.551943
Transaction Length: 1
Severity: Low
Contract: TownToken
Function name: getHolderByIndex(uint256)
PC address: 4982
Estimated Gas Usage: 725 - 820
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0xf19ed2025effdb2b22d1376c09b4884f26475dd1.sol:541

_holders[index]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.103912
Transaction Length: 2
Severity: High
Contract: TownToken
Function name: increaseAllowance(address,uint256)
PC address: 6628
Estimated Gas Usage: 967 - 1442
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xf19ed2025effdb2b22d1376c09b4884f26475dd1.sol:114

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x444395df5c6e2806adc408796f70a6e028072695.sol
Total states:2324
1.883814
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x949414d01c913e71e3c141f5e607a4d8bbbb3b25.sol
Total states:5184
9.291172
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:02.113325
Transaction Length: 1
Severity: Low
Contract: dBalancerPool
Function name: invAddrs(address,uint256)
PC address: 9072
Estimated Gas Usage: 798 - 1083
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x949414d01c913e71e3c141f5e607a4d8bbbb3b25.sol:628

mapping(address => address[]) public invAddrs

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x310d1325d8410e572f0d7f9e117c3fbb558b8300.sol
Total states:35718
204.940824
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.286659
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1004
Estimated Gas Usage: 417 - 512
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x310d1325d8410e572f0d7f9e117c3fbb558b8300.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.587588
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1006
Estimated Gas Usage: 417 - 512
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x310d1325d8410e572f0d7f9e117c3fbb558b8300.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.701013
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1089
Estimated Gas Usage: 593 - 688
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x310d1325d8410e572f0d7f9e117c3fbb558b8300.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:23.573959
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1091
Estimated Gas Usage: 593 - 688
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x310d1325d8410e572f0d7f9e117c3fbb558b8300.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.945937
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1206
Estimated Gas Usage: 462 - 557
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x310d1325d8410e572f0d7f9e117c3fbb558b8300.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.766496
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1208
Estimated Gas Usage: 462 - 557
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x310d1325d8410e572f0d7f9e117c3fbb558b8300.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.590001
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1291
Estimated Gas Usage: 638 - 733
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x310d1325d8410e572f0d7f9e117c3fbb558b8300.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:19.667559
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1293
Estimated Gas Usage: 638 - 733
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x310d1325d8410e572f0d7f9e117c3fbb558b8300.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.925462
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleAccess
Function name: interpolate(uint256,uint256,uint256,uint256,uint256)
PC address: 2313
Estimated Gas Usage: 997 - 1848
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x310d1325d8410e572f0d7f9e117c3fbb558b8300.sol:162

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.895961
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeBP(uint256)
PC address: 2585
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x310d1325d8410e572f0d7f9e117c3fbb558b8300.sol:784

uint[] public bonusRangeBP

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.397746
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3332
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x310d1325d8410e572f0d7f9e117c3fbb558b8300.sol:1266

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:03.879403
Transaction Length: 2
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3332
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x310d1325d8410e572f0d7f9e117c3fbb558b8300.sol:1266

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:38.516218
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeStart(uint256)
PC address: 6017
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x310d1325d8410e572f0d7f9e117c3fbb558b8300.sol:783

uint[] public bonusRangeStart

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:23.073155
Transaction Length: 1
Severity: Low
Contract: LidStaking
Function name: stakeHandlers(uint256)
PC address: 6118
Estimated Gas Usage: 790 - 885
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x310d1325d8410e572f0d7f9e117c3fbb558b8300.sol:962

IStakeHandler[] public stakeHandlers

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.675201
Transaction Length: 2
Severity: High
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6315
Estimated Gas Usage: 1699 - 2124
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x310d1325d8410e572f0d7f9e117c3fbb558b8300.sol:1112

stakeHandlers.length-1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:07.857581
Transaction Length: 2
Severity: Low
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6326
Estimated Gas Usage: 1709 - 2134
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x310d1325d8410e572f0d7f9e117c3fbb558b8300.sol:1112

stakeHandlers[stakeHandlers.length-1]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:34.593233
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: calculateRatePerEth(uint256,uint256,uint256)
PC address: 6866
Estimated Gas Usage: 955 - 1050
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x310d1325d8410e572f0d7f9e117c3fbb558b8300.sol:162

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.772256
Transaction Length: 1
Severity: High
Contract: LidStaking
Function name: findTaxAmount(uint256,uint256)
PC address: 13348
Estimated Gas Usage: 474 - 569
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x310d1325d8410e572f0d7f9e117c3fbb558b8300.sol:162

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:32.014267
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPoolBPs(uint256)
PC address: 13472
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x310d1325d8410e572f0d7f9e117c3fbb558b8300.sol:1267

uint[] public tokenPoolBPs

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x2b4f291dac3f50df9f846901dd350a7ff2357bd6.sol
Total states:738
3.665744
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0xc0b6eed9589380c3e3258e3a00a15c898541da5c.sol
Total states:10198
188.550725
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.131469
Transaction Length: 0
Severity: High
Contract: SimpleUpgrader
Function name: constructor
PC address: 116
Estimated Gas Usage: 287 - 3153
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xc0b6eed9589380c3e3258e3a00a15c898541da5c.sol:17

ation, either version

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:03.078418
Transaction Length: 1
Severity: Medium
Contract: BaseModule
Function name: recoverToken(address)
PC address: 334
Estimated Gas Usage: 4033 - 73677
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 1416
Offset: 1673
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop2/0xc0b6eed9589380c3e3258e3a00a15c898541da5c.sol:1436

function recoverToken(address _token) external {

        uint total = ERC20(_token).balanceOf(address(this));

        ERC20(_token).transfer(address(registry), total);

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.411032
Transaction Length: 0
Severity: High
Contract: SimpleUpgrader
Function name: constructor
PC address: 531
Estimated Gas Usage: 17810 - 82247
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xc0b6eed9589380c3e3258e3a00a15c898541da5c.sol:1524

contract SimpleUpgrader is BaseModule {



    bytes32 constant NAME = "SimpleUpgrader";

    address[] public toDisable;

    address[] public toEnable;



    // *************** Constructor ********************** //



    constructor(

        ModuleRegistry _registry,

        address[] memory _toDisable,

        address[] memory _toEnable

    )

        BaseModule(_registry, GuardianStorage(0), NAME)

        public

    {

        toDisable = _toDisable;

        toEnable = _toEnable;

    }



    // *************** External/Public Functions ********************* //



    /**

     * @dev Perform the upgrade for a wallet. This method gets called

     * when SimpleUpgrader is temporarily added as a module.

     * @param _wallet The target wallet.

     */

    function init(BaseWallet _wallet) public onlyWallet(_wallet) {

        uint256 i = 0;

        //add new modules

        for (; i < toEnable.length; i++) {

            BaseWallet(_wallet).authoriseModule(toEnable[i], true);

        }

        //remove old modules

        for (i = 0; i < toDisable.length; i++) {

            BaseWallet(_wallet).authoriseModule(toDisable[i], false);

        }

        // SimpleUpgrader did its job, we no longer need it as a module

        BaseWallet(_wallet).authoriseModule(address(this), false);

    }

}

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.559619
Transaction Length: 1
Severity: High
Contract: ModuleRegistry
Function name: isRegisteredModule(address[])
PC address: 723
Estimated Gas Usage: 429 - 524
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xc0b6eed9589380c3e3258e3a00a15c898541da5c.sol:9

yright (C) 2018  Arge

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.613493
Transaction Length: 1
Severity: High
Contract: ModuleRegistry
Function name: isRegisteredModule(address[])
PC address: 725
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xc0b6eed9589380c3e3258e3a00a15c898541da5c.sol:3



*/



// Copyright (C) 2018  Argen

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.913453
Transaction Length: 1
Severity: High
Contract: BaseWallet
Function name: init(address,address[])
PC address: 1149
Estimated Gas Usage: 418 - 513
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xc0b6eed9589380c3e3258e3a00a15c898541da5c.sol:9

yright (C) 2018  Arge

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.940775
Transaction Length: 1
Severity: High
Contract: BaseWallet
Function name: init(address,address[])
PC address: 1151
Estimated Gas Usage: 418 - 513
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xc0b6eed9589380c3e3258e3a00a15c898541da5c.sol:3



*/



// Copyright (C) 2018  Argen

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.461122
Transaction Length: 1
Severity: High
Contract: GuardianStorage
Function name: revokeGuardian(address,address)
PC address: 1519
Estimated Gas Usage: 2898 - 37745
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xc0b6eed9589380c3e3258e3a00a15c898541da5c.sol:890

config.guardians.length - 1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:02.957651
Transaction Length: 1
Severity: Low
Contract: GuardianStorage
Function name: revokeGuardian(address,address)
PC address: 1530
Estimated Gas Usage: 2908 - 37755
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0xc0b6eed9589380c3e3258e3a00a15c898541da5c.sol:890

config.guardians[config.guardians.length - 1]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:22.271242
Transaction Length: 1
Severity: High
Contract: BaseWallet
Function name: invoke(address,uint256,bytes)
PC address: 1655
Estimated Gas Usage: 422 - 517
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xc0b6eed9589380c3e3258e3a00a15c898541da5c.sol:3



*/



// Copyright (C) 2018  Arge

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:00:02.977337
Transaction Length: 1
Severity: Medium
Contract: BaseModule
Function name: recoverToken(address)
PC address: 1673
Estimated Gas Usage: 3208 - 38666
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../contracts/m_loop/loop2/0xc0b6eed9589380c3e3258e3a00a15c898541da5c.sol:1440

ERC20(_token).transfer(address(registry), total)

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:00:20.008711
Transaction Length: 1
Severity: Medium
Contract: BaseWallet
Function name: init(address,address[])
PC address: 4835
Estimated Gas Usage: 19097 - 81268
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../contracts/m_loop/loop2/0xc0b6eed9589380c3e3258e3a00a15c898541da5c.sol:318

Module(_modules[i]).init(this)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x32f1d4bb869ae0be174a4d06ee359877c1b6b71b.sol
Total states:3288
12.094313
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.915083
Transaction Length: 2
Severity: High
Contract: LPTokenWrapper
Function name: stake(uint256)
PC address: 963
Estimated Gas Usage: 765 - 860
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x32f1d4bb869ae0be174a4d06ee359877c1b6b71b.sol:82

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0xb3ab2b676a1efdb16a227e151dc31f5bd3856744.sol
Total states:9122
90.333933
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:20.251506
Transaction Length: 1
Severity: High
Contract: SafeMath
Function name: safeMul(uint256,uint256)
PC address: 483
Estimated Gas Usage: 305 - 400
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xb3ab2b676a1efdb16a227e151dc31f5bd3856744.sol:52

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:48.467623
Transaction Length: 1
Severity: High
Contract: SafeMath
Function name: safeAdd(uint256,uint256)
PC address: 532
Estimated Gas Usage: 331 - 426
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xb3ab2b676a1efdb16a227e151dc31f5bd3856744.sol:42

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.452271
Transaction Length: 1
Severity: High
Contract: CriptoRo
Function name: safeMul(uint256,uint256)
PC address: 7739
Estimated Gas Usage: 371 - 466
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xb3ab2b676a1efdb16a227e151dc31f5bd3856744.sol:52

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:27.545734
Transaction Length: 1
Severity: High
Contract: CriptoRo
Function name: safeAdd(uint256,uint256)
PC address: 7923
Estimated Gas Usage: 419 - 514
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xb3ab2b676a1efdb16a227e151dc31f5bd3856744.sol:42

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x7bf435c7c9692bbc1e5600095d933e3853f043d0.sol
Total states:10016
593.672726
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.360840
Transaction Length: 1
Severity: High
Contract: EMTC
Function name: multipleAirdrop(address[],uint256[])
PC address: 1629
Estimated Gas Usage: 385 - 480
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x7bf435c7c9692bbc1e5600095d933e3853f043d0.sol:5

olidity ^ 0.5.16;
pra

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.004287
Transaction Length: 1
Severity: High
Contract: EMTC
Function name: multipleAirdrop(address[],uint256[])
PC address: 1631
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x7bf435c7c9692bbc1e5600095d933e3853f043d0.sol:3

*/

//pragma solidity ^ 0.5.16;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:15.890021
Transaction Length: 1
Severity: High
Contract: EMTC
Function name: multipleAirdrop(address[],uint256[])
PC address: 1777
Estimated Gas Usage: 718 - 3495
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x7bf435c7c9692bbc1e5600095d933e3853f043d0.sol:5

olidity ^ 0.5.16;
pra

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:30.068741
Transaction Length: 1
Severity: High
Contract: EMTC
Function name: multipleAirdrop(address[],uint256[])
PC address: 1779
Estimated Gas Usage: 718 - 3495
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x7bf435c7c9692bbc1e5600095d933e3853f043d0.sol:3

*/

//pragma solidity ^ 0.5.16;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:53.357339
Transaction Length: 1
Severity: High
Contract: EMTC
Function name: sumAsm(uint256[])
PC address: 1998
Estimated Gas Usage: 407 - 502
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x7bf435c7c9692bbc1e5600095d933e3853f043d0.sol:5

olidity ^ 0.5.16;
pra

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:56.846558
Transaction Length: 1
Severity: High
Contract: EMTC
Function name: sumAsm(uint256[])
PC address: 2000
Estimated Gas Usage: 407 - 502
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x7bf435c7c9692bbc1e5600095d933e3853f043d0.sol:3

*/

//pragma solidity ^ 0.5.16;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:09.892849
Transaction Length: 1
Severity: High
Contract: EMTC
Function name: symbol()
PC address: 2632
Estimated Gas Usage: 1957 - 3087
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x7bf435c7c9692bbc1e5600095d933e3853f043d0.sol:133

function symbol() public view returns(string memory) {
        return _symbol;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.280493
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3291
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x7bf435c7c9692bbc1e5600095d933e3853f043d0.sol:144

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0xd1afd2a0c423f115ab28af59402872f50c742af0.sol
Total states:23611
207.726925
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.307045
Transaction Length: 0
Severity: High
Contract: StableCoin
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xd1afd2a0c423f115ab28af59402872f50c742af0.sol:15

ilable
 * via msg.sender and msg.data, they

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:53.303032
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3645
Estimated Gas Usage: 1025 - 1500
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xd1afd2a0c423f115ab28af59402872f50c742af0.sol:217

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:50.994340
Transaction Length: 2
Severity: High
Contract: ERC20Mintable
Function name: increaseAllowance(address,uint256)
PC address: 4075
Estimated Gas Usage: 1025 - 1500
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xd1afd2a0c423f115ab28af59402872f50c742af0.sol:217

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:54.082146
Transaction Length: 2
Severity: High
Contract: ERC20Pausable
Function name: increaseAllowance(address,uint256)
PC address: 4983
Estimated Gas Usage: 1467 - 2272
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xd1afd2a0c423f115ab28af59402872f50c742af0.sol:217

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x296d278e7a48fed3fcb8b86b8f71b0fd78818c66.sol
Total states:1986
21.617454
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.171714
Transaction Length: 1
Severity: High
Contract: StrategyAddTwoSidesOptimal
Function name: execute(address,uint256,bytes)
PC address: 726
Estimated Gas Usage: 376 - 471
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x296d278e7a48fed3fcb8b86b8f71b0fd78818c66.sol:3

*/

// File: openzeppelin-solidity-

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:00.179319
Transaction Length: 0
Severity: Medium
Contract: StrategyAddTwoSidesOptimal
Function name: constructor
PC address: 867
Estimated Gas Usage: 38791 - 235224
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 375
Offset: 664
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop2/0x296d278e7a48fed3fcb8b86b8f71b0fd78818c66.sol:619

contract StrategyAddTwoSidesOptimal is Ownable, ReentrancyGuard, Strategy {
    using SafeToken for address;
    using SafeMath for uint256;

    IUniswapV2Factory public factory;
    IUniswapV2Router02 public router;
    address public weth;
    address public goblin;

    /// @dev Create a new add two-side optimal strategy instance.
    /// @param _router The Uniswap router smart contract.
    constructor(IUniswapV2Router02 _router, address _goblin) public {
        factory = IUniswapV2Factory(_router.factory());
        router = _router;
        weth = _router.WETH();
        goblin = _goblin;
    }
    
    /// @dev Throws if called by any account other than the goblin.
    modifier onlyGoblin() {
        require(isGoblin(), "caller is not the goblin");
        _;
    }

    /// @dev Returns true if the caller is the current goblin.
    function isGoblin() public view returns (bool) {
        return msg.sender == goblin;
    }

    /// @dev Compute optimal deposit amount
    /// @param amtA amount of token A desired to deposit
    /// @param amtB amonut of token B desired to deposit
    /// @param resA amount of token A in reserve
    /// @param resB amount of token B in reserve
    function optimalDeposit(
        uint256 amtA,
        uint256 amtB,
        uint256 resA,
        uint256 resB
    ) internal pure returns (uint256 swapAmt, bool isReversed) {
        if (amtA.mul(resB) >= amtB.mul(resA)) {
            swapAmt = _optimalDepositA(amtA, amtB, resA, resB);
            isReversed = false;
        } else {
            swapAmt = _optimalDepositA(amtB, amtA, resB, resA);
            isReversed = true;
        }
    }

    /// @dev Compute optimal deposit amount helper
    /// @param amtA amount of token A desired to deposit
    /// @param amtB amonut of token B desired to deposit
    /// @param resA amount of token A in reserve
    /// @param resB amount of token B in reserve
    function _optimalDepositA(
        uint256 amtA,
        uint256 amtB,
        uint256 resA,
        uint256 resB
    ) internal pure returns (uint256) {
        require(amtA.mul(resB) >= amtB.mul(resA), "Reversed");

        uint256 a = 997;
        uint256 b = uint256(1997).mul(resA);
        uint256 _c = (amtA.mul(resB)).sub(amtB.mul(resA));
        uint256 c = _c.mul(1000).div(amtB.add(resB)).mul(resA);

        uint256 d = a.mul(c).mul(4);
        uint256 e = Math.sqrt(b.mul(b).add(d));

        uint256 numerator = e.sub(b);
        uint256 denominator = a.mul(2);

        return numerator.div(denominator);
    }

    /// @dev Execute worker strategy. Take LP tokens + ETH. Return LP tokens + ETH.
    /// @param user User address
    /// @param data Extra calldata information passed along to this strategy.
    function execute(address user, uint256, /* debt */ bytes calldata data) 
        external         
        payable  
        onlyGoblin       
        nonReentrant 
    {
        // 1. Find out what farming token we are dealing with.
        (address fToken, uint256 fAmount, uint256 minLPAmount) = abi.decode(data, (address, uint256, uint256));
        IUniswapV2Pair lpToken = IUniswapV2Pair(factory.getPair(fToken, weth));        
        // 2. Compute the optimal amount of ETH and fToken to be converted.  
        if (fAmount > 0) {  
            fToken.safeTransferFrom(user, address(this), fAmount);            
        }
        uint256 ethBalance = address(this).balance;
        uint256 swapAmt;
        bool isReversed;
        {
            (uint256 r0, uint256 r1, ) = lpToken.getReserves();
            (uint256 ethReserve, uint256 fReserve) = lpToken.token0() == weth ? (r0, r1) : (r1, r0);
            (swapAmt, isReversed) = optimalDeposit(ethBalance, fToken.myBalance(), ethReserve, fReserve);
        }
        // 3. Convert between ETH and farming tokens
        fToken.safeApprove(address(router), 0);
        fToken.safeApprove(address(router), uint256(-1));
        address[] memory path = new address[](2);
        (path[0], path[1]) = isReversed ? (fToken, weth) : (weth, fToken);
        if (isReversed) {
            router.swapExactTokensForETH(swapAmt, 0, path, address(this), now); // farming tokens to ETH
        } else {
            router.swapExactETHForTokens.value(swapAmt)(0, path, address(this), now); // ETH to farming tokens
        }
        // 4. Mint more LP tokens and return all LP tokens to the sender.
        (,, uint256 moreLPAmount) = router.addLiquidityETH.value(address(this).balance)(
            fToken, fToken.myBalance(), 0, 0, address(this), now
        );
        require(moreLPAmount >= minLPAmount, "insufficient LP tokens received");
        lpToken.transfer(msg.sender, lpToken.balanceOf(address(this)));
    }

    /// @dev Recover ERC20 tokens that were accidentally sent to this smart contract.
    /// @param token The token contract. Can be anything. This contract should not hold ERC20 tokens.
    /// @param to The address to send the tokens to.
    /// @param value The number of tokens to transfer to `to`.
    function recover(address token, address to, uint256 value) external onlyOwner nonReentrant {
        token.safeTransfer(to, value);
    }

    function() external payable {}
}

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x718F3fAAccFCdDB8977205126ca3f5f3b1A53D312.sol
Total states:3094
6.866483
==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:00.395854
Transaction Length: 0
Severity: Medium
Contract: RebasedOracle
Function name: constructor
PC address: 1685
Estimated Gas Usage: 65856 - 482160
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 486
Offset: 686
Offset: 886
Offset: 1144
Offset: 1344
Offset: 1544
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop2/0x718F3fAAccFCdDB8977205126ca3f5f3b1A53D312.sol:404

contract RebasedOracle is IOracle, Ownable {
    using FixedPoint for *;

    uint private reb2EthPrice0CumulativeLast;
    uint private reb2EthPrice1CumulativeLast;
    uint32 private reb2EthBlockTimestampLast;
    
    uint private usdcEthPrice0CumulativeLast;
    uint private usdcEthPrice1CumulativeLast;
    uint32 private usdcEthBlockTimestampLast;
    
    address private constant _weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;
    address private constant _usdc = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;

    IUniswapV2Pair private _reb2_eth;
    IUniswapV2Pair private _usdc_eth;
    
    address controller;
    
    modifier onlyControllerOrOwner {
        require(msg.sender == controller || msg.sender == owner());
        _;
    }

    // RebasedController: 0x41630a33d4d6e3767e26aaf50277ab2a235edea3
    // SushiSwap REB2/ETH: 0xc4dE5Cc1232f6493Cc7BF7bcb12F905eb9742Bd7
    // SushiSwap USDC/ETH: 0x397ff1542f962076d0bfe58ea045ffa2d347aca0

    constructor(
        address _controller,
        address __reb2_eth,   // Address of the ETH/REB Uniswap pair
        address __usdc_reb   // Address of the USDC/ETH Uniswap pair
        ) public {
        
        controller = _controller;

        _reb2_eth = IUniswapV2Pair(__reb2_eth);
        _usdc_eth = IUniswapV2Pair(__usdc_reb);
        
        uint112 _dummy1;
        uint112 _dummy2;
        
        reb2EthPrice0CumulativeLast = _reb2_eth.price0CumulativeLast();
        reb2EthPrice1CumulativeLast = _reb2_eth.price1CumulativeLast();
        
        (_dummy1, _dummy2, reb2EthBlockTimestampLast) = _reb2_eth.getReserves();
        
        usdcEthPrice0CumulativeLast = _usdc_eth.price0CumulativeLast();
        usdcEthPrice1CumulativeLast = _usdc_eth.price1CumulativeLast();
        
        (_dummy1, _dummy2, usdcEthBlockTimestampLast) = _usdc_eth.getReserves();
    }

    // Get the average price of 1 REB in Wei
    function getRebEthRate() public view returns (uint256, uint256, uint32, uint256) {
        (uint price0Cumulative, uint price1Cumulative, uint32 _blockTimestamp) =
            UniswapV2OracleLibrary.currentCumulativePrices(address(_reb2_eth));
            
        FixedPoint.uq112x112 memory rebEthAverage = FixedPoint.uq112x112(uint224(1e9 * (price0Cumulative - reb2EthPrice0CumulativeLast) / (_blockTimestamp - reb2EthBlockTimestampLast)));
        
        return (price0Cumulative, price1Cumulative, _blockTimestamp, rebEthAverage.mul(1).decode144());
    }
    
    // Get the average price of 1 USD in Wei
    function getUsdcEthRate() public view returns (uint256, uint256, uint32, uint256) {
        (uint price0Cumulative, uint price1Cumulative, uint32 _blockTimestamp) =
            UniswapV2OracleLibrary.currentCumulativePrices(address(_usdc_eth));
            
        FixedPoint.uq112x112 memory usdcEthAverage = FixedPoint.uq112x112(uint224(1e6 * (price0Cumulative - usdcEthPrice0CumulativeLast) / (_blockTimestamp - usdcEthBlockTimestampLast)));
            
        return (price0Cumulative, price1Cumulative, _blockTimestamp, usdcEthAverage.mul(1).decode144());
    }

    // Update "last" state variables to current values
    // This is *only* called by the controller during rebase which enforces a minimum interim period of 12h.
   function update() external onlyControllerOrOwner {
        
        uint rebEthAverage;
        uint usdcEthAverage;
        
        (reb2EthPrice0CumulativeLast, reb2EthPrice1CumulativeLast, reb2EthBlockTimestampLast, rebEthAverage) = getRebEthRate();
        (usdcEthPrice0CumulativeLast, usdcEthPrice1CumulativeLast, usdcEthBlockTimestampLast, usdcEthAverage) = getUsdcEthRate();
    }

    // Return the average price since last update
    function getData() external view returns (uint256) {
        
        uint _price0CumulativeLast;
        uint _price1CumulativeLast;
        uint32 _blockTimestampLast;
        
        uint rebEthAverage;

        (_price0CumulativeLast, _price1CumulativeLast, _blockTimestampLast, rebEthAverage) = getRebEthRate();
        
        uint usdcEthAverage;
        
         (_price0CumulativeLast, _price1CumulativeLast, _blockTimestampLast, usdcEthAverage) = getUsdcEthRate();
         
        uint answer = (rebEthAverage * 1e18) / usdcEthAverage;
        
        return (answer);
    }
}

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0xf64ba2fA3595612cd56f7290E9FCf0293007E7bb2.sol
Total states:2391
19.995419
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x708c0b0ec4bf296883f882fe16ddb540980fcaa3.sol
Total states:367
1219.832017
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.741580
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12Staging
Function name: getBalances()
PC address: 2652
Estimated Gas Usage: 549 - 737
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x708c0b0ec4bf296883f882fe16ddb540980fcaa3.sol:5

dity 0.5.17; //

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.739743
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12Staging
Function name: getBalances()
PC address: 2655
Estimated Gas Usage: 549 - 737
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x708c0b0ec4bf296883f882fe16ddb540980fcaa3.sol:3



//pragma solidity 0.5.17; // optimization

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:33.730791
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12Staging
Function name: getImplementation()
PC address: 8959
Estimated Gas Usage: 1889 - 36453
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x708c0b0ec4bf296883f882fe16ddb540980fcaa3.sol:5

ns: 200, evm version: istan

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:55.402846
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12Staging
Function name: getImplementation()
PC address: 8962
Estimated Gas Usage: 1232 - 35889
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x708c0b0ec4bf296883f882fe16ddb540980fcaa3.sol:5

mization runs: 200, evm version: istanbul
pragma so

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:58.917939
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12Staging
Function name: getImplementation()
PC address: 8975
Estimated Gas Usage: 1232 - 35889
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x708c0b0ec4bf296883f882fe16ddb540980fcaa3.sol:7

icBatchCalls

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:07.060854
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12Staging
Function name: getImplementation()
PC address: 9075
Estimated Gas Usage: 1246 - 35996
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x708c0b0ec4bf296883f882fe16ddb540980fcaa3.sol:1796

abi.decode(returnData, (address))

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:24.878721
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12Staging
Function name: getImplementation()
PC address: 9084
Estimated Gas Usage: 1246 - 35996
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x708c0b0ec4bf296883f882fe16ddb540980fcaa3.sol:1796

abi.decode(returnData, (address))

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:12:30.841886
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12Staging
Function name: escape()
PC address: 13539
Estimated Gas Usage: 1889 - 36453
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x708c0b0ec4bf296883f882fe16ddb540980fcaa3.sol:5

dity 0.5.17; //

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:12:21.994733
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12Staging
Function name: escape()
PC address: 13542
Estimated Gas Usage: 1889 - 36453
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x708c0b0ec4bf296883f882fe16ddb540980fcaa3.sol:3



//pragma solidity 0.5.17; // optimization

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:12:26.427759
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12Staging
Function name: escape()
PC address: 13554
Estimated Gas Usage: 1889 - 36453
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x708c0b0ec4bf296883f882fe16ddb540980fcaa3.sol:1320

_ESCAPE_HATCH_REGISTRY.getEscapeHatch()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:21.084297
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12Staging
Function name: executeActionWithAtomicBatchCalls((address,bytes)[],uint256,bytes,bytes)
PC address: 31188
Estimated Gas Usage: 722 - 1100
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x708c0b0ec4bf296883f882fe16ddb540980fcaa3.sol:78

ns (bytes32 actionID);

  func

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:14.107943
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12Staging
Function name: executeActionWithAtomicBatchCalls((address,bytes)[],uint256,bytes,bytes)
PC address: 31947
Estimated Gas Usage: 722 - 1100
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x708c0b0ec4bf296883f882fe16ddb540980fcaa3.sol:248

iew returns (bytes3

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:03:28.807632
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12Staging
Function name: getImplementation()
PC address: 32169
Estimated Gas Usage: 1246 - 35996
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x708c0b0ec4bf296883f882fe16ddb540980fcaa3.sol:294

DTokenInterface {
  // 

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:12:31.434232
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12Staging
Function name: escape()
PC address: 33455
Estimated Gas Usage: 1889 - 36453
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x708c0b0ec4bf296883f882fe16ddb540980fcaa3.sol:513

6c1d19D4a2e9Eb0cE3606eB

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.333759
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12Staging
Function name: executeActionWithAtomicBatchCalls((address,bytes)[],uint256,bytes,bytes)
PC address: 38221
Estimated Gas Usage: 549 - 737
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x708c0b0ec4bf296883f882fe16ddb540980fcaa3.sol:1247

s memory returnDa

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x7309967c767643c06ce34e93d66b8211dacf9ee9.sol
Total states:594
1.482392
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0xf9462c5ce99fe7301f77c6d62729f197d82d2a58.sol
Total states:594
1.119798
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x4dbd26387db060bdbf8556bd91977fc6b3ab65e0.sol
Total states:18334
2784.053432
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.395344
Transaction Length: 1
Severity: High
Contract: master
Function name: airdrop(address,address[],uint256[])
PC address: 458
Estimated Gas Usage: 375 - 470
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x4dbd26387db060bdbf8556bd91977fc6b3ab65e0.sol:5

olidity 0.5.7;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.833777
Transaction Length: 1
Severity: High
Contract: master
Function name: airdrop(address,address[],uint256[])
PC address: 460
Estimated Gas Usage: 375 - 470
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x4dbd26387db060bdbf8556bd91977fc6b3ab65e0.sol:3

*/

//pragma solidity 0.5.7;
pragma 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:15.739173
Transaction Length: 1
Severity: High
Contract: master
Function name: airdrop(address,address[],uint256[])
PC address: 606
Estimated Gas Usage: 717 - 3494
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x4dbd26387db060bdbf8556bd91977fc6b3ab65e0.sol:5

olidity 0.5.7;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:27.045574
Transaction Length: 1
Severity: High
Contract: master
Function name: airdrop(address,address[],uint256[])
PC address: 608
Estimated Gas Usage: 717 - 3494
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x4dbd26387db060bdbf8556bd91977fc6b3ab65e0.sol:3

*/

//pragma solidity 0.5.7;
pragma 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:10.129195
Transaction Length: 1
Severity: High
Contract: master
Function name: name()
PC address: 790
Estimated Gas Usage: 1914 - 3044
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x4dbd26387db060bdbf8556bd91977fc6b3ab65e0.sol:68

function name() public view returns(string memory) {
        return _name;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:11:07.436664
Transaction Length: 1
Severity: High
Contract: master
Function name: symbol()
PC address: 1757
Estimated Gas Usage: 1957 - 3087
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x4dbd26387db060bdbf8556bd91977fc6b3ab65e0.sol:72

function symbol() public view returns(string memory) {
        return _symbol;
    }

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:14:13.252652
Transaction Length: 1
Severity: Low
Contract: master
Function name: decreaseAllowance(address,uint256)
PC address: 9553
Estimated Gas Usage: 973 - 1448
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x4dbd26387db060bdbf8556bd91977fc6b3ab65e0.sol:40

assert(b <= a)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:29:01.501648
Transaction Length: 2
Severity: Low
Contract: master
Function name: decreaseAllowance(address,uint256)
PC address: 9553
Estimated Gas Usage: 973 - 1448
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x4dbd26387db060bdbf8556bd91977fc6b3ab65e0.sol:40

assert(b <= a)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:19:26.763468
Transaction Length: 2
Severity: High
Contract: master
Function name: increaseAllowance(address,uint256)
PC address: 9571
Estimated Gas Usage: 1003 - 1478
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x4dbd26387db060bdbf8556bd91977fc6b3ab65e0.sol:45

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:26:36.463837
Transaction Length: 2
Severity: Low
Contract: master
Function name: increaseAllowance(address,uint256)
PC address: 9584
Estimated Gas Usage: 1013 - 1488
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x4dbd26387db060bdbf8556bd91977fc6b3ab65e0.sol:46

assert(c >= a)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x5f203a1b7113c22d79e161455ef3810b020d8f9a.sol
Total states:21968
160.78566
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.856456
Transaction Length: 1
Severity: High
Contract: YSCARCE
Function name: bulkTransfer(address[],uint256[])
PC address: 757
Estimated Gas Usage: 408 - 503
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x5f203a1b7113c22d79e161455ef3810b020d8f9a.sol:5

olidity ^0.5.13;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.241653
Transaction Length: 1
Severity: High
Contract: YSCARCE
Function name: bulkTransfer(address[],uint256[])
PC address: 759
Estimated Gas Usage: 408 - 503
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x5f203a1b7113c22d79e161455ef3810b020d8f9a.sol:3

*/

//pragma solidity ^0.5.13;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.942206
Transaction Length: 1
Severity: High
Contract: YSCARCE
Function name: bulkTransfer(address[],uint256[])
PC address: 842
Estimated Gas Usage: 584 - 679
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x5f203a1b7113c22d79e161455ef3810b020d8f9a.sol:5

olidity ^0.5.13;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:28.111479
Transaction Length: 1
Severity: High
Contract: YSCARCE
Function name: bulkTransfer(address[],uint256[])
PC address: 844
Estimated Gas Usage: 584 - 679
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x5f203a1b7113c22d79e161455ef3810b020d8f9a.sol:3

*/

//pragma solidity ^0.5.13;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:46.843413
Transaction Length: 1
Severity: High
Contract: YSCARCE
Function name: transferAndCall(address,uint256,bytes)
PC address: 1391
Estimated Gas Usage: 511 - 606
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x5f203a1b7113c22d79e161455ef3810b020d8f9a.sol:3

*/

//pragma solidity ^0.5.13;
prag

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:45.701167
Transaction Length: 1
Severity: Low
Contract: YSCARCE
Function name: unstake(uint256)
PC address: 6288
Estimated Gas Usage: 1353 - 1638
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x5f203a1b7113c22d79e161455ef3810b020d8f9a.sol:205

_feeAmount * FLOAT_SCALAR / info.totalStaked

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:36.322638
Transaction Length: 2
Severity: Low
Contract: YSCARCE
Function name: unstake(uint256)
PC address: 6288
Estimated Gas Usage: 1353 - 1638
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x5f203a1b7113c22d79e161455ef3810b020d8f9a.sol:205

_feeAmount * FLOAT_SCALAR / info.totalStaked

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x921f377068912c8da390e4b6a0288765a144d7de.sol
Total states:629
1.540163
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x374fbefe7cd832dd5745e1d741d661c91d0b5106.sol
Total states:17430
35.551251
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.073437
Transaction Length: 0
Severity: High
Contract: LexList
Function name: constructor
PC address: 110
Estimated Gas Usage: 257 - 3030
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x374fbefe7cd832dd5745e1d741d661c91d0b5106.sol:9

╗     
███

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.088691
Transaction Length: 0
Severity: High
Contract: LexList
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x374fbefe7cd832dd5745e1d741d661c91d0b5106.sol:9

═╝   ██╔██╗     
███

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.404673
Transaction Length: 1
Severity: High
Contract: LexList
Function name: list(address[])
PC address: 251
Estimated Gas Usage: 319 - 414
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x374fbefe7cd832dd5745e1d741d661c91d0b5106.sol:6

     ████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.970741
Transaction Length: 1
Severity: High
Contract: LexList
Function name: list(address[])
PC address: 253
Estimated Gas Usage: 319 - 414
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x374fbefe7cd832dd5745e1d741d661c91d0b5106.sol:3

*/

/*
██╗     █████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.610557
Transaction Length: 1
Severity: High
Contract: LexList
Function name: updateMessage(string)
PC address: 374
Estimated Gas Usage: 341 - 436
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x374fbefe7cd832dd5745e1d741d661c91d0b5106.sol:3

*/

/*
██╗     ████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.728898
Transaction Length: 1
Severity: High
Contract: LexList
Function name: delist(address[])
PC address: 493
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x374fbefe7cd832dd5745e1d741d661c91d0b5106.sol:6

     ████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:16.867924
Transaction Length: 1
Severity: High
Contract: LexList
Function name: delist(address[])
PC address: 495
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x374fbefe7cd832dd5745e1d741d661c91d0b5106.sol:3

*/

/*
██╗     █████

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x0323fa07c085d3eb28a8c0a500112171f6dddd75.sol
Total states:144
358.732094
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.491553
Transaction Length: 1
Severity: High
Contract: Mystic
Function name: withdrawBalances(address[],uint256[],bool)
PC address: 3244
Estimated Gas Usage: 408 - 503
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x0323fa07c085d3eb28a8c0a500112171f6dddd75.sol:9

ma solidity 0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.245679
Transaction Length: 1
Severity: High
Contract: Mystic
Function name: withdrawBalances(address[],uint256[],bool)
PC address: 3246
Estimated Gas Usage: 408 - 503
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x0323fa07c085d3eb28a8c0a500112171f6dddd75.sol:3



*/



//pragma solidity 0.5.17;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:15.043233
Transaction Length: 1
Severity: High
Contract: Mystic
Function name: withdrawBalances(address[],uint256[],bool)
PC address: 3329
Estimated Gas Usage: 584 - 679
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x0323fa07c085d3eb28a8c0a500112171f6dddd75.sol:9

ma solidity 0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:26.211183
Transaction Length: 1
Severity: High
Contract: Mystic
Function name: withdrawBalances(address[],uint256[],bool)
PC address: 3331
Estimated Gas Usage: 584 - 679
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x0323fa07c085d3eb28a8c0a500112171f6dddd75.sol:3



*/



//pragma solidity 0.5.17;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:38.851709
Transaction Length: 1
Severity: High
Contract: Mystic
Function name: submitActionProposal(address,address,uint256,uint256,bytes32,bytes)
PC address: 4686
Estimated Gas Usage: 533 - 628
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x0323fa07c085d3eb28a8c0a500112171f6dddd75.sol:3



*/



//pragma solidity 0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:45.058849
Transaction Length: 1
Severity: High
Contract: Mystic
Function name: symbol()
PC address: 4964
Estimated Gas Usage: 573 - 1703
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x0323fa07c085d3eb28a8c0a500112171f6dddd75.sol:274

string public constant symbol = "MXDAO"

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:17.454804
Transaction Length: 1
Severity: High
Contract: Mystic
Function name: init(address,address,address[],uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256)
PC address: 5430
Estimated Gas Usage: 451 - 546
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x0323fa07c085d3eb28a8c0a500112171f6dddd75.sol:9

ma solidity 0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:24.579927
Transaction Length: 1
Severity: High
Contract: Mystic
Function name: init(address,address,address[],uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256)
PC address: 5432
Estimated Gas Usage: 451 - 546
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x0323fa07c085d3eb28a8c0a500112171f6dddd75.sol:3



*/



//pragma solidity 0.5.17;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:33.115751
Transaction Length: 1
Severity: High
Contract: Mystic
Function name: init(address,address,address[],uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256)
PC address: 5515
Estimated Gas Usage: 627 - 722
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x0323fa07c085d3eb28a8c0a500112171f6dddd75.sol:9

ma solidity 0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:44.174877
Transaction Length: 1
Severity: High
Contract: Mystic
Function name: init(address,address,address[],uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256)
PC address: 5517
Estimated Gas Usage: 627 - 722
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x0323fa07c085d3eb28a8c0a500112171f6dddd75.sol:3



*/



//pragma solidity 0.5.17;
pr

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:02.421488
Transaction Length: 1
Severity: Low
Contract: Mystic
Function name: approvedTokens(uint256)
PC address: 9370
Estimated Gas Usage: 791 - 886
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x0323fa07c085d3eb28a8c0a500112171f6dddd75.sol:418

address[] public approvedTokens

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:05.073460
Transaction Length: 1
Severity: Low
Contract: Mystic
Function name: proposalQueue(uint256)
PC address: 12762
Estimated Gas Usage: 769 - 864
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x0323fa07c085d3eb28a8c0a500112171f6dddd75.sol:424

uint256[] public proposalQueue

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0xD6758916BFb6c79d14709DDd1E1DC76B1AE8C0Ae.sol
Total states:695
1.638528
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x004580afbad43d81e5a5aefb63282bf782c35b1a.sol
Total states:14395
63.287577
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.263940
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1004
Estimated Gas Usage: 417 - 512
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x004580afbad43d81e5a5aefb63282bf782c35b1a.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.526821
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1006
Estimated Gas Usage: 417 - 512
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x004580afbad43d81e5a5aefb63282bf782c35b1a.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:14.722707
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1089
Estimated Gas Usage: 593 - 688
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x004580afbad43d81e5a5aefb63282bf782c35b1a.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:24.456470
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1091
Estimated Gas Usage: 593 - 688
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x004580afbad43d81e5a5aefb63282bf782c35b1a.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.943338
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeBP(uint256)
PC address: 2585
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x004580afbad43d81e5a5aefb63282bf782c35b1a.sol:1256

uint[] public bonusRangeBP

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:40.523594
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeStart(uint256)
PC address: 6017
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x004580afbad43d81e5a5aefb63282bf782c35b1a.sol:1254

uint[] public bonusRangeStart

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:37.386856
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: calculateRatePerEth(uint256,uint256,uint256)
PC address: 6866
Estimated Gas Usage: 955 - 1050
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x004580afbad43d81e5a5aefb63282bf782c35b1a.sol:324

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0xd926103b4ef429208169553c53caeb8f45ae6172.sol
Total states:499
5.417873
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0xcb8682d159ae26caedd115b2478700510c92b2b4.sol
Total states:4302
15.938143
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:08.232574
Transaction Length: 1
Severity: Low
Contract: KOREv1Router
Function name: fallback
PC address: 2051
Estimated Gas Usage: 7941 - 29735
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0xcb8682d159ae26caedd115b2478700510c92b2b4.sol:642

_WETH.deposit.value(msg.value)()

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:09.198378
Transaction Length: 1
Severity: Low
Contract: KOREv1Router
Function name: refreshApproval()
PC address: 4484
Estimated Gas Usage: 1921 - 3147
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0xcb8682d159ae26caedd115b2478700510c92b2b4.sol:626

IUniswapV2Pair(_koreWETHPair).approve(address(_koreVault), uint(-1))

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x4d2be030cef4f9a51cc81ab92cda12c5a90e4338.sol
Total states:16652
374.972938
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:01:40.348862
Transaction Length: 1
Severity: Low
Contract: SpacePodsUSDC
Function name: depositSZToken(address,uint256)
PC address: 7242
Estimated Gas Usage: 3085 - 4406
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x4d2be030cef4f9a51cc81ab92cda12c5a90e4338.sol:337

token.intTransfer(_from,address(this),amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:02:54.790128
Transaction Length: 2
Severity: Low
Contract: SpacePodsUSDC
Function name: depositSZToken(address,uint256)
PC address: 7242
Estimated Gas Usage: 3085 - 4406
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x4d2be030cef4f9a51cc81ab92cda12c5a90e4338.sol:337

token.intTransfer(_from,address(this),amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:01:25.919176
Transaction Length: 1
Severity: Low
Contract: SpacePodsUSDC
Function name: depositToken(address,uint256)
PC address: 7917
Estimated Gas Usage: 2685 - 3581
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x4d2be030cef4f9a51cc81ab92cda12c5a90e4338.sol:311

token.deposit(_from,amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:02:25.535002
Transaction Length: 2
Severity: Low
Contract: SpacePodsUSDC
Function name: depositToken(address,uint256)
PC address: 7917
Estimated Gas Usage: 2685 - 3581
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x4d2be030cef4f9a51cc81ab92cda12c5a90e4338.sol:311

token.deposit(_from,amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:01:13.604696
Transaction Length: 1
Severity: Low
Contract: SpacePodsUSDC
Function name: depositTokenTerm(address,uint256,uint256)
PC address: 8254
Estimated Gas Usage: 4425 - 40403
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x4d2be030cef4f9a51cc81ab92cda12c5a90e4338.sol:314

token.intTransfer(_from,address(this),amount * (10 ** 12))

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:01:55.438415
Transaction Length: 2
Severity: Low
Contract: SpacePodsUSDC
Function name: depositTokenTerm(address,uint256,uint256)
PC address: 8254
Estimated Gas Usage: 4425 - 40403
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x4d2be030cef4f9a51cc81ab92cda12c5a90e4338.sol:314

token.intTransfer(_from,address(this),amount * (10 ** 12))

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:49.696317
Transaction Length: 1
Severity: Low
Contract: SpacePodsUSDC
Function name: interests(uint256)
PC address: 11735
Estimated Gas Usage: 746 - 841
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x4d2be030cef4f9a51cc81ab92cda12c5a90e4338.sol:147

InterestStruct[] public interests

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:03:01.938717
Transaction Length: 1
Severity: Low
Contract: SpacePodsUSDC
Function name: borrow(uint256)
PC address: 21098
Estimated Gas Usage: 57191 - 296141
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x4d2be030cef4f9a51cc81ab92cda12c5a90e4338.sol:655

catToken.intTransfer(_addr,address(this),amount)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x36ef5ad3348da55519ffdcd17eb42b05c6108e57.sol
Total states:1322
80.243053
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.825023
Transaction Length: 1
Severity: High
Contract: TimeLock
Function name: addParameters(address[],uint256[],uint256[])
PC address: 857
Estimated Gas Usage: 384 - 479
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x36ef5ad3348da55519ffdcd17eb42b05c6108e57.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.216532
Transaction Length: 1
Severity: High
Contract: TimeLock
Function name: addParameters(address[],uint256[],uint256[])
PC address: 859
Estimated Gas Usage: 384 - 479
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x36ef5ad3348da55519ffdcd17eb42b05c6108e57.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.806107
Transaction Length: 1
Severity: High
Contract: TimeLock
Function name: addParameters(address[],uint256[],uint256[])
PC address: 942
Estimated Gas Usage: 560 - 655
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x36ef5ad3348da55519ffdcd17eb42b05c6108e57.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:22.115529
Transaction Length: 1
Severity: High
Contract: TimeLock
Function name: addParameters(address[],uint256[],uint256[])
PC address: 944
Estimated Gas Usage: 560 - 655
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x36ef5ad3348da55519ffdcd17eb42b05c6108e57.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:37.427692
Transaction Length: 1
Severity: High
Contract: TimeLock
Function name: addParameters(address[],uint256[],uint256[])
PC address: 1027
Estimated Gas Usage: 736 - 831
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x36ef5ad3348da55519ffdcd17eb42b05c6108e57.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:01.608098
Transaction Length: 1
Severity: High
Contract: TimeLock
Function name: addParameters(address[],uint256[],uint256[])
PC address: 1029
Estimated Gas Usage: 736 - 831
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x36ef5ad3348da55519ffdcd17eb42b05c6108e57.sol:3

*/

/**
 *Submitted for verification

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x4d4deb670ae7fddb8f0025f388a81e3a6933f211.sol
Total states:2434
15.096324
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:12.359741
Transaction Length: 1
Severity: Low
Contract: COREv1Router
Function name: fallback()
PC address: 1389
Estimated Gas Usage: 1767 - 2851
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x4d4deb670ae7fddb8f0025f388a81e3a6933f211.sol:606

_WETH.deposit.value(msg.value)()

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x78672912e4c8a8192a51e52fdf3c8887ee64ce27.sol
Total states:29348
230.757827
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:06.931255
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3645
Estimated Gas Usage: 1025 - 1500
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x78672912e4c8a8192a51e52fdf3c8887ee64ce27.sol:56

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:44.214573
Transaction Length: 2
Severity: High
Contract: ERC20Burnable
Function name: increaseAllowance(address,uint256)
PC address: 5092
Estimated Gas Usage: 1003 - 1478
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x78672912e4c8a8192a51e52fdf3c8887ee64ce27.sol:56

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:34.155755
Transaction Length: 2
Severity: High
Contract: ERC20Mintable
Function name: increaseAllowance(address,uint256)
PC address: 5125
Estimated Gas Usage: 1003 - 1478
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x78672912e4c8a8192a51e52fdf3c8887ee64ce27.sol:56

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:31.176838
Transaction Length: 2
Severity: High
Contract: ERC20Pausable
Function name: increaseAllowance(address,uint256)
PC address: 5478
Estimated Gas Usage: 1070 - 1545
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x78672912e4c8a8192a51e52fdf3c8887ee64ce27.sol:56

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x0073a236ee3dbd8a133f8d9d4717c0d6a042e392.sol
Total states:738
3.56392
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x098eabc5cb8ca7d8aaeaf0a927a5c2bbcedffb30.sol
Total states:77
2.9132
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x061f57eA8383558A7E20F84948d0F11A6e1BcDe2.sol
Total states:24247
174.716209
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.972567
Transaction Length: 1
Severity: High
Contract: DMGYieldFarmingV1
Function name: initialize(address,address,address,uint256,address[],address[],uint8[],uint16[])
PC address: 3958
Estimated Gas Usage: 598 - 693
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x061f57eA8383558A7E20F84948d0F11A6e1BcDe2.sol:5

olidity ^0.5.0;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.953311
Transaction Length: 1
Severity: High
Contract: DMGYieldFarmingV1
Function name: initialize(address,address,address,uint256,address[],address[],uint8[],uint16[])
PC address: 3960
Estimated Gas Usage: 598 - 693
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x061f57eA8383558A7E20F84948d0F11A6e1BcDe2.sol:3

*/

//pragma solidity ^0.5.0;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:21.624358
Transaction Length: 1
Severity: High
Contract: DMGYieldFarmingV1
Function name: initialize(address,address,address,uint256,address[],address[],uint8[],uint16[])
PC address: 4106
Estimated Gas Usage: 931 - 3708
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x061f57eA8383558A7E20F84948d0F11A6e1BcDe2.sol:5

olidity ^0.5.0;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:28.700643
Transaction Length: 1
Severity: High
Contract: DMGYieldFarmingV1
Function name: initialize(address,address,address,uint256,address[],address[],uint8[],uint16[])
PC address: 4108
Estimated Gas Usage: 931 - 3708
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x061f57eA8383558A7E20F84948d0F11A6e1BcDe2.sol:3

*/

//pragma solidity ^0.5.0;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:48.010106
Transaction Length: 1
Severity: High
Contract: DMGYieldFarmingV1
Function name: initialize(address,address,address,uint256,address[],address[],uint8[],uint16[])
PC address: 4254
Estimated Gas Usage: 1264 - 6723
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x061f57eA8383558A7E20F84948d0F11A6e1BcDe2.sol:5

olidity ^0.5.0;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:58.503344
Transaction Length: 1
Severity: High
Contract: DMGYieldFarmingV1
Function name: initialize(address,address,address,uint256,address[],address[],uint8[],uint16[])
PC address: 4256
Estimated Gas Usage: 1264 - 6723
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x061f57eA8383558A7E20F84948d0F11A6e1BcDe2.sol:3

*/

//pragma solidity ^0.5.0;
pragma

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x88f042fdea1d94ccd7b848686f9f529552085110.sol
Total states:10447
3211.723542
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:11.129901
Transaction Length: 2
Severity: Low
Contract: LPStaker
Function name: withdraw(address)
PC address: 1742
Estimated Gas Usage: 20413 - 84139
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x88f042fdea1d94ccd7b848686f9f529552085110.sol:223

depositToken.transfer(to, balance)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:22.362853
Transaction Length: 2
Severity: Low
Contract: LPStaker
Function name: withdraw(address)
PC address: 2124
Estimated Gas Usage: 22549 - 121262
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x88f042fdea1d94ccd7b848686f9f529552085110.sol:224

rewardToken1.transfer(to, reward)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:37.591530
Transaction Length: 2
Severity: Low
Contract: LPStaker
Function name: withdraw(address)
PC address: 2509
Estimated Gas Usage: 24693 - 158393
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x88f042fdea1d94ccd7b848686f9f529552085110.sol:225

rewardToken2.transfer(to, reward * 75)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:17:42.079376
Transaction Length: 1
Severity: Low
Contract: LPStaker
Function name: depositWithBonus(uint128,bool)
PC address: 3970
Estimated Gas Usage: 33969 - 139837
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x88f042fdea1d94ccd7b848686f9f529552085110.sol:204

depositToken.transferFrom(msg.sender, address(this), amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:23:30.127546
Transaction Length: 2
Severity: Low
Contract: LPStaker
Function name: depositWithBonus(uint128,bool)
PC address: 3970
Estimated Gas Usage: 33969 - 139837
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x88f042fdea1d94ccd7b848686f9f529552085110.sol:204

depositToken.transferFrom(msg.sender, address(this), amount)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x331bfba995C3c2273194c690537708948d11c86a.sol
Total states:65
0.753833
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x9a48a188c6db08c811a8d66a6e474e498fceb88f.sol
Total states:149
2.682668
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0xaaa601ae20077f9fae80494ddc36bb39c952c2d02.sol
Total states:7896
52.552592
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.966459
Transaction Length: 1
Severity: High
Contract: PriceFeeds
Function name: setPriceFeed(address[],address[])
PC address: 1295
Estimated Gas Usage: 385 - 480
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xaaa601ae20077f9fae80494ddc36bb39c952c2d02.sol:6

yright 2017-2020, bZe

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.947411
Transaction Length: 1
Severity: High
Contract: PriceFeeds
Function name: setPriceFeed(address[],address[])
PC address: 1297
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xaaa601ae20077f9fae80494ddc36bb39c952c2d02.sol:3

*/

/**
 * Copyright 2017-2020, bZer

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:17.126279
Transaction Length: 1
Severity: High
Contract: PriceFeeds
Function name: setPriceFeed(address[],address[])
PC address: 1380
Estimated Gas Usage: 561 - 656
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xaaa601ae20077f9fae80494ddc36bb39c952c2d02.sol:6

yright 2017-2020, bZe

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:30.691089
Transaction Length: 1
Severity: High
Contract: PriceFeeds
Function name: setPriceFeed(address[],address[])
PC address: 1382
Estimated Gas Usage: 561 - 656
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xaaa601ae20077f9fae80494ddc36bb39c952c2d02.sol:3

*/

/**
 * Copyright 2017-2020, bZer

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:42.960179
Transaction Length: 1
Severity: High
Contract: PriceFeeds
Function name: setDecimals(address[])
PC address: 1865
Estimated Gas Usage: 385 - 480
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xaaa601ae20077f9fae80494ddc36bb39c952c2d02.sol:6

yright 2017-2020, bZe

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:46.581361
Transaction Length: 1
Severity: High
Contract: PriceFeeds
Function name: setDecimals(address[])
PC address: 1867
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xaaa601ae20077f9fae80494ddc36bb39c952c2d02.sol:3

*/

/**
 * Copyright 2017-2020, bZer

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.217460
Transaction Length: 1
Severity: High
Contract: PriceFeeds
Function name: checkPriceDisagreement(address,address,uint256,uint256,uint256)
PC address: 6399
Estimated Gas Usage: 1065 - 1490
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xaaa601ae20077f9fae80494ddc36bb39c952c2d02.sol:181

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x8B78029AFdB3f9E65912aF6b5b6A3dB99D4c7594.sol
Total states:1023
59.955223
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:18.265039
Transaction Length: 1
Severity: High
Contract: Multicall
Function name: aggregate((address,bytes)[])
PC address: 1027
Estimated Gas Usage: 668 - 1046
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x8B78029AFdB3f9E65912aF6b5b6A3dB99D4c7594.sol:42

; i < calls.length; i++) {

  

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:08.642731
Transaction Length: 1
Severity: High
Contract: Multicall
Function name: aggregate((address,bytes)[])
PC address: 1166
Estimated Gas Usage: 668 - 1046
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x8B78029AFdB3f9E65912aF6b5b6A3dB99D4c7594.sol:76

imestamp;

    }

 

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x30a7a3cefe09d9b2e834d5c811d56b7eb086f763.sol
Total states:12852
501.738962
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.159010
Transaction Length: 1
Severity: High
Contract: Module
Function name: getModuleAddress(string)
PC address: 416
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x30a7a3cefe09d9b2e834d5c811d56b7eb086f763.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.187237
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SBTC
Function name: handleDeposit(address[],uint256[])
PC address: 1722
Estimated Gas Usage: 452 - 547
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x30a7a3cefe09d9b2e834d5c811d56b7eb086f763.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.894989
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SBTC
Function name: handleDeposit(address[],uint256[])
PC address: 1724
Estimated Gas Usage: 452 - 547
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x30a7a3cefe09d9b2e834d5c811d56b7eb086f763.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:15.284614
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SBTC
Function name: handleDeposit(address[],uint256[])
PC address: 1870
Estimated Gas Usage: 785 - 3562
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x30a7a3cefe09d9b2e834d5c811d56b7eb086f763.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:29.375619
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SBTC
Function name: handleDeposit(address[],uint256[])
PC address: 1872
Estimated Gas Usage: 785 - 3562
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x30a7a3cefe09d9b2e834d5c811d56b7eb086f763.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:36.004102
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SBTC
Function name: getModuleAddress(string)
PC address: 2154
Estimated Gas Usage: 407 - 502
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x30a7a3cefe09d9b2e834d5c811d56b7eb086f763.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:12.704007
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SBTC
Function name: withdraw(address,uint256[])
PC address: 2519
Estimated Gas Usage: 397 - 492
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x30a7a3cefe09d9b2e834d5c811d56b7eb086f763.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:17.002181
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SBTC
Function name: withdraw(address,uint256[])
PC address: 2521
Estimated Gas Usage: 397 - 492
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x30a7a3cefe09d9b2e834d5c811d56b7eb086f763.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:11.312907
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SBTC
Function name: supportedTokens()
PC address: 3104
Estimated Gas Usage: 1272 - 2119
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x30a7a3cefe09d9b2e834d5c811d56b7eb086f763.sol:1304

function supportedTokens() public view returns(address[] memory){
        return _registeredTokens;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:41.816704
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SBTC
Function name: supportedTokens()
PC address: 3144
Estimated Gas Usage: 1422 - 2645
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x30a7a3cefe09d9b2e834d5c811d56b7eb086f763.sol:1304

function supportedTokens() public view returns(address[] memory){
        return _registeredTokens;
    }

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x68f989f17ce7e21b1b82235a89098a00771528ef.sol
Total states:120
359.924691
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.154497
Transaction Length: 1
Severity: High
Contract: MSTX
Function name: withdrawBalances(address[],uint256[],bool)
PC address: 3280
Estimated Gas Usage: 386 - 481
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x68f989f17ce7e21b1b82235a89098a00771528ef.sol:9

X-License-Identifier:

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.452743
Transaction Length: 1
Severity: High
Contract: MSTX
Function name: withdrawBalances(address[],uint256[],bool)
PC address: 3282
Estimated Gas Usage: 386 - 481
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x68f989f17ce7e21b1b82235a89098a00771528ef.sol:3



*/



// SPDX-License-Identifier: 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.912849
Transaction Length: 1
Severity: High
Contract: MSTX
Function name: withdrawBalances(address[],uint256[],bool)
PC address: 3365
Estimated Gas Usage: 562 - 657
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x68f989f17ce7e21b1b82235a89098a00771528ef.sol:9

X-License-Identifier:

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:23.344023
Transaction Length: 1
Severity: High
Contract: MSTX
Function name: withdrawBalances(address[],uint256[],bool)
PC address: 3367
Estimated Gas Usage: 562 - 657
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x68f989f17ce7e21b1b82235a89098a00771528ef.sol:3



*/



// SPDX-License-Identifier: 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:42.279405
Transaction Length: 1
Severity: High
Contract: MSTX
Function name: submitActionProposal(address,uint256,uint256,bytes32,bytes)
PC address: 4844
Estimated Gas Usage: 500 - 595
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x68f989f17ce7e21b1b82235a89098a00771528ef.sol:3



*/



// SPDX-License-Identifier:

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:43.955534
Transaction Length: 1
Severity: High
Contract: MSTX
Function name: symbol()
PC address: 5079
Estimated Gas Usage: 551 - 1681
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x68f989f17ce7e21b1b82235a89098a00771528ef.sol:256

string public constant symbol = "MSTX"

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:28.362118
Transaction Length: 1
Severity: High
Contract: MSTX
Function name: init(address,address,address[],uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256)
PC address: 5614
Estimated Gas Usage: 473 - 568
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x68f989f17ce7e21b1b82235a89098a00771528ef.sol:9

X-License-Identifier:

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:32.922528
Transaction Length: 1
Severity: High
Contract: MSTX
Function name: init(address,address,address[],uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256)
PC address: 5616
Estimated Gas Usage: 473 - 568
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x68f989f17ce7e21b1b82235a89098a00771528ef.sol:3



*/



// SPDX-License-Identifier: 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:38.708385
Transaction Length: 1
Severity: High
Contract: MSTX
Function name: init(address,address,address[],uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256)
PC address: 5699
Estimated Gas Usage: 649 - 744
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x68f989f17ce7e21b1b82235a89098a00771528ef.sol:9

X-License-Identifier:

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:50.107254
Transaction Length: 1
Severity: High
Contract: MSTX
Function name: init(address,address,address[],uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256)
PC address: 5701
Estimated Gas Usage: 649 - 744
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x68f989f17ce7e21b1b82235a89098a00771528ef.sol:3



*/



// SPDX-License-Identifier: 

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:02.700195
Transaction Length: 1
Severity: Low
Contract: MSTX
Function name: approvedTokens(uint256)
PC address: 9442
Estimated Gas Usage: 769 - 864
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x68f989f17ce7e21b1b82235a89098a00771528ef.sol:294

address[] public approvedTokens

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:04.746595
Transaction Length: 1
Severity: Low
Contract: MSTX
Function name: proposalQueue(uint256)
PC address: 12834
Estimated Gas Usage: 747 - 842
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x68f989f17ce7e21b1b82235a89098a00771528ef.sol:300

uint256[] public proposalQueue

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x175d6cbaeff93734ada4c5430815f2208a6b040c.sol
Total states:272
74.181238
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.065903
Transaction Length: 0
Severity: High
Contract: VaultProRata
Function name: constructor
PC address: 408
Estimated Gas Usage: 82423 - 403508
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x175d6cbaeff93734ada4c5430815f2208a6b040c.sol:34

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.559140
Transaction Length: 0
Severity: Low
Contract: VaultProRata
Function name: constructor
PC address: 422
Estimated Gas Usage: 82433 - 403518
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x175d6cbaeff93734ada4c5430815f2208a6b040c.sol:35

assert(c >= a)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x0f216323076dfe029f01b3deb3bc1682b1ea8a37.sol
Total states:60
482.685685
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.053639
Transaction Length: 1
Severity: High
Contract: Utils_Vether
Function name: getGlobalDetails()
PC address: 6686
Estimated Gas Usage: 2475 - 38127
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x0f216323076dfe029f01b3deb3bc1682b1ea8a37.sol:5

se-Identifier: 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.964970
Transaction Length: 1
Severity: High
Contract: Utils_Vether
Function name: getGlobalDetails()
PC address: 6689
Estimated Gas Usage: 2475 - 38127
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x0f216323076dfe029f01b3deb3bc1682b1ea8a37.sol:3



// SPDX-License-Identifier: UNLICENSED
//

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.516917
Transaction Length: 1
Severity: High
Contract: Utils_Vether
Function name: getGlobalDetails()
PC address: 6701
Estimated Gas Usage: 2475 - 38127
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x0f216323076dfe029f01b3deb3bc1682b1ea8a37.sol:179

DAO.ROUTER()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.619970
Transaction Length: 1
Severity: High
Contract: Utils_Vether
Function name: allTokens()
PC address: 9677
Estimated Gas Usage: 2259 - 37153
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x0f216323076dfe029f01b3deb3bc1682b1ea8a37.sol:5

se-Identifier: 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.553644
Transaction Length: 1
Severity: High
Contract: Utils_Vether
Function name: allTokens()
PC address: 9680
Estimated Gas Usage: 2259 - 37153
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x0f216323076dfe029f01b3deb3bc1682b1ea8a37.sol:3



// SPDX-License-Identifier: UNLICENSED
//

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.628762
Transaction Length: 1
Severity: High
Contract: Utils_Vether
Function name: allTokens()
PC address: 9692
Estimated Gas Usage: 2259 - 37153
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x0f216323076dfe029f01b3deb3bc1682b1ea8a37.sol:195

DAO.ROUTER()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.650531
Transaction Length: 1
Severity: High
Contract: Utils_Vether
Function name: allTokens()
PC address: 9833
Estimated Gas Usage: 4077 - 73533
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x0f216323076dfe029f01b3deb3bc1682b1ea8a37.sol:3



// SPDX-License-Identifier: UNLICENSED
//

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.952684
Transaction Length: 1
Severity: High
Contract: Utils_Vether
Function name: allTokens()
PC address: 9845
Estimated Gas Usage: 4077 - 73533
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x0f216323076dfe029f01b3deb3bc1682b1ea8a37.sol:195

iROUTER(DAO.ROUTER()).tokenCount()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:00.958859
Transaction Length: 1
Severity: High
Contract: Utils_Vether
Function name: tokenCount()
PC address: 11033
Estimated Gas Usage: 2320 - 37214
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x0f216323076dfe029f01b3deb3bc1682b1ea8a37.sol:5

se-Identifier: 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:57.103045
Transaction Length: 1
Severity: High
Contract: Utils_Vether
Function name: tokenCount()
PC address: 11036
Estimated Gas Usage: 2320 - 37214
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x0f216323076dfe029f01b3deb3bc1682b1ea8a37.sol:3



// SPDX-License-Identifier: UNLICENSED
//

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:59.093118
Transaction Length: 1
Severity: High
Contract: Utils_Vether
Function name: tokenCount()
PC address: 11048
Estimated Gas Usage: 2320 - 37214
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x0f216323076dfe029f01b3deb3bc1682b1ea8a37.sol:192

DAO.ROUTER()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:31.031841
Transaction Length: 1
Severity: High
Contract: Utils_Vether
Function name: getTokenDetails(address)
PC address: 16717
Estimated Gas Usage: 2320 - 37214
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x0f216323076dfe029f01b3deb3bc1682b1ea8a37.sol:89

contract Utils_Vether {

    using SafeMath for uint;

    address public BASE;
    address public DEPLOYER;
    iDAO public DAO;

    struct TokenDetails {
        string name;
        string symbol;
        uint decimals;
        uint totalSupply;
        uint balance;
        address tokenAddress;
    }

    struct ListedAssetDetails {
        string name;
        string symbol;
        uint decimals;
        uint totalSupply;
        uint balance;
        address tokenAddress;
        bool hasClaimed;
    }

    struct GlobalDetails {
        uint totalStaked;
        uint totalVolume;
        uint totalFees;
        uint unstakeTx;
        uint stakeTx;
        uint swapTx;
    }

    struct PoolDataStruct {
        address tokenAddress;
        address poolAddress;
        uint genesis;
        uint baseAmt;
        uint tokenAmt;
        uint baseAmtStaked;
        uint tokenAmtStaked;
        uint fees;
        uint volume;
        uint txCount;
        uint poolUnits;
    }

    // Only Deployer can execute
    modifier onlyDeployer() {
        require(msg.sender == DEPLOYER, "DeployerErr");
        _;
    }

    constructor () public payable {
        BASE = 0x4Ba6dDd7b89ed838FEd25d208D4f644106E34279;
        DEPLOYER = msg.sender;
    }

    function setGenesisDao(address dao) public onlyDeployer {
        DAO = iDAO(dao);
    }

    //====================================DATA-HELPERS====================================//

    function getTokenDetails(address token) public view returns (TokenDetails memory tokenDetails){
        return getTokenDetailsWithMember(token, msg.sender);
    }

    function getTokenDetailsWithMember(address token, address member) public view returns (TokenDetails memory tokenDetails){
        if(token == address(0)){
            tokenDetails.name = 'Ethereum';
            tokenDetails.symbol = 'ETH';
            tokenDetails.decimals = 18;
            tokenDetails.totalSupply = 100000000 * 10**18;
            tokenDetails.balance = msg.sender.balance;
        } else {
            tokenDetails.name = iERC20(token).name();
            tokenDetails.symbol = iERC20(token).symbol();
            tokenDetails.decimals = iERC20(token).decimals();
            tokenDetails.totalSupply = iERC20(token).totalSupply();
            tokenDetails.balance = iERC20(token).balanceOf(member);
        }
        tokenDetails.tokenAddress = token;
        return tokenDetails;
    }

    function getGlobalDetails() public view returns (GlobalDetails memory globalDetails){
        globalDetails.totalStaked = iROUTER(DAO.ROUTER()).totalStaked();
        globalDetails.totalVolume = iROUTER(DAO.ROUTER()).totalVolume();
        globalDetails.totalFees = iROUTER(DAO.ROUTER()).totalFees();
        globalDetails.unstakeTx = iROUTER(DAO.ROUTER()).unstakeTx();
        globalDetails.stakeTx = iROUTER(DAO.ROUTER()).stakeTx();
        globalDetails.swapTx = iROUTER(DAO.ROUTER()).swapTx();
        return globalDetails;
    }

    function getPool(address token) public view returns(address payable pool){
        return iROUTER(DAO.ROUTER()).getPool(token);
    }
    function tokenCount() public view returns (uint256 count){
        return iROUTER(DAO.ROUTER()).tokenCount();
    }
    function allTokens() public view returns (address[] memory _allTokens){
        return tokensInRange(0, iROUTER(DAO.ROUTER()).tokenCount()) ;
    }
    function tokensInRange(uint start, uint count) public view returns (address[] memory someTokens){
        if(start.add(count) > tokenCount()){
            count = tokenCount().sub(start);
        }
        address[] memory result = new address[](count);
        for (uint i = 0; i < count; i++){
            result[i] = iROUTER(DAO.ROUTER()).getToken(i);
        }
        return result;
    }
    function allPools() public view returns (address[] memory _allPools){
        return poolsInRange(0, tokenCount());
    }
    function poolsInRange(uint start, uint count) public view returns (address[] memory somePools){
        if(start.add(count) > tokenCount()){
            count = tokenCount().sub(start);
        }
        address[] memory result = new address[](count);
        for (uint i = 0; i<count; i++){
            result[i] = getPool(iROUTER(DAO.ROUTER()).getToken(i));
        }
        return result;
    }

    function getPoolData(address token) public view returns(PoolDataStruct memory poolData){
        address payable pool = getPool(token);
        poolData.poolAddress = pool;
        poolData.tokenAddress = token;
        poolData.genesis = iPOOL(pool).genesis();
        poolData.baseAmt = iPOOL(pool).baseAmt();
        poolData.tokenAmt = iPOOL(pool).tokenAmt();
        poolData.baseAmtStaked = iPOOL(pool).baseAmtStaked();
        poolData.tokenAmtStaked = iPOOL(pool).tokenAmtStaked();
        poolData.fees = iPOOL(pool).fees();
        poolData.volume = iPOOL(pool).volume();
        poolData.txCount = iPOOL(pool).txCount();
        poolData.poolUnits = iERC20(pool).totalSupply();
        return poolData;
    }

    function getMemberShare(address token, address member) public view returns(uint baseAmt, uint tokenAmt){
        address pool = getPool(token);
        uint units = iERC20(pool).balanceOf(member);
        return getPoolShare(token, units);
    }

    function getPoolShare(address token, uint units) public view returns(uint baseAmt, uint tokenAmt){
        address payable pool = getPool(token);
        baseAmt = calcShare(units, iERC20(pool).totalSupply(), iPOOL(pool).baseAmt());
        tokenAmt = calcShare(units, iERC20(pool).totalSupply(), iPOOL(pool).tokenAmt());
        return (baseAmt, tokenAmt);
    }

    function getShareOfBaseAmount(address token, address member) public view returns(uint baseAmt){
        address payable pool = getPool(token);
        uint units = iERC20(pool).balanceOf(member);
        return calcShare(units, iERC20(pool).totalSupply(), iPOOL(pool).baseAmt());
    }
    function getShareOfTokenAmount(address token, address member) public view returns(uint baseAmt){
        address payable pool = getPool(token);
        uint units = iERC20(pool).balanceOf(member);
        return calcShare(units, iERC20(pool).totalSupply(), iPOOL(pool).tokenAmt());
    }

    function getPoolShareAssym(address token, uint units, bool toBase) public view returns(uint baseAmt, uint tokenAmt, uint outputAmt){
        address payable pool = getPool(token);
        if(toBase){
            baseAmt = calcAsymmetricShare(units, iERC20(pool).totalSupply(), iPOOL(pool).baseAmt());
            tokenAmt = 0;
            outputAmt = baseAmt;
        } else {
            baseAmt = 0;
            tokenAmt = calcAsymmetricShare(units, iERC20(pool).totalSupply(), iPOOL(pool).tokenAmt());
            outputAmt = tokenAmt;
        }
        return (baseAmt, tokenAmt, outputAmt);
    }

    function getPoolAge(address token) public view returns (uint daysSinceGenesis){
        address payable pool = getPool(token);
        uint genesis = iPOOL(pool).genesis();
        if(now < genesis.add(86400)){
            return 1;
        } else {
            return (now.sub(genesis)).div(86400);
        }
    }

    function getPoolROI(address token) public view returns (uint roi){
        address payable pool = getPool(token);
        uint _baseStart = iPOOL(pool).baseAmtStaked().mul(2);
        uint _baseEnd = iPOOL(pool).baseAmt().mul(2);
        uint _ROIS = (_baseEnd.mul(10000)).div(_baseStart);
        uint _tokenStart = iPOOL(pool).tokenAmtStaked().mul(2);
        uint _tokenEnd = iPOOL(pool).tokenAmt().mul(2);
        uint _ROIA = (_tokenEnd.mul(10000)).div(_tokenStart);
        return (_ROIS + _ROIA).div(2);
   }

   function getPoolAPY(address token) public view returns (uint apy){
        uint avgROI = getPoolROI(token);
        uint poolAge = getPoolAge(token);
        return (avgROI.mul(365)).div(poolAge);
   }

    function isMember(address token, address member) public view returns(bool){
        address payable pool = getPool(token);
        if (iERC20(pool).balanceOf(member) > 0){
            return true;
        } else {
            return false;
        }
    }

    //====================================PRICING====================================//

    function calcValueInBase(address token, uint amount) public view returns (uint value){
       address payable pool = getPool(token);
       return calcValueInBaseWithPool(pool, amount);
    }

    function calcValueInToken(address token, uint amount) public view returns (uint value){
        address payable pool = getPool(token);
        return calcValueInTokenWithPool(pool, amount);
    }

    function calcTokenPPinBase(address token, uint amount) public view returns (uint _output){
        address payable pool = getPool(token);
        return  calcTokenPPinBaseWithPool(pool, amount);
   }

    function calcBasePPinToken(address token, uint amount) public view returns (uint _output){
        address payable pool = getPool(token);
        return  calcValueInBaseWithPool(pool, amount);
    }

    function calcValueInBaseWithPool(address payable pool, uint amount) public view returns (uint value){
       uint _baseAmt = iPOOL(pool).baseAmt();
       uint _tokenAmt = iPOOL(pool).tokenAmt();
       return (amount.mul(_baseAmt)).div(_tokenAmt);
    }

    function calcValueInTokenWithPool(address payable pool, uint amount) public view returns (uint value){
        uint _baseAmt = iPOOL(pool).baseAmt();
        uint _tokenAmt = iPOOL(pool).tokenAmt();
        return (amount.mul(_tokenAmt)).div(_baseAmt);
    }

    function calcTokenPPinBaseWithPool(address payable pool, uint amount) public view returns (uint _output){
        uint _baseAmt = iPOOL(pool).baseAmt();
        uint _tokenAmt = iPOOL(pool).tokenAmt();
        return  calcSwapOutput(amount, _tokenAmt, _baseAmt);
   }

    function calcBasePPinTokenWithPool(address payable pool, uint amount) public view returns (uint _output){
        uint _baseAmt = iPOOL(pool).baseAmt();
        uint _tokenAmt = iPOOL(pool).tokenAmt();
        return  calcSwapOutput(amount, _baseAmt, _tokenAmt);
    }

    //====================================CORE-MATH====================================//

    function calcPart(uint bp, uint total) public pure returns (uint part){
        // 10,000 basis points = 100.00%
        require((bp <= 10000) && (bp > 0), "Must be correct BP");
        return calcShare(bp, 10000, total);
    }

    function calcShare(uint part, uint total, uint amount) public pure returns (uint share){
        // share = amount * part/total
        return(amount.mul(part)).div(total);
    }

    function  calcSwapOutput(uint x, uint X, uint Y) public pure returns (uint output){
        // y = (x * X * Y )/(x + X)^2
        uint numerator = x.mul(X.mul(Y));
        uint denominator = (x.add(X)).mul(x.add(X));
        return numerator.div(denominator);
    }

    function  calcSwapFee(uint x, uint X, uint Y) public pure returns (uint output){
        // y = (x * x * Y) / (x + X)^2
        uint numerator = x.mul(x.mul(Y));
        uint denominator = (x.add(X)).mul(x.add(X));
        return numerator.div(denominator);
    }

    function calcStakeUnits(uint b, uint B, uint t, uint T) public pure returns (uint units){
        // units = ((T + B) * (t * B + T * b))/(4 * T * B)
        // (part1 * (part2 + part3)) / part4
        uint part1 = T.add(B);
        uint part2 = t.mul(B);
        uint part3 = T.mul(b);
        uint numerator = part1.mul((part2.add(part3)));
        uint part4 = 4 * (T.mul(B));
        return numerator.div(part4);
    }

    function calcAsymmetricShare(uint u, uint U, uint A) public pure returns (uint share){
        // share = (u * U * (2 * A^2 - 2 * U * u + U^2))/U^3
        // (part1 * (part2 - part3 + part4)) / part5
        uint part1 = u.mul(A);
        uint part2 = U.mul(U).mul(2);
        uint part3 = U.mul(u).mul(2);
        uint part4 = u.mul(u);
        uint numerator = part1.mul(part2.sub(part3).add(part4));
        uint part5 = U.mul(U).mul(U);
        return numerator.div(part5);
    }

}

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:02.580060
Transaction Length: 1
Severity: High
Contract: Utils_Vether
Function name: getGlobalDetails()
PC address: 17115
Estimated Gas Usage: 2475 - 38127
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x0f216323076dfe029f01b3deb3bc1682b1ea8a37.sol:41

ion getTokenAmtStaked(a

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:13.374170
Transaction Length: 1
Severity: High
Contract: Utils_Vether
Function name: allTokens()
PC address: 17521
Estimated Gas Usage: 4077 - 73533
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x0f216323076dfe029f01b3deb3bc1682b1ea8a37.sol:145

() public payable {
   

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0xfdd97979b07a27e45ae20d77e93f8fec0b425c49.sol
Total states:15168
36.237783
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.098265
Transaction Length: 0
Severity: High
Contract: LexList
Function name: constructor
PC address: 110
Estimated Gas Usage: 257 - 3030
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xfdd97979b07a27e45ae20d77e93f8fec0b425c49.sol:9

╗     
███

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.113447
Transaction Length: 0
Severity: High
Contract: LexList
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xfdd97979b07a27e45ae20d77e93f8fec0b425c49.sol:9

═╝   ██╔██╗     
███

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.340468
Transaction Length: 1
Severity: High
Contract: LexList
Function name: list(address[])
PC address: 284
Estimated Gas Usage: 319 - 414
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xfdd97979b07a27e45ae20d77e93f8fec0b425c49.sol:6

     ████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.285848
Transaction Length: 1
Severity: High
Contract: LexList
Function name: list(address[])
PC address: 286
Estimated Gas Usage: 319 - 414
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xfdd97979b07a27e45ae20d77e93f8fec0b425c49.sol:3

*/

/*
██╗     █████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.518188
Transaction Length: 1
Severity: High
Contract: LexList
Function name: updateMessage(string)
PC address: 506
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xfdd97979b07a27e45ae20d77e93f8fec0b425c49.sol:3

*/

/*
██╗     ████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.586262
Transaction Length: 1
Severity: High
Contract: LexList
Function name: delist(address[])
PC address: 625
Estimated Gas Usage: 385 - 480
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xfdd97979b07a27e45ae20d77e93f8fec0b425c49.sol:6

     ████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:17.443196
Transaction Length: 1
Severity: High
Contract: LexList
Function name: delist(address[])
PC address: 627
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xfdd97979b07a27e45ae20d77e93f8fec0b425c49.sol:3

*/

/*
██╗     █████

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:22.003451
Transaction Length: 1
Severity: Low
Contract: LexList
Function name: listings(uint256)
PC address: 4282
Estimated Gas Usage: 700 - 795
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0xfdd97979b07a27e45ae20d77e93f8fec0b425c49.sol:23

address[] public listings

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x8b2b9eedc067e739ba99f5573ce57a34ade61a94.sol
Total states:120
4.049305
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0xfc98e825a2264d890f9a1e68ed50e1526abccacd.sol
Total states:77909
262.773522
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.037530
Transaction Length: 0
Severity: High
Contract: TokenAccessList
Function name: constructor
PC address: 108
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xfc98e825a2264d890f9a1e68ed50e1526abccacd.sol:16

ping (address => bool) bearer;
    }

    /

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.397826
Transaction Length: 1
Severity: High
Contract: TokenAccessList
Function name: disableWalletList(address[])
PC address: 362
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xfc98e825a2264d890f9a1e68ed50e1526abccacd.sol:5

olidity ^0.5.0;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.030028
Transaction Length: 1
Severity: High
Contract: TokenAccessList
Function name: disableWalletList(address[])
PC address: 364
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xfc98e825a2264d890f9a1e68ed50e1526abccacd.sol:3

*/

//pragma solidity ^0.5.0;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:19.893939
Transaction Length: 1
Severity: High
Contract: TokenAccessList
Function name: enableWalletList(address[])
PC address: 878
Estimated Gas Usage: 362 - 457
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xfc98e825a2264d890f9a1e68ed50e1526abccacd.sol:5

olidity ^0.5.0;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:24.020738
Transaction Length: 1
Severity: High
Contract: TokenAccessList
Function name: enableWalletList(address[])
PC address: 880
Estimated Gas Usage: 362 - 457
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xfc98e825a2264d890f9a1e68ed50e1526abccacd.sol:3

*/

//pragma solidity ^0.5.0;
pragma

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:33.108179
Transaction Length: 1
Severity: High
Contract: TokenAccessList
Function name: identifier()
PC address: 2134
Estimated Gas Usage: 1331 - 2178
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xfc98e825a2264d890f9a1e68ed50e1526abccacd.sol:489

string public identifier

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:32.650593
Transaction Length: 1
Severity: High
Contract: TokenAccessList
Function name: identifier()
PC address: 2186
Estimated Gas Usage: 1190 - 1568
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xfc98e825a2264d890f9a1e68ed50e1526abccacd.sol:489

string public identifier

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.860854
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3044
Estimated Gas Usage: 989 - 1464
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xfc98e825a2264d890f9a1e68ed50e1526abccacd.sol:331

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.488906
Transaction Length: 2
Severity: High
Contract: ERC20Mintable
Function name: increaseAllowance(address,uint256)
PC address: 3626
Estimated Gas Usage: 989 - 1464
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xfc98e825a2264d890f9a1e68ed50e1526abccacd.sol:331

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.334576
Transaction Length: 2
Severity: High
Contract: ERC20BurnableAdmin
Function name: increaseAllowance(address,uint256)
PC address: 3881
Estimated Gas Usage: 989 - 1464
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xfc98e825a2264d890f9a1e68ed50e1526abccacd.sol:331

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.579433
Transaction Length: 2
Severity: High
Contract: ERC20Operator
Function name: increaseAllowance(address,uint256)
PC address: 4057
Estimated Gas Usage: 1011 - 1486
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xfc98e825a2264d890f9a1e68ed50e1526abccacd.sol:331

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.833222
Transaction Length: 2
Severity: High
Contract: ERC20CapEnabler
Function name: increaseAllowance(address,uint256)
PC address: 4836
Estimated Gas Usage: 967 - 1442
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xfc98e825a2264d890f9a1e68ed50e1526abccacd.sol:331

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x2f7bd0c24ffec8ab1b08c12d01123f875b4dad2c.sol
Total states:123717
284.938781
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.116718
Transaction Length: 0
Severity: High
Contract: CLIPricingStrategy
Function name: constructor
PC address: 130
Estimated Gas Usage: 317 - 3276
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x2f7bd0c24ffec8ab1b08c12d01123f875b4dad2c.sol:12

these are generally a

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:01.367732
Transaction Length: 1
Severity: Medium
Contract: CLIStats
Function name: getWeis(uint256)
PC address: 2203
Estimated Gas Usage: 7850 - 147417
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 5401
Offset: 5557
Offset: 5762
Offset: 5945
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop7/0x2f7bd0c24ffec8ab1b08c12d01123f875b4dad2c.sol:3028

function getWeis(
        uint256 _tokenAmount
    )
        public
        view
        returns (uint256 totalWeiAmount, uint256)
    {
        uint256 tokensSold = CLICrowdsale(
            management.contractRegistry(CONTRACT_CROWDSALE)
        ).tokensSold();

        return CLIPricingStrategy(
            management.contractRegistry(CONTRACT_PRICING)
        ).getWeis(0, tokensSold, _tokenAmount);
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.293880
Transaction Length: 1
Severity: High
Contract: CLIStats
Function name: ERROR_NO_CONTRACT()
PC address: 3106
Estimated Gas Usage: 528 - 1658
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x2f7bd0c24ffec8ab1b08c12d01123f875b4dad2c.sol:320

string public constant ERROR_NO_CONTRACT = "ERROR_NO_CONTRACT"

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.216861
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3244
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x2f7bd0c24ffec8ab1b08c12d01123f875b4dad2c.sol:145

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.503190
Transaction Length: 1
Severity: Low
Contract: LockupContract
Function name: lockedAllocationData(address,uint256)
PC address: 3295
Estimated Gas Usage: 821 - 1106
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x2f7bd0c24ffec8ab1b08c12d01123f875b4dad2c.sol:2166

mapping(address => uint256[]) public lockedAllocationData

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:29.615216
Transaction Length: 1
Severity: High
Contract: CLIStats
Function name: ERROR_ACCESS_DENIED()
PC address: 3365
Estimated Gas Usage: 549 - 1679
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x2f7bd0c24ffec8ab1b08c12d01123f875b4dad2c.sol:318

string public constant ERROR_ACCESS_DENIED = "ERROR_ACCESS_DENIED"

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.468756
Transaction Length: 1
Severity: Low
Contract: CLIContribution
Function name: contributions(uint256)
PC address: 3504
Estimated Gas Usage: 791 - 886
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x2f7bd0c24ffec8ab1b08c12d01123f875b4dad2c.sol:2653

Contribution[] public contributions

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.951341
Transaction Length: 2
Severity: High
Contract: LockupContract
Function name: getUnlockedBalance(address,uint256,uint256)
PC address: 3578
Estimated Gas Usage: 2951 - 4089
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x2f7bd0c24ffec8ab1b08c12d01123f875b4dad2c.sol:2233

uint256[] memory  addressLockupData = lockedAllocationData[_address]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.156984
Transaction Length: 2
Severity: High
Contract: LockupContract
Function name: getUnlockedBalance(address,uint256,uint256)
PC address: 3603
Estimated Gas Usage: 2951 - 4089
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x2f7bd0c24ffec8ab1b08c12d01123f875b4dad2c.sol:2233

uint256[] memory  addressLockupData = lockedAllocationData[_address]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.388499
Transaction Length: 2
Severity: High
Contract: LockupContract
Function name: getUnlockedBalance(address,uint256,uint256)
PC address: 3605
Estimated Gas Usage: 2951 - 4089
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x2f7bd0c24ffec8ab1b08c12d01123f875b4dad2c.sol:2233

uint256[] memory  addressLockupData = lockedAllocationData[_address]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.727883
Transaction Length: 2
Severity: High
Contract: ERC20Mintable
Function name: increaseAllowance(address,uint256)
PC address: 3847
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x2f7bd0c24ffec8ab1b08c12d01123f875b4dad2c.sol:145

a + b

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:01.799694
Transaction Length: 1
Severity: Low
Contract: CLIAllocator
Function name: unlockManuallyLockedBalances(address)
PC address: 4785
Estimated Gas Usage: 5545 - 76368
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x2f7bd0c24ffec8ab1b08c12d01123f875b4dad2c.sol:2349

lockupContract.setManuallyLockedForAddress(
            _holder,
            0
        )

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.425842
Transaction Length: 1
Severity: High
Contract: LockupContract
Function name: allocationLog(address,uint256,uint256,uint256,uint256,uint256)
PC address: 5243
Estimated Gas Usage: 13852 - 89787
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x2f7bd0c24ffec8ab1b08c12d01123f875b4dad2c.sol:2

ification at Ether

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.056426
Transaction Length: 1
Severity: High
Contract: LockupContract
Function name: allocationLog(address,uint256,uint256,uint256,uint256,uint256)
PC address: 5255
Estimated Gas Usage: 24473 - 140693
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x2f7bd0c24ffec8ab1b08c12d01123f875b4dad2c.sol:2213

lockedAllocationData[_address].push(_amount)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.971150
Transaction Length: 1
Severity: High
Contract: LockupContract
Function name: allocationLog(address,uint256,uint256,uint256,uint256,uint256)
PC address: 5348
Estimated Gas Usage: 24473 - 140693
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x2f7bd0c24ffec8ab1b08c12d01123f875b4dad2c.sol:2

ification at Ether

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:09.959412
Transaction Length: 1
Severity: High
Contract: LockupContract
Function name: allocationLog(address,uint256,uint256,uint256,uint256,uint256)
PC address: 5360
Estimated Gas Usage: 35094 - 191599
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x2f7bd0c24ffec8ab1b08c12d01123f875b4dad2c.sol:2214

lockedAllocationData[_address].push(_lockPeriodInSeconds)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.873914
Transaction Length: 1
Severity: High
Contract: LockupContract
Function name: allocationLog(address,uint256,uint256,uint256,uint256,uint256)
PC address: 5453
Estimated Gas Usage: 35094 - 191599
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x2f7bd0c24ffec8ab1b08c12d01123f875b4dad2c.sol:2

ification at Ether

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.178002
Transaction Length: 2
Severity: High
Contract: CLIContribution
Function name: forward()
PC address: 6542
Estimated Gas Usage: 776 - 1249
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x2f7bd0c24ffec8ab1b08c12d01123f875b4dad2c.sol:145

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.858090
Transaction Length: 2
Severity: High
Contract: CLIReferral
Function name: getReferrerTokens(address,uint256)
PC address: 8130
Estimated Gas Usage: 1789 - 2404
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x2f7bd0c24ffec8ab1b08c12d01123f875b4dad2c.sol:199

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.262900
Transaction Length: 1
Severity: High
Contract: CLIStats
Function name: getTiersData()
PC address: 9333
Estimated Gas Usage: 7157 - 145547
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x2f7bd0c24ffec8ab1b08c12d01123f875b4dad2c.sol:5

nzeppelin/contr

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:04.045296
Transaction Length: 1
Severity: Low
Contract: CLICrowdsale
Function name: userSafeAgreementsList(uint256)
PC address: 10947
Estimated Gas Usage: 789 - 884
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x2f7bd0c24ffec8ab1b08c12d01123f875b4dad2c.sol:2834

address[] public userSafeAgreementsList

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x1d44b41a742d2b008a8faf655451aa015a59f248.sol
Total states:1880
106.787285
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.279827
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShip(address[])
PC address: 360
Estimated Gas Usage: 342 - 437
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x1d44b41a742d2b008a8faf655451aa015a59f248.sol:5

olidity ^0.5.9;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.929514
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShip(address[])
PC address: 362
Estimated Gas Usage: 342 - 437
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x1d44b41a742d2b008a8faf655451aa015a59f248.sol:3

*/

//pragma solidity ^0.5.9;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:40.681290
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShipWithHowMany(address[],uint256)
PC address: 776
Estimated Gas Usage: 341 - 436
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x1d44b41a742d2b008a8faf655451aa015a59f248.sol:5

olidity ^0.5.9;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:43.626630
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShipWithHowMany(address[],uint256)
PC address: 778
Estimated Gas Usage: 341 - 436
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x1d44b41a742d2b008a8faf655451aa015a59f248.sol:3

*/

//pragma solidity ^0.5.9;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.225522
Transaction Length: 0
Severity: High
Contract: TokenVesting
Function name: constructor
PC address: 937
Estimated Gas Usage: 7924 - 32078
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x1d44b41a742d2b008a8faf655451aa015a59f248.sol:112

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.173597
Transaction Length: 0
Severity: High
Contract: AkropolisTokenVesting
Function name: constructor
PC address: 1201
Estimated Gas Usage: 7908 - 31969
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x1d44b41a742d2b008a8faf655451aa015a59f248.sol:112

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:32.208012
Transaction Length: 1
Severity: Low
Contract: BeneficiaryOperations
Function name: allOperations(uint256)
PC address: 1715
Estimated Gas Usage: 701 - 796
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x1d44b41a742d2b008a8faf655451aa015a59f248.sol:571

bytes32[] public allOperations

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:39.318796
Transaction Length: 1
Severity: Low
Contract: BeneficiaryOperations
Function name: beneficiaries(uint256)
PC address: 4636
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x1d44b41a742d2b008a8faf655451aa015a59f248.sol:570

address[] public beneficiaries

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x16523645fd051641ce525866f351ed97c058e637.sol
Total states:2324
2.077257
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x1a3b7917b5952eef04e7dd3c9d8a736b57fb2613.sol
Total states:1608
1.235344
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x723091df82333033f1b646fe1ad7bbbf9cbe420c.sol
Total states:1992
76.410405
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x88596e70298e5ae8bcc1e740200f2b9293041542.sol
Total states:14739
93.990836
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.064901
Transaction Length: 2
Severity: High
Contract: RegularToken
Function name: transferFrom(address,address,uint256)
PC address: 2724
Estimated Gas Usage: 2054 - 2909
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x88596e70298e5ae8bcc1e740200f2b9293041542.sol:1450

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:20.323339
Transaction Length: 2
Severity: Low
Contract: RegularToken
Function name: transferFrom(address,address,uint256)
PC address: 2737
Estimated Gas Usage: 2064 - 2919
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x88596e70298e5ae8bcc1e740200f2b9293041542.sol:1451

assert(c >= a)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.549313
Transaction Length: 2
Severity: High
Contract: UnboundedRegularToken
Function name: transferFrom(address,address,uint256)
PC address: 2771
Estimated Gas Usage: 2065 - 2920
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x88596e70298e5ae8bcc1e740200f2b9293041542.sol:1450

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:21.936014
Transaction Length: 2
Severity: Low
Contract: UnboundedRegularToken
Function name: transferFrom(address,address,uint256)
PC address: 2784
Estimated Gas Usage: 2075 - 2930
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x88596e70298e5ae8bcc1e740200f2b9293041542.sol:1451

assert(c >= a)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.148358
Transaction Length: 2
Severity: High
Contract: ETPlanToken
Function name: transferFrom(address,address,uint256)
PC address: 3237
Estimated Gas Usage: 2110 - 2965
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x88596e70298e5ae8bcc1e740200f2b9293041542.sol:1450

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:15.673572
Transaction Length: 2
Severity: Low
Contract: ETPlanToken
Function name: transferFrom(address,address,uint256)
PC address: 3250
Estimated Gas Usage: 2120 - 2975
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x88596e70298e5ae8bcc1e740200f2b9293041542.sol:1451

assert(c >= a)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0xec8e247c4f839701fd4966b3fe1b38dcbdfd6a90.sol
Total states:3456
86.682479
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.023301
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: initialize(uint256,uint256,address[],uint256[],address)
PC address: 787
Estimated Gas Usage: 461 - 556
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xec8e247c4f839701fd4966b3fe1b38dcbdfd6a90.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.352755
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: initialize(uint256,uint256,address[],uint256[],address)
PC address: 789
Estimated Gas Usage: 461 - 556
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xec8e247c4f839701fd4966b3fe1b38dcbdfd6a90.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:15.369778
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: initialize(uint256,uint256,address[],uint256[],address)
PC address: 872
Estimated Gas Usage: 637 - 732
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xec8e247c4f839701fd4966b3fe1b38dcbdfd6a90.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:25.766850
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: initialize(uint256,uint256,address[],uint256[],address)
PC address: 874
Estimated Gas Usage: 637 - 732
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xec8e247c4f839701fd4966b3fe1b38dcbdfd6a90.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:35.626793
Transaction Length: 1
Severity: Medium
Contract: LidTeamLock
Function name: startRelease()
PC address: 1025
Estimated Gas Usage: 20818 - 150697
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 4521
Offset: 4885
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop7/0xec8e247c4f839701fd4966b3fe1b38dcbdfd6a90.sol:694

function startRelease() external {

        require(releaseStart == 0, "Has already started.");

        require(address(this).balance != 0, "Must have some ether deposited.");

        require(lidToken.balanceOf(address(this)) != 0, "Must have some lid deposited.");

        startingLid = lidToken.balanceOf(address(this));

        startingEth = address(this).balance;

        releaseStart = now.add(24 hours);

    }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:00.635662
Transaction Length: 2
Severity: Medium
Contract: LidTeamLock
Function name: startRelease()
PC address: 1025
Estimated Gas Usage: 20818 - 150697
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 4521
Offset: 4885
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop7/0xec8e247c4f839701fd4966b3fe1b38dcbdfd6a90.sol:694

function startRelease() external {

        require(releaseStart == 0, "Has already started.");

        require(address(this).balance != 0, "Must have some ether deposited.");

        require(lidToken.balanceOf(address(this)) != 0, "Must have some lid deposited.");

        startingLid = lidToken.balanceOf(address(this));

        startingEth = address(this).balance;

        releaseStart = now.add(24 hours);

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:36.858075
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 1163
Estimated Gas Usage: 407 - 502
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xec8e247c4f839701fd4966b3fe1b38dcbdfd6a90.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:39.921069
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 1165
Estimated Gas Usage: 407 - 502
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xec8e247c4f839701fd4966b3fe1b38dcbdfd6a90.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:46.231060
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 1248
Estimated Gas Usage: 583 - 678
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xec8e247c4f839701fd4966b3fe1b38dcbdfd6a90.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:01.925333
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 1250
Estimated Gas Usage: 583 - 678
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xec8e247c4f839701fd4966b3fe1b38dcbdfd6a90.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.778824
Transaction Length: 1
Severity: Low
Contract: LidTeamLock
Function name: teamMemberBPs(uint256)
PC address: 1624
Estimated Gas Usage: 679 - 774
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0xec8e247c4f839701fd4966b3fe1b38dcbdfd6a90.sol:572

uint[] public teamMemberBPs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:23.138140
Transaction Length: 1
Severity: Low
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 5028
Estimated Gas Usage: 1070 - 1165
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0xec8e247c4f839701fd4966b3fe1b38dcbdfd6a90.sol:720

teamMemberAddresses[0]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:23.581972
Transaction Length: 1
Severity: Low
Contract: LidTeamLock
Function name: teamMemberAddresses(uint256)
PC address: 5599
Estimated Gas Usage: 678 - 773
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0xec8e247c4f839701fd4966b3fe1b38dcbdfd6a90.sol:570

address payable[] public teamMemberAddresses

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:34.581932
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: startRelease()
PC address: 6511
Estimated Gas Usage: 15758 - 125637
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xec8e247c4f839701fd4966b3fe1b38dcbdfd6a90.sol:186

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x3fefa465e68720b21a79aa00a1f2b1c3048c4909.sol
Total states:304
2.070121
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x16a396a1f587731a915dc1718cf5c661597d3b7e.sol
Total states:36021
195.746428
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.132496
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1004
Estimated Gas Usage: 417 - 512
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x16a396a1f587731a915dc1718cf5c661597d3b7e.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.523779
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1006
Estimated Gas Usage: 417 - 512
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x16a396a1f587731a915dc1718cf5c661597d3b7e.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:15.345487
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1089
Estimated Gas Usage: 593 - 688
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x16a396a1f587731a915dc1718cf5c661597d3b7e.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:27.131400
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1091
Estimated Gas Usage: 593 - 688
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x16a396a1f587731a915dc1718cf5c661597d3b7e.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.894690
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1217
Estimated Gas Usage: 462 - 557
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x16a396a1f587731a915dc1718cf5c661597d3b7e.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.047382
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1219
Estimated Gas Usage: 462 - 557
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x16a396a1f587731a915dc1718cf5c661597d3b7e.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.951528
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1302
Estimated Gas Usage: 638 - 733
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x16a396a1f587731a915dc1718cf5c661597d3b7e.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:19.958000
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1304
Estimated Gas Usage: 638 - 733
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x16a396a1f587731a915dc1718cf5c661597d3b7e.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.741933
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleAccess
Function name: interpolate(uint256,uint256,uint256,uint256,uint256)
PC address: 2313
Estimated Gas Usage: 997 - 1848
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x16a396a1f587731a915dc1718cf5c661597d3b7e.sol:162

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.858770
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeBP(uint256)
PC address: 2585
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x16a396a1f587731a915dc1718cf5c661597d3b7e.sol:784

uint[] public bonusRangeBP

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.391596
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3486
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x16a396a1f587731a915dc1718cf5c661597d3b7e.sol:1266

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:03.927477
Transaction Length: 2
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3486
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x16a396a1f587731a915dc1718cf5c661597d3b7e.sol:1266

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:39.202353
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeStart(uint256)
PC address: 6017
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x16a396a1f587731a915dc1718cf5c661597d3b7e.sol:783

uint[] public bonusRangeStart

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:21.609860
Transaction Length: 1
Severity: Low
Contract: LidStaking
Function name: stakeHandlers(uint256)
PC address: 6118
Estimated Gas Usage: 790 - 885
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x16a396a1f587731a915dc1718cf5c661597d3b7e.sol:962

IStakeHandler[] public stakeHandlers

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.678020
Transaction Length: 2
Severity: High
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6315
Estimated Gas Usage: 1699 - 2124
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x16a396a1f587731a915dc1718cf5c661597d3b7e.sol:1112

stakeHandlers.length-1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:07.940654
Transaction Length: 2
Severity: Low
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6326
Estimated Gas Usage: 1709 - 2134
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x16a396a1f587731a915dc1718cf5c661597d3b7e.sol:1112

stakeHandlers[stakeHandlers.length-1]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:35.670717
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: calculateRatePerEth(uint256,uint256,uint256)
PC address: 6866
Estimated Gas Usage: 955 - 1050
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x16a396a1f587731a915dc1718cf5c661597d3b7e.sol:162

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.345478
Transaction Length: 1
Severity: High
Contract: LidStaking
Function name: findTaxAmount(uint256,uint256)
PC address: 13348
Estimated Gas Usage: 474 - 569
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x16a396a1f587731a915dc1718cf5c661597d3b7e.sol:162

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:32.536498
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPoolBPs(uint256)
PC address: 13879
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x16a396a1f587731a915dc1718cf5c661597d3b7e.sol:1267

uint[] public tokenPoolBPs

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:30.171801
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: getRefundableEth(address)
PC address: 19220
Estimated Gas Usage: 3489 - 38666
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x16a396a1f587731a915dc1718cf5c661597d3b7e.sol:162

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x3a08f5cf2c77d003fe07b69e76ff27cbb1520b4f.sol
Total states:3553
171.389397
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.429475
Transaction Length: 1
Severity: High
Contract: LexGuildLocker
Function name: registerLocker(address,address[],address,address,uint256[],uint256,uint256,uint256,bytes32)
PC address: 355
Estimated Gas Usage: 352 - 447
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x3a08f5cf2c77d003fe07b69e76ff27cbb1520b4f.sol:6

     ████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.280779
Transaction Length: 1
Severity: High
Contract: LexGuildLocker
Function name: registerLocker(address,address[],address,address,uint256[],uint256,uint256,uint256,bytes32)
PC address: 357
Estimated Gas Usage: 352 - 447
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x3a08f5cf2c77d003fe07b69e76ff27cbb1520b4f.sol:3

*/

/*
██╗     █████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:15.295232
Transaction Length: 1
Severity: High
Contract: LexGuildLocker
Function name: registerLocker(address,address[],address,address,uint256[],uint256,uint256,uint256,bytes32)
PC address: 504
Estimated Gas Usage: 594 - 689
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x3a08f5cf2c77d003fe07b69e76ff27cbb1520b4f.sol:6

     ████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:23.354384
Transaction Length: 1
Severity: High
Contract: LexGuildLocker
Function name: registerLocker(address,address[],address,address,uint256[],uint256,uint256,uint256,bytes32)
PC address: 506
Estimated Gas Usage: 594 - 689
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x3a08f5cf2c77d003fe07b69e76ff27cbb1520b4f.sol:3

*/

/*
██╗     █████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:23.690093
Transaction Length: 1
Severity: High
Contract: LexGuildLocker
Function name: resolve(uint256,uint256,uint256[],bytes32)
PC address: 1471
Estimated Gas Usage: 394 - 489
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x3a08f5cf2c77d003fe07b69e76ff27cbb1520b4f.sol:6

     ████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:28.041526
Transaction Length: 1
Severity: High
Contract: LexGuildLocker
Function name: resolve(uint256,uint256,uint256[],bytes32)
PC address: 1473
Estimated Gas Usage: 394 - 489
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x3a08f5cf2c77d003fe07b69e76ff27cbb1520b4f.sol:3

*/

/*
██╗     █████

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:21.015578
Transaction Length: 1
Severity: Low
Contract: LexGuildLocker
Function name: registerLocker(address,address[],address,address,uint256[],uint256,uint256,uint256,bytes32)
PC address: 1730
Estimated Gas Usage: 846 - 941
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x3a08f5cf2c77d003fe07b69e76ff27cbb1520b4f.sol:185

batch[i]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:33.066146
Transaction Length: 1
Severity: High
Contract: LexGuildLocker
Function name: registerLocker(address,address[],address,address,uint256[],uint256,uint256,uint256,bytes32)
PC address: 9688
Estimated Gas Usage: 1414 - 1509
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x3a08f5cf2c77d003fe07b69e76ff27cbb1520b4f.sol:87

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:42.558577
Transaction Length: 1
Severity: High
Contract: LexGuildLocker
Function name: registerLocker(address,address[],address,address,uint256[],uint256,uint256,uint256,bytes32)
PC address: 9739
Estimated Gas Usage: 1157 - 1252
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x3a08f5cf2c77d003fe07b69e76ff27cbb1520b4f.sol:105

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x44d771d0c998f524ff39ab6df64b72bce1d09566.sol
Total states:272
78.43673
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x2da9a52911bd029306398feaea4dd4658247b1f7.sol
Total states:10936
28.018014
==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.809462
Transaction Length: 1
Severity: High
Contract: pSNXVault
Function name: availableWithdraw(address)
PC address: 1869
Estimated Gas Usage: 1088 - 1373
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x2da9a52911bd029306398feaea4dd4658247b1f7.sol:640

_rewardCount - 1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.909391
Transaction Length: 1
Severity: Low
Contract: pSNXVault
Function name: addressIndices(uint256)
PC address: 2343
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x2da9a52911bd029306398feaea4dd4658247b1f7.sol:456

address[] public addressIndices

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.086368
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3244
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x2da9a52911bd029306398feaea4dd4658247b1f7.sol:214

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.667175
Transaction Length: 1
Severity: High
Contract: pSNXVault
Function name: deposit(uint256)
PC address: 5691
Estimated Gas Usage: 11933 - 52453
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x2da9a52911bd029306398feaea4dd4658247b1f7.sol:252

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x29f81a819481044105a779480f3ba6b39edc6c2d.sol
Total states:10115
24.000869
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.031756
Transaction Length: 0
Severity: High
Contract: ERC20TOKEN
Function name: constructor
PC address: 98
Estimated Gas Usage: 233 - 3006
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x29f81a819481044105a779480f3ba6b39edc6c2d.sol:25

t, herein "Interests" involves substantial 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.254778
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3244
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x29f81a819481044105a779480f3ba6b39edc6c2d.sol:344

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x6a89b3c90d66081ab7a555a3e8411d9bde2c493e.sol
Total states:1880
98.175543
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.319539
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShip(address[])
PC address: 360
Estimated Gas Usage: 342 - 437
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x6a89b3c90d66081ab7a555a3e8411d9bde2c493e.sol:5

penzeppelin-solidity/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.807962
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShip(address[])
PC address: 362
Estimated Gas Usage: 342 - 437
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x6a89b3c90d66081ab7a555a3e8411d9bde2c493e.sol:3

*/

// File: openzeppelin-solidity/c

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:37.516113
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShipWithHowMany(address[],uint256)
PC address: 776
Estimated Gas Usage: 341 - 436
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x6a89b3c90d66081ab7a555a3e8411d9bde2c493e.sol:5

penzeppelin-solidity/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:40.376397
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShipWithHowMany(address[],uint256)
PC address: 778
Estimated Gas Usage: 341 - 436
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x6a89b3c90d66081ab7a555a3e8411d9bde2c493e.sol:3

*/

// File: openzeppelin-solidity/c

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:29.326443
Transaction Length: 1
Severity: Low
Contract: BeneficiaryOperations
Function name: allOperations(uint256)
PC address: 1715
Estimated Gas Usage: 701 - 796
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x6a89b3c90d66081ab7a555a3e8411d9bde2c493e.sol:386

bytes32[] public allOperations

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:32.978170
Transaction Length: 1
Severity: Low
Contract: BeneficiaryOperations
Function name: beneficiaries(uint256)
PC address: 4636
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x6a89b3c90d66081ab7a555a3e8411d9bde2c493e.sol:385

address[] public beneficiaries

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0xbeeadc4229b1f6415d7fe86ee98dfd182cb150b3.sol
Total states:426
0.800511
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x45ab3febb4be7882e3e4423ac736510d43f568a9.sol
Total states:3288
11.98292
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.869625
Transaction Length: 2
Severity: High
Contract: LPTokenWrapper
Function name: stake(uint256)
PC address: 963
Estimated Gas Usage: 765 - 860
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x45ab3febb4be7882e3e4423ac736510d43f568a9.sol:82

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0xBf198A82F39Ec0E989F33D16Aa86A6A9660e97762.sol
Total states:537
3.580254
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0xf45ebf13ef373c971c2182b01976c1a47161c8c6.sol
Total states:2324
1.868267
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0xf5687a7b140aef274d1bc8bdc7f41823cc61169f.sol
Total states:77
2.927753
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x5330A5805b9Db68EbCF5247BbC9097163c1c2442.sol
Total states:33392
97.370549
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.246087
Transaction Length: 0
Severity: High
Contract: PaymentSplitter
Function name: constructor
PC address: 91
Estimated Gas Usage: 233 - 3006
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x5330A5805b9Db68EbCF5247BbC9097163c1c2442.sol:15

 * functions, this si

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.260882
Transaction Length: 0
Severity: High
Contract: PaymentSplitter
Function name: constructor
PC address: 93
Estimated Gas Usage: 233 - 3006
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x5330A5805b9Db68EbCF5247BbC9097163c1c2442.sol:14

authorization control
 * functions, this sim

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.546069
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 2575
Estimated Gas Usage: 989 - 1464
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x5330A5805b9Db68EbCF5247BbC9097163c1c2442.sol:204

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.630645
Transaction Length: 2
Severity: High
Contract: ERC20Burnable
Function name: increaseAllowance(address,uint256)
PC address: 2748
Estimated Gas Usage: 989 - 1464
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x5330A5805b9Db68EbCF5247BbC9097163c1c2442.sol:204

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.689715
Transaction Length: 2
Severity: High
Contract: ERC20Mintable
Function name: increaseAllowance(address,uint256)
PC address: 3005
Estimated Gas Usage: 989 - 1464
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x5330A5805b9Db68EbCF5247BbC9097163c1c2442.sol:204

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.280863
Transaction Length: 2
Severity: High
Contract: ERC20Frozenable
Function name: increaseAllowance(address,uint256)
PC address: 4458
Estimated Gas Usage: 1012 - 1487
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x5330A5805b9Db68EbCF5247BbC9097163c1c2442.sol:204

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x991f67eeba67ec6775b80ed2b2e0b2f32eb41dc6.sol
Total states:10345
194.44807
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.436390
Transaction Length: 1
Severity: High
Contract: Operator
Function name: setOperators(address[])
PC address: 540
Estimated Gas Usage: 340 - 435
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x991f67eeba67ec6775b80ed2b2e0b2f32eb41dc6.sol:5

ontracts/modules/Owna

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.713442
Transaction Length: 1
Severity: High
Contract: Operator
Function name: setOperators(address[])
PC address: 542
Estimated Gas Usage: 340 - 435
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x991f67eeba67ec6775b80ed2b2e0b2f32eb41dc6.sol:3

*/

// File: contracts/modules/Ownab

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:31.938338
Transaction Length: 1
Severity: High
Contract: Operator
Function name: getOperator()
PC address: 763
Estimated Gas Usage: 1249 - 2096
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x991f67eeba67ec6775b80ed2b2e0b2f32eb41dc6.sol:440

function getOperator()public view returns (address[] memory) {
        return _operatorList;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:40.992118
Transaction Length: 1
Severity: High
Contract: Operator
Function name: getOperator()
PC address: 803
Estimated Gas Usage: 1399 - 2622
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x991f67eeba67ec6775b80ed2b2e0b2f32eb41dc6.sol:440

function getOperator()public view returns (address[] memory) {
        return _operatorList;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.468111
Transaction Length: 1
Severity: High
Contract: OptionsData
Function name: setOperators(address[])
PC address: 1990
Estimated Gas Usage: 362 - 457
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x991f67eeba67ec6775b80ed2b2e0b2f32eb41dc6.sol:5

ontracts/modules/Owna

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.731732
Transaction Length: 1
Severity: High
Contract: OptionsData
Function name: setOperators(address[])
PC address: 1992
Estimated Gas Usage: 362 - 457
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x991f67eeba67ec6775b80ed2b2e0b2f32eb41dc6.sol:3

*/

// File: contracts/modules/Ownab

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:33.617863
Transaction Length: 1
Severity: High
Contract: OptionsData
Function name: getOperator()
PC address: 2213
Estimated Gas Usage: 1271 - 2118
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x991f67eeba67ec6775b80ed2b2e0b2f32eb41dc6.sol:440

function getOperator()public view returns (address[] memory) {
        return _operatorList;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:45.852756
Transaction Length: 1
Severity: High
Contract: OptionsData
Function name: getOperator()
PC address: 2253
Estimated Gas Usage: 1421 - 2644
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x991f67eeba67ec6775b80ed2b2e0b2f32eb41dc6.sol:440

function getOperator()public view returns (address[] memory) {
        return _operatorList;
    }

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x31046b5f39732dcce2acd64c9488ea4eac1ff4be.sol
Total states:38890
91.762045
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.935714
Transaction Length: 1
Severity: Low
Contract: LockableToken
Function name: grantedLocks(address,uint256)
PC address: 2420
Estimated Gas Usage: 820 - 1105
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x31046b5f39732dcce2acd64c9488ea4eac1ff4be.sol:526

mapping (address => Lock[]) public grantedLocks

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.720006
Transaction Length: 1
Severity: Low
Contract: DCASHToken
Function name: grantedLocks(address,uint256)
PC address: 2887
Estimated Gas Usage: 798 - 1083
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x31046b5f39732dcce2acd64c9488ea4eac1ff4be.sol:526

mapping (address => Lock[]) public grantedLocks

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.479640
Transaction Length: 2
Severity: High
Contract: StandardToken
Function name: increaseAllowance(address,uint256)
PC address: 4619
Estimated Gas Usage: 1474 - 2279
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x31046b5f39732dcce2acd64c9488ea4eac1ff4be.sol:265

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.974339
Transaction Length: 2
Severity: High
Contract: MintableToken
Function name: increaseAllowance(address,uint256)
PC address: 5093
Estimated Gas Usage: 1496 - 2301
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x31046b5f39732dcce2acd64c9488ea4eac1ff4be.sol:265

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.328398
Transaction Length: 2
Severity: High
Contract: BurnableToken
Function name: increaseAllowance(address,uint256)
PC address: 5241
Estimated Gas Usage: 1496 - 2301
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x31046b5f39732dcce2acd64c9488ea4eac1ff4be.sol:265

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.675946
Transaction Length: 2
Severity: High
Contract: LockableToken
Function name: increaseAllowance(address,uint256)
PC address: 6998
Estimated Gas Usage: 1518 - 2323
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x31046b5f39732dcce2acd64c9488ea4eac1ff4be.sol:265

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.778891
Transaction Length: 2
Severity: High
Contract: DCASHToken
Function name: increaseAllowance(address,uint256)
PC address: 7543
Estimated Gas Usage: 1452 - 2257
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x31046b5f39732dcce2acd64c9488ea4eac1ff4be.sol:265

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x466f2d2698c7fd89f36d67d48a06f2b181b97177.sol
Total states:2324
1.791864
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x4ddbb9e98e213d0697d09628672c161db9546313.sol
Total states:2324
1.819215
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x963b000cbcda96c0052ee239ff98085ef187fbf9.sol
Total states:2437
34.466336
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:10.858198
Transaction Length: 1
Severity: Low
Contract: COREv1Router
Function name: fallback()
PC address: 1419
Estimated Gas Usage: 2242 - 3656
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x963b000cbcda96c0052ee239ff98085ef187fbf9.sol:2141

_WETH.deposit.value(msg.value)()

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x8401d5cb939f1ed07a9f52f1e58f493961ffdbc9.sol
Total states:561
256.531582
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.284625
Transaction Length: 1
Severity: High
Contract: ERC721
Function name: setStringData(bytes32,string)
PC address: 683
Estimated Gas Usage: 435 - 530
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x8401d5cb939f1ed07a9f52f1e58f493961ffdbc9.sol:3

*/

//pragma solidity ^0.5.0;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:26.547906
Transaction Length: 1
Severity: High
Contract: ERC721
Function name: getStringData(bytes32)
PC address: 1499
Estimated Gas Usage: 1697 - 3112
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x8401d5cb939f1ed07a9f52f1e58f493961ffdbc9.sol:314

function getStringData(bytes32 key) public view returns (string memory) {
        return user_dataList[msg.sender][key];
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:00.121996
Transaction Length: 1
Severity: High
Contract: ERC721
Function name: safeTransferFrom(address,address,uint256,bytes)
PC address: 1948
Estimated Gas Usage: 455 - 550
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x8401d5cb939f1ed07a9f52f1e58f493961ffdbc9.sol:3

*/

//pragma solidity ^0.5.0;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:50.963251
Transaction Length: 1
Severity: High
Contract: ERC721
Function name: balanceByAddressAll(address)
PC address: 8512
Estimated Gas Usage: 1232 - 2742
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x8401d5cb939f1ed07a9f52f1e58f493961ffdbc9.sol:242

bytes_a.length + bytes_b.length

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:16.746087
Transaction Length: 1
Severity: High
Contract: ERC721
Function name: setStringData(bytes32,string)
PC address: 10032
Estimated Gas Usage: 11618 - 55056
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x8401d5cb939f1ed07a9f52f1e58f493961ffdbc9.sol:149

contract ERC721 is ERC165, IERC721 {
    using SafeMath for uint256;
    using Address for address;
    using Counters for Counters.Counter;
    using EnumerableSet for EnumerableSet.UintSet;
    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;
    mapping (uint256 => address) private _tokenOwner;
    mapping (uint256 => address) private _tokenApprovals;
    mapping (address => mapping (address => bool)) private _operatorApprovals;
    mapping (uint256 => string) private _tokenURIs;
    mapping (address => EnumerableSet.UintSet) private _holderTokens;
    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;
    mapping(address => mapping(bytes32 => string)) user_dataList;
    address public owner;
    constructor () public {_registerInterface(_INTERFACE_ID_ERC721);}
    
    struct EaCard {
        string  name;
        uint256 cardprice;
        string stakingto;
    }
    
    mapping(uint256 => EaCard) public Cards_list;
    
    function ownerOf(uint256 tokenId) public view returns (address) {
        address coinowner = _tokenOwner[tokenId];
        require(coinowner != address(0), "ERC721: owner query for nonexistent token");
        return coinowner;
    }
    function approve(address to, uint256 tokenId) public {
        address coinowner = ownerOf(tokenId);
        require(to != coinowner, "ERC721: approval to current owner");
        require(msg.sender == coinowner || isApprovedForAll(owner, msg.sender),
            "ERC721: approve caller is not owner nor approved for all"
        );
        _tokenApprovals[tokenId] = to;
        emit Approval(coinowner, to, tokenId);
    }
    function getApproved(uint256 tokenId) public view returns (address) {
        require(_exists(tokenId), "ERC721: approved query for nonexistent token");
        return _tokenApprovals[tokenId];
    }
    function setApprovalForAll(address to, bool approved) public {
        require(to != msg.sender, "ERC721: approve to caller");
        _operatorApprovals[msg.sender][to] = approved;
        emit ApprovalForAll(msg.sender, to, approved);
    }
    function isApprovedForAll(address coinowner, address operator) public view returns (bool) {
        return _operatorApprovals[coinowner][operator];
    }
    function safeTransferFrom(address from, address to, uint256 tokenId) public {
        safeTransferFrom(from, to, tokenId, "");
    }
    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {
        transferFrom(from, to, tokenId);
        require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
    }
    
    
    
    function _burn(address coinowner, uint256 tokenId) internal {
        require(ownerOf(tokenId) == coinowner, "ERC721: burn of token that is not own");
        _clearApproval(tokenId);
        _tokenOwner[tokenId] = address(0);
        _holderTokens[coinowner].remove(tokenId);
        emit Transfer(coinowner, address(0), tokenId);
    }
    function _burn(uint256 tokenId) internal {
        _burn(ownerOf(tokenId), tokenId);
    }
    
    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) internal returns (bool){
        if (!to.isContract()) {return true;}
        bytes4 retval = IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data);
        return (retval == _ERC721_RECEIVED);
    }
    function _clearApproval(uint256 tokenId) private {
        if (_tokenApprovals[tokenId] != address(0)) {
            _tokenApprovals[tokenId] = address(0);
        }
    }
    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {
        if (_i == 0) {return "0";}
        uint j = _i; uint len;
        while (j != 0) {len++;j /= 10;}
        bytes memory bstr = new bytes(len);
        uint k = len - 1;
        while (_i != 0) {bstr[k--] = byte(uint8(48 + _i % 10));_i /= 10;}
        return string(bstr);
    }
    function concatStrng(string memory _a, string memory _b) internal pure returns (string memory){
        bytes memory bytes_a = bytes(_a);
        bytes memory bytes_b = bytes(_b);
        string memory length_ab = new string(bytes_a.length + bytes_b.length);
        bytes memory bytes_c = bytes(length_ab);
        uint k = 0;
        for (uint256 i = 0; i < bytes_a.length; i++) bytes_c[k++] = bytes_a[i];
        for (uint256 i = 0; i < bytes_b.length; i++) bytes_c[k++] = bytes_b[i];
        return string(bytes_c);
    }
    function _mint(address to, uint256 tokenId) internal {
        require(to != address(0), "ERC721: mint to the zero address");
        require(!_exists(tokenId), "ERC721: token already minted");
        _tokenOwner[tokenId] = to;
        _holderTokens[to].add(tokenId);
        emit Transfer(address(0), to, tokenId);
    }
    function tokenOfOwnerByIndex(address holder, uint256 index) public view returns (uint256) {
        return _holderTokens[holder].at(index);
    }
    
    function balanceOf(address coinowner) public view returns (uint256) {
        require(coinowner != address(0), "ERC721: balance query for the zero address");
        return _holderTokens[coinowner].length();
    }
    function _gettokenURI(uint256 tokenId) public view returns (string memory) {
        require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
        string memory _tokenURI = _tokenURIs[tokenId];
        return _tokenURI;
    }
    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal {
        require(_exists(tokenId), "ERC721Metadata: URI set of nonexistent token");
        _tokenURIs[tokenId] = _tokenURI;
    }
    
    function balanceByAddressAll(address holder) public view returns (string memory) {
        require(holder != address(0), "ERC721: balance query for the zero address");
        uint256 ns = _holderTokens[holder].length();
        string memory _a1 = '[';
        for(uint8 i = 0; i < ns; i++ ){
            uint256 ea = _holderTokens[holder].at(i);
            string memory No = uint2str(ea);
            if( i > 0 ) _a1 = concatStrng(_a1, ',');
            _a1 = concatStrng(_a1, No);
            
        }
        _a1 = concatStrng(_a1, ']');
        return _a1;
    }
    
    function transferFrom(address from, address to, uint256 tokenId) public {
        require(_isApprovedOrOwner(msg.sender, tokenId), "ERC721: transfer caller is not owner nor approved");
        _transferFrom(from, to, tokenId);
    }
    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {
        require(_exists(tokenId), "ERC721: operator query for nonexistent token");
        address coinowner = ownerOf(tokenId);
        return (spender == owner || spender == coinowner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
    }
    function _exists(uint256 tokenId) internal view returns (bool) {
        address Coinowner = _tokenOwner[tokenId];
        return Coinowner != address(0);
    }
    function _transferFrom(address from, address to, uint256 tokenId) internal {
        require(ownerOf(tokenId) == from || from == owner , "ERC721: transfer of token that is not own");
        require(to != address(0), "ERC721: transfer to the zero address");
        _clearApproval(tokenId);
        _tokenOwner[tokenId] = to;
        address ThistokenOwner = ownerOf(tokenId);
        _holderTokens[ThistokenOwner].remove(tokenId);
        _holderTokens[to].add(tokenId);
        emit Transfer(ThistokenOwner, to, tokenId);
    }
    
    
    function getStringData(bytes32 key) public view returns (string memory) {
        return user_dataList[msg.sender][key];
    }
    function setStringData(bytes32 key, string memory value) public {
        user_dataList[msg.sender][key] = value;
    }
}

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x73f6B7419281D7D39C70357161cf40D29ca9619d.sol
Total states:2391
19.115056
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x4d982203992f75289b9e323117b2b81a27bbfbb6.sol
Total states:7270
50.159741
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.212518
Transaction Length: 1
Severity: Low
Contract: Layer2Base
Function name: EROs(uint256)
PC address: 2400
Estimated Gas Usage: 872 - 967
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x4d982203992f75289b9e323117b2b81a27bbfbb6.sol:1524

Data.Request[] public EROs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.300843
Transaction Length: 1
Severity: Low
Contract: Layer2Storage
Function name: EROs(uint256)
PC address: 2400
Estimated Gas Usage: 872 - 967
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x4d982203992f75289b9e323117b2b81a27bbfbb6.sol:1524

Data.Request[] public EROs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.686903
Transaction Length: 1
Severity: Low
Contract: Layer2Base
Function name: URBs(uint256)
PC address: 2883
Estimated Gas Usage: 849 - 944
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x4d982203992f75289b9e323117b2b81a27bbfbb6.sol:1529

Data.RequestBlock[] public URBs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.765206
Transaction Length: 1
Severity: Low
Contract: Layer2Storage
Function name: URBs(uint256)
PC address: 2883
Estimated Gas Usage: 849 - 944
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x4d982203992f75289b9e323117b2b81a27bbfbb6.sol:1529

Data.RequestBlock[] public URBs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:02.329981
Transaction Length: 1
Severity: Low
Contract: Layer2Base
Function name: ORBs(uint256)
PC address: 3261
Estimated Gas Usage: 870 - 965
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x4d982203992f75289b9e323117b2b81a27bbfbb6.sol:1528

Data.RequestBlock[] public ORBs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:02.450939
Transaction Length: 1
Severity: Low
Contract: Layer2Storage
Function name: ORBs(uint256)
PC address: 3261
Estimated Gas Usage: 870 - 965
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x4d982203992f75289b9e323117b2b81a27bbfbb6.sol:1528

Data.RequestBlock[] public ORBs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:02.721298
Transaction Length: 1
Severity: Low
Contract: Layer2Base
Function name: ERUs(uint256)
PC address: 3461
Estimated Gas Usage: 892 - 987
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x4d982203992f75289b9e323117b2b81a27bbfbb6.sol:1525

Data.Request[] public ERUs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:02.823217
Transaction Length: 1
Severity: Low
Contract: Layer2Storage
Function name: ERUs(uint256)
PC address: 3461
Estimated Gas Usage: 892 - 987
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x4d982203992f75289b9e323117b2b81a27bbfbb6.sol:1525

Data.Request[] public ERUs

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x73eaa62fd63452a588f44464e14fc2e671f47217.sol
Total states:2324
1.963841
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0xb3c66fa11af5b4975d74c654665a0b7e505b2bde.sol
Total states:1526
1.418662
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x1480c0ced06097c75bffd7681741da5fafa58917.sol
Total states:3513
15.119828
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.563135
Transaction Length: 1
Severity: Low
Contract: Authorizable
Function name: authorities(uint256)
PC address: 472
Estimated Gas Usage: 805 - 900
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x1480c0ced06097c75bffd7681741da5fafa58917.sol:2356

address[] public authorities

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.513905
Transaction Length: 1
Severity: Low
Contract: ERC20BridgeProxy
Function name: authorities(uint256)
PC address: 611
Estimated Gas Usage: 805 - 900
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x1480c0ced06097c75bffd7681741da5fafa58917.sol:2356

address[] public authorities

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x6e0D4a8Dd44E9EFe5b614190AcBaC18b4Cd5CD5D.sol
Total states:2312
5.715404
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.612813
Transaction Length: 1
Severity: Low
Contract: QuotaDistribution
Function name: orgList(uint256)
PC address: 3623
Estimated Gas Usage: 678 - 773
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x6e0D4a8Dd44E9EFe5b614190AcBaC18b4Cd5CD5D.sol:688

address[] public orgList

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x3db94af2808ba0c8a6c21ee0c63e50047a6fff87.sol
Total states:22554
108.298042
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.168144
Transaction Length: 0
Severity: High
Contract: Town
Function name: constructor
PC address: 844
Estimated Gas Usage: 558 - 3889
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x3db94af2808ba0c8a6c21ee0c63e50047a6fff87.sol:1402

distributionPeriod * 1 days

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:23.671951
Transaction Length: 0
Severity: High
Contract: Town
Function name: constructor
PC address: 1422
Estimated Gas Usage: 46536 - 230197
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x3db94af2808ba0c8a6c21ee0c63e50047a6fff87.sol:303

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.666273
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3044
Estimated Gas Usage: 989 - 1464
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x3db94af2808ba0c8a6c21ee0c63e50047a6fff87.sol:225

a + b

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:02.842515
Transaction Length: 1
Severity: Low
Contract: TownToken
Function name: transfer(address,uint256)
PC address: 3334
Estimated Gas Usage: 2044 - 3175
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x3db94af2808ba0c8a6c21ee0c63e50047a6fff87.sol:1100

_town.checkProposal(recipient)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.587407
Transaction Length: 2
Severity: High
Contract: ExternalTokenTemplate
Function name: increaseAllowance(address,uint256)
PC address: 3494
Estimated Gas Usage: 922 - 1397
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x3db94af2808ba0c8a6c21ee0c63e50047a6fff87.sol:225

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:03.473857
Transaction Length: 1
Severity: Low
Contract: TownToken
Function name: getHolderByIndex(uint256)
PC address: 4982
Estimated Gas Usage: 725 - 820
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x3db94af2808ba0c8a6c21ee0c63e50047a6fff87.sol:1076

_holders[index]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.617854
Transaction Length: 2
Severity: High
Contract: TownToken
Function name: increaseAllowance(address,uint256)
PC address: 6628
Estimated Gas Usage: 967 - 1442
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x3db94af2808ba0c8a6c21ee0c63e50047a6fff87.sol:225

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0xe5a55df7c54fde43a1217449a3f9a0233ef2a393.sol
Total states:594
1.434095
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x5b40841eecfb429452ab25216afc1e1650c07747.sol
Total states:28166
69.847562
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.053680
Transaction Length: 0
Severity: High
Contract: AutoRefactorCoinage
Function name: constructor
PC address: 133
Estimated Gas Usage: 10269 - 53042
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x5b40841eecfb429452ab25216afc1e1650c07747.sol:12

setFactor(uint256 factor) external returns 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.239992
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3244
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x5b40841eecfb429452ab25216afc1e1650c07747.sol:52

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.245732
Transaction Length: 2
Severity: High
Contract: ERC20Burnable
Function name: increaseAllowance(address,uint256)
PC address: 3424
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x5b40841eecfb429452ab25216afc1e1650c07747.sol:52

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.463703
Transaction Length: 2
Severity: High
Contract: ERC20Mintable
Function name: increaseAllowance(address,uint256)
PC address: 3847
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x5b40841eecfb429452ab25216afc1e1650c07747.sol:52

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0xd5bdd280e034b5c3b8c7ed39317f9cf0542178be.sol
Total states:428
0.886029
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x26b7677a22597ac64fc9d3961037f95af77db347.sol
Total states:738
3.533285
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0xbc8658828f77940ba63359272ce59b08053bd359.sol
Total states:22554
109.558472
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.166446
Transaction Length: 0
Severity: High
Contract: Town
Function name: constructor
PC address: 844
Estimated Gas Usage: 558 - 3889
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xbc8658828f77940ba63359272ce59b08053bd359.sol:1402

distributionPeriod * 1 days

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:21.647172
Transaction Length: 0
Severity: High
Contract: Town
Function name: constructor
PC address: 1422
Estimated Gas Usage: 46536 - 230197
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xbc8658828f77940ba63359272ce59b08053bd359.sol:303

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.826261
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3044
Estimated Gas Usage: 989 - 1464
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xbc8658828f77940ba63359272ce59b08053bd359.sol:225

a + b

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:02.899055
Transaction Length: 1
Severity: Low
Contract: TownToken
Function name: transfer(address,uint256)
PC address: 3334
Estimated Gas Usage: 2044 - 3175
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0xbc8658828f77940ba63359272ce59b08053bd359.sol:1100

_town.checkProposal(recipient)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.940731
Transaction Length: 2
Severity: High
Contract: ExternalTokenTemplate
Function name: increaseAllowance(address,uint256)
PC address: 3494
Estimated Gas Usage: 922 - 1397
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xbc8658828f77940ba63359272ce59b08053bd359.sol:225

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:03.727106
Transaction Length: 1
Severity: Low
Contract: TownToken
Function name: getHolderByIndex(uint256)
PC address: 4982
Estimated Gas Usage: 725 - 820
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0xbc8658828f77940ba63359272ce59b08053bd359.sol:1076

_holders[index]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.201325
Transaction Length: 2
Severity: High
Contract: TownToken
Function name: increaseAllowance(address,uint256)
PC address: 6628
Estimated Gas Usage: 967 - 1442
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xbc8658828f77940ba63359272ce59b08053bd359.sol:225

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x718F3fAAccFCdDB8977205126ca3f5f3b1A53D31.sol
Total states:3094
7.042452
==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:00.399879
Transaction Length: 0
Severity: Medium
Contract: RebasedOracle
Function name: constructor
PC address: 1685
Estimated Gas Usage: 65856 - 482160
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 486
Offset: 686
Offset: 886
Offset: 1144
Offset: 1344
Offset: 1544
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop7/0x718F3fAAccFCdDB8977205126ca3f5f3b1A53D31.sol:404

contract RebasedOracle is IOracle, Ownable {
    using FixedPoint for *;

    uint private reb2EthPrice0CumulativeLast;
    uint private reb2EthPrice1CumulativeLast;
    uint32 private reb2EthBlockTimestampLast;
    
    uint private usdcEthPrice0CumulativeLast;
    uint private usdcEthPrice1CumulativeLast;
    uint32 private usdcEthBlockTimestampLast;
    
    address private constant _weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;
    address private constant _usdc = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;

    IUniswapV2Pair private _reb2_eth;
    IUniswapV2Pair private _usdc_eth;
    
    address controller;
    
    modifier onlyControllerOrOwner {
        require(msg.sender == controller || msg.sender == owner());
        _;
    }

    // RebasedController: 0x41630a33d4d6e3767e26aaf50277ab2a235edea3
    // SushiSwap REB2/ETH: 0xc4dE5Cc1232f6493Cc7BF7bcb12F905eb9742Bd7
    // SushiSwap USDC/ETH: 0x397ff1542f962076d0bfe58ea045ffa2d347aca0

    constructor(
        address _controller,
        address __reb2_eth,   // Address of the ETH/REB Uniswap pair
        address __usdc_reb   // Address of the USDC/ETH Uniswap pair
        ) public {
        
        controller = _controller;

        _reb2_eth = IUniswapV2Pair(__reb2_eth);
        _usdc_eth = IUniswapV2Pair(__usdc_reb);
        
        uint112 _dummy1;
        uint112 _dummy2;
        
        reb2EthPrice0CumulativeLast = _reb2_eth.price0CumulativeLast();
        reb2EthPrice1CumulativeLast = _reb2_eth.price1CumulativeLast();
        
        (_dummy1, _dummy2, reb2EthBlockTimestampLast) = _reb2_eth.getReserves();
        
        usdcEthPrice0CumulativeLast = _usdc_eth.price0CumulativeLast();
        usdcEthPrice1CumulativeLast = _usdc_eth.price1CumulativeLast();
        
        (_dummy1, _dummy2, usdcEthBlockTimestampLast) = _usdc_eth.getReserves();
    }

    // Get the average price of 1 REB in Wei
    function getRebEthRate() public view returns (uint256, uint256, uint32, uint256) {
        (uint price0Cumulative, uint price1Cumulative, uint32 _blockTimestamp) =
            UniswapV2OracleLibrary.currentCumulativePrices(address(_reb2_eth));
            
        FixedPoint.uq112x112 memory rebEthAverage = FixedPoint.uq112x112(uint224(1e9 * (price0Cumulative - reb2EthPrice0CumulativeLast) / (_blockTimestamp - reb2EthBlockTimestampLast)));
        
        return (price0Cumulative, price1Cumulative, _blockTimestamp, rebEthAverage.mul(1).decode144());
    }
    
    // Get the average price of 1 USD in Wei
    function getUsdcEthRate() public view returns (uint256, uint256, uint32, uint256) {
        (uint price0Cumulative, uint price1Cumulative, uint32 _blockTimestamp) =
            UniswapV2OracleLibrary.currentCumulativePrices(address(_usdc_eth));
            
        FixedPoint.uq112x112 memory usdcEthAverage = FixedPoint.uq112x112(uint224(1e6 * (price0Cumulative - usdcEthPrice0CumulativeLast) / (_blockTimestamp - usdcEthBlockTimestampLast)));
            
        return (price0Cumulative, price1Cumulative, _blockTimestamp, usdcEthAverage.mul(1).decode144());
    }

    // Update "last" state variables to current values
    // This is *only* called by the controller during rebase which enforces a minimum interim period of 12h.
   function update() external onlyControllerOrOwner {
        
        uint rebEthAverage;
        uint usdcEthAverage;
        
        (reb2EthPrice0CumulativeLast, reb2EthPrice1CumulativeLast, reb2EthBlockTimestampLast, rebEthAverage) = getRebEthRate();
        (usdcEthPrice0CumulativeLast, usdcEthPrice1CumulativeLast, usdcEthBlockTimestampLast, usdcEthAverage) = getUsdcEthRate();
    }

    // Return the average price since last update
    function getData() external view returns (uint256) {
        
        uint _price0CumulativeLast;
        uint _price1CumulativeLast;
        uint32 _blockTimestampLast;
        
        uint rebEthAverage;

        (_price0CumulativeLast, _price1CumulativeLast, _blockTimestampLast, rebEthAverage) = getRebEthRate();
        
        uint usdcEthAverage;
        
         (_price0CumulativeLast, _price1CumulativeLast, _blockTimestampLast, usdcEthAverage) = getUsdcEthRate();
         
        uint answer = (rebEthAverage * 1e18) / usdcEthAverage;
        
        return (answer);
    }
}

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0xcfcbd5c6fbbac2183bd76b5caa4bd86fa0953dd62.sol
Total states:426
0.798684
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0xb14affa389865eaedf88c6faf6a55a57dc9b8d47.sol
Total states:736
1.515796
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x72079FB4E9958571b67F25fD9d30F3bABA355f57.sol
Total states:90
1.56753
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0xF5F016fD2ba03FcD6f56199327D4E28AC4923E6C.sol
Total states:504
4.310034
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:00.963107
Transaction Length: 1
Severity: Low
Contract: SpellAction
Function name: execute()
PC address: 215
Estimated Gas Usage: 939 - 1315
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0xF5F016fD2ba03FcD6f56199327D4E28AC4923E6C.sol:101

PotAbstract(MCD_POT).drip()

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:02.128550
Transaction Length: 1
Severity: Low
Contract: SpellAction
Function name: execute()
PC address: 458
Estimated Gas Usage: 2612 - 37645
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0xF5F016fD2ba03FcD6f56199327D4E28AC4923E6C.sol:107

PotAbstract(MCD_POT).file("dsr", ZERO_PCT_RATE)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.305435
Transaction Length: 1
Severity: High
Contract: SpellAction
Function name: execute()
PC address: 644
Estimated Gas Usage: 4958 - 108460
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xF5F016fD2ba03FcD6f56199327D4E28AC4923E6C.sol:5

(C) 2020 Maker 

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x3ff5c61fde87589529e54c57397f816c7f10a5d6.sol
Total states:12500
160.744261
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.671281
Transaction Length: 1
Severity: High
Contract: Operator
Function name: setOperators(address[])
PC address: 540
Estimated Gas Usage: 340 - 435
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x3ff5c61fde87589529e54c57397f816c7f10a5d6.sol:5

ontracts/modules/Owna

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.825936
Transaction Length: 1
Severity: High
Contract: Operator
Function name: setOperators(address[])
PC address: 542
Estimated Gas Usage: 340 - 435
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x3ff5c61fde87589529e54c57397f816c7f10a5d6.sol:3

*/

// File: contracts/modules/Ownab

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:30.660685
Transaction Length: 1
Severity: High
Contract: Operator
Function name: getOperator()
PC address: 763
Estimated Gas Usage: 1249 - 2096
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x3ff5c61fde87589529e54c57397f816c7f10a5d6.sol:440

function getOperator()public view returns (address[] memory) {
        return _operatorList;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:41.322739
Transaction Length: 1
Severity: High
Contract: Operator
Function name: getOperator()
PC address: 803
Estimated Gas Usage: 1399 - 2622
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x3ff5c61fde87589529e54c57397f816c7f10a5d6.sol:440

function getOperator()public view returns (address[] memory) {
        return _operatorList;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.501951
Transaction Length: 1
Severity: High
Contract: OptionsData
Function name: setOperators(address[])
PC address: 1990
Estimated Gas Usage: 362 - 457
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x3ff5c61fde87589529e54c57397f816c7f10a5d6.sol:5

ontracts/modules/Owna

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.001464
Transaction Length: 1
Severity: High
Contract: OptionsData
Function name: setOperators(address[])
PC address: 1992
Estimated Gas Usage: 362 - 457
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x3ff5c61fde87589529e54c57397f816c7f10a5d6.sol:3

*/

// File: contracts/modules/Ownab

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:36.759679
Transaction Length: 1
Severity: High
Contract: OptionsData
Function name: getOperator()
PC address: 2213
Estimated Gas Usage: 1271 - 2118
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x3ff5c61fde87589529e54c57397f816c7f10a5d6.sol:440

function getOperator()public view returns (address[] memory) {
        return _operatorList;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:47.271944
Transaction Length: 1
Severity: High
Contract: OptionsData
Function name: getOperator()
PC address: 2253
Estimated Gas Usage: 1421 - 2644
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x3ff5c61fde87589529e54c57397f816c7f10a5d6.sol:440

function getOperator()public view returns (address[] memory) {
        return _operatorList;
    }

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x91d0b6296e334b872ac6cb297d14eb7cd2612ad8.sol
Total states:305
3.938954
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0xc61e65114CbD5508e31fd755A49A817798C132cb.sol
Total states:16369
190.553012
==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:07.608238
Transaction Length: 1
Severity: High
Contract: Math
Function name: safeSub(uint256,uint256)
PC address: 601
Estimated Gas Usage: 527 - 622
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xc61e65114CbD5508e31fd755A49A817798C132cb.sol:110

x - y

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:09.884045
Transaction Length: 1
Severity: Low
Contract: Math
Function name: safeDiv(uint256,uint256)
PC address: 689
Estimated Gas Usage: 542 - 637
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0xc61e65114CbD5508e31fd755A49A817798C132cb.sol:118

x / y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.953426
Transaction Length: 1
Severity: High
Contract: Math
Function name: rdiv(uint256,uint256)
PC address: 715
Estimated Gas Usage: 600 - 695
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xc61e65114CbD5508e31fd755A49A817798C132cb.sol:114

x * y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.277086
Transaction Length: 1
Severity: High
Contract: Math
Function name: safeAdd(uint256,uint256)
PC address: 807
Estimated Gas Usage: 593 - 688
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xc61e65114CbD5508e31fd755A49A817798C132cb.sol:106

x + y

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:08.838773
Transaction Length: 1
Severity: High
Contract: Interest
Function name: safeSub(uint256,uint256)
PC address: 1189
Estimated Gas Usage: 527 - 622
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xc61e65114CbD5508e31fd755A49A817798C132cb.sol:110

x - y

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:10.772586
Transaction Length: 1
Severity: Low
Contract: Interest
Function name: safeDiv(uint256,uint256)
PC address: 1277
Estimated Gas Usage: 542 - 637
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0xc61e65114CbD5508e31fd755A49A817798C132cb.sol:118

x / y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.562169
Transaction Length: 1
Severity: High
Contract: Interest
Function name: rdiv(uint256,uint256)
PC address: 1303
Estimated Gas Usage: 623 - 718
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xc61e65114CbD5508e31fd755A49A817798C132cb.sol:114

x * y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.406342
Transaction Length: 1
Severity: High
Contract: Interest
Function name: safeAdd(uint256,uint256)
PC address: 1542
Estimated Gas Usage: 615 - 710
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xc61e65114CbD5508e31fd755A49A817798C132cb.sol:106

x + y

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.736497
Transaction Length: 1
Severity: Low
Contract: NAVFeed
Function name: writeOffs(uint256)
PC address: 3592
Estimated Gas Usage: 473 - 568
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0xc61e65114CbD5508e31fd755A49A817798C132cb.sol:573

WriteOff [5] public writeOffs

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:37.210303
Transaction Length: 1
Severity: High
Contract: BaseNFTFeed
Function name: safeSub(uint256,uint256)
PC address: 5428
Estimated Gas Usage: 550 - 645
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xc61e65114CbD5508e31fd755A49A817798C132cb.sol:110

x - y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.742895
Transaction Length: 1
Severity: High
Contract: BaseNFTFeed
Function name: rmul(uint256,uint256)
PC address: 5695
Estimated Gas Usage: 635 - 730
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xc61e65114CbD5508e31fd755A49A817798C132cb.sol:114

x * y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:40.977996
Transaction Length: 1
Severity: High
Contract: BaseNFTFeed
Function name: totalValue()
PC address: 5950
Estimated Gas Usage: 2297 - 37191
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xc61e65114CbD5508e31fd755A49A817798C132cb.sol:5

sing https://da

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:39.453521
Transaction Length: 1
Severity: High
Contract: BaseNFTFeed
Function name: totalValue()
PC address: 5953
Estimated Gas Usage: 2297 - 37191
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xc61e65114CbD5508e31fd755A49A817798C132cb.sol:3



// Verified using https://dapp.tools

// 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:40.212406
Transaction Length: 1
Severity: High
Contract: BaseNFTFeed
Function name: totalValue()
PC address: 5965
Estimated Gas Usage: 2297 - 37191
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xc61e65114CbD5508e31fd755A49A817798C132cb.sol:503

pile.total()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:44.075598
Transaction Length: 1
Severity: High
Contract: BaseNFTFeed
Function name: safeAdd(uint256,uint256)
PC address: 6159
Estimated Gas Usage: 571 - 666
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xc61e65114CbD5508e31fd755A49A817798C132cb.sol:106

x + y

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:41.711867
Transaction Length: 1
Severity: High
Contract: BaseNFTFeed
Function name: totalValue()
PC address: 7043
Estimated Gas Usage: 2297 - 37191
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xc61e65114CbD5508e31fd755A49A817798C132cb.sol:125

blic pure returns (uint

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:37.134622
Transaction Length: 1
Severity: High
Contract: NAVFeed
Function name: safeSub(uint256,uint256)
PC address: 8847
Estimated Gas Usage: 617 - 712
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xc61e65114CbD5508e31fd755A49A817798C132cb.sol:110

x - y

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x2454d66220d48a07306e03e6694f10eb4906b299.sol
Total states:636
1.964641
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol
Total states:77467
1784.204118
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.193913
Transaction Length: 1
Severity: High
Contract: Module
Function name: getModuleAddress(string)
PC address: 416
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:3



*/



// File: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.085008
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(string,string,uint8)
PC address: 1000
Estimated Gas Usage: 409 - 504
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:3



*/



// File: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.657663
Transaction Length: 1
Severity: High
Contract: VaultPoolToken
Function name: initialize(string,string,uint8)
PC address: 1049
Estimated Gas Usage: 409 - 504
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:3



*/



// File: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.005143
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(string,string,uint8)
PC address: 1151
Estimated Gas Usage: 751 - 3528
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:3



*/



// File: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.458199
Transaction Length: 1
Severity: High
Contract: VaultPoolToken
Function name: initialize(string,string,uint8)
PC address: 1200
Estimated Gas Usage: 751 - 3528
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:3



*/



// File: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.714573
Transaction Length: 1
Severity: High
Contract: VaultProtocol
Function name: getModuleAddress(string)
PC address: 1909
Estimated Gas Usage: 407 - 502
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:3



*/



// File: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:22.056260
Transaction Length: 1
Severity: High
Contract: VaultProtocol
Function name: quickWithdraw(address,address[],uint256[])
PC address: 2190
Estimated Gas Usage: 462 - 557
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:9

e: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:28.349036
Transaction Length: 1
Severity: High
Contract: VaultProtocol
Function name: quickWithdraw(address,address[],uint256[])
PC address: 2192
Estimated Gas Usage: 462 - 557
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:3



*/



// File: @openzeppelin\contr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.787277
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[],uint256)
PC address: 2226
Estimated Gas Usage: 429 - 524
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:9

e: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.643776
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[],uint256)
PC address: 2228
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:3



*/



// File: @openzeppelin\contr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:46.417911
Transaction Length: 1
Severity: High
Contract: VaultProtocol
Function name: quickWithdraw(address,address[],uint256[])
PC address: 2338
Estimated Gas Usage: 795 - 3572
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:9

e: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:58.970292
Transaction Length: 1
Severity: High
Contract: VaultProtocol
Function name: quickWithdraw(address,address[],uint256[])
PC address: 2340
Estimated Gas Usage: 795 - 3572
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:3



*/



// File: @openzeppelin\contr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:17.584004
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[])
PC address: 2357
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:9

e: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:21.164384
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[])
PC address: 2359
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:3



*/



// File: @openzeppelin\contr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:37.776980
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: getModuleAddress(string)
PC address: 2526
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:3



*/



// File: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:05.086023
Transaction Length: 1
Severity: High
Contract: VaultProtocol
Function name: withdrawFromVault(address,address[],uint256[])
PC address: 2630
Estimated Gas Usage: 419 - 514
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:9

e: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:10.650653
Transaction Length: 1
Severity: High
Contract: VaultProtocol
Function name: withdrawFromVault(address,address[],uint256[])
PC address: 2632
Estimated Gas Usage: 419 - 514
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:3



*/



// File: @openzeppelin\contr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:47.050217
Transaction Length: 1
Severity: High
Contract: VaultPoolToken
Function name: getModuleAddress(string)
PC address: 2653
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:3



*/



// File: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:35.082674
Transaction Length: 1
Severity: High
Contract: VaultProtocol
Function name: withdrawFromVault(address,address[],uint256[])
PC address: 2778
Estimated Gas Usage: 752 - 3529
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:9

e: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:46.908129
Transaction Length: 1
Severity: High
Contract: VaultProtocol
Function name: withdrawFromVault(address,address[],uint256[])
PC address: 2780
Estimated Gas Usage: 752 - 3529
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:3



*/



// File: @openzeppelin\contr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:46.878104
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(address,string,string)
PC address: 3179
Estimated Gas Usage: 485 - 580
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:3



*/



// File: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.823804
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3249
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:225

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:07:07.490251
Transaction Length: 1
Severity: High
Contract: VaultProtocol
Function name: initialize(address,address[])
PC address: 3258
Estimated Gas Usage: 418 - 513
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:9

e: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:07:11.960167
Transaction Length: 1
Severity: High
Contract: VaultProtocol
Function name: initialize(address,address[])
PC address: 3260
Estimated Gas Usage: 418 - 513
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:3



*/



// File: @openzeppelin\contr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:48.425348
Transaction Length: 1
Severity: High
Contract: VaultPoolToken
Function name: initialize(address,string,string)
PC address: 3306
Estimated Gas Usage: 485 - 580
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:3



*/



// File: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:05.285576
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(address,string,string)
PC address: 3330
Estimated Gas Usage: 827 - 3604
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:3



*/



// File: @openzeppelin\cont

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.777998
Transaction Length: 1
Severity: Low
Contract: DistributionToken
Function name: distributions(uint256)
PC address: 3405
Estimated Gas Usage: 724 - 819
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:2410

Distribution[] public distributions

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:43.845757
Transaction Length: 2
Severity: Low
Contract: DistributionToken
Function name: distributions(uint256)
PC address: 3405
Estimated Gas Usage: 724 - 819
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:2410

Distribution[] public distributions

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.632264
Transaction Length: 2
Severity: High
Contract: ERC20Burnable
Function name: increaseAllowance(address,uint256)
PC address: 3429
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:225

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:06.161814
Transaction Length: 1
Severity: High
Contract: VaultPoolToken
Function name: initialize(address,string,string)
PC address: 3457
Estimated Gas Usage: 827 - 3604
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:3



*/



// File: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:16.491705
Transaction Length: 2
Severity: High
Contract: ERC20Mintable
Function name: increaseAllowance(address,uint256)
PC address: 4214
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:225

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:44.503209
Transaction Length: 1
Severity: Low
Contract: PoolToken
Function name: distributions(uint256)
PC address: 6392
Estimated Gas Usage: 768 - 863
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:2410

Distribution[] public distributions

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:36.907663
Transaction Length: 2
Severity: High
Contract: DistributionToken
Function name: increaseAllowance(address,uint256)
PC address: 6759
Estimated Gas Usage: 1104 - 1579
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:225

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:56.490051
Transaction Length: 1
Severity: Low
Contract: VaultPoolToken
Function name: distributions(uint256)
PC address: 7232
Estimated Gas Usage: 768 - 863
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:2410

Distribution[] public distributions

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.936506
Transaction Length: 1
Severity: Low
Contract: VaultProtocol
Function name: totalClaimableAmount(address)
PC address: 13517
Estimated Gas Usage: 1314 - 1409
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:4108

claimableTokens[indReg]

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0xac873993e43a5af7b39ab4a5a50ce1fbdb7191d3.sol
Total states:738
3.643706
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x9d1233cc46795E94029fDA81aAaDc1455D510f15.sol
Total states:3260
17.08972
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x035fb9efa7ed40a688044af22282fb19b64b5f60.sol
Total states:23598
69.140144
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.236244
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3244
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x035fb9efa7ed40a688044af22282fb19b64b5f60.sol:121

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.674066
Transaction Length: 1
Severity: High
Contract: DynamicSwap
Function name: swapExactAmountOut(address,address,uint256,uint256,uint256)
PC address: 11846
Estimated Gas Usage: 2280 - 37172
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x035fb9efa7ed40a688044af22282fb19b64b5f60.sol:140

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.034403
Transaction Length: 2
Severity: High
Contract: DynamicSwap
Function name: increaseAllowance(address,uint256)
PC address: 12775
Estimated Gas Usage: 1037 - 1512
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x035fb9efa7ed40a688044af22282fb19b64b5f60.sol:121

a + b

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:10.707293
Transaction Length: 1
Severity: High
Contract: DynamicSwap
Function name: getInExactOut(address,int256,int256,int256)
PC address: 14628
Estimated Gas Usage: 538 - 633
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x035fb9efa7ed40a688044af22282fb19b64b5f60.sol:229

a - b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:21.909325
Transaction Length: 1
Severity: High
Contract: DynamicSwap
Function name: getOutExactIn(address,int256,int256,int256)
PC address: 15848
Estimated Gas Usage: 583 - 678
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x035fb9efa7ed40a688044af22282fb19b64b5f60.sol:235

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.463141
Transaction Length: 1
Severity: High
Contract: DynamicSwap
Function name: getInExactOut(address,int256,int256,int256)
PC address: 16973
Estimated Gas Usage: 788 - 883
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x035fb9efa7ed40a688044af22282fb19b64b5f60.sol:215

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0xd16583c912bda99c2919256c58e19dcbdf55e7b6.sol
Total states:7292
62.721658
==== Unchecked Call Return Value ====
SWC ID: 104
FOUND TIME: 0:00:02.284702
Transaction Length: 1
Severity: Low
Contract: SwapsImplKyber
Function name: dexExpectedRate(address,address,uint256)
PC address: 4565
Estimated Gas Usage: 2069 - 39031
The return value of a message call is not checked.
External calls return a boolean value. If the callee contract halts with an exception, 'false' is returned and execution continues in the caller. It is usually recommended to wrap external calls into a require statement to prevent unexpected states.
--------------------
In file: ../../contracts/m_loop/loop7/0xd16583c912bda99c2919256c58e19dcbdf55e7b6.sol:1020

kyberContract.staticcall(
                abi.encodeWithSelector(
                    0x809a9e55, // keccak("getExpectedRate(address,address,uint256)")
                    sourceTokenAddress,
                    destTokenAddress,
                    sourceTokenAmount
                )
            )

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x99280cefeecceaf2c5b1537cd4eeb3b44c3c171f.sol
Total states:1566
1.133281
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0xfFED56a180f23fD32Bc6A1d8d3c09c283aB594A8.sol
Total states:21448
42.895509
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0xdf920992b6c33f9e0143633dc6cc38917c300335.sol
Total states:18680
152.756268
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.264456
Transaction Length: 1
Severity: High
Contract: Combine
Function name: bulkTransfer(address[],uint256[])
PC address: 757
Estimated Gas Usage: 408 - 503
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xdf920992b6c33f9e0143633dc6cc38917c300335.sol:5

olidity ^0.5.13;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.029205
Transaction Length: 1
Severity: High
Contract: Combine
Function name: bulkTransfer(address[],uint256[])
PC address: 759
Estimated Gas Usage: 408 - 503
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xdf920992b6c33f9e0143633dc6cc38917c300335.sol:3

*/

//pragma solidity ^0.5.13;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.874875
Transaction Length: 1
Severity: High
Contract: Combine
Function name: bulkTransfer(address[],uint256[])
PC address: 842
Estimated Gas Usage: 584 - 679
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xdf920992b6c33f9e0143633dc6cc38917c300335.sol:5

olidity ^0.5.13;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:26.747940
Transaction Length: 1
Severity: High
Contract: Combine
Function name: bulkTransfer(address[],uint256[])
PC address: 844
Estimated Gas Usage: 584 - 679
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xdf920992b6c33f9e0143633dc6cc38917c300335.sol:3

*/

//pragma solidity ^0.5.13;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:42.111346
Transaction Length: 1
Severity: High
Contract: Combine
Function name: transferAndCall(address,uint256,bytes)
PC address: 1417
Estimated Gas Usage: 511 - 606
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xdf920992b6c33f9e0143633dc6cc38917c300335.sol:3

*/

//pragma solidity ^0.5.13;
prag

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:48.782722
Transaction Length: 1
Severity: Low
Contract: Combine
Function name: unfreeze(uint256)
PC address: 6428
Estimated Gas Usage: 1375 - 1660
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0xdf920992b6c33f9e0143633dc6cc38917c300335.sol:212

_burnedAmount * FLOAT_SCALAR / info.totalFrozen

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:29.552863
Transaction Length: 2
Severity: Low
Contract: Combine
Function name: unfreeze(uint256)
PC address: 6428
Estimated Gas Usage: 1375 - 1660
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0xdf920992b6c33f9e0143633dc6cc38917c300335.sol:212

_burnedAmount * FLOAT_SCALAR / info.totalFrozen

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0xC07168567b69e7F185A7690AF3B4580025579f33.sol
Total states:2370
2.426523
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.063598
Transaction Length: 0
Severity: High
Contract: BaseERC20
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xC07168567b69e7F185A7690AF3B4580025579f33.sol:15

e/contracts/blob/master/contracts/token/Syn

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.051400
Transaction Length: 0
Severity: High
Contract: SyntheticToken
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xC07168567b69e7F185A7690AF3B4580025579f33.sol:15

e/contracts/blob/master/contracts/token/Syn

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x137366d6Eb553945D8399a9eDcCa7DbD344258FC.sol
Total states:381
0.546313
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x1a16e1894df4579650e1e611e5b0b92eae478bb2.sol
Total states:32074
78.780852
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.046301
Transaction Length: 0
Severity: High
Contract: Clover42Token
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x1a16e1894df4579650e1e611e5b0b92eae478bb2.sol:12

ctions; to access them see {ERC20Detailed}.

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.147093
Transaction Length: 0
Severity: High
Contract: C42LiquidityMinter
Function name: constructor
PC address: 356
Estimated Gas Usage: 22796 - 106764
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x1a16e1894df4579650e1e611e5b0b92eae478bb2.sol:1173

block.number + BLOCK_PER_28D

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.382887
Transaction Length: 1
Severity: Low
Contract: C42LiquidityMinter
Function name: poolInfo(uint256)
PC address: 2095
Estimated Gas Usage: 725 - 820
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x1a16e1894df4579650e1e611e5b0b92eae478bb2.sol:1152

PoolInfo[] public poolInfo

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.935468
Transaction Length: 1
Severity: Low
Contract: C42LiquidityMinter
Function name: withdraw(uint256,uint256)
PC address: 2804
Estimated Gas Usage: 732 - 827
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x1a16e1894df4579650e1e611e5b0b92eae478bb2.sol:1295

poolInfo[_pid]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.481963
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3244
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x1a16e1894df4579650e1e611e5b0b92eae478bb2.sol:114

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.739975
Transaction Length: 2
Severity: High
Contract: ERC20Burnable
Function name: increaseAllowance(address,uint256)
PC address: 3424
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x1a16e1894df4579650e1e611e5b0b92eae478bb2.sol:114

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.377660
Transaction Length: 2
Severity: High
Contract: ERC20Mintable
Function name: increaseAllowance(address,uint256)
PC address: 3847
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x1a16e1894df4579650e1e611e5b0b92eae478bb2.sol:114

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.348221
Transaction Length: 1
Severity: Low
Contract: C42LiquidityMinter
Function name: updatePool(uint256)
PC address: 4642
Estimated Gas Usage: 704 - 799
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x1a16e1894df4579650e1e611e5b0b92eae478bb2.sol:1257

poolInfo[_pid]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.687561
Transaction Length: 1
Severity: Low
Contract: C42LiquidityMinter
Function name: emergencyWithdraw(uint256)
PC address: 5712
Estimated Gas Usage: 726 - 821
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x1a16e1894df4579650e1e611e5b0b92eae478bb2.sol:1313

poolInfo[_pid]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:05.547226
Transaction Length: 1
Severity: Low
Contract: C42LiquidityMinter
Function name: pendingC42(uint256,address)
PC address: 7360
Estimated Gas Usage: 739 - 834
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x1a16e1894df4579650e1e611e5b0b92eae478bb2.sol:1235

poolInfo[_pid]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:05.899325
Transaction Length: 1
Severity: Low
Contract: C42LiquidityMinter
Function name: deposit(uint256,uint256)
PC address: 7993
Estimated Gas Usage: 752 - 847
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x1a16e1894df4579650e1e611e5b0b92eae478bb2.sol:1276

poolInfo[_pid]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.857680
Transaction Length: 1
Severity: High
Contract: C42LiquidityMinter
Function name: getMultiplier(uint256,uint256)
PC address: 8815
Estimated Gas Usage: 1121 - 1594
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x1a16e1894df4579650e1e611e5b0b92eae478bb2.sol:168

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol
Total states:35615
162.687084
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.477270
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1004
Estimated Gas Usage: 417 - 512
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.815838
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1006
Estimated Gas Usage: 417 - 512
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:14.822337
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1089
Estimated Gas Usage: 593 - 688
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:21.851567
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1091
Estimated Gas Usage: 593 - 688
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.058496
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1261
Estimated Gas Usage: 462 - 557
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.177328
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1263
Estimated Gas Usage: 462 - 557
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.805109
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1346
Estimated Gas Usage: 638 - 733
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:19.335349
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1348
Estimated Gas Usage: 638 - 733
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.747800
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeBP(uint256)
PC address: 2585
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:784

uint[] public bonusRangeBP

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.523752
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3707
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:1226

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:04.190669
Transaction Length: 2
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3707
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:1226

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:35.069737
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeStart(uint256)
PC address: 6017
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:783

uint[] public bonusRangeStart

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:26.928914
Transaction Length: 1
Severity: Low
Contract: LidStaking
Function name: stakeHandlers(uint256)
PC address: 6118
Estimated Gas Usage: 790 - 885
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:961

IStakeHandler[] public stakeHandlers

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.669710
Transaction Length: 2
Severity: High
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6315
Estimated Gas Usage: 1699 - 2124
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:1111

stakeHandlers.length-1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:07.810363
Transaction Length: 2
Severity: Low
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6326
Estimated Gas Usage: 1709 - 2134
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:1111

stakeHandlers[stakeHandlers.length-1]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:31.524728
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: calculateRatePerEth(uint256,uint256,uint256)
PC address: 6866
Estimated Gas Usage: 955 - 1050
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:162

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.348391
Transaction Length: 1
Severity: High
Contract: LidStaking
Function name: findTaxAmount(uint256,uint256)
PC address: 13348
Estimated Gas Usage: 474 - 569
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:162

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:33.269373
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPoolBPs(uint256)
PC address: 15577
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:1227

uint[] public tokenPoolBPs

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0xf7070f533932b495ac859e910373d9f7bdf9569f.sol
Total states:2301
2.258561
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.063657
Transaction Length: 0
Severity: High
Contract: ERC20
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xf7070f533932b495ac859e910373d9f7bdf9569f.sol:22

al functions; to access them see `ERC20Deta

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.041647
Transaction Length: 0
Severity: High
Contract: TulipToken
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xf7070f533932b495ac859e910373d9f7bdf9569f.sol:22

al functions; to access them see `ERC20Deta

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x0a4e9f69f5b2e1e661da9ed98956f928200ea4ba.sol
Total states:3288
18.664113
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.547425
Transaction Length: 1
Severity: Low
Contract: YieldContract
Function name: withdraw(uint256)
PC address: 1468
Estimated Gas Usage: 705 - 800
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x0a4e9f69f5b2e1e661da9ed98956f928200ea4ba.sol:628

lockBoxStructs[lockBoxNumber]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:06.504570
Transaction Length: 1
Severity: Low
Contract: YieldContract
Function name: lockBoxStructs(uint256)
PC address: 2041
Estimated Gas Usage: 701 - 796
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x0a4e9f69f5b2e1e661da9ed98956f928200ea4ba.sol:560

LockBoxStruct[] public lockBoxStructs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:07.057729
Transaction Length: 1
Severity: Low
Contract: YieldContract
Function name: updateBeneficiary(uint256,address)
PC address: 2132
Estimated Gas Usage: 759 - 854
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x0a4e9f69f5b2e1e661da9ed98956f928200ea4ba.sol:622

lockBoxStructs[lockBoxNumber]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:07.730293
Transaction Length: 1
Severity: Low
Contract: YieldContract
Function name: getLockBoxBeneficiary(uint256)
PC address: 2484
Estimated Gas Usage: 726 - 821
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x0a4e9f69f5b2e1e661da9ed98956f928200ea4ba.sol:574

lockBoxStructs[lockBoxNumber]

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:15.478299
Transaction Length: 1
Severity: Low
Contract: YieldContract
Function name: deposit12m(address,uint256)
PC address: 4320
Estimated Gas Usage: 8943 - 30264
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x0a4e9f69f5b2e1e661da9ed98956f928200ea4ba.sol:606

token.transferFrom(yieldWallet, address(this), yieldAmount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:13.333444
Transaction Length: 1
Severity: Low
Contract: YieldContract
Function name: deposit6m(address,uint256)
PC address: 4639
Estimated Gas Usage: 11032 - 67435
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x0a4e9f69f5b2e1e661da9ed98956f928200ea4ba.sol:609

token.transferFrom(msg.sender, address(this), amount)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x75e9f410e8d1d7240b67ec6fe35fa37580b814d9.sol
Total states:272
78.543547
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.065695
Transaction Length: 0
Severity: High
Contract: VaultProRata
Function name: constructor
PC address: 408
Estimated Gas Usage: 82423 - 403508
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x75e9f410e8d1d7240b67ec6fe35fa37580b814d9.sol:34

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.564556
Transaction Length: 0
Severity: Low
Contract: VaultProRata
Function name: constructor
PC address: 422
Estimated Gas Usage: 82433 - 403518
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x75e9f410e8d1d7240b67ec6fe35fa37580b814d9.sol:35

assert(c >= a)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0xc11eccdee225d644f873776a68a02ecd8c015697.sol
Total states:2749
25.987642
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.582023
Transaction Length: 1
Severity: High
Contract: DODOLpToken
Function name: name()
PC address: 1065
Estimated Gas Usage: 2316 - 37588
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xc11eccdee225d644f873776a68a02ecd8c015697.sol:5

racts/intf/IERC

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.323117
Transaction Length: 1
Severity: High
Contract: DODOLpToken
Function name: name()
PC address: 1068
Estimated Gas Usage: 2316 - 37588
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xc11eccdee225d644f873776a68a02ecd8c015697.sol:3



// File: contracts/intf/IERC20.sol

/*

 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.074431
Transaction Length: 1
Severity: High
Contract: DODOLpToken
Function name: name()
PC address: 1080
Estimated Gas Usage: 2316 - 37588
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xc11eccdee225d644f873776a68a02ecd8c015697.sol:249

IERC20(originToken).name()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.048179
Transaction Length: 1
Severity: High
Contract: DODOLpToken
Function name: decimals()
PC address: 2785
Estimated Gas Usage: 2275 - 37169
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xc11eccdee225d644f873776a68a02ecd8c015697.sol:5

racts/intf/IERC

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.967490
Transaction Length: 1
Severity: High
Contract: DODOLpToken
Function name: decimals()
PC address: 2788
Estimated Gas Usage: 2275 - 37169
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xc11eccdee225d644f873776a68a02ecd8c015697.sol:3



// File: contracts/intf/IERC20.sol

/*

 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.094429
Transaction Length: 1
Severity: High
Contract: DODOLpToken
Function name: decimals()
PC address: 2800
Estimated Gas Usage: 2275 - 37169
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xc11eccdee225d644f873776a68a02ecd8c015697.sol:253

IERC20(originToken).decimals()

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:02.088311
Transaction Length: 1
Severity: High
Contract: DODOLpToken
Function name: name()
PC address: 6249
Estimated Gas Usage: 2316 - 37588
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xc11eccdee225d644f873776a68a02ecd8c015697.sol:77

er} event.
     */
    

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:08.811592
Transaction Length: 1
Severity: High
Contract: DODOLpToken
Function name: decimals()
PC address: 6314
Estimated Gas Usage: 2275 - 37169
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xc11eccdee225d644f873776a68a02ecd8c015697.sol:102

ry SafeMath {
    funct

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0xb21188c0d4eea42ab6fb93df0ba7d4cbfc20b4ed.sol
Total states:1986
6.211865
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.491391
Transaction Length: 1
Severity: Low
Contract: YugiFarming
Function name: poolList(uint256)
PC address: 1908
Estimated Gas Usage: 702 - 797
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0xb21188c0d4eea42ab6fb93df0ba7d4cbfc20b4ed.sol:1064

PoolList[] public poolList

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.340513
Transaction Length: 1
Severity: Low
Contract: YugiFarming
Function name: pendingRewardsFromPool(uint256,address)
PC address: 6377
Estimated Gas Usage: 982 - 2215
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0xb21188c0d4eea42ab6fb93df0ba7d4cbfc20b4ed.sol:1244

poolList[_pid]

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0xe94f904a6181a00266abb1b39711520b5551d0b7.sol
Total states:2324
1.979372
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0xe6d3c33178bddab782f68ccdfe0ea5f0c26dea01.sol
Total states:52177
1112.410687
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.860070
Transaction Length: 1
Severity: High
Contract: Module
Function name: getModuleAddress(string)
PC address: 416
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xe6d3c33178bddab782f68ccdfe0ea5f0c26dea01.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.012818
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(string,string,uint8)
PC address: 1000
Estimated Gas Usage: 409 - 504
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xe6d3c33178bddab782f68ccdfe0ea5f0c26dea01.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.710577
Transaction Length: 1
Severity: High
Contract: PoolToken_CurveFi_SBTC
Function name: initialize(string,string,uint8)
PC address: 1000
Estimated Gas Usage: 409 - 504
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xe6d3c33178bddab782f68ccdfe0ea5f0c26dea01.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.731957
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(string,string,uint8)
PC address: 1151
Estimated Gas Usage: 751 - 3528
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xe6d3c33178bddab782f68ccdfe0ea5f0c26dea01.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.512952
Transaction Length: 1
Severity: High
Contract: PoolToken_CurveFi_SBTC
Function name: initialize(string,string,uint8)
PC address: 1151
Estimated Gas Usage: 751 - 3528
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xe6d3c33178bddab782f68ccdfe0ea5f0c26dea01.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.205381
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[],uint256)
PC address: 2226
Estimated Gas Usage: 429 - 524
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xe6d3c33178bddab782f68ccdfe0ea5f0c26dea01.sol:5

openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.383891
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[],uint256)
PC address: 2228
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xe6d3c33178bddab782f68ccdfe0ea5f0c26dea01.sol:3

*/

// File: @openzeppelin\upgrades\

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.642807
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[])
PC address: 2357
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xe6d3c33178bddab782f68ccdfe0ea5f0c26dea01.sol:5

openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:16.942294
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[])
PC address: 2359
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xe6d3c33178bddab782f68ccdfe0ea5f0c26dea01.sol:3

*/

// File: @openzeppelin\upgrades\

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:55.881513
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: getModuleAddress(string)
PC address: 2526
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xe6d3c33178bddab782f68ccdfe0ea5f0c26dea01.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:40.859080
Transaction Length: 1
Severity: High
Contract: PoolToken_CurveFi_SBTC
Function name: getModuleAddress(string)
PC address: 2526
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xe6d3c33178bddab782f68ccdfe0ea5f0c26dea01.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:55.491378
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(address,string,string)
PC address: 3179
Estimated Gas Usage: 485 - 580
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xe6d3c33178bddab782f68ccdfe0ea5f0c26dea01.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:57.355629
Transaction Length: 1
Severity: High
Contract: PoolToken_CurveFi_SBTC
Function name: initialize(address,string,string)
PC address: 3179
Estimated Gas Usage: 485 - 580
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xe6d3c33178bddab782f68ccdfe0ea5f0c26dea01.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.726416
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3249
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xe6d3c33178bddab782f68ccdfe0ea5f0c26dea01.sol:212

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:07:13.993212
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(address,string,string)
PC address: 3330
Estimated Gas Usage: 827 - 3604
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xe6d3c33178bddab782f68ccdfe0ea5f0c26dea01.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:07:18.482842
Transaction Length: 1
Severity: High
Contract: PoolToken_CurveFi_SBTC
Function name: initialize(address,string,string)
PC address: 3330
Estimated Gas Usage: 827 - 3604
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xe6d3c33178bddab782f68ccdfe0ea5f0c26dea01.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.427235
Transaction Length: 1
Severity: Low
Contract: DistributionToken
Function name: distributions(uint256)
PC address: 3405
Estimated Gas Usage: 724 - 819
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0xe6d3c33178bddab782f68ccdfe0ea5f0c26dea01.sol:995

Distribution[] public distributions

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.644833
Transaction Length: 2
Severity: High
Contract: ERC20Burnable
Function name: increaseAllowance(address,uint256)
PC address: 3429
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xe6d3c33178bddab782f68ccdfe0ea5f0c26dea01.sol:212

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.992922
Transaction Length: 2
Severity: High
Contract: ERC20Mintable
Function name: increaseAllowance(address,uint256)
PC address: 4214
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xe6d3c33178bddab782f68ccdfe0ea5f0c26dea01.sol:212

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:03:01.258394
Transaction Length: 1
Severity: Low
Contract: PoolToken
Function name: distributions(uint256)
PC address: 6392
Estimated Gas Usage: 768 - 863
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0xe6d3c33178bddab782f68ccdfe0ea5f0c26dea01.sol:995

Distribution[] public distributions

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:45.781979
Transaction Length: 1
Severity: Low
Contract: PoolToken_CurveFi_SBTC
Function name: distributions(uint256)
PC address: 6392
Estimated Gas Usage: 768 - 863
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0xe6d3c33178bddab782f68ccdfe0ea5f0c26dea01.sol:995

Distribution[] public distributions

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.682728
Transaction Length: 2
Severity: High
Contract: DistributionToken
Function name: increaseAllowance(address,uint256)
PC address: 6759
Estimated Gas Usage: 1104 - 1579
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xe6d3c33178bddab782f68ccdfe0ea5f0c26dea01.sol:212

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x382f28ea85232d6d6b22c51580e7669601949ec4.sol
Total states:1759
5.979589
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0xacfb5a0cc16e1cc0e0d4f42d8bc42996f491b901.sol
Total states:426
0.814459
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x3896b3e2dfbed991d0c030440f589f4003ec0327.sol
Total states:149
2.696029
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x7a5918670b0c390ad25f7bee908c1acc2d314a3c.sol
Total states:4596
21.902628
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.848060
Transaction Length: 1
Severity: High
Contract: OSM
Function name: kiss(address[])
PC address: 498
Estimated Gas Usage: 408 - 503
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7a5918670b0c390ad25f7bee908c1acc2d314a3c.sol:5

sol - Medianizer v2



--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.061579
Transaction Length: 1
Severity: High
Contract: OSM
Function name: kiss(address[])
PC address: 500
Estimated Gas Usage: 408 - 503
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7a5918670b0c390ad25f7bee908c1acc2d314a3c.sol:3

*/

// median.sol - Medianizer v2

/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.762348
Transaction Length: 1
Severity: High
Contract: OSM
Function name: diss(address[])
PC address: 761
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7a5918670b0c390ad25f7bee908c1acc2d314a3c.sol:5

sol - Medianizer v2



--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.976340
Transaction Length: 1
Severity: High
Contract: OSM
Function name: diss(address[])
PC address: 763
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7a5918670b0c390ad25f7bee908c1acc2d314a3c.sol:3

*/

// median.sol - Medianizer v2

/

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x5ff99a7127fb6948c3fb9fddb2d18163f8b0629d.sol
Total states:12855
250.046268
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.951618
Transaction Length: 1
Severity: High
Contract: Module
Function name: getModuleAddress(string)
PC address: 416
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x5ff99a7127fb6948c3fb9fddb2d18163f8b0629d.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.560504
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 511
Estimated Gas Usage: 364 - 459
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x5ff99a7127fb6948c3fb9fddb2d18163f8b0629d.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.187541
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 513
Estimated Gas Usage: 364 - 459
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x5ff99a7127fb6948c3fb9fddb2d18163f8b0629d.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.665012
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 596
Estimated Gas Usage: 540 - 635
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x5ff99a7127fb6948c3fb9fddb2d18163f8b0629d.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:16.631936
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 598
Estimated Gas Usage: 540 - 635
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x5ff99a7127fb6948c3fb9fddb2d18163f8b0629d.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:29.603953
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 681
Estimated Gas Usage: 716 - 811
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x5ff99a7127fb6948c3fb9fddb2d18163f8b0629d.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:43.681887
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 683
Estimated Gas Usage: 716 - 811
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x5ff99a7127fb6948c3fb9fddb2d18163f8b0629d.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:06.035785
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 766
Estimated Gas Usage: 892 - 987
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x5ff99a7127fb6948c3fb9fddb2d18163f8b0629d.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:30.267009
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 768
Estimated Gas Usage: 892 - 987
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x5ff99a7127fb6948c3fb9fddb2d18163f8b0629d.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:58.728118
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: getModuleAddress(string)
PC address: 1453
Estimated Gas Usage: 451 - 546
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x5ff99a7127fb6948c3fb9fddb2d18163f8b0629d.sol:3

*/

// File: @openzeppelin\contract

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0xCCa15caA715e918df70A62E5A600c0f53c1B9053.sol
Total states:779
54.483111
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.320123
Transaction Length: 1
Severity: High
Contract: ExchangeProxy
Function name: multihopBatchSwapExactOut((address,address,address,uint256,uint256,uint256)[][],address,address,uint256)
PC address: 6267
Estimated Gas Usage: 617 - 995
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xCCa15caA715e918df70A62E5A600c0f53c1B9053.sol:19


pragma experimental ABIEncode

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.499076
Transaction Length: 1
Severity: High
Contract: ExchangeProxy
Function name: multihopBatchSwapExactOut((address,address,address,uint256,uint256,uint256)[][],address,address,uint256)
PC address: 6320
Estimated Gas Usage: 617 - 995
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xCCa15caA715e918df70A62E5A600c0f53c1B9053.sol:26

;
    function ge

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:28.296189
Transaction Length: 1
Severity: High
Contract: ExchangeProxy
Function name: multihopBatchSwapExactIn((address,address,address,uint256,uint256,uint256)[][],address,address,uint256,uint256)
PC address: 8075
Estimated Gas Usage: 460 - 648
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xCCa15caA715e918df70A62E5A600c0f53c1B9053.sol:238

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0xa2cd4f0ca0ab2504c5ee4f3c8e2d7e486b24d8fe.sol
Total states:2922
338.833682
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.690097
Transaction Length: 1
Severity: High
Contract: NiftyTools
Function name: feedMultiple(uint256[],uint256[])
PC address: 719
Estimated Gas Usage: 407 - 502
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xa2cd4f0ca0ab2504c5ee4f3c8e2d7e486b24d8fe.sol:5

cense-Identifier: MIT

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.393564
Transaction Length: 1
Severity: High
Contract: NiftyTools
Function name: feedMultiple(uint256[],uint256[])
PC address: 721
Estimated Gas Usage: 407 - 502
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xa2cd4f0ca0ab2504c5ee4f3c8e2d7e486b24d8fe.sol:3

*/

// SPDX-License-Identifier: MIT


--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.995178
Transaction Length: 1
Severity: High
Contract: NiftyTools
Function name: feedMultiple(uint256[],uint256[])
PC address: 804
Estimated Gas Usage: 583 - 678
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xa2cd4f0ca0ab2504c5ee4f3c8e2d7e486b24d8fe.sol:5

cense-Identifier: MIT

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:25.324291
Transaction Length: 1
Severity: High
Contract: NiftyTools
Function name: feedMultiple(uint256[],uint256[])
PC address: 806
Estimated Gas Usage: 583 - 678
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xa2cd4f0ca0ab2504c5ee4f3c8e2d7e486b24d8fe.sol:3

*/

// SPDX-License-Identifier: MIT


--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:06.144263
Transaction Length: 1
Severity: High
Contract: NiftyTools
Function name: claimMultiple(uint256[])
PC address: 999
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xa2cd4f0ca0ab2504c5ee4f3c8e2d7e486b24d8fe.sol:5

cense-Identifier: MIT

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:10.435807
Transaction Length: 1
Severity: High
Contract: NiftyTools
Function name: claimMultiple(uint256[])
PC address: 1001
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xa2cd4f0ca0ab2504c5ee4f3c8e2d7e486b24d8fe.sol:3

*/

// SPDX-License-Identifier: MIT


--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:39.045478
Transaction Length: 1
Severity: High
Contract: NiftyTools
Function name: _checkAmount(uint256[])
PC address: 1198
Estimated Gas Usage: 340 - 435
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xa2cd4f0ca0ab2504c5ee4f3c8e2d7e486b24d8fe.sol:5

cense-Identifier: MIT

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:42.717013
Transaction Length: 1
Severity: High
Contract: NiftyTools
Function name: _checkAmount(uint256[])
PC address: 1200
Estimated Gas Usage: 340 - 435
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xa2cd4f0ca0ab2504c5ee4f3c8e2d7e486b24d8fe.sol:3

*/

// SPDX-License-Identifier: MIT


--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:03:21.093184
Transaction Length: 1
Severity: Low
Contract: NiftyTools
Function name: claimMultiple(uint256[])
PC address: 5114
Estimated Gas Usage: 4802 - 40639
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0xa2cd4f0ca0ab2504c5ee4f3c8e2d7e486b24d8fe.sol:430

vnft.claimMiningRewards(ids[i])

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:27.261105
Transaction Length: 1
Severity: High
Contract: NiftyTools
Function name: claimMultiple(uint256[])
PC address: 7707
Estimated Gas Usage: 3963 - 39280
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xa2cd4f0ca0ab2504c5ee4f3c8e2d7e486b24d8fe.sol:196

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0xdc2327e2000053e4e908f2cc360e3d2242fc719e.sol
Total states:654
0.608436
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0xac72ba2c6bbe28928b0ebf22d25e689e033aee5a.sol
Total states:16824
38.582469
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.324147
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3044
Estimated Gas Usage: 989 - 1464
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xac72ba2c6bbe28928b0ebf22d25e689e033aee5a.sol:38

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.508118
Transaction Length: 1
Severity: Low
Contract: AiToken
Function name: lockState(address,uint256)
PC address: 4015
Estimated Gas Usage: 830 - 1115
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0xac72ba2c6bbe28928b0ebf22d25e689e033aee5a.sol:319

lockInfo[_holder][_idx]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.605240
Transaction Length: 2
Severity: High
Contract: AiToken
Function name: increaseAllowance(address,uint256)
PC address: 11746
Estimated Gas Usage: 968 - 1443
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xac72ba2c6bbe28928b0ebf22d25e689e033aee5a.sol:38

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x9eb2980d08189720999871279b0272bc17c725f4.sol
Total states:2324
1.781116
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x74730672e1333dcd8799576bc7246e51835cb337.sol
Total states:149
2.953334
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol
Total states:377586
11377.735359
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.014973
Transaction Length: 1
Severity: High
Contract: usingOraclize
Function name: __callback(bytes32,string)
PC address: 181
Estimated Gas Usage: 323 - 418
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verificatio

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:00.634716
Transaction Length: 1
Severity: Medium
Contract: Pool2
Function name: changeDependentContractAddress()
PC address: 230
Estimated Gas Usage: 24904 - 225557
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 1400
Offset: 1644
Offset: 1941
Offset: 2238
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:7548

function changeDependentContractAddress() public onlyInternal {
        m1 = MCR(ms.getLatestAddress("MC"));
        pd = PoolData(ms.getLatestAddress("PD"));
        p1 = Pool1(ms.getLatestAddress("P1"));
    }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:00.975918
Transaction Length: 2
Severity: Medium
Contract: Pool2
Function name: changeDependentContractAddress()
PC address: 230
Estimated Gas Usage: 24904 - 225557
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 1400
Offset: 1644
Offset: 1941
Offset: 2238
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:7548

function changeDependentContractAddress() public onlyInternal {
        m1 = MCR(ms.getLatestAddress("MC"));
        pd = PoolData(ms.getLatestAddress("PD"));
        p1 = Pool1(ms.getLatestAddress("P1"));
    }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:05.973899
Transaction Length: 1
Severity: Medium
Contract: ClaimsReward
Function name: upgrade(address)
PC address: 359
Estimated Gas Usage: 6620 - 111486
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 4109
Offset: 4368
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:9402

function upgrade(address _newAdd) public onlyInternal {
        uint amount = tk.balanceOf(address(this));
        if (amount > 0) {
            require(tk.transfer(_newAdd, amount));
        }

    }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:14.366644
Transaction Length: 2
Severity: Medium
Contract: ClaimsReward
Function name: upgrade(address)
PC address: 359
Estimated Gas Usage: 6620 - 111486
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 4109
Offset: 4368
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:9402

function upgrade(address _newAdd) public onlyInternal {
        uint amount = tk.balanceOf(address(this));
        if (amount > 0) {
            require(tk.transfer(_newAdd, amount));
        }

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:21.989457
Transaction Length: 1
Severity: High
Contract: usingOraclize
Function name: __callback(bytes32,string,bytes)
PC address: 378
Estimated Gas Usage: 345 - 440
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verificatio

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:01.580976
Transaction Length: 1
Severity: Medium
Contract: Claims
Function name: getClaimbyIndex(uint256)
PC address: 464
Estimated Gas Usage: 4859 - 75864
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 6227
Offset: 6500
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:8924

function getClaimbyIndex(uint _claimId) external view returns (
        uint claimId,
        uint status,
        int8 finalVerdict,
        address claimOwner,
        uint coverId
    )
    {
        uint stat;
        claimId = _claimId;
        (, coverId, finalVerdict, stat, , ) = cd.getClaim(_claimId);
        claimOwner = qd.getCoverMemberAddress(coverId);
        status = stat;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.569090
Transaction Length: 1
Severity: High
Contract: Pool2
Function name: saveIADetails(bytes4[],uint64[],uint64,bool)
PC address: 502
Estimated Gas Usage: 407 - 502
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.403175
Transaction Length: 1
Severity: High
Contract: Pool2
Function name: saveIADetails(bytes4[],uint64[],uint64,bool)
PC address: 504
Estimated Gas Usage: 407 - 502
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.221114
Transaction Length: 1
Severity: High
Contract: Quotation
Function name: verifyCoverDetails(address,address,bytes4,uint256[],uint16,uint8,bytes32,bytes32)
PC address: 521
Estimated Gas Usage: 488 - 583
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.170259
Transaction Length: 1
Severity: High
Contract: Quotation
Function name: verifyCoverDetails(address,address,bytes4,uint256[],uint16,uint8,bytes32,bytes32)
PC address: 523
Estimated Gas Usage: 488 - 583
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:37.904249
Transaction Length: 1
Severity: High
Contract: usingOraclize
Function name: __callback(bytes32,string,bytes)
PC address: 529
Estimated Gas Usage: 687 - 3464
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verificatio

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:01.581800
Transaction Length: 1
Severity: Medium
Contract: TokenFunctions
Function name: getLockedCNAgainstCover(uint256)
PC address: 534
Estimated Gas Usage: 4829 - 75933
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 21827
Offset: 22241
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:870

function getLockedCNAgainstCover(uint _coverId) external view returns(uint) {
        return _getLockedCNAgainstCover(_coverId);
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.868352
Transaction Length: 1
Severity: High
Contract: Pool2
Function name: saveIADetails(bytes4[],uint64[],uint64,bool)
PC address: 587
Estimated Gas Usage: 583 - 678
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:19.598755
Transaction Length: 1
Severity: High
Contract: Pool2
Function name: saveIADetails(bytes4[],uint64[],uint64,bool)
PC address: 589
Estimated Gas Usage: 583 - 678
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.423695
Transaction Length: 1
Severity: High
Contract: Pool1
Function name: __callback(bytes32,string)
PC address: 738
Estimated Gas Usage: 457 - 552
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:33.033774
Transaction Length: 1
Severity: High
Contract: Quotation
Function name: initiateMembershipAndCover(address,bytes4,uint256[],uint16,uint8,bytes32,bytes32)
PC address: 825
Estimated Gas Usage: 453 - 548
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:39.663499
Transaction Length: 1
Severity: High
Contract: Quotation
Function name: initiateMembershipAndCover(address,bytes4,uint256[],uint16,uint8,bytes32,bytes32)
PC address: 827
Estimated Gas Usage: 453 - 548
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:29.167504
Transaction Length: 1
Severity: Medium
Contract: Pool2
Function name: _getCurrencyAssetsBalance(bytes4)
PC address: 849
Estimated Gas Usage: 4531 - 74691
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 6846
Offset: 7094
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:7561

function _getCurrencyAssetsBalance(bytes4 _curr) public view returns(uint caBalance) {
        if (_curr == "ETH") {
            caBalance = address(p1).balance;
        } else {
            IERC20 erc20 = IERC20(pd.getCurrencyAssetAddress(_curr));
            caBalance = erc20.balanceOf(address(p1));
        }
    }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:23.241443
Transaction Length: 2
Severity: Medium
Contract: Pool2
Function name: _getCurrencyAssetsBalance(bytes4)
PC address: 849
Estimated Gas Usage: 4531 - 74691
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 6846
Offset: 7094
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:7561

function _getCurrencyAssetsBalance(bytes4 _curr) public view returns(uint caBalance) {
        if (_curr == "ETH") {
            caBalance = address(p1).balance;
        } else {
            IERC20 erc20 = IERC20(pd.getCurrencyAssetAddress(_curr));
            caBalance = erc20.balanceOf(address(p1));
        }
    }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:02.804765
Transaction Length: 1
Severity: Medium
Contract: TokenController
Function name: changeDependentContractAddress()
PC address: 861
Estimated Gas Usage: 15312 - 125756
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 5311
Offset: 5609
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:1489

function changeDependentContractAddress() public {
        token = NXMToken(ms.tokenAddress());
        pooledStaking = IPooledStaking(ms.getLatestAddress('PS'));
    }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:05.649088
Transaction Length: 2
Severity: Medium
Contract: TokenController
Function name: changeDependentContractAddress()
PC address: 861
Estimated Gas Usage: 15312 - 125756
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 5311
Offset: 5609
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:1489

function changeDependentContractAddress() public {
        token = NXMToken(ms.tokenAddress());
        pooledStaking = IPooledStaking(ms.getLatestAddress('PS'));
    }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:02.016045
Transaction Length: 1
Severity: Medium
Contract: Governance
Function name: changeDependentContractAddress()
PC address: 939
Estimated Gas Usage: 22854 - 188520
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 6072
Offset: 6369
Offset: 6666
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:11509

function changeDependentContractAddress() public {
        tokenInstance = TokenController(ms.dAppLocker());
        memberRole = MemberRoles(ms.getLatestAddress("MR"));
        proposalCategory = ProposalCategory(ms.getLatestAddress("PC"));
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:26.536363
Transaction Length: 1
Severity: High
Contract: Pool1
Function name: __callback(bytes32,string,bytes)
PC address: 948
Estimated Gas Usage: 479 - 574
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verificatio

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:09.532218
Transaction Length: 1
Severity: Medium
Contract: Claims
Function name: checkVoteClosing(uint256)
PC address: 1028
Estimated Gas Usage: 4691 - 74944
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 22966
Offset: 23186
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:9137

function checkVoteClosing(uint claimId) public view returns(int8 close) {
        close = 0;
        uint status;
        (, status) = cd.getClaimStatusNumber(claimId);
        uint dateUpd = cd.getClaimDateUpd(claimId);
        if (status == 12 && dateUpd.add(cd.payoutRetryTime()) < now) {
            if (cd.getClaimState12Count(claimId) < 60)
                close = 1;
        } 
        
        if (status > 5 && status != 12) {
            close = -1;
        }  else if (status != 12 && dateUpd.add(cd.maxVotingTime()) <= now) {
            close = 1;
        } else if (status != 12 && dateUpd.add(cd.minVotingTime()) >= now) {
            close = 0;
        } else if (status == 0 || (status >= 1 && status <= 5)) {
            close = _checkVoteClosingFinal(claimId, status);
        }
        
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:47.228960
Transaction Length: 1
Severity: High
Contract: Quotation
Function name: verifySign(uint256[],uint16,bytes4,address,uint8,bytes32,bytes32)
PC address: 1069
Estimated Gas Usage: 341 - 436
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:50.768948
Transaction Length: 1
Severity: High
Contract: Quotation
Function name: verifySign(uint256[],uint16,bytes4,address,uint8,bytes32,bytes32)
PC address: 1071
Estimated Gas Usage: 341 - 436
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:16.862841
Transaction Length: 1
Severity: High
Contract: MCR
Function name: addMCRData(uint256,uint256,uint256,bytes4[],uint256[],uint64)
PC address: 1094
Estimated Gas Usage: 422 - 517
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:21.627190
Transaction Length: 1
Severity: High
Contract: MCR
Function name: addMCRData(uint256,uint256,uint256,bytes4[],uint256[],uint64)
PC address: 1096
Estimated Gas Usage: 422 - 517
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:40.403088
Transaction Length: 1
Severity: High
Contract: Pool1
Function name: __callback(bytes32,string,bytes)
PC address: 1099
Estimated Gas Usage: 821 - 3598
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:27.118835
Transaction Length: 1
Severity: High
Contract: MCR
Function name: addMCRData(uint256,uint256,uint256,bytes4[],uint256[],uint64)
PC address: 1179
Estimated Gas Usage: 598 - 693
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:38.116487
Transaction Length: 1
Severity: High
Contract: MCR
Function name: addMCRData(uint256,uint256,uint256,bytes4[],uint256[],uint64)
PC address: 1181
Estimated Gas Usage: 598 - 693
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.963430
Transaction Length: 1
Severity: High
Contract: QuotationData
Function name: addHoldCover(address,address,bytes4,uint256[],uint16)
PC address: 1198
Estimated Gas Usage: 577 - 672
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.083417
Transaction Length: 1
Severity: High
Contract: QuotationData
Function name: addHoldCover(address,address,bytes4,uint256[],uint16)
PC address: 1200
Estimated Gas Usage: 577 - 672
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.643278
Transaction Length: 1
Severity: High
Contract: MemberRoles
Function name: addRole(bytes32,string,address)
PC address: 1232
Estimated Gas Usage: 457 - 552
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.357417
Transaction Length: 1
Severity: High
Contract: Governance
Function name: createProposalwithSolution(string,string,string,uint256,string,bytes)
PC address: 1239
Estimated Gas Usage: 408 - 503
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.860116
Transaction Length: 1
Severity: High
Contract: Governance
Function name: createProposalwithSolution(string,string,string,uint256,string,bytes)
PC address: 1324
Estimated Gas Usage: 584 - 679
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:16.905723
Transaction Length: 1
Severity: High
Contract: Governance
Function name: createProposalwithSolution(string,string,string,uint256,string,bytes)
PC address: 1409
Estimated Gas Usage: 760 - 855
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.210743
Transaction Length: 1
Severity: High
Contract: ProposalCategory
Function name: updateCategory(uint256,string,uint256,uint256,uint256,uint256[],uint256,string,address,bytes2,uint256[])
PC address: 1409
Estimated Gas Usage: 390 - 485
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:59.997959
Transaction Length: 1
Severity: High
Contract: Quotation
Function name: makeCoverUsingNXMTokens(uint256[],uint16,bytes4,address,uint8,bytes32,bytes32)
PC address: 1410
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:03.326113
Transaction Length: 1
Severity: High
Contract: Quotation
Function name: makeCoverUsingNXMTokens(uint256[],uint16,bytes4,address,uint8,bytes32,bytes32)
PC address: 1412
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:02:48.442603
Transaction Length: 1
Severity: Medium
Contract: Pool1
Function name: upgradeCapitalPool(address)
PC address: 1439
Estimated Gas Usage: 16352 - 127126
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 7684
Offset: 7893
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:8128

function upgradeCapitalPool(address payable newPoolAddress) external noReentrancy onlyInternal {
        for (uint64 i = 1; i < pd.getAllCurrenciesLen(); i++) {
            bytes4 caName = pd.getCurrenciesByIndex(i);
            _upgradeCapitalPool(caName, newPoolAddress);
        }
        if (address(this).balance > 0) {
            Pool1 newP1 = Pool1(newPoolAddress);
            newP1.sendEther.value(address(this).balance)();
        }
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:35.538139
Transaction Length: 1
Severity: High
Contract: Governance
Function name: createProposalwithSolution(string,string,string,uint256,string,bytes)
PC address: 1504
Estimated Gas Usage: 963 - 1058
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:15.532500
Transaction Length: 1
Severity: High
Contract: ProposalCategory
Function name: updateCategory(uint256,string,uint256,uint256,uint256,uint256[],uint256,string,address,bytes2,uint256[])
PC address: 1588
Estimated Gas Usage: 813 - 3590
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:24.687058
Transaction Length: 1
Severity: High
Contract: ProposalCategory
Function name: updateCategory(uint256,string,uint256,uint256,uint256,uint256[],uint256,string,address,bytes2,uint256[])
PC address: 1590
Estimated Gas Usage: 813 - 3590
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:18.287630
Transaction Length: 1
Severity: High
Contract: Pool1
Function name: makeCoverBegin(address,bytes4,uint256[],uint16,uint8,bytes32,bytes32)
PC address: 1594
Estimated Gas Usage: 408 - 503
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:25.740433
Transaction Length: 1
Severity: High
Contract: Pool1
Function name: makeCoverBegin(address,bytes4,uint256[],uint16,uint8,bytes32,bytes32)
PC address: 1596
Estimated Gas Usage: 408 - 503
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:51.533428
Transaction Length: 1
Severity: Medium
Contract: TokenFunctions
Function name: deprecated_unlockStakerUnlockableTokens(address)
PC address: 1649
Estimated Gas Usage: 4536 - 74320
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 13945
Offset: 14217
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:1083

function deprecated_unlockStakerUnlockableTokens(address _stakerAddress) public checkPause {
        uint unlockableAmount;
        address scAddress;
        bytes32 reason;
        uint scIndex;
        for (uint i = 0; i < td.getStakerStakedContractLength(_stakerAddress); i++) {
            scAddress = td.getStakerStakedContractByIndex(_stakerAddress, i);
            scIndex = td.getStakerStakedContractIndex(_stakerAddress, i);
            unlockableAmount = _deprecated_getStakerUnlockableTokensOnSmartContract(
            _stakerAddress, scAddress,
            scIndex);
            td.setUnlockableBeforeLastBurnTokens(_stakerAddress, i, 0);
            td.pushUnlockedStakedTokens(_stakerAddress, i, unlockableAmount);
            reason = keccak256(abi.encodePacked("UW", _stakerAddress, scAddress, scIndex));
            tc.releaseLockedTokens(_stakerAddress, reason, unlockableAmount);
        }
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:47.028865
Transaction Length: 1
Severity: High
Contract: ProposalCategory
Function name: updateCategory(uint256,string,uint256,uint256,uint256,uint256[],uint256,string,address,bytes2,uint256[])
PC address: 1748
Estimated Gas Usage: 1173 - 6632
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:01.685589
Transaction Length: 1
Severity: High
Contract: MemberRoles
Function name: addInitialABMembers(address[])
PC address: 1955
Estimated Gas Usage: 385 - 480
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:06.160010
Transaction Length: 1
Severity: High
Contract: MemberRoles
Function name: addInitialABMembers(address[])
PC address: 1957
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:20.857698
Transaction Length: 1
Severity: High
Contract: ProposalCategory
Function name: updateCategory(uint256,string,uint256,uint256,uint256,uint256[],uint256,string,address,bytes2,uint256[])
PC address: 1972
Estimated Gas Usage: 1584 - 9725
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:47.922513
Transaction Length: 1
Severity: High
Contract: ProposalCategory
Function name: updateCategory(uint256,string,uint256,uint256,uint256,uint256[],uint256,string,address,bytes2,uint256[])
PC address: 1974
Estimated Gas Usage: 1584 - 9725
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:08:39.679748
Transaction Length: 1
Severity: High
Contract: Pool1
Function name: makeCoverUsingCA(address,bytes4,uint256[],uint16,uint8,bytes32,bytes32)
PC address: 2037
Estimated Gas Usage: 498 - 593
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:08:45.593448
Transaction Length: 1
Severity: High
Contract: Pool1
Function name: makeCoverUsingCA(address,bytes4,uint256[],uint16,uint8,bytes32,bytes32)
PC address: 2039
Estimated Gas Usage: 498 - 593
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:51.589694
Transaction Length: 1
Severity: High
Contract: MemberRoles
Function name: getMemberLengthForAllRoles()
PC address: 2050
Estimated Gas Usage: 1293 - 2140
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:10099

function getMemberLengthForAllRoles() public view returns(uint[] memory totalMembers) { //solhint-disable-line
        totalMembers = new uint[](memberRoleData.length);
        for (uint i = 0; i < memberRoleData.length; i++) {
            totalMembers[i] = numberOfMembers(i);
        }
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:05.617136
Transaction Length: 1
Severity: High
Contract: MemberRoles
Function name: getMemberLengthForAllRoles()
PC address: 2090
Estimated Gas Usage: 1443 - 2666
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:10099

function getMemberLengthForAllRoles() public view returns(uint[] memory totalMembers) { //solhint-disable-line
        totalMembers = new uint[](memberRoleData.length);
        for (uint i = 0; i < memberRoleData.length; i++) {
            totalMembers[i] = numberOfMembers(i);
        }
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:30.739695
Transaction Length: 1
Severity: High
Contract: MemberRoles
Function name: addMembersBeforeLaunch(address[],uint256[])
PC address: 2197
Estimated Gas Usage: 429 - 524
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:33.506270
Transaction Length: 1
Severity: High
Contract: MemberRoles
Function name: addMembersBeforeLaunch(address[],uint256[])
PC address: 2199
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:23.712588
Transaction Length: 1
Severity: High
Contract: ProposalCategory
Function name: newCategory(string,uint256,uint256,uint256,uint256[],uint256,string,address,bytes2,uint256[],string)
PC address: 2233
Estimated Gas Usage: 407 - 502
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:07.652807
Transaction Length: 1
Severity: High
Contract: Governance
Function name: createProposal(string,string,string,uint256)
PC address: 2286
Estimated Gas Usage: 474 - 569
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:49.102506
Transaction Length: 1
Severity: High
Contract: MemberRoles
Function name: addMembersBeforeLaunch(address[],uint256[])
PC address: 2345
Estimated Gas Usage: 762 - 3539
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:05.729662
Transaction Length: 1
Severity: High
Contract: MemberRoles
Function name: addMembersBeforeLaunch(address[],uint256[])
PC address: 2347
Estimated Gas Usage: 762 - 3539
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:12.482622
Transaction Length: 1
Severity: High
Contract: Governance
Function name: createProposal(string,string,string,uint256)
PC address: 2371
Estimated Gas Usage: 650 - 745
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:02.273584
Transaction Length: 1
Severity: High
Contract: ProposalCategory
Function name: newCategory(string,uint256,uint256,uint256,uint256[],uint256,string,address,bytes2,uint256[],string)
PC address: 2412
Estimated Gas Usage: 830 - 3607
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:15.563544
Transaction Length: 1
Severity: High
Contract: ProposalCategory
Function name: newCategory(string,uint256,uint256,uint256,uint256[],uint256,string,address,bytes2,uint256[],string)
PC address: 2414
Estimated Gas Usage: 830 - 3607
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:25.188702
Transaction Length: 1
Severity: High
Contract: Governance
Function name: createProposal(string,string,string,uint256)
PC address: 2456
Estimated Gas Usage: 826 - 921
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:47.863708
Transaction Length: 1
Severity: High
Contract: ProposalCategory
Function name: newCategory(string,uint256,uint256,uint256,uint256[],uint256,string,address,bytes2,uint256[],string)
PC address: 2572
Estimated Gas Usage: 1190 - 6649
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:40.536726
Transaction Length: 1
Severity: High
Contract: Governance
Function name: addSolution(uint256,string,bytes)
PC address: 2787
Estimated Gas Usage: 434 - 529
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:07:35.875272
Transaction Length: 1
Severity: High
Contract: ProposalCategory
Function name: newCategory(string,uint256,uint256,uint256,uint256[],uint256,string,address,bytes2,uint256[],string)
PC address: 2796
Estimated Gas Usage: 1601 - 9742
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:08:06.485056
Transaction Length: 1
Severity: High
Contract: ProposalCategory
Function name: newCategory(string,uint256,uint256,uint256,uint256[],uint256,string,address,bytes2,uint256[],string)
PC address: 2798
Estimated Gas Usage: 1601 - 9742
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:47.348778
Transaction Length: 1
Severity: High
Contract: MemberRoles
Function name: roles(address)
PC address: 2870
Estimated Gas Usage: 995 - 1842
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:10070

function roles(address _memberAddress) public view returns(uint[] memory) { //solhint-disable-line
        uint length = memberRoleData.length;
        uint[] memory assignedRoles = new uint[](length);
        uint counter = 0; 
        for (uint i = 1; i < length; i++) {
            if (memberRoleData[i].memberActive[_memberAddress]) {
                assignedRoles[counter] = i;
                counter++;
            }
        }
        return assignedRoles;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:47.681506
Transaction Length: 1
Severity: High
Contract: Governance
Function name: addSolution(uint256,string,bytes)
PC address: 2872
Estimated Gas Usage: 610 - 705
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:23.470326
Transaction Length: 1
Severity: High
Contract: MemberRoles
Function name: roles(address)
PC address: 2910
Estimated Gas Usage: 1145 - 2368
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:10070

function roles(address _memberAddress) public view returns(uint[] memory) { //solhint-disable-line
        uint length = memberRoleData.length;
        uint[] memory assignedRoles = new uint[](length);
        uint counter = 0; 
        for (uint i = 1; i < length; i++) {
            if (memberRoleData[i].memberActive[_memberAddress]) {
                assignedRoles[counter] = i;
                counter++;
            }
        }
        return assignedRoles;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:03.048942
Transaction Length: 1
Severity: High
Contract: Governance
Function name: submitProposalWithSolution(uint256,string,bytes)
PC address: 3279
Estimated Gas Usage: 391 - 486
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:12.542777
Transaction Length: 1
Severity: High
Contract: Governance
Function name: submitProposalWithSolution(uint256,string,bytes)
PC address: 3364
Estimated Gas Usage: 567 - 662
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verificatio

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:03.660282
Transaction Length: 1
Severity: Low
Contract: ClaimsReward
Function name: _claimStakeCommission(uint256,address)
PC address: 3382
Estimated Gas Usage: 7989 - 113561
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:9735

td.setLastCompletedStakeCommissionIndex(_user, i)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:08.201953
Transaction Length: 2
Severity: Low
Contract: ClaimsReward
Function name: _claimStakeCommission(uint256,address)
PC address: 3382
Estimated Gas Usage: 7989 - 113561
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:9735

td.setLastCompletedStakeCommissionIndex(_user, i)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:01.879473
Transaction Length: 1
Severity: Low
Contract: TokenController
Function name: changeOperator(address)
PC address: 3840
Estimated Gas Usage: 3670 - 39363
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:1499

token.changeOperator(_newOperator)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:44.177825
Transaction Length: 2
Severity: Low
Contract: TokenController
Function name: changeOperator(address)
PC address: 3840
Estimated Gas Usage: 3670 - 39363
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:1499

token.changeOperator(_newOperator)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.554418
Transaction Length: 1
Severity: Low
Contract: MemberRoles
Function name: authorized(uint256)
PC address: 3875
Estimated Gas Usage: 706 - 801
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:10066

memberRoleData[_memberRoleId]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.004875
Transaction Length: 1
Severity: Low
Contract: MemberRoles
Function name: numberOfMembers(uint256)
PC address: 3949
Estimated Gas Usage: 728 - 823
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:10061

memberRoleData[_memberRoleId]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:18.957728
Transaction Length: 1
Severity: High
Contract: Governance
Function name: getFollowers(address)
PC address: 4225
Estimated Gas Usage: 1411 - 2448
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:11429

function getFollowers(address _add) external view returns(uint[] memory) {
        return leaderDelegation[_add];
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:26.858623
Transaction Length: 1
Severity: High
Contract: QuotationData
Function name: getHoldedCoverDetailsByID2(uint256)
PC address: 4341
Estimated Gas Usage: 2857 - 4414
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4574

function getHoldedCoverDetailsByID2(
        uint _hcid
    ) 
        external
        view
        returns (
            uint hcid,
            address payable memberAddress, 
            uint[] memory coverDetails
        )
    {
        return (
            _hcid,
            allCoverHolded[_hcid].userAddress,
            allCoverHolded[_hcid].coverDetails
        );
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:40.616313
Transaction Length: 1
Severity: High
Contract: QuotationData
Function name: getHoldedCoverDetailsByID2(uint256)
PC address: 4381
Estimated Gas Usage: 3007 - 4940
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4574

function getHoldedCoverDetailsByID2(
        uint _hcid
    ) 
        external
        view
        returns (
            uint hcid,
            address payable memberAddress, 
            uint[] memory coverDetails
        )
    {
        return (
            _hcid,
            allCoverHolded[_hcid].userAddress,
            allCoverHolded[_hcid].coverDetails
        );
    }

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:05.791859
Transaction Length: 1
Severity: Low
Contract: ClaimsReward
Function name: upgrade(address)
PC address: 4635
Estimated Gas Usage: 5776 - 76456
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:9405

tk.transfer(_newAdd, amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:14.222483
Transaction Length: 2
Severity: Low
Contract: ClaimsReward
Function name: upgrade(address)
PC address: 4635
Estimated Gas Usage: 5776 - 76456
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:9405

tk.transfer(_newAdd, amount)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:07:01.893197
Transaction Length: 1
Severity: High
Contract: QuotationData
Function name: getAllCoversOfUser(address)
PC address: 5367
Estimated Gas Usage: 1498 - 2535
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4426

function getAllCoversOfUser(address _add) external view returns(uint[] memory allCover) {
        return (userCover[_add]);
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:07:16.634954
Transaction Length: 1
Severity: High
Contract: QuotationData
Function name: getAllCoversOfUser(address)
PC address: 5407
Estimated Gas Usage: 1648 - 3061
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4426

function getAllCoversOfUser(address _add) external view returns(uint[] memory allCover) {
        return (userCover[_add]);
    }

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.746081
Transaction Length: 1
Severity: Low
Contract: TokenData
Function name: pushBurnedTokens(address,uint256,uint256)
PC address: 5478
Estimated Gas Usage: 2974 - 38151
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:5036

stakerStakedContracts[_stakerAddress][
                _stakerIndex]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:29.937933
Transaction Length: 2
Severity: Low
Contract: TokenData
Function name: pushBurnedTokens(address,uint256,uint256)
PC address: 5478
Estimated Gas Usage: 2974 - 38151
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:5036

stakerStakedContracts[_stakerAddress][
                _stakerIndex]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.237710
Transaction Length: 1
Severity: Low
Contract: ProposalCategory
Function name: category(uint256)
PC address: 5662
Estimated Gas Usage: 770 - 865
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:10348

allCategory[_categoryId]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.501555
Transaction Length: 1
Severity: Low
Contract: QuotationData
Function name: getCoverSumAssured(uint256)
PC address: 5762
Estimated Gas Usage: 750 - 845
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4447

allCovers[_cid]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 1:21:51.240891
Transaction Length: 2
Severity: Low
Contract: QuotationData
Function name: getCoverSumAssured(uint256)
PC address: 5762
Estimated Gas Usage: 750 - 845
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4447

allCovers[_cid]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:45.923307
Transaction Length: 1
Severity: Low
Contract: Quotation
Function name: initiateMembershipAndCover(address,bytes4,uint256[],uint16,uint8,bytes32,bytes32)
PC address: 5935
Estimated Gas Usage: 2907 - 40574
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:7144

coverDetails[3]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:03.424397
Transaction Length: 1
Severity: Low
Contract: TokenData
Function name: pushUnlockableBeforeLastBurnTokens(address,uint256,uint256)
PC address: 5956
Estimated Gas Usage: 3031 - 38208
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:5055

stakerStakedContracts[_stakerAddress][
                _stakerIndex]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:34.076765
Transaction Length: 2
Severity: Low
Contract: TokenData
Function name: pushUnlockableBeforeLastBurnTokens(address,uint256,uint256)
PC address: 5956
Estimated Gas Usage: 3031 - 38208
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:5055

stakerStakedContracts[_stakerAddress][
                _stakerIndex]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:37.455863
Transaction Length: 1
Severity: Low
Contract: Quotation
Function name: initiateMembershipAndCover(address,bytes4,uint256[],uint16,uint8,bytes32,bytes32)
PC address: 6034
Estimated Gas Usage: 3442 - 41625
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:7145

coverDetails[4]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:04.494611
Transaction Length: 1
Severity: Low
Contract: TokenData
Function name: getStakedContractStakerIndex(address,uint256)
PC address: 6551
Estimated Gas Usage: 873 - 1158
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4947

stakedContractStakers[
            _stakedContractAddress][_stakedContractIndex]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:32.509517
Transaction Length: 2
Severity: Low
Contract: TokenData
Function name: getStakedContractStakerIndex(address,uint256)
PC address: 6551
Estimated Gas Usage: 873 - 1158
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4947

stakedContractStakers[
            _stakedContractAddress][_stakedContractIndex]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:39.645235
Transaction Length: 1
Severity: Low
Contract: QuotationData
Function name: getCoverDetailsByCoverID2(uint256)
PC address: 6847
Estimated Gas Usage: 1259 - 1874
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4529

allCovers[_cid]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 1:22:29.048760
Transaction Length: 2
Severity: Low
Contract: QuotationData
Function name: getCoverDetailsByCoverID2(uint256)
PC address: 6847
Estimated Gas Usage: 1259 - 1874
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4529

allCovers[_cid]

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:25.410546
Transaction Length: 1
Severity: Low
Contract: Pool1
Function name: __callback(bytes32,string)
PC address: 6871
Estimated Gas Usage: 1944 - 5427
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:8181

ms.delegateCallBack(myid)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:06.123594
Transaction Length: 1
Severity: Low
Contract: TokenData
Function name: getStakerStakedBurnedByIndex(address,uint256)
PC address: 7228
Estimated Gas Usage: 872 - 1157
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4893

stakerStakedContracts[
            _stakerAddress][_stakerIndex]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:48.234706
Transaction Length: 2
Severity: Low
Contract: TokenData
Function name: getStakerStakedBurnedByIndex(address,uint256)
PC address: 7228
Estimated Gas Usage: 872 - 1157
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4893

stakerStakedContracts[
            _stakerAddress][_stakerIndex]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:53.666721
Transaction Length: 1
Severity: Low
Contract: QuotationData
Function name: getCoverMemberAddress(uint256)
PC address: 7549
Estimated Gas Usage: 771 - 866
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4467

allCovers[_cid]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 1:22:50.347990
Transaction Length: 2
Severity: Low
Contract: QuotationData
Function name: getCoverMemberAddress(uint256)
PC address: 7549
Estimated Gas Usage: 771 - 866
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4467

allCovers[_cid]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:05.140368
Transaction Length: 1
Severity: Low
Contract: QuotationData
Function name: getHoldedCoverDetailsByID1(uint256)
PC address: 7719
Estimated Gas Usage: 827 - 922
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4554

allCoverHolded[_hcid]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 1:23:10.761721
Transaction Length: 2
Severity: Low
Contract: QuotationData
Function name: getHoldedCoverDetailsByID1(uint256)
PC address: 7719
Estimated Gas Usage: 827 - 922
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4554

allCoverHolded[_hcid]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:08.478902
Transaction Length: 1
Severity: Low
Contract: TokenData
Function name: getStakerInitialStakedAmountOnContract(address,uint256)
PC address: 7939
Estimated Gas Usage: 828 - 1113
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4965

stakerStakedContracts[
            _stakerAddress][_stakerIndex]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:56.252669
Transaction Length: 2
Severity: Low
Contract: TokenData
Function name: getStakerInitialStakedAmountOnContract(address,uint256)
PC address: 7939
Estimated Gas Usage: 828 - 1113
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4965

stakerStakedContracts[
            _stakerAddress][_stakerIndex]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.666555
Transaction Length: 1
Severity: High
Contract: TokenFunctions
Function name: getUserAllLockedCNTokens(address)
PC address: 8074
Estimated Gas Usage: 4484 - 74365
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:6

ed for verifica

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.760304
Transaction Length: 1
Severity: Low
Contract: PoolData
Function name: getIARankDetailsByDate(uint64)
PC address: 8341
Estimated Gas Usage: 1267 - 1552
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3725

allIARankDetails[index]

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:03:05.472565
Transaction Length: 1
Severity: Medium
Contract: Pool1
Function name: upgradeCapitalPool(address)
PC address: 8370
Estimated Gas Usage: 12096 - 102821
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:8135

newP1.sendEther.value(address(this).balance)()

--------------------

==== Unprotected Ether Withdrawal ====
SWC ID: 105
FOUND TIME: 0:03:01.234658
Transaction Length: 1
Severity: High
Contract: Pool1
Function name: upgradeCapitalPool(address)
PC address: 8370
Estimated Gas Usage: 12096 - 102821
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:8135

newP1.sendEther.value(address(this).balance)()

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:07.277947
Transaction Length: 1
Severity: Low
Contract: TokenController
Function name: mint(address,uint256)
PC address: 8775
Estimated Gas Usage: 3706 - 39494
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:1664

token.mint(_member, _amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:51.642224
Transaction Length: 2
Severity: Low
Contract: TokenController
Function name: mint(address,uint256)
PC address: 8775
Estimated Gas Usage: 3706 - 39494
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:1664

token.mint(_member, _amount)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:57.615672
Transaction Length: 1
Severity: Low
Contract: MemberRoles
Function name: updateRole(address,uint256,bool)
PC address: 9337
Estimated Gas Usage: 780 - 875
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:9798

memberRoleData[_memberRoleId]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:24.847243
Transaction Length: 2
Severity: Low
Contract: MemberRoles
Function name: updateRole(address,uint256,bool)
PC address: 9337
Estimated Gas Usage: 780 - 875
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:9798

memberRoleData[_memberRoleId]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:10.790167
Transaction Length: 1
Severity: Low
Contract: TokenData
Function name: getStakerStakedContractIndex(address,uint256)
PC address: 9355
Estimated Gas Usage: 872 - 1157
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4929

stakerStakedContracts[
            _stakerAddress][_stakerIndex]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:04.451229
Transaction Length: 2
Severity: Low
Contract: TokenData
Function name: getStakerStakedContractIndex(address,uint256)
PC address: 9355
Estimated Gas Usage: 872 - 1157
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4929

stakerStakedContracts[
            _stakerAddress][_stakerIndex]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:29.066866
Transaction Length: 1
Severity: Low
Contract: QuotationData
Function name: getValidityOfCover(uint256)
PC address: 9655
Estimated Gas Usage: 771 - 866
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4457

allCovers[_cid]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 1:24:42.382544
Transaction Length: 2
Severity: Low
Contract: QuotationData
Function name: getValidityOfCover(uint256)
PC address: 9655
Estimated Gas Usage: 771 - 866
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4457

allCovers[_cid]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:33.956982
Transaction Length: 1
Severity: Low
Contract: QuotationData
Function name: getCoverPeriod(uint256)
PC address: 9697
Estimated Gas Usage: 726 - 821
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4442

allCovers[_cid]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 1:24:51.448742
Transaction Length: 2
Severity: Low
Contract: QuotationData
Function name: getCoverPeriod(uint256)
PC address: 9697
Estimated Gas Usage: 726 - 821
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4442

allCovers[_cid]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:12.535421
Transaction Length: 1
Severity: Low
Contract: TokenData
Function name: getStakerStakedContractByIndex(address,uint256)
PC address: 9968
Estimated Gas Usage: 915 - 1200
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4875

stakerStakedContracts[
            _stakerAddress][_stakerIndex]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:10.926749
Transaction Length: 2
Severity: Low
Contract: TokenData
Function name: getStakerStakedContractByIndex(address,uint256)
PC address: 9968
Estimated Gas Usage: 915 - 1200
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4875

stakerStakedContracts[
            _stakerAddress][_stakerIndex]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:44.074482
Transaction Length: 1
Severity: Low
Contract: PoolData
Function name: getCurrenciesByIndex(uint256)
PC address: 10117
Estimated Gas Usage: 816 - 911
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3764

allCurrencies[index]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:45.390626
Transaction Length: 2
Severity: Low
Contract: PoolData
Function name: getCurrenciesByIndex(uint256)
PC address: 10117
Estimated Gas Usage: 816 - 911
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3764

allCurrencies[index]

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:10.245776
Transaction Length: 1
Severity: Low
Contract: TokenController
Function name: lockForMemberVote(address,uint256)
PC address: 10261
Estimated Gas Usage: 3750 - 39538
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:1672

token.lockForMemberVote(_of, _days)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:58.561067
Transaction Length: 2
Severity: Low
Contract: TokenController
Function name: lockForMemberVote(address,uint256)
PC address: 10261
Estimated Gas Usage: 3750 - 39538
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:1672

token.lockForMemberVote(_of, _days)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:11.627851
Transaction Length: 1
Severity: Low
Contract: TokenController
Function name: lockReason(address,uint256)
PC address: 10352
Estimated Gas Usage: 798 - 1083
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:1337

mapping(address => bytes32[]) public lockReason

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:14.250314
Transaction Length: 1
Severity: Low
Contract: TokenData
Function name: pushUnlockedStakedTokens(address,uint256,uint256)
PC address: 10362
Estimated Gas Usage: 2964 - 38141
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:5017

stakerStakedContracts[_stakerAddress][
                _stakerIndex]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:41.286364
Transaction Length: 2
Severity: Low
Contract: TokenData
Function name: pushUnlockedStakedTokens(address,uint256,uint256)
PC address: 10362
Estimated Gas Usage: 2964 - 38141
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:5017

stakerStakedContracts[_stakerAddress][
                _stakerIndex]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:05:18.493709
Transaction Length: 1
Severity: Low
Contract: Quotation
Function name: verifySign(uint256[],uint16,bytes4,address,uint8,bytes32,bytes32)
PC address: 10537
Estimated Gas Usage: 2930 - 40597
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:7079

coverDetails[0]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:05:06.168321
Transaction Length: 1
Severity: Low
Contract: Quotation
Function name: verifySign(uint256[],uint16,bytes4,address,uint8,bytes32,bytes32)
PC address: 10565
Estimated Gas Usage: 3003 - 40856
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:7082

coverDetails[1]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:05:01.591027
Transaction Length: 1
Severity: Low
Contract: Quotation
Function name: verifySign(uint256[],uint16,bytes4,address,uint8,bytes32,bytes32)
PC address: 10590
Estimated Gas Usage: 3067 - 41106
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:7083

coverDetails[2]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:04:55.246220
Transaction Length: 1
Severity: Low
Contract: Quotation
Function name: verifySign(uint256[],uint16,bytes4,address,uint8,bytes32,bytes32)
PC address: 10615
Estimated Gas Usage: 3131 - 41356
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:7084

coverDetails[3]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:04:50.969425
Transaction Length: 1
Severity: Low
Contract: Quotation
Function name: verifySign(uint256[],uint16,bytes4,address,uint8,bytes32,bytes32)
PC address: 10640
Estimated Gas Usage: 3195 - 41606
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:7085

coverDetails[4]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:03:01.714209
Transaction Length: 1
Severity: Low
Contract: QuotationData
Function name: getCurrencyOfCover(uint256)
PC address: 10672
Estimated Gas Usage: 727 - 822
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4452

allCovers[_cid]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 1:25:30.696870
Transaction Length: 2
Severity: Low
Contract: QuotationData
Function name: getCurrencyOfCover(uint256)
PC address: 10672
Estimated Gas Usage: 727 - 822
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4452

allCovers[_cid]

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:13.387048
Transaction Length: 1
Severity: Low
Contract: TokenController
Function name: burnFrom(address,uint256)
PC address: 10833
Estimated Gas Usage: 3732 - 39520
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:1606

token.burnFrom(_of, amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:01:03.916326
Transaction Length: 2
Severity: Low
Contract: TokenController
Function name: burnFrom(address,uint256)
PC address: 10833
Estimated Gas Usage: 3732 - 39520
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:1606

token.burnFrom(_of, amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:06.972829
Transaction Length: 1
Severity: Low
Contract: Claims
Function name: submitClaimAfterEPOff()
PC address: 11009
Estimated Gas Usage: 7743 - 113030
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:9036

cd.setFirstClaimIndexToSubmitAfterEP(lengthOfClaimSubmittedAtEP)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:06.759267
Transaction Length: 2
Severity: Low
Contract: Claims
Function name: submitClaimAfterEPOff()
PC address: 11009
Estimated Gas Usage: 7743 - 113030
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:9036

cd.setFirstClaimIndexToSubmitAfterEP(lengthOfClaimSubmittedAtEP)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:08:37.075303
Transaction Length: 2
Severity: High
Contract: QuotationData
Function name: addCover(uint16,uint256,address,bytes4,address,uint256,uint256)
PC address: 11053
Estimated Gas Usage: 1860 - 2618
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4301

Cover(_userAddress, _currencyCode,
                _sumAssured, _coverPeriod, expiryDate, _scAddress, premiumNXM)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:19.039815
Transaction Length: 1
Severity: High
Contract: TokenData
Function name: updateUintParameters(bytes8,uint256)
PC address: 11233
Estimated Gas Usage: 2679 - 37666
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:5375

val * 1 hours

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:16.907484
Transaction Length: 1
Severity: High
Contract: TokenData
Function name: updateUintParameters(bytes8,uint256)
PC address: 11319
Estimated Gas Usage: 2714 - 37701
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:5379

val * 1 days

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:15.031519
Transaction Length: 1
Severity: High
Contract: TokenData
Function name: updateUintParameters(bytes8,uint256)
PC address: 11405
Estimated Gas Usage: 2714 - 37701
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:5383

val * 1 days

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:04:01.566575
Transaction Length: 1
Severity: Low
Contract: QuotationData
Function name: getscAddressOfCover(uint256)
PC address: 11859
Estimated Gas Usage: 777 - 872
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4462

allCovers[_cid]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 1:26:28.025426
Transaction Length: 2
Severity: Low
Contract: QuotationData
Function name: getscAddressOfCover(uint256)
PC address: 11859
Estimated Gas Usage: 777 - 872
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4462

allCovers[_cid]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:21.812865
Transaction Length: 1
Severity: Low
Contract: TokenData
Function name: getStakerStakedUnlockableBeforeLastBurnByIndex(address,uint256)
PC address: 11868
Estimated Gas Usage: 916 - 1201
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4911

stakerStakedContracts[
            _stakerAddress][_stakerIndex]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:31.523154
Transaction Length: 2
Severity: Low
Contract: TokenData
Function name: getStakerStakedUnlockableBeforeLastBurnByIndex(address,uint256)
PC address: 11868
Estimated Gas Usage: 916 - 1201
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4911

stakerStakedContracts[
            _stakerAddress][_stakerIndex]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:06.143515
Transaction Length: 1
Severity: Low
Contract: Governance
Function name: getSolutionAction(uint256,uint256)
PC address: 11934
Estimated Gas Usage: 860 - 1145
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:11413

allProposalSolutions[_proposalId][_solution]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:22.523500
Transaction Length: 1
Severity: Low
Contract: TokenData
Function name: getStakedContractStakerByIndex(address,uint256)
PC address: 11972
Estimated Gas Usage: 938 - 1223
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:5241

stakedContractStakers[
            _stakedContractAddress][_stakedContractIndex]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:38.827569
Transaction Length: 2
Severity: Low
Contract: TokenData
Function name: getStakedContractStakerByIndex(address,uint256)
PC address: 11972
Estimated Gas Usage: 938 - 1223
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:5241

stakedContractStakers[
            _stakedContractAddress][_stakedContractIndex]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:23.224854
Transaction Length: 1
Severity: Low
Contract: TokenData
Function name: stakedContractStakers(address,uint256)
PC address: 12057
Estimated Gas Usage: 820 - 1105
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4746

mapping(address => Staker[]) public stakedContractStakers

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:23.821525
Transaction Length: 1
Severity: Low
Contract: TokenData
Function name: stakerStakedContracts(address,uint256)
PC address: 12153
Estimated Gas Usage: 842 - 1127
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4739

mapping(address => Stake[]) public stakerStakedContracts

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:17.467595
Transaction Length: 1
Severity: Low
Contract: TokenController
Function name: removeFromWhitelist(address)
PC address: 12903
Estimated Gas Usage: 3681 - 39374
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:1655

token.removeFromWhiteList(_member)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:01:12.042677
Transaction Length: 2
Severity: Low
Contract: TokenController
Function name: removeFromWhitelist(address)
PC address: 12903
Estimated Gas Usage: 3681 - 39374
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:1655

token.removeFromWhiteList(_member)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:55.585031
Transaction Length: 1
Severity: Low
Contract: MemberRoles
Function name: checkRole(address,uint256)
PC address: 12956
Estimated Gas Usage: 856 - 951
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:10091

memberRoleData[_roleId]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:39.585579
Transaction Length: 1
Severity: Low
Contract: Governance
Function name: getPendingReward(address)
PC address: 13045
Estimated Gas Usage: 1324 - 2082
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:11444

allDelegation[delegationId]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:00.220947
Transaction Length: 1
Severity: Low
Contract: MemberRoles
Function name: members(uint256)
PC address: 13094
Estimated Gas Usage: 710 - 805
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:10042

memberRoleData[_memberRoleId]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:04:34.117733
Transaction Length: 1
Severity: Low
Contract: QuotationData
Function name: userHoldedCover(address,uint256)
PC address: 13238
Estimated Gas Usage: 864 - 1149
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4210

mapping(address => uint[]) public userHoldedCover

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 1:27:11.143956
Transaction Length: 2
Severity: Low
Contract: QuotationData
Function name: userHoldedCover(address,uint256)
PC address: 13238
Estimated Gas Usage: 864 - 1149
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4210

mapping(address => uint[]) public userHoldedCover

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:26.073023
Transaction Length: 1
Severity: Low
Contract: TokenData
Function name: pushRedeemedStakeCommissions(address,uint256,uint256)
PC address: 13342
Estimated Gas Usage: 3048 - 38225
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:5119

stakerStakedContracts[
            _stakerAddress][_stakerIndex]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:03:35.111635
Transaction Length: 2
Severity: Low
Contract: TokenData
Function name: pushRedeemedStakeCommissions(address,uint256,uint256)
PC address: 13342
Estimated Gas Usage: 3048 - 38225
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:5119

stakerStakedContracts[
            _stakerAddress][_stakerIndex]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:05:00.499647
Transaction Length: 1
Severity: Low
Contract: QuotationData
Function name: getCoverPremiumNXM(uint256)
PC address: 13674
Estimated Gas Usage: 770 - 865
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4472

allCovers[_cid]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 1:27:48.979002
Transaction Length: 2
Severity: Low
Contract: QuotationData
Function name: getCoverPremiumNXM(uint256)
PC address: 13674
Estimated Gas Usage: 770 - 865
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4472

allCovers[_cid]

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:08.517643
Transaction Length: 1
Severity: Low
Contract: Claims
Function name: startAllPendingClaimsVoting()
PC address: 13736
Estimated Gas Usage: 7751 - 113038
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:9128

cd.setFirstClaimIndexToStartVotingAfterEP(i)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:11.802976
Transaction Length: 2
Severity: Low
Contract: Claims
Function name: startAllPendingClaimsVoting()
PC address: 13736
Estimated Gas Usage: 7751 - 113038
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:9128

cd.setFirstClaimIndexToStartVotingAfterEP(i)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:05:59.152861
Transaction Length: 1
Severity: Low
Contract: QuotationData
Function name: getHoldedCoverDetailsByID2(uint256)
PC address: 13820
Estimated Gas Usage: 735 - 830
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4587

allCoverHolded[_hcid]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 1:28:53.056886
Transaction Length: 2
Severity: Low
Contract: QuotationData
Function name: getHoldedCoverDetailsByID2(uint256)
PC address: 13820
Estimated Gas Usage: 735 - 830
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4587

allCoverHolded[_hcid]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:08:48.785196
Transaction Length: 2
Severity: High
Contract: QuotationData
Function name: getHoldedCoverDetailsByID2(uint256)
PC address: 13919
Estimated Gas Usage: 1860 - 2618
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4585

return (
            _hcid,
            allCoverHolded[_hcid].userAddress,
            allCoverHolded[_hcid].coverDetails
        )

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:06:15.422437
Transaction Length: 1
Severity: Low
Contract: QuotationData
Function name: getCoverDetailsByCoverID1(uint256)
PC address: 14470
Estimated Gas Usage: 810 - 905
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4498

allCovers[_cid]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 1:29:17.233334
Transaction Length: 2
Severity: Low
Contract: QuotationData
Function name: getCoverDetailsByCoverID1(uint256)
PC address: 14470
Estimated Gas Usage: 810 - 905
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4498

allCovers[_cid]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:49.378771
Transaction Length: 1
Severity: Low
Contract: PoolData
Function name: allAPIcall(uint256)
PC address: 14565
Estimated Gas Usage: 812 - 907
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3337

bytes32[] public allAPIcall

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:06:29.548125
Transaction Length: 1
Severity: Low
Contract: QuotationData
Function name: getUserHoldedCoverByIndex(address,uint256)
PC address: 14913
Estimated Gas Usage: 893 - 1178
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4567

userHoldedCover[_add][index]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 1:29:43.446304
Transaction Length: 2
Severity: Low
Contract: QuotationData
Function name: getUserHoldedCoverByIndex(address,uint256)
PC address: 14913
Estimated Gas Usage: 893 - 1178
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4567

userHoldedCover[_add][index]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.752007
Transaction Length: 1
Severity: High
Contract: MCR
Function name: getThresholdValues(uint256,uint256,uint256,uint256)
PC address: 14982
Estimated Gas Usage: 879 - 1304
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:71

a * b

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:22.449891
Transaction Length: 1
Severity: Low
Contract: TokenController
Function name: addToWhitelist(address)
PC address: 15011
Estimated Gas Usage: 3680 - 39373
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:1647

token.addToWhiteList(_member)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:01:17.810695
Transaction Length: 2
Severity: Low
Contract: TokenController
Function name: addToWhitelist(address)
PC address: 15011
Estimated Gas Usage: 3680 - 39373
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:1647

token.addToWhiteList(_member)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:50.410980
Transaction Length: 1
Severity: Low
Contract: PoolData
Function name: getApiCallIndex(uint256)
PC address: 15039
Estimated Gas Usage: 770 - 865
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3949

allAPIcall[index]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:59.053128
Transaction Length: 2
Severity: Low
Contract: PoolData
Function name: getApiCallIndex(uint256)
PC address: 15039
Estimated Gas Usage: 770 - 865
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3949

allAPIcall[index]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:08:58.800659
Transaction Length: 2
Severity: High
Contract: QuotationData
Function name: getAllCoversOfUser(address)
PC address: 15404
Estimated Gas Usage: 1860 - 2618
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4427

return (userCover[_add])

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:08:26.449031
Transaction Length: 2
Severity: High
Contract: QuotationData
Function name: getAllCoversOfUser(address)
PC address: 15417
Estimated Gas Usage: 1860 - 2618
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4427

return (userCover[_add])

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:42:17.473160
Transaction Length: 2
Severity: High
Contract: QuotationData
Function name: getAllCoversOfUser(address)
PC address: 15429
Estimated Gas Usage: 1860 - 2618
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4427

return (userCover[_add])

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:09:08.552515
Transaction Length: 2
Severity: High
Contract: QuotationData
Function name: getAllCoversOfUser(address)
PC address: 15431
Estimated Gas Usage: 1860 - 2618
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4427

return (userCover[_add])

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:09:19.397866
Transaction Length: 2
Severity: High
Contract: QuotationData
Function name: getAllCoversOfUser(address)
PC address: 15450
Estimated Gas Usage: 1860 - 2618
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4427

return (userCover[_add])

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:17.885462
Transaction Length: 1
Severity: High
Contract: QuotationData
Function name: addCover(uint16,uint256,address,bytes4,address,uint256,uint256)
PC address: 15515
Estimated Gas Usage: 2863 - 37850
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:102

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:05:02.103627
Transaction Length: 1
Severity: Low
Contract: MemberRoles
Function name: membersLength(uint256)
PC address: 15600
Estimated Gas Usage: 749 - 844
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:10199

memberRoleData[_memberRoleId]

--------------------

==== Unprotected Ether Withdrawal ====
SWC ID: 105
FOUND TIME: 0:11:40.305930
Transaction Length: 1
Severity: High
Contract: Pool1
Function name: sendClaimPayout(uint256,uint256,uint256,address,bytes4)
PC address: 15852
Estimated Gas Usage: 11211 - 102266
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:8052

coverHolder.transfer(sumAssured)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:35.714873
Transaction Length: 1
Severity: Low
Contract: TokenData
Function name: setUnlockableBeforeLastBurnTokens(address,uint256,uint256)
PC address: 15927
Estimated Gas Usage: 3025 - 38202
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:5073

stakerStakedContracts[_stakerAddress][
            _stakerIndex]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:58.596971
Transaction Length: 2
Severity: Low
Contract: TokenData
Function name: setUnlockableBeforeLastBurnTokens(address,uint256,uint256)
PC address: 15927
Estimated Gas Usage: 3025 - 38202
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:5073

stakerStakedContracts[_stakerAddress][
            _stakerIndex]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:36.275720
Transaction Length: 1
Severity: Low
Contract: TokenData
Function name: getStakerUnlockedStakedTokens(address,uint256)
PC address: 16031
Estimated Gas Usage: 914 - 1199
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4998

stakerStakedContracts[
            _stakerAddress][_stakerIndex]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:26.064853
Transaction Length: 2
Severity: Low
Contract: TokenData
Function name: getStakerUnlockedStakedTokens(address,uint256)
PC address: 16031
Estimated Gas Usage: 914 - 1199
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4998

stakerStakedContracts[
            _stakerAddress][_stakerIndex]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.612018
Transaction Length: 1
Severity: High
Contract: TokenData
Function name: bookCATokens(address)
PC address: 16064
Estimated Gas Usage: 3498 - 38675
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:102

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:05.052719
Transaction Length: 1
Severity: Low
Contract: TokenData
Function name: getStakerEarnedStakeCommission(address,uint256)
PC address: 16171
Estimated Gas Usage: 925 - 1210
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:5414

stakerStakedContracts[
            _stakerAddress][_stakerIndex]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:03:20.674482
Transaction Length: 2
Severity: Low
Contract: TokenData
Function name: getStakerEarnedStakeCommission(address,uint256)
PC address: 16171
Estimated Gas Usage: 925 - 1210
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:5414

stakerStakedContracts[
            _stakerAddress][_stakerIndex]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:31.619755
Transaction Length: 1
Severity: Low
Contract: Quotation
Function name: verifyCoverDetails(address,address,bytes4,uint256[],uint16,uint8,bytes32,bytes32)
PC address: 16258
Estimated Gas Usage: 3002 - 40764
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:7245

coverDetails[3]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:35.358864
Transaction Length: 1
Severity: High
Contract: Governance
Function name: updateUintParameters(bytes8,uint256)
PC address: 16303
Estimated Gas Usage: 2530 - 37517
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:11481

val * 1 days

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:33.314510
Transaction Length: 1
Severity: High
Contract: Governance
Function name: updateUintParameters(bytes8,uint256)
PC address: 16466
Estimated Gas Usage: 2600 - 37587
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:11489

val * 1 days

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:33.977338
Transaction Length: 1
Severity: Low
Contract: TokenData
Function name: getStakerRedeemedStakeCommission(address,uint256)
PC address: 16494
Estimated Gas Usage: 878 - 1163
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:5438

stakerStakedContracts[
            _stakerAddress][_stakerIndex]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:03:44.024301
Transaction Length: 2
Severity: Low
Contract: TokenData
Function name: getStakerRedeemedStakeCommission(address,uint256)
PC address: 16494
Estimated Gas Usage: 878 - 1163
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:5438

stakerStakedContracts[
            _stakerAddress][_stakerIndex]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:07:39.531938
Transaction Length: 1
Severity: Low
Contract: MemberRoles
Function name: changeAuthorized(uint256,address)
PC address: 16563
Estimated Gas Usage: 812 - 907
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:9798

memberRoleData[_memberRoleId]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:05:42.523192
Transaction Length: 2
Severity: Low
Contract: MemberRoles
Function name: changeAuthorized(uint256,address)
PC address: 16563
Estimated Gas Usage: 812 - 907
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:9798

memberRoleData[_memberRoleId]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:31.280240
Transaction Length: 1
Severity: High
Contract: Governance
Function name: updateUintParameters(bytes8,uint256)
PC address: 16611
Estimated Gas Usage: 2600 - 37587
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:11493

val * 1 days

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:02:31.001460
Transaction Length: 1
Severity: Low
Contract: Governance
Function name: updateUintParameters(bytes8,uint256)
PC address: 16696
Estimated Gas Usage: 3891 - 39584
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:11493

ms.updatePauseTime(val * 1 days)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:27.014598
Transaction Length: 1
Severity: High
Contract: Governance
Function name: updateUintParameters(bytes8,uint256)
PC address: 16794
Estimated Gas Usage: 2670 - 37657
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:11497

val * 1 hours

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:54.600978
Transaction Length: 1
Severity: High
Contract: PoolData
Function name: updateUintParameters(bytes8,uint256)
PC address: 16802
Estimated Gas Usage: 2548 - 37535
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3995

val * 1 hours

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:01:13.097527
Transaction Length: 1
Severity: Low
Contract: TokenFunctions
Function name: burnCAToken(uint256,uint256,address)
PC address: 16814
Estimated Gas Usage: 3819 - 39702
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:1004

tc.burnLockedTokens(_of, "CLA", _value)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:52.673419
Transaction Length: 1
Severity: High
Contract: PoolData
Function name: updateUintParameters(bytes8,uint256)
PC address: 16887
Estimated Gas Usage: 2583 - 37570
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3999

val * 1 hours

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:37.414316
Transaction Length: 1
Severity: High
Contract: Governance
Function name: allowedToCreateProposal(uint256)
PC address: 17127
Estimated Gas Usage: 2453 - 37442
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:6

ed for verifica

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:39.150148
Transaction Length: 1
Severity: High
Contract: Governance
Function name: allowedToCreateProposal(uint256)
PC address: 17130
Estimated Gas Usage: 2660 - 38114
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3



/**
 *Submitted for verification at Ether

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:40.791085
Transaction Length: 1
Severity: High
Contract: Governance
Function name: allowedToCreateProposal(uint256)
PC address: 17151
Estimated Gas Usage: 2660 - 38114
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:11522

proposalCategory.category(category)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:42.182593
Transaction Length: 1
Severity: High
Contract: Governance
Function name: allowedToCreateProposal(uint256)
PC address: 17242
Estimated Gas Usage: 2718 - 38265
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:16

 interface
 * @dev se

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:09:07.154153
Transaction Length: 1
Severity: Low
Contract: MemberRoles
Function name: memberAtIndex(uint256,uint256)
PC address: 19588
Estimated Gas Usage: 759 - 854
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:10194

memberRoleData[_memberRoleId]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:18.088722
Transaction Length: 1
Severity: High
Contract: TokenController
Function name: updateUintParameters(bytes8,uint256)
PC address: 19741
Estimated Gas Usage: 2592 - 37579
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:71

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:09:07.600024
Transaction Length: 1
Severity: Low
Contract: MemberRoles
Function name: swapABMember(address,address)
PC address: 19835
Estimated Gas Usage: 822 - 917
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:9798

memberRoleData[_memberRoleId]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:07:34.974626
Transaction Length: 2
Severity: Low
Contract: MemberRoles
Function name: swapABMember(address,address)
PC address: 19835
Estimated Gas Usage: 822 - 917
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:9798

memberRoleData[_memberRoleId]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:46.541231
Transaction Length: 1
Severity: High
Contract: TokenFunctions
Function name: lockCN(uint256,uint256,uint256,address)
PC address: 19993
Estimated Gas Usage: 4591 - 74375
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:1024

coverPeriod * 1 days

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:51.163186
Transaction Length: 1
Severity: Low
Contract: Governance
Function name: allDelegation(uint256)
PC address: 20906
Estimated Gas Usage: 767 - 862
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:10885

DelegateVote[] public allDelegation

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:52.597659
Transaction Length: 1
Severity: High
Contract: Governance
Function name: canCloseProposal(uint256)
PC address: 21277
Estimated Gas Usage: 3906 - 39465
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:6

ed for verifica

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:14.019307
Transaction Length: 1
Severity: High
Contract: Governance
Function name: canCloseProposal(uint256)
PC address: 21280
Estimated Gas Usage: 4107 - 40131
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3



/**
 *Submitted for verification at Ether

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:16.080849
Transaction Length: 1
Severity: High
Contract: Governance
Function name: canCloseProposal(uint256)
PC address: 21301
Estimated Gas Usage: 4107 - 40131
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:11573

proposalCategory.category(allProposalData[_proposalId].category)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:55.166018
Transaction Length: 1
Severity: High
Contract: Governance
Function name: canCloseProposal(uint256)
PC address: 21366
Estimated Gas Usage: 4107 - 40131
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:2


*/

/**
 *Submitted 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:18.526678
Transaction Length: 1
Severity: High
Contract: Governance
Function name: canCloseProposal(uint256)
PC address: 21372
Estimated Gas Usage: 4107 - 40131
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:6

o on 2020-09-1

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:34.745190
Transaction Length: 1
Severity: High
Contract: Governance
Function name: canCloseProposal(uint256)
PC address: 21392
Estimated Gas Usage: 4165 - 40282
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:16

 interface
 * @dev se

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:50.376417
Transaction Length: 1
Severity: High
Contract: Governance
Function name: canCloseProposal(uint256)
PC address: 21394
Estimated Gas Usage: 4165 - 40282
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:12




/**
 * @title ERC20 interface
 * @dev see

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:26.130478
Transaction Length: 1
Severity: Low
Contract: PoolData
Function name: getInvestmentCurrencyByIndex(uint256)
PC address: 22411
Estimated Gas Usage: 770 - 865
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3743

allInvestmentCurrencies[index]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:04:21.356825
Transaction Length: 2
Severity: Low
Contract: PoolData
Function name: getInvestmentCurrencyByIndex(uint256)
PC address: 22411
Estimated Gas Usage: 770 - 865
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3743

allInvestmentCurrencies[index]

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:05.928876
Transaction Length: 1
Severity: Low
Contract: Pool1
Function name: transferCurrencyAsset(bytes4,uint256)
PC address: 22592
Estimated Gas Usage: 10531 - 66789
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:8397

p2.sendEther.value(_amount)()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:21.653730
Transaction Length: 1
Severity: High
Contract: TokenFunctions
Function name: extendCNEPOff(address,uint256,uint256)
PC address: 22768
Estimated Gas Usage: 2556 - 37543
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:102

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:29.955140
Transaction Length: 1
Severity: High
Contract: TokenFunctions
Function name: burnDepositCN(uint256)
PC address: 23301
Estimated Gas Usage: 6709 - 111573
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:71

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:05:40.579646
Transaction Length: 2
Severity: Low
Contract: MemberRoles
Function name: swapOwner(address)
PC address: 23638
Estimated Gas Usage: 3297 - 38519
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:10122

memberRoleData[_roleId]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:29.602118
Transaction Length: 1
Severity: Low
Contract: PoolData
Function name: allMCRData(uint256)
PC address: 23979
Estimated Gas Usage: 722 - 817
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3333

McrData[] public allMCRData

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:13:19.507816
Transaction Length: 1
Severity: High
Contract: Pool1
Function name: triggerExternalLiquidityTrade()
PC address: 24652
Estimated Gas Usage: 6471 - 111052
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:102

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.546046
Transaction Length: 1
Severity: High
Contract: Claims
Function name: getCATokens(uint256,uint256)
PC address: 24930
Estimated Gas Usage: 8871 - 149143
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:102

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:58.067594
Transaction Length: 1
Severity: High
Contract: Governance
Function name: delegateVote(address)
PC address: 39562
Estimated Gas Usage: 4107 - 40131
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:10843

contract Governance is IGovernance, Iupgradable {

    using SafeMath for uint;

    enum ProposalStatus { 
        Draft,
        AwaitingSolution,
        VotingStarted,
        Accepted,
        Rejected,
        Majority_Not_Reached_But_Accepted,
        Denied
    }

    struct ProposalData {
        uint propStatus;
        uint finalVerdict;
        uint category;
        uint commonIncentive;
        uint dateUpd;
        address owner;
    }

    struct ProposalVote {
        address voter;
        uint proposalId;
        uint dateAdd;
    }

    struct VoteTally {
        mapping(uint=>uint) memberVoteValue;
        mapping(uint=>uint) abVoteValue;
        uint voters;
    }

    struct DelegateVote {
        address follower;
        address leader;
        uint lastUpd;
    }

    ProposalVote[] internal allVotes;
    DelegateVote[] public allDelegation;

    mapping(uint => ProposalData) internal allProposalData;
    mapping(uint => bytes[]) internal allProposalSolutions;
    mapping(address => uint[]) internal allVotesByMember;
    mapping(uint => mapping(address => bool)) public rewardClaimed;
    mapping (address => mapping(uint => uint)) public memberProposalVote;
    mapping (address => uint) public followerDelegation;
    mapping (address => uint) internal followerCount;
    mapping (address => uint[]) internal leaderDelegation;
    mapping (uint => VoteTally) public proposalVoteTally;
    mapping (address => bool) public isOpenForDelegation;
    mapping (address => uint) public lastRewardClaimed;

    bool internal constructorCheck;
    uint public tokenHoldingTime;
    uint internal roleIdAllowedToCatgorize;
    uint internal maxVoteWeigthPer;
    uint internal specialResolutionMajPerc;
    uint internal maxFollowers;
    uint internal totalProposals;
    uint internal maxDraftTime;

    MemberRoles internal memberRole;
    ProposalCategory internal proposalCategory;
    TokenController internal tokenInstance;

    mapping(uint => uint) public proposalActionStatus;
    mapping(uint => uint) internal proposalExecutionTime;
    mapping(uint => mapping(address => bool)) public proposalRejectedByAB;
    mapping(uint => uint) internal actionRejectedCount;

    bool internal actionParamsInitialised;
    uint internal actionWaitingTime;
    uint constant internal AB_MAJ_TO_REJECT_ACTION = 3;

    enum ActionStatus {
        Pending,
        Accepted,
        Rejected,
        Executed,
        NoAction
    }

    /**
    * @dev Called whenever an action execution is failed.
    */
    event ActionFailed (
        uint256 proposalId
    );

    /**
    * @dev Called whenever an AB member rejects the action execution.
    */
    event ActionRejected (
        uint256 indexed proposalId,
        address rejectedBy
    );

    /**
    * @dev Checks if msg.sender is proposal owner
    */
    modifier onlyProposalOwner(uint _proposalId) {
        require(msg.sender == allProposalData[_proposalId].owner, "Not allowed");
        _;
    }

    /**
    * @dev Checks if proposal is opened for voting
    */
    modifier voteNotStarted(uint _proposalId) {
        require(allProposalData[_proposalId].propStatus < uint(ProposalStatus.VotingStarted));
        _;
    }

    /**
    * @dev Checks if msg.sender is allowed to create proposal under given category
    */
    modifier isAllowed(uint _categoryId) {
        require(allowedToCreateProposal(_categoryId), "Not allowed");
        _;
    }

    /**
    * @dev Checks if msg.sender is allowed categorize proposal under given category
    */
    modifier isAllowedToCategorize() {
        require(memberRole.checkRole(msg.sender, roleIdAllowedToCatgorize), "Not allowed");
        _;
    }

    /**
    * @dev Checks if msg.sender had any pending rewards to be claimed
    */
    modifier checkPendingRewards {
        require(getPendingReward(msg.sender) == 0, "Claim reward");
        _;
    }

    /**
    * @dev Event emitted whenever a proposal is categorized
    */
    event ProposalCategorized(
        uint indexed proposalId,
        address indexed categorizedBy,
        uint categoryId
    );
    
    /**
     * @dev Removes delegation of an address.
     * @param _add address to undelegate.
     */
    function removeDelegation(address _add) external onlyInternal {
        _unDelegate(_add);
    }

    /**
    * @dev Creates a new proposal
    * @param _proposalDescHash Proposal description hash through IPFS having Short and long description of proposal
    * @param _categoryId This id tells under which the proposal is categorized i.e. Proposal's Objective
    */
    function createProposal(
        string calldata _proposalTitle, 
        string calldata _proposalSD, 
        string calldata _proposalDescHash, 
        uint _categoryId
    ) 
        external isAllowed(_categoryId)
    {
        require(ms.isMember(msg.sender), "Not Member");

        _createProposal(_proposalTitle, _proposalSD, _proposalDescHash, _categoryId);
    }

    /**
    * @dev Edits the details of an existing proposal
    * @param _proposalId Proposal id that details needs to be updated
    * @param _proposalDescHash Proposal description hash having long and short description of proposal.
    */
    function updateProposal(
        uint _proposalId, 
        string calldata _proposalTitle, 
        string calldata _proposalSD, 
        string calldata _proposalDescHash
    ) 
        external onlyProposalOwner(_proposalId)
    {
        require(
            allProposalSolutions[_proposalId].length < 2,
            "Not allowed"
        );
        allProposalData[_proposalId].propStatus = uint(ProposalStatus.Draft);
        allProposalData[_proposalId].category = 0;
        allProposalData[_proposalId].commonIncentive = 0;
        emit Proposal(
            allProposalData[_proposalId].owner,
            _proposalId,
            now,
            _proposalTitle, 
            _proposalSD, 
            _proposalDescHash
        );
    }

    /**
    * @dev Categorizes proposal to proceed further. Categories shows the proposal objective.
    */
    function categorizeProposal(
        uint _proposalId,
        uint _categoryId,
        uint _incentive
    )
        external
        voteNotStarted(_proposalId) isAllowedToCategorize
    {
        _categorizeProposal(_proposalId, _categoryId, _incentive);
    }

    /**
    * @dev Initiates add solution
    * To implement the governance interface
    */
    function addSolution(uint, string calldata, bytes calldata) external {
    }

    /**
    * @dev Opens proposal for voting
    * To implement the governance interface
    */
    function openProposalForVoting(uint) external {
    }

    /**
    * @dev Submit proposal with solution
    * @param _proposalId Proposal id
    * @param _solutionHash Solution hash contains  parameters, values and description needed according to proposal
    */
    function submitProposalWithSolution(
        uint _proposalId, 
        string calldata _solutionHash, 
        bytes calldata _action
    ) 
        external
        onlyProposalOwner(_proposalId)
    {

        require(allProposalData[_proposalId].propStatus == uint(ProposalStatus.AwaitingSolution));
        
        _proposalSubmission(_proposalId, _solutionHash, _action);
    }

    /**
    * @dev Creates a new proposal with solution
    * @param _proposalDescHash Proposal description hash through IPFS having Short and long description of proposal
    * @param _categoryId This id tells under which the proposal is categorized i.e. Proposal's Objective
    * @param _solutionHash Solution hash contains  parameters, values and description needed according to proposal
    */
    function createProposalwithSolution(
        string calldata _proposalTitle, 
        string calldata _proposalSD, 
        string calldata _proposalDescHash,
        uint _categoryId, 
        string calldata _solutionHash, 
        bytes calldata _action
    ) 
        external isAllowed(_categoryId)
    {


        uint proposalId = totalProposals;

        _createProposal(_proposalTitle, _proposalSD, _proposalDescHash, _categoryId);
        
        require(_categoryId > 0);

        _proposalSubmission(
            proposalId,
            _solutionHash,
            _action
        );
    }

    /**
     * @dev Submit a vote on the proposal.
     * @param _proposalId to vote upon.
     * @param _solutionChosen is the chosen vote.
     */
    function submitVote(uint _proposalId, uint _solutionChosen) external {
        
        require(allProposalData[_proposalId].propStatus == 
        uint(Governance.ProposalStatus.VotingStarted), "Not allowed");

        require(_solutionChosen < allProposalSolutions[_proposalId].length);


        _submitVote(_proposalId, _solutionChosen);
    }

    /**
     * @dev Closes the proposal.
     * @param _proposalId of proposal to be closed.
     */
    function closeProposal(uint _proposalId) external {
        uint category = allProposalData[_proposalId].category;
        
        
        uint _memberRole;
        if (allProposalData[_proposalId].dateUpd.add(maxDraftTime) <= now && 
            allProposalData[_proposalId].propStatus < uint(ProposalStatus.VotingStarted)) {
            _updateProposalStatus(_proposalId, uint(ProposalStatus.Denied));
        } else {
            require(canCloseProposal(_proposalId) == 1);
            (, _memberRole, , , , , ) = proposalCategory.category(allProposalData[_proposalId].category);
            if (_memberRole == uint(MemberRoles.Role.AdvisoryBoard)) {
                _closeAdvisoryBoardVote(_proposalId, category);
            } else {
                _closeMemberVote(_proposalId, category);
            }
        }
        
    }

    /**
     * @dev Claims reward for member.
     * @param _memberAddress to claim reward of.
     * @param _maxRecords maximum number of records to claim reward for.
     _proposals list of proposals of which reward will be claimed.
     * @return amount of pending reward.
     */
    function claimReward(address _memberAddress, uint _maxRecords) 
        external returns(uint pendingDAppReward) 
    {
        
        uint voteId;
        address leader;
        uint lastUpd;

        require(msg.sender == ms.getLatestAddress("CR"));

        uint delegationId = followerDelegation[_memberAddress];
        DelegateVote memory delegationData = allDelegation[delegationId];
        if (delegationId > 0 && delegationData.leader != address(0)) {
            leader = delegationData.leader;
            lastUpd = delegationData.lastUpd;
        } else
            leader = _memberAddress;

        uint proposalId;
        uint totalVotes = allVotesByMember[leader].length;
        uint lastClaimed = totalVotes;
        uint j;
        uint i;
        for (i = lastRewardClaimed[_memberAddress]; i < totalVotes && j < _maxRecords; i++) {
            voteId = allVotesByMember[leader][i];
            proposalId = allVotes[voteId].proposalId;
            if (proposalVoteTally[proposalId].voters > 0 && (allVotes[voteId].dateAdd > (
                lastUpd.add(tokenHoldingTime)) || leader == _memberAddress)) {
                if (allProposalData[proposalId].propStatus > uint(ProposalStatus.VotingStarted)) {
                    if (!rewardClaimed[voteId][_memberAddress]) {
                        pendingDAppReward = pendingDAppReward.add(
                                allProposalData[proposalId].commonIncentive.div(
                                    proposalVoteTally[proposalId].voters
                                )
                            );
                        rewardClaimed[voteId][_memberAddress] = true;
                        j++;
                    }
                } else {
                    if (lastClaimed == totalVotes) {
                        lastClaimed = i;
                    }
                }
            }
        }

        if (lastClaimed == totalVotes) {
            lastRewardClaimed[_memberAddress] = i;
        } else {
            lastRewardClaimed[_memberAddress] = lastClaimed;
        }

        if (j > 0) {
            emit RewardClaimed(
                _memberAddress,
                pendingDAppReward
            );
        }
    }

    /**
     * @dev Sets delegation acceptance status of individual user
     * @param _status delegation acceptance status
     */
    function setDelegationStatus(bool _status) external isMemberAndcheckPause checkPendingRewards {
        isOpenForDelegation[msg.sender] = _status;
    }

    /**
     * @dev Delegates vote to an address.
     * @param _add is the address to delegate vote to.
     */
    function delegateVote(address _add) external isMemberAndcheckPause checkPendingRewards {

        require(ms.masterInitialized());

        require(allDelegation[followerDelegation[_add]].leader == address(0));

        if (followerDelegation[msg.sender] > 0) {
            require((allDelegation[followerDelegation[msg.sender]].lastUpd).add(tokenHoldingTime) < now);
        }

        require(!alreadyDelegated(msg.sender));
        require(!memberRole.checkRole(msg.sender, uint(MemberRoles.Role.Owner)));
        require(!memberRole.checkRole(msg.sender, uint(MemberRoles.Role.AdvisoryBoard)));


        require(followerCount[_add] < maxFollowers);
        
        if (allVotesByMember[msg.sender].length > 0) {
            require((allVotes[allVotesByMember[msg.sender][allVotesByMember[msg.sender].length - 1]].dateAdd).add(tokenHoldingTime)
            < now);
        }

        require(ms.isMember(_add));

        require(isOpenForDelegation[_add]);

        allDelegation.push(DelegateVote(msg.sender, _add, now));
        followerDelegation[msg.sender] = allDelegation.length - 1;
        leaderDelegation[_add].push(allDelegation.length - 1);
        followerCount[_add]++;
        lastRewardClaimed[msg.sender] = allVotesByMember[_add].length;
    }

    /**
     * @dev Undelegates the sender
     */
    function unDelegate() external isMemberAndcheckPause checkPendingRewards {
        _unDelegate(msg.sender);
    }

    /**
     * @dev Triggers action of accepted proposal after waiting time is finished
     */
    function triggerAction(uint _proposalId) external {
        require(proposalActionStatus[_proposalId] == uint(ActionStatus.Accepted) && proposalExecutionTime[_proposalId] <= now, "Cannot trigger");
        _triggerAction(_proposalId, allProposalData[_proposalId].category);
    }

    /**
     * @dev Provides option to Advisory board member to reject proposal action execution within actionWaitingTime, if found suspicious
     */
    function rejectAction(uint _proposalId) external {
        require(memberRole.checkRole(msg.sender, uint(MemberRoles.Role.AdvisoryBoard)) && proposalExecutionTime[_proposalId] > now);

        require(proposalActionStatus[_proposalId] == uint(ActionStatus.Accepted));

        require(!proposalRejectedByAB[_proposalId][msg.sender]);

        require(
            keccak256(proposalCategory.categoryActionHashes(allProposalData[_proposalId].category))
            != keccak256(abi.encodeWithSignature("swapABMember(address,address)"))
        );

        proposalRejectedByAB[_proposalId][msg.sender] = true;
        actionRejectedCount[_proposalId]++;
        emit ActionRejected(_proposalId, msg.sender);
        if (actionRejectedCount[_proposalId] == AB_MAJ_TO_REJECT_ACTION) {
            proposalActionStatus[_proposalId] = uint(ActionStatus.Rejected);
        }
    }

    /**
     * @dev Sets intial actionWaitingTime value
     * To be called after governance implementation has been updated
     */
    function setInitialActionParameters() external onlyOwner {
        require(!actionParamsInitialised);
        actionParamsInitialised = true;
        actionWaitingTime = 24 * 1 hours;
    }

    /**
     * @dev Gets Uint Parameters of a code
     * @param code whose details we want
     * @return string value of the code
     * @return associated amount (time or perc or value) to the code
     */
    function getUintParameters(bytes8 code) external view returns(bytes8 codeVal, uint val) {

        codeVal = code;

        if (code == "GOVHOLD") {

            val = tokenHoldingTime / (1 days);

        } else if (code == "MAXFOL") {

            val = maxFollowers;

        } else if (code == "MAXDRFT") {

            val = maxDraftTime / (1 days);

        } else if (code == "EPTIME") {

            val = ms.pauseTime() / (1 days);

        } else if (code == "ACWT") {

            val = actionWaitingTime / (1 hours);

        }
    }

    /**
     * @dev Gets all details of a propsal
     * @param _proposalId whose details we want
     * @return proposalId
     * @return category
     * @return status
     * @return finalVerdict
     * @return totalReward
     */
    function proposal(uint _proposalId)
        external
        view
        returns(
            uint proposalId,
            uint category,
            uint status,
            uint finalVerdict,
            uint totalRewar
        )
    {
        return(
            _proposalId,
            allProposalData[_proposalId].category,
            allProposalData[_proposalId].propStatus,
            allProposalData[_proposalId].finalVerdict,
            allProposalData[_proposalId].commonIncentive
        );
    }

    /**
     * @dev Gets some details of a propsal
     * @param _proposalId whose details we want
     * @return proposalId
     * @return number of all proposal solutions
     * @return amount of votes 
     */
    function proposalDetails(uint _proposalId) external view returns(uint, uint, uint) {
        return(
            _proposalId,
            allProposalSolutions[_proposalId].length,
            proposalVoteTally[_proposalId].voters
        );
    }

    /**
     * @dev Gets solution action on a proposal
     * @param _proposalId whose details we want
     * @param _solution whose details we want
     * @return action of a solution on a proposal
     */
    function getSolutionAction(uint _proposalId, uint _solution) external view returns(uint, bytes memory) {
        return (
            _solution,
            allProposalSolutions[_proposalId][_solution]
        );
    }
   
    /**
     * @dev Gets length of propsal
     * @return length of propsal
     */
    function getProposalLength() external view returns(uint) {
        return totalProposals;
    }

    /**
     * @dev Get followers of an address
     * @return get followers of an address
     */
    function getFollowers(address _add) external view returns(uint[] memory) {
        return leaderDelegation[_add];
    }

    /**
     * @dev Gets pending rewards of a member
     * @param _memberAddress in concern
     * @return amount of pending reward
     */
    function getPendingReward(address _memberAddress)
        public view returns(uint pendingDAppReward)
    {
        uint delegationId = followerDelegation[_memberAddress];
        address leader;
        uint lastUpd;
        DelegateVote memory delegationData = allDelegation[delegationId];

        if (delegationId > 0 && delegationData.leader != address(0)) {
            leader = delegationData.leader;
            lastUpd = delegationData.lastUpd;
        } else
            leader = _memberAddress;

        uint proposalId;
        for (uint i = lastRewardClaimed[_memberAddress]; i < allVotesByMember[leader].length; i++) {
            if (allVotes[allVotesByMember[leader][i]].dateAdd > (
                lastUpd.add(tokenHoldingTime)) || leader == _memberAddress) {
                if (!rewardClaimed[allVotesByMember[leader][i]][_memberAddress]) {
                    proposalId = allVotes[allVotesByMember[leader][i]].proposalId;
                    if (proposalVoteTally[proposalId].voters > 0 && allProposalData[proposalId].propStatus
                    > uint(ProposalStatus.VotingStarted)) {
                        pendingDAppReward = pendingDAppReward.add(
                            allProposalData[proposalId].commonIncentive.div(
                                proposalVoteTally[proposalId].voters
                            )
                        );
                    }
                }
            }
        }
    }

    /**
     * @dev Updates Uint Parameters of a code
     * @param code whose details we want to update
     * @param val value to set
     */
    function updateUintParameters(bytes8 code, uint val) public {

        require(ms.checkIsAuthToGoverned(msg.sender));
        if (code == "GOVHOLD") {

            tokenHoldingTime = val * 1 days;

        } else if (code == "MAXFOL") {

            maxFollowers = val;

        } else if (code == "MAXDRFT") {

            maxDraftTime = val * 1 days;

        } else if (code == "EPTIME") {

            ms.updatePauseTime(val * 1 days);

        } else if (code == "ACWT") {

            actionWaitingTime = val * 1 hours;

        } else {

            revert("Invalid code");

        }
    }

    /**
    * @dev Updates all dependency addresses to latest ones from Master
    */
    function changeDependentContractAddress() public {
        tokenInstance = TokenController(ms.dAppLocker());
        memberRole = MemberRoles(ms.getLatestAddress("MR"));
        proposalCategory = ProposalCategory(ms.getLatestAddress("PC"));
    }

    /**
    * @dev Checks if msg.sender is allowed to create a proposal under given category
    */
    function allowedToCreateProposal(uint category) public view returns(bool check) {
        if (category == 0)
            return true;
        uint[] memory mrAllowed;
        (, , , , mrAllowed, , ) = proposalCategory.category(category);
        for (uint i = 0; i < mrAllowed.length; i++) {
            if (mrAllowed[i] == 0 || memberRole.checkRole(msg.sender, mrAllowed[i]))
                return true;
        }
    }

    /**
     * @dev Checks if an address is already delegated
     * @param _add in concern
     * @return bool value if the address is delegated or not
     */
    function alreadyDelegated(address _add) public view returns(bool delegated) {
        for (uint i=0; i < leaderDelegation[_add].length; i++) {
            if (allDelegation[leaderDelegation[_add][i]].leader == _add) {
                return true;
            }
        }
    }

    /**
    * @dev Pauses a proposal
    * To implement govblocks interface
    */
    function pauseProposal(uint) public {
    }

    /**
    * @dev Resumes a proposal
    * To implement govblocks interface
    */
    function resumeProposal(uint) public {
    }

    /**
    * @dev Checks If the proposal voting time is up and it's ready to close 
    *      i.e. Closevalue is 1 if proposal is ready to be closed, 2 if already closed, 0 otherwise!
    * @param _proposalId Proposal id to which closing value is being checked
    */
    function canCloseProposal(uint _proposalId) 
        public 
        view 
        returns(uint)
    {
        uint dateUpdate;
        uint pStatus;
        uint _closingTime;
        uint _roleId;
        uint majority;
        pStatus = allProposalData[_proposalId].propStatus;
        dateUpdate = allProposalData[_proposalId].dateUpd;
        (, _roleId, majority, , , _closingTime, ) = proposalCategory.category(allProposalData[_proposalId].category);
        if (
            pStatus == uint(ProposalStatus.VotingStarted)
        ) {
            uint numberOfMembers = memberRole.numberOfMembers(_roleId);
            if (_roleId == uint(MemberRoles.Role.AdvisoryBoard)) {
                if (proposalVoteTally[_proposalId].abVoteValue[1].mul(100).div(numberOfMembers) >= majority  
                || proposalVoteTally[_proposalId].abVoteValue[1].add(proposalVoteTally[_proposalId].abVoteValue[0]) == numberOfMembers
                || dateUpdate.add(_closingTime) <= now) {

                    return 1;
                }
            } else {
                if (numberOfMembers == proposalVoteTally[_proposalId].voters 
                || dateUpdate.add(_closingTime) <= now)
                    return  1;
            }
        } else if (pStatus > uint(ProposalStatus.VotingStarted)) {
            return  2;
        } else {
            return  0;
        }
    }

    /**
     * @dev Gets Id of member role allowed to categorize the proposal
     * @return roleId allowed to categorize the proposal
     */
    function allowedToCatgorize() public view returns(uint roleId) {
        return roleIdAllowedToCatgorize;
    }

    /**
     * @dev Gets vote tally data
     * @param _proposalId in concern
     * @param _solution of a proposal id
     * @return member vote value
     * @return advisory board vote value
     * @return amount of votes
     */
    function voteTallyData(uint _proposalId, uint _solution) public view returns(uint, uint, uint) {
        return (proposalVoteTally[_proposalId].memberVoteValue[_solution],
            proposalVoteTally[_proposalId].abVoteValue[_solution], proposalVoteTally[_proposalId].voters);
    }

    /**
     * @dev Internal call to create proposal
     * @param _proposalTitle of proposal
     * @param _proposalSD is short description of proposal
     * @param _proposalDescHash IPFS hash value of propsal
     * @param _categoryId of proposal
     */
    function _createProposal(
        string memory _proposalTitle,
        string memory _proposalSD,
        string memory _proposalDescHash,
        uint _categoryId
    )
        internal
    {
        require(proposalCategory.categoryABReq(_categoryId) == 0 || _categoryId == 0);
        uint _proposalId = totalProposals;
        allProposalData[_proposalId].owner = msg.sender;
        allProposalData[_proposalId].dateUpd = now;
        allProposalSolutions[_proposalId].push("");
        totalProposals++;

        emit Proposal(
            msg.sender,
            _proposalId,
            now,
            _proposalTitle,
            _proposalSD,
            _proposalDescHash
        );

        if (_categoryId > 0)
            _categorizeProposal(_proposalId, _categoryId, 0);
    }

    /**
     * @dev Internal call to categorize a proposal
     * @param _proposalId of proposal
     * @param _categoryId of proposal
     * @param _incentive is commonIncentive
     */
    function _categorizeProposal(
        uint _proposalId,
        uint _categoryId,
        uint _incentive
    )
        internal
    {
        require(
            _categoryId > 0 && _categoryId < proposalCategory.totalCategories(),
            "Invalid category"
        );
        allProposalData[_proposalId].category = _categoryId;
        allProposalData[_proposalId].commonIncentive = _incentive;
        allProposalData[_proposalId].propStatus = uint(ProposalStatus.AwaitingSolution);

        emit ProposalCategorized(_proposalId, msg.sender, _categoryId);
    }

    /**
     * @dev Internal call to add solution to a proposal
     * @param _proposalId in concern
     * @param _action on that solution
     * @param _solutionHash string value
     */
    function _addSolution(uint _proposalId, bytes memory _action, string memory _solutionHash)
        internal
    {
        allProposalSolutions[_proposalId].push(_action);
        emit Solution(_proposalId, msg.sender, allProposalSolutions[_proposalId].length - 1, _solutionHash, now);
    }

    /**
    * @dev Internal call to add solution and open proposal for voting
    */
    function _proposalSubmission(
        uint _proposalId,
        string memory _solutionHash,
        bytes memory _action
    )
        internal
    {

        uint _categoryId = allProposalData[_proposalId].category;
        if (proposalCategory.categoryActionHashes(_categoryId).length == 0) {
            require(keccak256(_action) == keccak256(""));
            proposalActionStatus[_proposalId] = uint(ActionStatus.NoAction);
        }
        
        _addSolution(
            _proposalId,
            _action,
            _solutionHash
        );

        _updateProposalStatus(_proposalId, uint(ProposalStatus.VotingStarted));
        (, , , , , uint closingTime, ) = proposalCategory.category(_categoryId);
        emit CloseProposalOnTime(_proposalId, closingTime.add(now));

    }

    /**
     * @dev Internal call to submit vote
     * @param _proposalId of proposal in concern
     * @param _solution for that proposal
     */
    function _submitVote(uint _proposalId, uint _solution) internal {

        uint delegationId = followerDelegation[msg.sender];
        uint mrSequence;
        uint majority;
        uint closingTime;
        (, mrSequence, majority, , , closingTime, ) = proposalCategory.category(allProposalData[_proposalId].category);

        require(allProposalData[_proposalId].dateUpd.add(closingTime) > now, "Closed");

        require(memberProposalVote[msg.sender][_proposalId] == 0, "Not allowed");
        require((delegationId == 0) || (delegationId > 0 && allDelegation[delegationId].leader == address(0) && 
        _checkLastUpd(allDelegation[delegationId].lastUpd)));

        require(memberRole.checkRole(msg.sender, mrSequence), "Not Authorized");
        uint totalVotes = allVotes.length;

        allVotesByMember[msg.sender].push(totalVotes);
        memberProposalVote[msg.sender][_proposalId] = totalVotes;

        allVotes.push(ProposalVote(msg.sender, _proposalId, now));

        emit Vote(msg.sender, _proposalId, totalVotes, now, _solution);
        if (mrSequence == uint(MemberRoles.Role.Owner)) {
            if (_solution == 1)
                _callIfMajReached(_proposalId, uint(ProposalStatus.Accepted), allProposalData[_proposalId].category, 1, MemberRoles.Role.Owner);
            else
                _updateProposalStatus(_proposalId, uint(ProposalStatus.Rejected));
        
        } else {
            uint numberOfMembers = memberRole.numberOfMembers(mrSequence);
            _setVoteTally(_proposalId, _solution, mrSequence);

            if (mrSequence == uint(MemberRoles.Role.AdvisoryBoard)) {
                if (proposalVoteTally[_proposalId].abVoteValue[1].mul(100).div(numberOfMembers) 
                >= majority 
                || (proposalVoteTally[_proposalId].abVoteValue[1].add(proposalVoteTally[_proposalId].abVoteValue[0])) == numberOfMembers) {
                    emit VoteCast(_proposalId);
                }
            } else {
                if (numberOfMembers == proposalVoteTally[_proposalId].voters)
                    emit VoteCast(_proposalId);
            }
        }

    }

    /**
     * @dev Internal call to set vote tally of a proposal
     * @param _proposalId of proposal in concern
     * @param _solution of proposal in concern
     * @param mrSequence number of members for a role
     */
    function _setVoteTally(uint _proposalId, uint _solution, uint mrSequence) internal
    {
        uint categoryABReq;
        uint isSpecialResolution;
        (, categoryABReq, isSpecialResolution) = proposalCategory.categoryExtendedData(allProposalData[_proposalId].category);
        if (memberRole.checkRole(msg.sender, uint(MemberRoles.Role.AdvisoryBoard)) && (categoryABReq > 0) || 
            mrSequence == uint(MemberRoles.Role.AdvisoryBoard)) {
            proposalVoteTally[_proposalId].abVoteValue[_solution]++;
        }
        tokenInstance.lockForMemberVote(msg.sender, tokenHoldingTime);
        if (mrSequence != uint(MemberRoles.Role.AdvisoryBoard)) {
            uint voteWeight;
            uint voters = 1;
            uint tokenBalance = tokenInstance.totalBalanceOf(msg.sender);
            uint totalSupply = tokenInstance.totalSupply();
            if (isSpecialResolution == 1) {
                voteWeight = tokenBalance.add(10**18);
            } else {
                voteWeight = (_minOf(tokenBalance, maxVoteWeigthPer.mul(totalSupply).div(100))).add(10**18);
            }
            DelegateVote memory delegationData;
            for (uint i = 0; i < leaderDelegation[msg.sender].length; i++) {
                delegationData = allDelegation[leaderDelegation[msg.sender][i]];
                if (delegationData.leader == msg.sender && 
                _checkLastUpd(delegationData.lastUpd)) {
                    if (memberRole.checkRole(delegationData.follower, mrSequence)) {
                        tokenBalance = tokenInstance.totalBalanceOf(delegationData.follower);
                        tokenInstance.lockForMemberVote(delegationData.follower, tokenHoldingTime);
                        voters++;
                        if (isSpecialResolution == 1) {
                            voteWeight = voteWeight.add(tokenBalance.add(10**18));
                        } else {
                            voteWeight = voteWeight.add((_minOf(tokenBalance, maxVoteWeigthPer.mul(totalSupply).div(100))).add(10**18));
                        }
                    }
                }
            }
            proposalVoteTally[_proposalId].memberVoteValue[_solution] = proposalVoteTally[_proposalId].memberVoteValue[_solution].add(voteWeight);
            proposalVoteTally[_proposalId].voters = proposalVoteTally[_proposalId].voters + voters;
        }
    }

    /**
     * @dev Gets minimum of two numbers
     * @param a one of the two numbers
     * @param b one of the two numbers
     * @return minimum number out of the two
     */
    function _minOf(uint a, uint b) internal pure returns(uint res) {
        res = a;
        if (res > b)
            res = b;
    }
    
    /**
     * @dev Check the time since last update has exceeded token holding time or not
     * @param _lastUpd is last update time
     * @return the bool which tells if the time since last update has exceeded token holding time or not
     */
    function _checkLastUpd(uint _lastUpd) internal view returns(bool) {
        return (now - _lastUpd) > tokenHoldingTime;
    }

    /**
    * @dev Checks if the vote count against any solution passes the threshold value or not.
    */
    function _checkForThreshold(uint _proposalId, uint _category) internal view returns(bool check) {
        uint categoryQuorumPerc;
        uint roleAuthorized;
        (, roleAuthorized, , categoryQuorumPerc, , , ) = proposalCategory.category(_category);
        check = ((proposalVoteTally[_proposalId].memberVoteValue[0]
                            .add(proposalVoteTally[_proposalId].memberVoteValue[1]))
                        .mul(100))
                .div(
                    tokenInstance.totalSupply().add(
                        memberRole.numberOfMembers(roleAuthorized).mul(10 ** 18)
                    )
                ) >= categoryQuorumPerc;
    }
    
    /**
     * @dev Called when vote majority is reached
     * @param _proposalId of proposal in concern
     * @param _status of proposal in concern
     * @param category of proposal in concern
     * @param max vote value of proposal in concern
     */
    function _callIfMajReached(uint _proposalId, uint _status, uint category, uint max, MemberRoles.Role role) internal {
        
        allProposalData[_proposalId].finalVerdict = max;
        _updateProposalStatus(_proposalId, _status);
        emit ProposalAccepted(_proposalId);
        if (proposalActionStatus[_proposalId] != uint(ActionStatus.NoAction)) {
            if (role == MemberRoles.Role.AdvisoryBoard) {
                _triggerAction(_proposalId, category);
            } else {
                proposalActionStatus[_proposalId] = uint(ActionStatus.Accepted);
                proposalExecutionTime[_proposalId] = actionWaitingTime.add(now);
            }
        }
    }

    /**
     * @dev Internal function to trigger action of accepted proposal
     */
    function _triggerAction(uint _proposalId, uint _categoryId) internal {
        proposalActionStatus[_proposalId] = uint(ActionStatus.Executed);
        bytes2 contractName;
        address actionAddress;
        bytes memory _functionHash;
        (, actionAddress, contractName, , _functionHash) = proposalCategory.categoryActionDetails(_categoryId);
        if (contractName == "MS") {
            actionAddress = address(ms);
        } else if (contractName != "EX") {
            actionAddress = ms.getLatestAddress(contractName);
        }
        (bool actionStatus, ) = actionAddress.call(abi.encodePacked(_functionHash, allProposalSolutions[_proposalId][1]));
        if (actionStatus) {
            emit ActionSuccess(_proposalId);
        } else {
            proposalActionStatus[_proposalId] = uint(ActionStatus.Accepted);
            emit ActionFailed(_proposalId);
        }
    }

    /**
     * @dev Internal call to update proposal status
     * @param _proposalId of proposal in concern
     * @param _status of proposal to set
     */
    function _updateProposalStatus(uint _proposalId, uint _status) internal {
        if (_status == uint(ProposalStatus.Rejected) || _status == uint(ProposalStatus.Denied)) {
            proposalActionStatus[_proposalId] = uint(ActionStatus.NoAction);   
        }
        allProposalData[_proposalId].dateUpd = now;
        allProposalData[_proposalId].propStatus = _status;
    }

    /**
     * @dev Internal call to undelegate a follower
     * @param _follower is address of follower to undelegate
     */
    function _unDelegate(address _follower) internal {
        uint followerId = followerDelegation[_follower];
        if (followerId > 0) {

            followerCount[allDelegation[followerId].leader] = followerCount[allDelegation[followerId].leader].sub(1);
            allDelegation[followerId].leader = address(0);
            allDelegation[followerId].lastUpd = now;

            lastRewardClaimed[_follower] = allVotesByMember[_follower].length;
        }
    }

    /**
     * @dev Internal call to close member voting
     * @param _proposalId of proposal in concern
     * @param category of proposal in concern
     */
    function _closeMemberVote(uint _proposalId, uint category) internal {
        uint isSpecialResolution;
        uint abMaj;
        (, abMaj, isSpecialResolution) = proposalCategory.categoryExtendedData(category);
        if (isSpecialResolution == 1) {
            uint acceptedVotePerc = proposalVoteTally[_proposalId].memberVoteValue[1].mul(100)
            .div(
                tokenInstance.totalSupply().add(
                        memberRole.numberOfMembers(uint(MemberRoles.Role.Member)).mul(10**18)
                    ));
            if (acceptedVotePerc >= specialResolutionMajPerc) {
                _callIfMajReached(_proposalId, uint(ProposalStatus.Accepted), category, 1, MemberRoles.Role.Member);
            } else {
                _updateProposalStatus(_proposalId, uint(ProposalStatus.Denied));
            }
        } else {
            if (_checkForThreshold(_proposalId, category)) {
                uint majorityVote;
                (, , majorityVote, , , , ) = proposalCategory.category(category);
                if (
                    ((proposalVoteTally[_proposalId].memberVoteValue[1].mul(100))
                                        .div(proposalVoteTally[_proposalId].memberVoteValue[0]
                                                .add(proposalVoteTally[_proposalId].memberVoteValue[1])
                                        ))
                    >= majorityVote
                    ) {
                        _callIfMajReached(_proposalId, uint(ProposalStatus.Accepted), category, 1, MemberRoles.Role.Member);
                    } else {
                        _updateProposalStatus(_proposalId, uint(ProposalStatus.Rejected));
                    }
            } else {
                if (abMaj > 0 && proposalVoteTally[_proposalId].abVoteValue[1].mul(100)
                .div(memberRole.numberOfMembers(uint(MemberRoles.Role.AdvisoryBoard))) >= abMaj) {
                    _callIfMajReached(_proposalId, uint(ProposalStatus.Accepted), category, 1, MemberRoles.Role.Member);
                } else {
                    _updateProposalStatus(_proposalId, uint(ProposalStatus.Denied));
                }
            }
        }

        if (proposalVoteTally[_proposalId].voters > 0) {
            tokenInstance.mint(ms.getLatestAddress("CR"), allProposalData[_proposalId].commonIncentive);
        }
    }

    /**
     * @dev Internal call to close advisory board voting
     * @param _proposalId of proposal in concern
     * @param category of proposal in concern
     */
    function _closeAdvisoryBoardVote(uint _proposalId, uint category) internal {
        uint _majorityVote;
        MemberRoles.Role _roleId = MemberRoles.Role.AdvisoryBoard;
        (, , _majorityVote, , , , ) = proposalCategory.category(category);
        if (proposalVoteTally[_proposalId].abVoteValue[1].mul(100)
        .div(memberRole.numberOfMembers(uint(_roleId))) >= _majorityVote) {
            _callIfMajReached(_proposalId, uint(ProposalStatus.Accepted), category, 1, _roleId);
        } else {
            _updateProposalStatus(_proposalId, uint(ProposalStatus.Denied));
        }

    }

}

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x800933440fe46a5f74cc3f88165bf0727664e0e8.sol
Total states:14395
56.416516
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.258465
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1004
Estimated Gas Usage: 417 - 512
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x800933440fe46a5f74cc3f88165bf0727664e0e8.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.374772
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1006
Estimated Gas Usage: 417 - 512
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x800933440fe46a5f74cc3f88165bf0727664e0e8.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.710654
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1089
Estimated Gas Usage: 593 - 688
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x800933440fe46a5f74cc3f88165bf0727664e0e8.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:21.831507
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1091
Estimated Gas Usage: 593 - 688
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x800933440fe46a5f74cc3f88165bf0727664e0e8.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.969789
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeBP(uint256)
PC address: 2585
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x800933440fe46a5f74cc3f88165bf0727664e0e8.sol:629

uint[] public bonusRangeBP

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:35.331565
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeStart(uint256)
PC address: 6017
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x800933440fe46a5f74cc3f88165bf0727664e0e8.sol:628

uint[] public bonusRangeStart

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:32.564683
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: calculateRatePerEth(uint256,uint256,uint256)
PC address: 6866
Estimated Gas Usage: 955 - 1050
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x800933440fe46a5f74cc3f88165bf0727664e0e8.sol:163

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x79b23d2e338be27bd554e1fa5777d79491414747.sol
Total states:1880
100.660976
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.299287
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShip(address[])
PC address: 360
Estimated Gas Usage: 342 - 437
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x79b23d2e338be27bd554e1fa5777d79491414747.sol:5

penzeppelin-solidity/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.047489
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShip(address[])
PC address: 362
Estimated Gas Usage: 342 - 437
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x79b23d2e338be27bd554e1fa5777d79491414747.sol:3

*/

// File: openzeppelin-solidity/c

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:38.116374
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShipWithHowMany(address[],uint256)
PC address: 776
Estimated Gas Usage: 341 - 436
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x79b23d2e338be27bd554e1fa5777d79491414747.sol:5

penzeppelin-solidity/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:40.918690
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShipWithHowMany(address[],uint256)
PC address: 778
Estimated Gas Usage: 341 - 436
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x79b23d2e338be27bd554e1fa5777d79491414747.sol:3

*/

// File: openzeppelin-solidity/c

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:30.146331
Transaction Length: 1
Severity: Low
Contract: BeneficiaryOperations
Function name: allOperations(uint256)
PC address: 1715
Estimated Gas Usage: 701 - 796
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x79b23d2e338be27bd554e1fa5777d79491414747.sol:386

bytes32[] public allOperations

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:35.382100
Transaction Length: 1
Severity: Low
Contract: BeneficiaryOperations
Function name: beneficiaries(uint256)
PC address: 4636
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x79b23d2e338be27bd554e1fa5777d79491414747.sol:385

address[] public beneficiaries

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/noloop/noloop3/0x448ff6d5ca4cdf28f9c61de671108df310903eb1.sol
Total states:4708
9.277949
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.199812
Transaction Length: 0
Severity: High
Contract: ERC20
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/noloop/noloop3/0x448ff6d5ca4cdf28f9c61de671108df310903eb1.sol:17

dentifier: MIT

//pragma solidity ^0.6.0;
p

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/noloop/noloop3/0xfb9fc4ccc2538172fe76f7dc231a6969950e57c8.sol
Total states:20052
42.729089
==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.259903
Transaction Length: 0
Severity: Medium
Contract: WEV
Function name: constructor
PC address: 209
Estimated Gas Usage: 17133 - 78876
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../contracts/noloop/noloop3/0xfb9fc4ccc2538172fe76f7dc231a6969950e57c8.sol:733

tx.origin

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.113766
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3244
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/noloop/noloop3/0xfb9fc4ccc2538172fe76f7dc231a6969950e57c8.sol:33

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.320390
Transaction Length: 2
Severity: High
Contract: WEV
Function name: increaseAllowance(address,uint256)
PC address: 5586
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/noloop/noloop3/0xfb9fc4ccc2538172fe76f7dc231a6969950e57c8.sol:33

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/noloop/noloop3/0xEDCD9e36017689c6Fc51C65c517f488E3Cb6C381.sol
Total states:4104
24.304509
==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:05.445175
Transaction Length: 1
Severity: Medium
Contract: Operator
Function name: supplyOrderWithDaiPermit(uint256,uint256,uint256,uint8,bytes32,bytes32)
PC address: 339
Estimated Gas Usage: 10986 - 154068
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 1353
Offset: 5894
Offset: 6269
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/noloop/noloop3/0xEDCD9e36017689c6Fc51C65c517f488E3Cb6C381.sol:169

function supplyOrderWithDaiPermit(uint amount, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s) public {
        DaiPermitLike(tranche.currency()).permit(msg.sender, address(tranche), nonce, expiry, true, v, r, s);
        supplyOrder(amount);
    }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:07.741433
Transaction Length: 1
Severity: Medium
Contract: Operator
Function name: redeemOrder(uint256)
PC address: 385
Estimated Gas Usage: 8635 - 116441
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 1961
Offset: 2326
Offset: 2583
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/noloop/noloop3/0xEDCD9e36017689c6Fc51C65c517f488E3Cb6C381.sol:147

function redeemOrder(uint amount) public note {
        require((token.hasMember(msg.sender) == true), "user-not-allowed-to-hold-token");
        token.hasMember(msg.sender);
        tranche.redeemOrder(msg.sender, amount);
    }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:14.976278
Transaction Length: 1
Severity: Medium
Contract: Operator
Function name: disburse()
PC address: 823
Estimated Gas Usage: 4632 - 75356
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 4515
Offset: 4882
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/noloop/noloop3/0xEDCD9e36017689c6Fc51C65c517f488E3Cb6C381.sol:154

function disburse() external
        returns(uint payoutCurrencyAmount, uint payoutTokenAmount, uint remainingSupplyCurrency,  uint remainingRedeemToken)
    {
        require((token.hasMember(msg.sender) == true), "user-not-allowed-to-hold-token");
        return tranche.disburse(msg.sender);
    }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:16.935656
Transaction Length: 1
Severity: Medium
Contract: Operator
Function name: disburse(uint256)
PC address: 910
Estimated Gas Usage: 4758 - 75577
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 5182
Offset: 5557
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/noloop/noloop3/0xEDCD9e36017689c6Fc51C65c517f488E3Cb6C381.sol:161

function disburse(uint endEpoch) external
        returns(uint payoutCurrencyAmount, uint payoutTokenAmount, uint remainingSupplyCurrency,  uint remainingRedeemToken)
    {
        require((token.hasMember(msg.sender) == true), "user-not-allowed-to-hold-token");
        return tranche.disburse(msg.sender, endEpoch);
    }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:19.024643
Transaction Length: 1
Severity: Medium
Contract: Operator
Function name: supplyOrder(uint256)
PC address: 1044
Estimated Gas Usage: 6568 - 79482
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 5894
Offset: 6269
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/noloop/noloop3/0xEDCD9e36017689c6Fc51C65c517f488E3Cb6C381.sol:141

function supplyOrder(uint amount) public note {
        require((token.hasMember(msg.sender) == true), "user-not-allowed-to-hold-token");
        tranche.supplyOrder(msg.sender, amount);
    }

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:02.434236
Transaction Length: 1
Severity: Low
Contract: Operator
Function name: supplyOrderWithDaiPermit(uint256,uint256,uint256,uint8,bytes32,bytes32)
PC address: 1711
Estimated Gas Usage: 3914 - 40177
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/noloop/noloop3/0xEDCD9e36017689c6Fc51C65c517f488E3Cb6C381.sol:170

DaiPermitLike(tranche.currency()).permit(msg.sender, address(tranche), nonce, expiry, true, v, r, s)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:23.041636
Transaction Length: 1
Severity: Low
Contract: Operator
Function name: redeemOrderWithPermit(uint256,uint256,uint256,uint8,bytes32,bytes32)
PC address: 2583
Estimated Gas Usage: 8608 - 114894
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/noloop/noloop3/0xEDCD9e36017689c6Fc51C65c517f488E3Cb6C381.sol:150

tranche.redeemOrder(msg.sender, amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:09.945930
Transaction Length: 1
Severity: Low
Contract: Operator
Function name: supplyOrderWithPermit(uint256,uint256,uint256,uint8,bytes32,bytes32)
PC address: 3258
Estimated Gas Usage: 3875 - 40043
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/noloop/noloop3/0xEDCD9e36017689c6Fc51C65c517f488E3Cb6C381.sol:174

EIP2612PermitLike(tranche.currency()).permit(msg.sender, address(tranche), value, deadline, v, r, s)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:14.803930
Transaction Length: 1
Severity: Low
Contract: Operator
Function name: disburse()
PC address: 4882
Estimated Gas Usage: 3600 - 39293
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/noloop/noloop3/0xEDCD9e36017689c6Fc51C65c517f488E3Cb6C381.sol:158

tranche.disburse(msg.sender)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:16.758658
Transaction Length: 1
Severity: Low
Contract: Operator
Function name: disburse(uint256)
PC address: 5557
Estimated Gas Usage: 3724 - 39512
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/noloop/noloop3/0xEDCD9e36017689c6Fc51C65c517f488E3Cb6C381.sol:165

tranche.disburse(msg.sender, endEpoch)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:18.773587
Transaction Length: 1
Severity: Low
Contract: Operator
Function name: supplyOrder(uint256)
PC address: 6269
Estimated Gas Usage: 3727 - 39515
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/noloop/noloop3/0xEDCD9e36017689c6Fc51C65c517f488E3Cb6C381.sol:143

tranche.supplyOrder(msg.sender, amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:20.309119
Transaction Length: 1
Severity: Low
Contract: Operator
Function name: redeemOrderWithPermit(uint256,uint256,uint256,uint8,bytes32,bytes32)
PC address: 6826
Estimated Gas Usage: 2310 - 4011
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/noloop/noloop3/0xEDCD9e36017689c6Fc51C65c517f488E3Cb6C381.sol:178

EIP2612PermitLike(address(token)).permit(msg.sender, address(tranche), value, deadline, v, r, s)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/noloop/noloop3/0x98b689a88e421E4CdC3A27b61b99c039a8ae9885.sol
Total states:2175
2.734301
==== Delegatecall Proxy ====
SWC ID: 112
FOUND TIME: 0:00:00.285642
Transaction Length: 1
Severity: Low
Contract: UpgradeabilityProxy
Function name: fallback
PC address: 274
Estimated Gas Usage: 681 - 3503
The contract implements a delegatecall proxy.
The smart contract forwards the received calldata via delegatecall. Note that callerscan execute arbitrary functions in the callee contract and that the callee contract can access the storage of the calling contract. Make sure that the callee contract is audited properly.DELEGATECALL target: Concat(0,
       5_code(UpgradeabilityProxy),
       5_code(UpgradeabilityProxy),
       5_code(UpgradeabilityProxy),
       5_code(UpgradeabilityProxy),
       5_code(UpgradeabilityProxy),
       5_code(UpgradeabilityProxy),
       5_code(UpgradeabilityProxy),
       5_code(UpgradeabilityProxy),
       5_code(UpgradeabilityProxy),
       5_code(UpgradeabilityProxy),
       5_code(UpgradeabilityProxy),
       5_code(UpgradeabilityProxy),
       5_code(UpgradeabilityProxy),
       5_code(UpgradeabilityProxy),
       5_code(UpgradeabilityProxy),
       5_code(UpgradeabilityProxy),
       5_code(UpgradeabilityProxy),
       5_code(UpgradeabilityProxy),
       5_code(UpgradeabilityProxy),
       5_code(UpgradeabilityProxy))
--------------------
In file: ../../contracts/noloop/noloop3/0x98b689a88e421E4CdC3A27b61b99c039a8ae9885.sol:260

delegatecall(gas(), _impl, ptr, calldatasize(), 0, 0)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/noloop/noloop3/0x87a59a9f2c2caf9c7ec3fa62d7496d9fc7449b01.sol
Total states:2389
11.581232
==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.892934
Transaction Length: 1
Severity: Medium
Contract: Liquidator
Function name: triggerLiquidation(address)
PC address: 4941
Estimated Gas Usage: 280 - 375
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../contracts/noloop/noloop3/0x87a59a9f2c2caf9c7ec3fa62d7496d9fc7449b01.sol:1111

tx.origin

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x92a33631c630fff26291925bb510203dd6f4e9e2.sol
Total states:1320
57.359606
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.847867
Transaction Length: 1
Severity: High
Contract: usingProvable
Function name: __callback(bytes32,string)
PC address: 181
Estimated Gas Usage: 323 - 418
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x92a33631c630fff26291925bb510203dd6f4e9e2.sol:3

*/

//pragma solidity 0.5.17;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.738336
Transaction Length: 1
Severity: High
Contract: usingProvable
Function name: __callback(bytes32,string,bytes)
PC address: 378
Estimated Gas Usage: 345 - 440
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x92a33631c630fff26291925bb510203dd6f4e9e2.sol:3

*/

//pragma solidity 0.5.17;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:24.647654
Transaction Length: 1
Severity: High
Contract: usingProvable
Function name: __callback(bytes32,string,bytes)
PC address: 529
Estimated Gas Usage: 687 - 3464
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x92a33631c630fff26291925bb510203dd6f4e9e2.sol:3

*/

//pragma solidity 0.5.17;
pragm

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:00.629368
Transaction Length: 0
Severity: Low
Contract: YeldOracle
Function name: constructor
PC address: 744
Estimated Gas Usage: 35872 - 161864
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop3/0x92a33631c630fff26291925bb510203dd6f4e9e2.sol:1334

IYeldContract(yDAI).rebalance()

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:00.776870
Transaction Length: 0
Severity: Low
Contract: YeldOracle
Function name: constructor
PC address: 904
Estimated Gas Usage: 37843 - 198446
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop3/0x92a33631c630fff26291925bb510203dd6f4e9e2.sol:1335

IYeldContract(yTether).rebalance()

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:00.803439
Transaction Length: 0
Severity: Low
Contract: YeldOracle
Function name: constructor
PC address: 1064
Estimated Gas Usage: 39814 - 235028
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop3/0x92a33631c630fff26291925bb510203dd6f4e9e2.sol:1336

IYeldContract(yTrueUSD).rebalance()

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:00.830524
Transaction Length: 0
Severity: Low
Contract: YeldOracle
Function name: constructor
PC address: 1224
Estimated Gas Usage: 41785 - 271610
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop3/0x92a33631c630fff26291925bb510203dd6f4e9e2.sol:1337

IYeldContract(yUSDC).rebalance()

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x8bbb6c4b6de838df0e6ceed5d32c20b44ee8ea02.sol
Total states:11825
27.347708
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.045164
Transaction Length: 0
Severity: High
Contract: Token
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x8bbb6c4b6de838df0e6ceed5d32c20b44ee8ea02.sol:8

Public License as published by
// the Free 

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x11f623c38b442425ec82fbc590e2d38ce777f6fe.sol
Total states:426
0.761706
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xecf073f91101ce5628669c487aee8f5822a101b1.sol
Total states:9507
92.294351
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.071976
Transaction Length: 0
Severity: High
Contract: ERC721BaseCollection
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xecf073f91101ce5628669c487aee8f5822a101b1.sol:12

t (an owner) that can be granted exclusive 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.065919
Transaction Length: 0
Severity: High
Contract: ERC721Collection
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xecf073f91101ce5628669c487aee8f5822a101b1.sol:12

t (an owner) that can be granted exclusive 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.054876
Transaction Length: 0
Severity: High
Contract: ERC721Full
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xecf073f91101ce5628669c487aee8f5822a101b1.sol:12

t (an owner) that can be granted exclusive 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.048827
Transaction Length: 0
Severity: High
Contract: ERC721Metadata
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xecf073f91101ce5628669c487aee8f5822a101b1.sol:12

t (an owner) that can be granted exclusive 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.927485
Transaction Length: 1
Severity: High
Contract: ERC721
Function name: safeTransferFrom(address,address,uint256,bytes)
PC address: 1136
Estimated Gas Usage: 477 - 572
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xecf073f91101ce5628669c487aee8f5822a101b1.sol:3

*/

// File: @openzeppelin/contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.261738
Transaction Length: 1
Severity: High
Contract: ERC721Enumerable
Function name: safeTransferFrom(address,address,uint256,bytes)
PC address: 1379
Estimated Gas Usage: 477 - 572
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xecf073f91101ce5628669c487aee8f5822a101b1.sol:3

*/

// File: @openzeppelin/contract

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x42ffe38063a1ff94091824e6c29160f70c026cb3.sol
Total states:723
6.337604
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x66be1bc6c6af47900bbd4f3711801be6c2c6cb32.sol
Total states:1115
2.749719
==== Unprotected Selfdestruct ====
SWC ID: 106
FOUND TIME: 0:00:00.019149
Transaction Length: 0
Severity: High
Contract: SafeSend
Function name: constructor
PC address: 74
Estimated Gas Usage: 139 - 2819
The contract can be killed by anyone.
Arbitrary senders can kill this contract but it is not possible to set the target address to whichthe contract balance is sent.
--------------------
In file: ../../contracts/m_loop/loop3/0x66be1bc6c6af47900bbd4f3711801be6c2c6cb32.sol:653

selfdestruct(to)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x248FEd766B4953B6847a397b291a9Df97B3C2a39.sol
Total states:31600
399.519167
==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:00.275129
Transaction Length: 1
Severity: Medium
Contract: VoteProxy
Function name: freeAll()
PC address: 349
Estimated Gas Usage: 9777 - 150153
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 1496
Offset: 1637
Offset: 1944
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop3/0x248FEd766B4953B6847a397b291a9Df97B3C2a39.sol:764

function freeAll() public auth {
        chief.free(chief.deposits(address(this)));
        gov.push(cold, gov.balanceOf(address(this)));
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.409296
Transaction Length: 1
Severity: High
Contract: DSChiefApprovals
Function name: etch(address[])
PC address: 707
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x248FEd766B4953B6847a397b291a9Df97B3C2a39.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.653710
Transaction Length: 1
Severity: High
Contract: DSChiefApprovals
Function name: etch(address[])
PC address: 709
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x248FEd766B4953B6847a397b291a9Df97B3C2a39.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.542050
Transaction Length: 1
Severity: High
Contract: VoteProxy
Function name: vote(address[])
PC address: 717
Estimated Gas Usage: 384 - 479
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x248FEd766B4953B6847a397b291a9Df97B3C2a39.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.786728
Transaction Length: 1
Severity: High
Contract: VoteProxy
Function name: vote(address[])
PC address: 719
Estimated Gas Usage: 384 - 479
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x248FEd766B4953B6847a397b291a9Df97B3C2a39.sol:3

*/

/**
 *Submitted for verification

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:00.198488
Transaction Length: 0
Severity: Low
Contract: VoteProxy
Function name: constructor
PC address: 1065
Estimated Gas Usage: 33385 - 208626
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop3/0x248FEd766B4953B6847a397b291a9Df97B3C2a39.sol:745

gov.approve(address(chief), uint256(-1))

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.995660
Transaction Length: 1
Severity: High
Contract: DSChief
Function name: etch(address[])
PC address: 1231
Estimated Gas Usage: 386 - 481
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x248FEd766B4953B6847a397b291a9Df97B3C2a39.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.874328
Transaction Length: 1
Severity: High
Contract: DSChief
Function name: etch(address[])
PC address: 1233
Estimated Gas Usage: 386 - 481
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x248FEd766B4953B6847a397b291a9Df97B3C2a39.sol:3

*/

/**
 *Submitted for verification

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:00.257038
Transaction Length: 0
Severity: Low
Contract: VoteProxy
Function name: constructor
PC address: 1391
Estimated Gas Usage: 35933 - 246491
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop3/0x248FEd766B4953B6847a397b291a9Df97B3C2a39.sol:746

iou.approve(address(chief), uint256(-1))

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:00.295613
Transaction Length: 0
Severity: Medium
Contract: VoteProxy
Function name: constructor
PC address: 1467
Estimated Gas Usage: 37224 - 284272
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 418
Offset: 676
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop3/0x248FEd766B4953B6847a397b291a9Df97B3C2a39.sol:731

contract VoteProxy {
    address public cold;
    address public hot;
    DSToken public gov;
    DSToken public iou;
    DSChief public chief;

    constructor(DSChief _chief, address _cold, address _hot) public {
        chief = _chief;
        cold = _cold;
        hot = _hot;

        gov = chief.GOV();
        iou = chief.IOU();
        gov.approve(address(chief), uint256(-1));
        iou.approve(address(chief), uint256(-1));
    }

    modifier auth() {
        require(msg.sender == hot || msg.sender == cold, "Sender must be a Cold or Hot Wallet");
        _;
    }

    function lock(uint256 wad) public auth {
        gov.pull(cold, wad);   // mkr from cold
        chief.lock(wad);       // mkr out, ious in
    }

    function free(uint256 wad) public auth {
        chief.free(wad);       // ious out, mkr in
        gov.push(cold, wad);   // mkr to cold
    }

    function freeAll() public auth {
        chief.free(chief.deposits(address(this)));
        gov.push(cold, gov.balanceOf(address(this)));
    }

    function vote(address[] memory yays) public auth returns (bytes32) {
        return chief.vote(yays);
    }

    function vote(bytes32 slate) public auth {
        chief.vote(slate);
    }
}

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x9a2715be834f8c29b6d5658e69975d9d5c08801a.sol
Total states:77
3.266578
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xf0dac6a8bca0698e5d4e42e1d06293ff6ae14c0c.sol
Total states:14026
80.830805
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.790528
Transaction Length: 2
Severity: High
Contract: RegularToken
Function name: transferFrom(address,address,uint256)
PC address: 2724
Estimated Gas Usage: 2054 - 2909
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xf0dac6a8bca0698e5d4e42e1d06293ff6ae14c0c.sol:1106

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:19.741122
Transaction Length: 2
Severity: Low
Contract: RegularToken
Function name: transferFrom(address,address,uint256)
PC address: 2737
Estimated Gas Usage: 2064 - 2919
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xf0dac6a8bca0698e5d4e42e1d06293ff6ae14c0c.sol:1107

assert(c >= a)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.857539
Transaction Length: 2
Severity: High
Contract: UnboundedRegularToken
Function name: transferFrom(address,address,uint256)
PC address: 2771
Estimated Gas Usage: 2065 - 2920
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xf0dac6a8bca0698e5d4e42e1d06293ff6ae14c0c.sol:1106

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:19.331163
Transaction Length: 2
Severity: Low
Contract: UnboundedRegularToken
Function name: transferFrom(address,address,uint256)
PC address: 2784
Estimated Gas Usage: 2075 - 2930
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xf0dac6a8bca0698e5d4e42e1d06293ff6ae14c0c.sol:1107

assert(c >= a)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.118084
Transaction Length: 2
Severity: High
Contract: ETPlanToken
Function name: transferFrom(address,address,uint256)
PC address: 3237
Estimated Gas Usage: 2110 - 2965
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xf0dac6a8bca0698e5d4e42e1d06293ff6ae14c0c.sol:1106

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:15.633584
Transaction Length: 2
Severity: Low
Contract: ETPlanToken
Function name: transferFrom(address,address,uint256)
PC address: 3250
Estimated Gas Usage: 2120 - 2975
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xf0dac6a8bca0698e5d4e42e1d06293ff6ae14c0c.sol:1107

assert(c >= a)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xA9dE0c76E1960e8B89D4B754d2D5C8b187e7B98B.sol
Total states:52549
1352.001923
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.833859
Transaction Length: 1
Severity: High
Contract: AccessChecker
Function name: getModuleAddress(string)
PC address: 416
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xA9dE0c76E1960e8B89D4B754d2D5C8b187e7B98B.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.551050
Transaction Length: 1
Severity: High
Contract: Module
Function name: getModuleAddress(string)
PC address: 416
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xA9dE0c76E1960e8B89D4B754d2D5C8b187e7B98B.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.072318
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(string,string,uint8)
PC address: 1000
Estimated Gas Usage: 409 - 504
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xA9dE0c76E1960e8B89D4B754d2D5C8b187e7B98B.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.399979
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(string,string,uint8)
PC address: 1151
Estimated Gas Usage: 751 - 3528
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xA9dE0c76E1960e8B89D4B754d2D5C8b187e7B98B.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.412926
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[],uint256)
PC address: 2226
Estimated Gas Usage: 429 - 524
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xA9dE0c76E1960e8B89D4B754d2D5C8b187e7B98B.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.151419
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[],uint256)
PC address: 2228
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xA9dE0c76E1960e8B89D4B754d2D5C8b187e7B98B.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.490577
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[])
PC address: 2357
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xA9dE0c76E1960e8B89D4B754d2D5C8b187e7B98B.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:14.567636
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[])
PC address: 2359
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xA9dE0c76E1960e8B89D4B754d2D5C8b187e7B98B.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:29.612446
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: getModuleAddress(string)
PC address: 2526
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xA9dE0c76E1960e8B89D4B754d2D5C8b187e7B98B.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.658179
Transaction Length: 1
Severity: High
Contract: InvestingModule
Function name: deposit(address,address[],uint256[])
PC address: 2654
Estimated Gas Usage: 419 - 514
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xA9dE0c76E1960e8B89D4B754d2D5C8b187e7B98B.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.854396
Transaction Length: 1
Severity: High
Contract: SavingsModule
Function name: deposit(address,address[],uint256[])
PC address: 2654
Estimated Gas Usage: 419 - 514
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xA9dE0c76E1960e8B89D4B754d2D5C8b187e7B98B.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.438022
Transaction Length: 1
Severity: High
Contract: InvestingModule
Function name: deposit(address,address[],uint256[])
PC address: 2656
Estimated Gas Usage: 419 - 514
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xA9dE0c76E1960e8B89D4B754d2D5C8b187e7B98B.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.618281
Transaction Length: 1
Severity: High
Contract: SavingsModule
Function name: deposit(address,address[],uint256[])
PC address: 2656
Estimated Gas Usage: 419 - 514
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xA9dE0c76E1960e8B89D4B754d2D5C8b187e7B98B.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:21.340730
Transaction Length: 1
Severity: High
Contract: InvestingModule
Function name: deposit(address,address[],uint256[])
PC address: 2802
Estimated Gas Usage: 752 - 3529
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xA9dE0c76E1960e8B89D4B754d2D5C8b187e7B98B.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:22.613754
Transaction Length: 1
Severity: High
Contract: SavingsModule
Function name: deposit(address,address[],uint256[])
PC address: 2802
Estimated Gas Usage: 752 - 3529
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xA9dE0c76E1960e8B89D4B754d2D5C8b187e7B98B.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:33.862805
Transaction Length: 1
Severity: High
Contract: InvestingModule
Function name: deposit(address,address[],uint256[])
PC address: 2804
Estimated Gas Usage: 752 - 3529
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xA9dE0c76E1960e8B89D4B754d2D5C8b187e7B98B.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:36.340396
Transaction Length: 1
Severity: High
Contract: SavingsModule
Function name: deposit(address,address[],uint256[])
PC address: 2804
Estimated Gas Usage: 752 - 3529
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xA9dE0c76E1960e8B89D4B754d2D5C8b187e7B98B.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:25.318187
Transaction Length: 1
Severity: High
Contract: InvestingModule
Function name: getModuleAddress(string)
PC address: 3167
Estimated Gas Usage: 451 - 546
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xA9dE0c76E1960e8B89D4B754d2D5C8b187e7B98B.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:48.213578
Transaction Length: 1
Severity: High
Contract: SavingsModule
Function name: getModuleAddress(string)
PC address: 3167
Estimated Gas Usage: 451 - 546
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xA9dE0c76E1960e8B89D4B754d2D5C8b187e7B98B.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:21.446815
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(address,string,string)
PC address: 3179
Estimated Gas Usage: 485 - 580
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xA9dE0c76E1960e8B89D4B754d2D5C8b187e7B98B.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.008480
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3249
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xA9dE0c76E1960e8B89D4B754d2D5C8b187e7B98B.sol:34

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:43.122241
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(address,string,string)
PC address: 3330
Estimated Gas Usage: 827 - 3604
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xA9dE0c76E1960e8B89D4B754d2D5C8b187e7B98B.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.394101
Transaction Length: 1
Severity: Low
Contract: DistributionToken
Function name: distributions(uint256)
PC address: 3405
Estimated Gas Usage: 724 - 819
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xA9dE0c76E1960e8B89D4B754d2D5C8b187e7B98B.sol:1328

Distribution[] public distributions

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.270021
Transaction Length: 2
Severity: High
Contract: ERC20Burnable
Function name: increaseAllowance(address,uint256)
PC address: 3429
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xA9dE0c76E1960e8B89D4B754d2D5C8b187e7B98B.sol:34

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.608617
Transaction Length: 2
Severity: High
Contract: ERC20Mintable
Function name: increaseAllowance(address,uint256)
PC address: 4214
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xA9dE0c76E1960e8B89D4B754d2D5C8b187e7B98B.sol:34

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:32.404088
Transaction Length: 1
Severity: Low
Contract: PoolToken
Function name: distributions(uint256)
PC address: 6392
Estimated Gas Usage: 768 - 863
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xA9dE0c76E1960e8B89D4B754d2D5C8b187e7B98B.sol:1328

Distribution[] public distributions

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.865767
Transaction Length: 2
Severity: High
Contract: DistributionToken
Function name: increaseAllowance(address,uint256)
PC address: 6759
Estimated Gas Usage: 1104 - 1579
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xA9dE0c76E1960e8B89D4B754d2D5C8b187e7B98B.sol:34

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:03:00.948671
Transaction Length: 1
Severity: Low
Contract: InvestingModule
Function name: registeredPoolTokens()
PC address: 16017
Estimated Gas Usage: 1175 - 1646
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xA9dE0c76E1960e8B89D4B754d2D5C8b187e7B98B.sol:2311

registeredProtocols[i]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:03:07.744346
Transaction Length: 1
Severity: Low
Contract: SavingsModule
Function name: registeredPoolTokens()
PC address: 16017
Estimated Gas Usage: 1175 - 1646
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xA9dE0c76E1960e8B89D4B754d2D5C8b187e7B98B.sol:2311

registeredProtocols[i]

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xd098df627426e1b54f924822373aee680860a295.sol
Total states:3216
96.33973
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:40.218818
Transaction Length: 1
Severity: High
Contract: InstaCompoundResolver
Function name: name()
PC address: 1708
Estimated Gas Usage: 682 - 870
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xd098df627426e1b54f924822373aee680860a295.sol:176

string public constant name = "Compound-Resolver-v1.1"

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x188C2274B04Ea392B21487b5De299e382Ff84246.sol
Total states:1930
57.824783
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x86890220b3aad958abf24ac7d67f9414ae4565a7.sol
Total states:2032
79.632593
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.289904
Transaction Length: 1
Severity: High
Contract: FundsMgr
Function name: withdrawAll(address[])
PC address: 202
Estimated Gas Usage: 296 - 391
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x86890220b3aad958abf24ac7d67f9414ae4565a7.sol:5

ontracts\interfaces\I

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.284182
Transaction Length: 1
Severity: High
Contract: FundsMgr
Function name: withdrawAll(address[])
PC address: 204
Estimated Gas Usage: 296 - 391
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x86890220b3aad958abf24ac7d67f9414ae4565a7.sol:3

*/

// File: contracts\interfaces\IE

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:03.918838
Transaction Length: 1
Severity: Medium
Contract: DfDepositMarket
Function name: getDiDai(uint256)
PC address: 215
Estimated Gas Usage: 4141 - 73975
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 1122
Offset: 1365
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop3/0x86890220b3aad958abf24ac7d67f9414ae4565a7.sol:648

function getDiDai(uint256 amount) public {
        require(msg.sender == tx.origin);
        require(amount > 0);
        IToken(DAI_ADDRESS).transferFrom(msg.sender, owner, amount);
        IToken(dDAI_ADDRESS).transfer(msg.sender, amount);
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.138900
Transaction Length: 1
Severity: High
Contract: DfDepositMarket
Function name: withdrawAll(address[])
PC address: 371
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x86890220b3aad958abf24ac7d67f9414ae4565a7.sol:5

ontracts\interfaces\I

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.094211
Transaction Length: 1
Severity: High
Contract: DfDepositMarket
Function name: withdrawAll(address[])
PC address: 373
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x86890220b3aad958abf24ac7d67f9414ae4565a7.sol:3

*/

// File: contracts\interfaces\IE

--------------------

==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.118012
Transaction Length: 1
Severity: Medium
Contract: DfDepositMarket
Function name: getDiDai(uint256)
PC address: 779
Estimated Gas Usage: 223 - 318
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../contracts/m_loop/loop3/0x86890220b3aad958abf24ac7d67f9414ae4565a7.sol:649

tx.origin

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:01.617385
Transaction Length: 1
Severity: Low
Contract: DfDepositMarket
Function name: getDiDai(uint256)
PC address: 1122
Estimated Gas Usage: 1643 - 2634
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop3/0x86890220b3aad958abf24ac7d67f9414ae4565a7.sol:651

IToken(DAI_ADDRESS).transferFrom(msg.sender, owner, amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:03.790694
Transaction Length: 1
Severity: Low
Contract: DfDepositMarket
Function name: getDiDai(uint256)
PC address: 1365
Estimated Gas Usage: 3318 - 38966
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop3/0x86890220b3aad958abf24ac7d67f9414ae4565a7.sol:652

IToken(dDAI_ADDRESS).transfer(msg.sender, amount)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xab1b7674a92a4b788855915e6bda60841c284189.sol
Total states:736
1.546786
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x331513bedb4ec777e950201a6ca6848d198bbbb1.sol
Total states:5597
269.989779
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.879924
Transaction Length: 1
Severity: High
Contract: ERC721Holder
Function name: onERC721Received(address,address,uint256,bytes)
PC address: 234
Estimated Gas Usage: 389 - 484
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x331513bedb4ec777e950201a6ca6848d198bbbb1.sol:3

*/

//pragma solidity^0.7;
pragma s

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.093780
Transaction Length: 1
Severity: High
Contract: CJOArtsGateway
Function name: onERC721Received(address,address,uint256,bytes)
PC address: 572
Estimated Gas Usage: 457 - 552
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x331513bedb4ec777e950201a6ca6848d198bbbb1.sol:3

*/

//pragma solidity^0.7;
pragma s

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:01:29.935960
Transaction Length: 1
Severity: Medium
Contract: CJOArtsGateway
Function name: deposit(uint256)
PC address: 1602
Estimated Gas Usage: 6115 - 76865
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 5445
Offset: 5889
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop3/0x331513bedb4ec777e950201a6ca6848d198bbbb1.sol:229

function deposit(uint256 _tokenId) public whenNotPaused() {
        address owner = assetContract.ownerOf(_tokenId);
        require(owner == msg.sender, "msg.sender must be _tokenId owner");
        assetContract.safeTransferFrom(owner, address(this), _tokenId);
        emit Deposit(owner, _tokenId);
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:38.784147
Transaction Length: 1
Severity: High
Contract: CJOArtsGateway
Function name: bulkDeposit(uint256[])
PC address: 1697
Estimated Gas Usage: 384 - 479
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x331513bedb4ec777e950201a6ca6848d198bbbb1.sol:5

olidity^0.7;
pragma s

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:42.146603
Transaction Length: 1
Severity: High
Contract: CJOArtsGateway
Function name: bulkDeposit(uint256[])
PC address: 1699
Estimated Gas Usage: 384 - 479
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x331513bedb4ec777e950201a6ca6848d198bbbb1.sol:3

*/

//pragma solidity^0.7;
pragma so

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:21.579281
Transaction Length: 1
Severity: High
Contract: CJOArtsGateway
Function name: bulkWithdraw(address[],uint256[],uint256[],bytes32[])
PC address: 1899
Estimated Gas Usage: 404 - 499
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x331513bedb4ec777e950201a6ca6848d198bbbb1.sol:5

olidity^0.7;
pragma s

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:25.229745
Transaction Length: 1
Severity: High
Contract: CJOArtsGateway
Function name: bulkWithdraw(address[],uint256[],uint256[],bytes32[])
PC address: 1901
Estimated Gas Usage: 404 - 499
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x331513bedb4ec777e950201a6ca6848d198bbbb1.sol:3

*/

//pragma solidity^0.7;
pragma so

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:29.884641
Transaction Length: 1
Severity: High
Contract: CJOArtsGateway
Function name: bulkWithdraw(address[],uint256[],uint256[],bytes32[])
PC address: 1984
Estimated Gas Usage: 580 - 675
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x331513bedb4ec777e950201a6ca6848d198bbbb1.sol:5

olidity^0.7;
pragma s

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:39.092899
Transaction Length: 1
Severity: High
Contract: CJOArtsGateway
Function name: bulkWithdraw(address[],uint256[],uint256[],bytes32[])
PC address: 1986
Estimated Gas Usage: 580 - 675
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x331513bedb4ec777e950201a6ca6848d198bbbb1.sol:3

*/

//pragma solidity^0.7;
pragma so

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:51.015754
Transaction Length: 1
Severity: High
Contract: CJOArtsGateway
Function name: bulkWithdraw(address[],uint256[],uint256[],bytes32[])
PC address: 2069
Estimated Gas Usage: 756 - 851
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x331513bedb4ec777e950201a6ca6848d198bbbb1.sol:5

olidity^0.7;
pragma s

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:06.543960
Transaction Length: 1
Severity: High
Contract: CJOArtsGateway
Function name: bulkWithdraw(address[],uint256[],uint256[],bytes32[])
PC address: 2071
Estimated Gas Usage: 756 - 851
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x331513bedb4ec777e950201a6ca6848d198bbbb1.sol:3

*/

//pragma solidity^0.7;
pragma so

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:25.004372
Transaction Length: 1
Severity: High
Contract: CJOArtsGateway
Function name: bulkWithdraw(address[],uint256[],uint256[],bytes32[])
PC address: 2154
Estimated Gas Usage: 932 - 1027
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x331513bedb4ec777e950201a6ca6848d198bbbb1.sol:5

olidity^0.7;
pragma s

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:48.795063
Transaction Length: 1
Severity: High
Contract: CJOArtsGateway
Function name: bulkWithdraw(address[],uint256[],uint256[],bytes32[])
PC address: 2156
Estimated Gas Usage: 932 - 1027
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x331513bedb4ec777e950201a6ca6848d198bbbb1.sol:3

*/

//pragma solidity^0.7;
pragma so

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:02:05.278073
Transaction Length: 1
Severity: Low
Contract: CJOArtsGateway
Function name: bulkDeposit(uint256[])
PC address: 5889
Estimated Gas Usage: 4470 - 40683
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop3/0x331513bedb4ec777e950201a6ca6848d198bbbb1.sol:232

assetContract.safeTransferFrom(owner, address(this), _tokenId)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xe2d8caf342f64878c17dd8f493247f323cdc6a48.sol
Total states:581
2.283444
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xcb56383ce19adfe53dbd93a7bebcc242bd3de47e.sol
Total states:7265
41.568058
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:00.310367
Transaction Length: 0
Severity: Low
Contract: DOSProxy
Function name: constructor
PC address: 1123
Estimated Gas Usage: 108718 - 549872
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop3/0xcb56383ce19adfe53dbd93a7bebcc242bd3de47e.sol:754

DOSPaymentInterface(addressBridge.getPaymentAddress()).setPaymentMethod(proxyFundsAddr, proxyFundsTokenAddr)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.610004
Transaction Length: 1
Severity: High
Contract: DOSProxy
Function name: triggerCallback(uint256,uint8,bytes,uint256[2])
PC address: 2574
Estimated Gas Usage: 512 - 607
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xcb56383ce19adfe53dbd93a7bebcc242bd3de47e.sol:3



*/



//pragma solidity ^0.5.0;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:19.928148
Transaction Length: 1
Severity: High
Contract: DOSProxy
Function name: query(address,uint256,string,string)
PC address: 3737
Estimated Gas Usage: 511 - 606
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xcb56383ce19adfe53dbd93a7bebcc242bd3de47e.sol:3



*/



//pragma solidity ^0.5.0;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:25.376194
Transaction Length: 1
Severity: High
Contract: DOSProxy
Function name: query(address,uint256,string,string)
PC address: 3822
Estimated Gas Usage: 687 - 782
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xcb56383ce19adfe53dbd93a7bebcc242bd3de47e.sol:3



*/



//pragma solidity ^0.5.0;
p

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:36.186737
Transaction Length: 1
Severity: Medium
Contract: DOSProxy
Function name: registerGroupPubKey(uint256,uint256[4])
PC address: 3935
Estimated Gas Usage: 5383 - 75564
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 22044
Offset: 22255
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop3/0xcb56383ce19adfe53dbd93a7bebcc242bd3de47e.sol:2224

function registerGroupPubKey(uint groupId, uint[4] calldata suggestedPubKey)

        external

        fromValidStakingNode

    {

        PendingGroup storage pgrp = pendingGroups[groupId];

        if (pgrp.groupId == 0) {

            emit LogNoPendingGroup(groupId);

            return;

        }



        require(pgrp.memberList[msg.sender] != address(0), "not-from-authorized-grp-member");



        bytes32 hashedPubKey = keccak256(abi.encodePacked(

            suggestedPubKey[0], suggestedPubKey[1], suggestedPubKey[2], suggestedPubKey[3]));

        pgrp.pubKeyCounts[hashedPubKey]++;

        emit LogPublicKeySuggested(groupId, pgrp.pubKeyCounts[hashedPubKey]);

        if (pgrp.pubKeyCounts[hashedPubKey] > groupSize / 2) {

            address[] memory memberArray = new address[](groupSize);

            uint idx = 0;

            address member = pgrp.memberList[HEAD_A];

            while (member != HEAD_A) {

                memberArray[idx++] = member;

                // Update nodeToGroupIdList[member] with new group id.

                insertToListHead(nodeToGroupIdList[member], groupId);

                member = pgrp.memberList[member];

            }



            workingGroupIds.push(groupId);

            workingGroups[groupId] = Group(

                groupId,

                BN256.G2Point([suggestedPubKey[0], suggestedPubKey[1]], [suggestedPubKey[2], suggestedPubKey[3]]),

                numPendingGroups * lifeDiversity,

                block.number,

                memberArray

            );

            // Update pendingGroupList

            (uint prev, bool removed) = removeIdFromList(pendingGroupList, groupId);

            // Reset pendingGroupTail if necessary.

            if (removed && pendingGroupTail == groupId) {

                pendingGroupTail = prev;

            }

            // Update pendingGroup

            delete pendingGroups[groupId];

            numPendingGroups--;

            emit LogPendingGroupRemoved(groupId);

            emit LogPublicKeyAccepted(groupId, suggestedPubKey, workingGroupIds.length);

        }

    }

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:05.743175
Transaction Length: 1
Severity: Low
Contract: DOSProxy
Function name: workingGroupIds(uint256)
PC address: 13380
Estimated Gas Usage: 790 - 885
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xcb56383ce19adfe53dbd93a7bebcc242bd3de47e.sol:584

uint[] public workingGroupIds

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:16.540016
Transaction Length: 1
Severity: Low
Contract: DOSProxy
Function name: getGroupPubKey(uint256)
PC address: 17393
Estimated Gas Usage: 862 - 3449
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xcb56383ce19adfe53dbd93a7bebcc242bd3de47e.sol:1916

workingGroupIds[idx]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:19.088059
Transaction Length: 1
Severity: Low
Contract: DOSProxy
Function name: expiredWorkingGroupIds(uint256)
PC address: 19254
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xcb56383ce19adfe53dbd93a7bebcc242bd3de47e.sol:586

uint[] public expiredWorkingGroupIds

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xd2abc20b2a7bfdf4c7e126a669d2c43293845c7d.sol
Total states:2918
88.120832
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.390187
Transaction Length: 1
Severity: High
Contract: GuardiansMigrationV1V2
Function name: getGuardiansV2AddressBatch(address[])
PC address: 312
Estimated Gas Usage: 318 - 413
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xd2abc20b2a7bfdf4c7e126a669d2c43293845c7d.sol:5

olidity 0.6.12;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.691698
Transaction Length: 1
Severity: High
Contract: GuardiansMigrationV1V2
Function name: getGuardiansV2AddressBatch(address[])
PC address: 314
Estimated Gas Usage: 318 - 413
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xd2abc20b2a7bfdf4c7e126a669d2c43293845c7d.sol:3

*/

//pragma solidity 0.6.12;
pragma

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x4611295e90392f7d3279a4df906721b7eab774d4.sol
Total states:3102
2.906278
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xa8e44bb386766f597a22fcdc14d82a9c700dfb70.sol
Total states:6543
1428.284453
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.535010
Transaction Length: 1
Severity: Low
Contract: hashelot_dayrings
Function name: stackPlayers(uint256)
PC address: 616
Estimated Gas Usage: 701 - 796
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xa8e44bb386766f597a22fcdc14d82a9c700dfb70.sol:30

address payable [] public stackPlayers

--------------------

==== Dependence on predictable environment variable ====
SWC ID: 120
FOUND TIME: 0:23:43.651316
Transaction Length: 2
Severity: Low
Contract: hashelot_dayrings
Function name: depositStack()
PC address: 1160
Estimated Gas Usage: 3031 - 3737
Sending of Ether depends on a predictable variable.
The contract sends Ether depending on the values of the following variables:
- block.number
- block.number
Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and/or can be manipulated by a malicious miner. Don't use them for random number generation or to make critical decisions.
--------------------
In file: ../../contracts/m_loop/loop3/0xa8e44bb386766f597a22fcdc14d82a9c700dfb70.sol:248

msg.sender.transfer(msg.value)

--------------------

==== Dependence on predictable environment variable ====
SWC ID: 120
FOUND TIME: 0:00:00.754035
Transaction Length: 1
Severity: Low
Contract: hashelot_dayrings
Function name: depositStack()
PC address: 1265
Estimated Gas Usage: 2470 - 2751
Sending of Ether depends on a predictable variable.
The contract sends Ether depending on the values of the following variables:
- block.number
Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and/or can be manipulated by a malicious miner. Don't use them for random number generation or to make critical decisions.
--------------------
In file: ../../contracts/m_loop/loop3/0xa8e44bb386766f597a22fcdc14d82a9c700dfb70.sol:260

msg.sender.transfer(playerChange)

--------------------

==== Dependence on predictable environment variable ====
SWC ID: 120
FOUND TIME: 0:22:43.939514
Transaction Length: 2
Severity: Low
Contract: hashelot_dayrings
Function name: closeBet()
PC address: 2822
Estimated Gas Usage: 6216 - 8336
Sending of Ether depends on a predictable variable.
The contract sends Ether depending on the values of the following variables:
- block.number
- block.number
Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and/or can be manipulated by a malicious miner. Don't use them for random number generation or to make critical decisions.
--------------------
In file: ../../contracts/m_loop/loop3/0xa8e44bb386766f597a22fcdc14d82a9c700dfb70.sol:156

owner.transfer(_ownerShare)

--------------------

==== Dependence on predictable environment variable ====
SWC ID: 120
FOUND TIME: 0:22:50.998620
Transaction Length: 2
Severity: Low
Contract: hashelot_dayrings
Function name: closeBet()
PC address: 2893
Estimated Gas Usage: 7020 - 43326
Sending of Ether depends on a predictable variable.
The contract sends Ether depending on the values of the following variables:
- block.number
- block.number
Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and/or can be manipulated by a malicious miner. Don't use them for random number generation or to make critical decisions.
--------------------
In file: ../../contracts/m_loop/loop3/0xa8e44bb386766f597a22fcdc14d82a9c700dfb70.sol:162

_winnerKey.transfer(_winnerShare)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x041997609e1c5acdfcca62b8a48e285d78d8bad9.sol
Total states:2324
1.780277
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x2fa51d35d6731eb4e0e26229f0180e2d249ea0a5.sol
Total states:822
10.167865
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x88d73c2ad07b026b5cba10c3186c9dd107f171a9.sol
Total states:1880
90.077223
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.300384
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShip(address[])
PC address: 360
Estimated Gas Usage: 342 - 437
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x88d73c2ad07b026b5cba10c3186c9dd107f171a9.sol:5

penzeppelin-solidity/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.740048
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShip(address[])
PC address: 362
Estimated Gas Usage: 342 - 437
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x88d73c2ad07b026b5cba10c3186c9dd107f171a9.sol:3

*/

// File: openzeppelin-solidity/c

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:35.750654
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShipWithHowMany(address[],uint256)
PC address: 776
Estimated Gas Usage: 341 - 436
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x88d73c2ad07b026b5cba10c3186c9dd107f171a9.sol:5

penzeppelin-solidity/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:38.510852
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShipWithHowMany(address[],uint256)
PC address: 778
Estimated Gas Usage: 341 - 436
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x88d73c2ad07b026b5cba10c3186c9dd107f171a9.sol:3

*/

// File: openzeppelin-solidity/c

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:28.574941
Transaction Length: 1
Severity: Low
Contract: BeneficiaryOperations
Function name: allOperations(uint256)
PC address: 1715
Estimated Gas Usage: 701 - 796
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x88d73c2ad07b026b5cba10c3186c9dd107f171a9.sol:386

bytes32[] public allOperations

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:24.807400
Transaction Length: 1
Severity: Low
Contract: BeneficiaryOperations
Function name: beneficiaries(uint256)
PC address: 4636
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x88d73c2ad07b026b5cba10c3186c9dd107f171a9.sol:385

address[] public beneficiaries

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xe892c56c86e3ae682b0aa644cbe87f2aca3bd907.sol
Total states:28391
175.664536
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:42.792605
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3645
Estimated Gas Usage: 1025 - 1500
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xe892c56c86e3ae682b0aa644cbe87f2aca3bd907.sol:52

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:53.518996
Transaction Length: 2
Severity: High
Contract: ERC20Burnable
Function name: increaseAllowance(address,uint256)
PC address: 3818
Estimated Gas Usage: 1025 - 1500
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xe892c56c86e3ae682b0aa644cbe87f2aca3bd907.sol:52

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:29.297305
Transaction Length: 2
Severity: High
Contract: ERC20Pausable
Function name: increaseAllowance(address,uint256)
PC address: 6493
Estimated Gas Usage: 1556 - 2361
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xe892c56c86e3ae682b0aa644cbe87f2aca3bd907.sol:52

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xb7bc7b0a32455f7e7a924f832ca4f0a0ac3b6b88.sol
Total states:2301
2.157229
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.039449
Transaction Length: 0
Severity: High
Contract: ERC20
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xb7bc7b0a32455f7e7a924f832ca4f0a0ac3b6b88.sol:12

ily result
 * in bugs, because programmers 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.041573
Transaction Length: 0
Severity: High
Contract: WarLordToken
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xb7bc7b0a32455f7e7a924f832ca4f0a0ac3b6b88.sol:12

ily result
 * in bugs, because programmers 

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x6ea6dbe9ae0f278bd35d53d8bc2e7a364c7d357d.sol
Total states:1759
5.790204
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xb7df11edd50afbcfcf93d0fa3fc8bf11ea36175a.sol
Total states:35650
161.67096
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.277481
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1004
Estimated Gas Usage: 417 - 512
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xb7df11edd50afbcfcf93d0fa3fc8bf11ea36175a.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.475911
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1006
Estimated Gas Usage: 417 - 512
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xb7df11edd50afbcfcf93d0fa3fc8bf11ea36175a.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.290020
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1089
Estimated Gas Usage: 593 - 688
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xb7df11edd50afbcfcf93d0fa3fc8bf11ea36175a.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:23.123830
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1091
Estimated Gas Usage: 593 - 688
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xb7df11edd50afbcfcf93d0fa3fc8bf11ea36175a.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.716269
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1149
Estimated Gas Usage: 440 - 535
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xb7df11edd50afbcfcf93d0fa3fc8bf11ea36175a.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.587427
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1151
Estimated Gas Usage: 440 - 535
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xb7df11edd50afbcfcf93d0fa3fc8bf11ea36175a.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.370189
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1234
Estimated Gas Usage: 616 - 711
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xb7df11edd50afbcfcf93d0fa3fc8bf11ea36175a.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:22.518365
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1236
Estimated Gas Usage: 616 - 711
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xb7df11edd50afbcfcf93d0fa3fc8bf11ea36175a.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.013234
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeBP(uint256)
PC address: 2585
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xb7df11edd50afbcfcf93d0fa3fc8bf11ea36175a.sol:784

uint[] public bonusRangeBP

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.384164
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3595
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xb7df11edd50afbcfcf93d0fa3fc8bf11ea36175a.sol:1226

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:04.078773
Transaction Length: 2
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3595
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xb7df11edd50afbcfcf93d0fa3fc8bf11ea36175a.sol:1226

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:37.068284
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeStart(uint256)
PC address: 6017
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xb7df11edd50afbcfcf93d0fa3fc8bf11ea36175a.sol:783

uint[] public bonusRangeStart

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:26.049792
Transaction Length: 1
Severity: Low
Contract: LidStaking
Function name: stakeHandlers(uint256)
PC address: 6118
Estimated Gas Usage: 790 - 885
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xb7df11edd50afbcfcf93d0fa3fc8bf11ea36175a.sol:961

IStakeHandler[] public stakeHandlers

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.682941
Transaction Length: 2
Severity: High
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6315
Estimated Gas Usage: 1699 - 2124
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xb7df11edd50afbcfcf93d0fa3fc8bf11ea36175a.sol:1111

stakeHandlers.length-1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:07.817517
Transaction Length: 2
Severity: Low
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6326
Estimated Gas Usage: 1709 - 2134
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xb7df11edd50afbcfcf93d0fa3fc8bf11ea36175a.sol:1111

stakeHandlers[stakeHandlers.length-1]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:33.454518
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: calculateRatePerEth(uint256,uint256,uint256)
PC address: 6866
Estimated Gas Usage: 955 - 1050
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xb7df11edd50afbcfcf93d0fa3fc8bf11ea36175a.sol:162

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.463241
Transaction Length: 1
Severity: High
Contract: LidStaking
Function name: findTaxAmount(uint256,uint256)
PC address: 13348
Estimated Gas Usage: 474 - 569
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xb7df11edd50afbcfcf93d0fa3fc8bf11ea36175a.sol:162

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:34.957635
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPoolBPs(uint256)
PC address: 15440
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xb7df11edd50afbcfcf93d0fa3fc8bf11ea36175a.sol:1227

uint[] public tokenPoolBPs

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xecb5054213ead4c5e2d3f2033b8e8afb41715ba1.sol
Total states:421
0.422475
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xbb2c91c764fc1cf07d5c02671e4eba4d829a957f.sol
Total states:149
2.703806
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xaf29a807c5631770b2a757868a6f0b201de009aa.sol
Total states:1687
1.583663
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xbe1bb41252ddea4781c04aec56f427dc582e9f9b.sol
Total states:2324
1.866552
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xfc04c4b64422af861d771d9bc6b014e38ad1e511.sol
Total states:14119
73.085662
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.947158
Transaction Length: 1
Severity: Low
Contract: InternalModule
Function name: _contractOwners(uint256)
PC address: 550
Estimated Gas Usage: 634 - 729
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xfc04c4b64422af861d771d9bc6b014e38ad1e511.sol:26

address payable[] public _contractOwners = [

        address(0xc99D13544297d5baD9e0b0Ca0E94A4E614312F33)

    ]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.080251
Transaction Length: 1
Severity: High
Contract: RecommendSmallTeam
Function name: Developer_WriteRelation(address,address[],bytes6[],bool)
PC address: 1161
Estimated Gas Usage: 441 - 536
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xfc04c4b64422af861d771d9bc6b014e38ad1e511.sol:9

ma solidity >=0.5.0 <

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.276286
Transaction Length: 1
Severity: High
Contract: RecommendSmallTeam
Function name: Developer_WriteRelation(address,address[],bytes6[],bool)
PC address: 1163
Estimated Gas Usage: 441 - 536
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xfc04c4b64422af861d771d9bc6b014e38ad1e511.sol:3



*/



//pragma solidity >=0.5.0 <0

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.890374
Transaction Length: 1
Severity: Low
Contract: KContract
Function name: _KContractOwners(uint256)
PC address: 1246
Estimated Gas Usage: 723 - 818
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xfc04c4b64422af861d771d9bc6b014e38ad1e511.sol:197

address payable[] public _KContractOwners = [

        address(0xc99D13544297d5baD9e0b0Ca0E94A4E614312F33)

    ]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.059394
Transaction Length: 1
Severity: Low
Contract: KDoctor
Function name: _KContractOwners(uint256)
PC address: 1246
Estimated Gas Usage: 723 - 818
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xfc04c4b64422af861d771d9bc6b014e38ad1e511.sol:197

address payable[] public _KContractOwners = [

        address(0xc99D13544297d5baD9e0b0Ca0E94A4E614312F33)

    ]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.463859
Transaction Length: 1
Severity: Low
Contract: KState
Function name: _KContractOwners(uint256)
PC address: 1246
Estimated Gas Usage: 723 - 818
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xfc04c4b64422af861d771d9bc6b014e38ad1e511.sol:197

address payable[] public _KContractOwners = [

        address(0xc99D13544297d5baD9e0b0Ca0E94A4E614312F33)

    ]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.514178
Transaction Length: 1
Severity: High
Contract: RecommendSmallTeam
Function name: Developer_WriteRelation(address,address[],bytes6[],bool)
PC address: 1246
Estimated Gas Usage: 617 - 712
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xfc04c4b64422af861d771d9bc6b014e38ad1e511.sol:9

ma solidity >=0.5.0 <

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:21.737550
Transaction Length: 1
Severity: High
Contract: RecommendSmallTeam
Function name: Developer_WriteRelation(address,address[],bytes6[],bool)
PC address: 1248
Estimated Gas Usage: 617 - 712
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xfc04c4b64422af861d771d9bc6b014e38ad1e511.sol:3



*/



//pragma solidity >=0.5.0 <0

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.518609
Transaction Length: 1
Severity: Low
Contract: Recommend
Function name: _KContractOwners(uint256)
PC address: 2647
Estimated Gas Usage: 723 - 818
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xfc04c4b64422af861d771d9bc6b014e38ad1e511.sol:197

address payable[] public _KContractOwners = [

        address(0xc99D13544297d5baD9e0b0Ca0E94A4E614312F33)

    ]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:34.191589
Transaction Length: 1
Severity: Low
Contract: RecommendSmallTeam
Function name: _KContractOwners(uint256)
PC address: 7120
Estimated Gas Usage: 767 - 862
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xfc04c4b64422af861d771d9bc6b014e38ad1e511.sol:197

address payable[] public _KContractOwners = [

        address(0xc99D13544297d5baD9e0b0Ca0E94A4E614312F33)

    ]

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x5ddb9fa8d6ec60bba1e8fbc22379f2e7a8e0ff34.sol
Total states:1880
99.977783
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.292490
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShip(address[])
PC address: 360
Estimated Gas Usage: 342 - 437
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x5ddb9fa8d6ec60bba1e8fbc22379f2e7a8e0ff34.sol:5

olidity ^0.5.9;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.688937
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShip(address[])
PC address: 362
Estimated Gas Usage: 342 - 437
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x5ddb9fa8d6ec60bba1e8fbc22379f2e7a8e0ff34.sol:3

*/

//pragma solidity ^0.5.9;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:37.376364
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShipWithHowMany(address[],uint256)
PC address: 776
Estimated Gas Usage: 341 - 436
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x5ddb9fa8d6ec60bba1e8fbc22379f2e7a8e0ff34.sol:5

olidity ^0.5.9;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:40.229379
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShipWithHowMany(address[],uint256)
PC address: 778
Estimated Gas Usage: 341 - 436
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x5ddb9fa8d6ec60bba1e8fbc22379f2e7a8e0ff34.sol:3

*/

//pragma solidity ^0.5.9;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.226397
Transaction Length: 0
Severity: High
Contract: TokenVesting
Function name: constructor
PC address: 937
Estimated Gas Usage: 7924 - 32078
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x5ddb9fa8d6ec60bba1e8fbc22379f2e7a8e0ff34.sol:112

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.177461
Transaction Length: 0
Severity: High
Contract: AkropolisTokenVesting
Function name: constructor
PC address: 1201
Estimated Gas Usage: 7908 - 31969
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x5ddb9fa8d6ec60bba1e8fbc22379f2e7a8e0ff34.sol:112

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:29.164856
Transaction Length: 1
Severity: Low
Contract: BeneficiaryOperations
Function name: allOperations(uint256)
PC address: 1715
Estimated Gas Usage: 701 - 796
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x5ddb9fa8d6ec60bba1e8fbc22379f2e7a8e0ff34.sol:571

bytes32[] public allOperations

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:32.548232
Transaction Length: 1
Severity: Low
Contract: BeneficiaryOperations
Function name: beneficiaries(uint256)
PC address: 4636
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x5ddb9fa8d6ec60bba1e8fbc22379f2e7a8e0ff34.sol:570

address[] public beneficiaries

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x9b935ca1f83ec7876b275a47ddae8603626860d5.sol
Total states:5597
286.893837
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.887147
Transaction Length: 1
Severity: High
Contract: ERC721Holder
Function name: onERC721Received(address,address,uint256,bytes)
PC address: 234
Estimated Gas Usage: 389 - 484
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x9b935ca1f83ec7876b275a47ddae8603626860d5.sol:3

*/

/**
 *Submitted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.068500
Transaction Length: 1
Severity: High
Contract: CJOFighterGateway
Function name: onERC721Received(address,address,uint256,bytes)
PC address: 572
Estimated Gas Usage: 457 - 552
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x9b935ca1f83ec7876b275a47ddae8603626860d5.sol:3

*/

/**
 *Submitted for verificatio

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:01:30.627596
Transaction Length: 1
Severity: Medium
Contract: CJOFighterGateway
Function name: deposit(uint256)
PC address: 1602
Estimated Gas Usage: 6115 - 76865
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 5445
Offset: 5889
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop3/0x9b935ca1f83ec7876b275a47ddae8603626860d5.sol:233

function deposit(uint256 _tokenId) public whenNotPaused() {
        address owner = assetContract.ownerOf(_tokenId);
        require(owner == msg.sender, "msg.sender must be _tokenId owner");
        assetContract.safeTransferFrom(owner, address(this), _tokenId);
        emit Deposit(owner, _tokenId);
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:39.064284
Transaction Length: 1
Severity: High
Contract: CJOFighterGateway
Function name: bulkDeposit(uint256[])
PC address: 1697
Estimated Gas Usage: 384 - 479
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x9b935ca1f83ec7876b275a47ddae8603626860d5.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:42.348042
Transaction Length: 1
Severity: High
Contract: CJOFighterGateway
Function name: bulkDeposit(uint256[])
PC address: 1699
Estimated Gas Usage: 384 - 479
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x9b935ca1f83ec7876b275a47ddae8603626860d5.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:24.252590
Transaction Length: 1
Severity: High
Contract: CJOFighterGateway
Function name: bulkWithdraw(address[],uint256[],uint256[],bytes32[])
PC address: 1899
Estimated Gas Usage: 404 - 499
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x9b935ca1f83ec7876b275a47ddae8603626860d5.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:27.717530
Transaction Length: 1
Severity: High
Contract: CJOFighterGateway
Function name: bulkWithdraw(address[],uint256[],uint256[],bytes32[])
PC address: 1901
Estimated Gas Usage: 404 - 499
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x9b935ca1f83ec7876b275a47ddae8603626860d5.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:32.524185
Transaction Length: 1
Severity: High
Contract: CJOFighterGateway
Function name: bulkWithdraw(address[],uint256[],uint256[],bytes32[])
PC address: 1984
Estimated Gas Usage: 580 - 675
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x9b935ca1f83ec7876b275a47ddae8603626860d5.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:43.258275
Transaction Length: 1
Severity: High
Contract: CJOFighterGateway
Function name: bulkWithdraw(address[],uint256[],uint256[],bytes32[])
PC address: 1986
Estimated Gas Usage: 580 - 675
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x9b935ca1f83ec7876b275a47ddae8603626860d5.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:57.619357
Transaction Length: 1
Severity: High
Contract: CJOFighterGateway
Function name: bulkWithdraw(address[],uint256[],uint256[],bytes32[])
PC address: 2069
Estimated Gas Usage: 756 - 851
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x9b935ca1f83ec7876b275a47ddae8603626860d5.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:15.679547
Transaction Length: 1
Severity: High
Contract: CJOFighterGateway
Function name: bulkWithdraw(address[],uint256[],uint256[],bytes32[])
PC address: 2071
Estimated Gas Usage: 756 - 851
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x9b935ca1f83ec7876b275a47ddae8603626860d5.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:34.712894
Transaction Length: 1
Severity: High
Contract: CJOFighterGateway
Function name: bulkWithdraw(address[],uint256[],uint256[],bytes32[])
PC address: 2154
Estimated Gas Usage: 932 - 1027
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x9b935ca1f83ec7876b275a47ddae8603626860d5.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:05.684214
Transaction Length: 1
Severity: High
Contract: CJOFighterGateway
Function name: bulkWithdraw(address[],uint256[],uint256[],bytes32[])
PC address: 2156
Estimated Gas Usage: 932 - 1027
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x9b935ca1f83ec7876b275a47ddae8603626860d5.sol:3

*/

/**
 *Submitted for verification

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:02:06.110367
Transaction Length: 1
Severity: Low
Contract: CJOFighterGateway
Function name: bulkDeposit(uint256[])
PC address: 5889
Estimated Gas Usage: 4470 - 40683
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop3/0x9b935ca1f83ec7876b275a47ddae8603626860d5.sol:236

assetContract.safeTransferFrom(owner, address(this), _tokenId)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x4690EB613F6CE73f628C00D65c9D710DEE205c91.sol
Total states:426
0.768032
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xf1a6bed23411d709069ddbd55a04700f9493476f.sol
Total states:10013
46.760464
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.516654
Transaction Length: 1
Severity: High
Contract: Liquidity
Function name: totalRewarded()
PC address: 1667
Estimated Gas Usage: 2933 - 37922
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xf1a6bed23411d709069ddbd55a04700f9493476f.sol:5

dity ^0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.430765
Transaction Length: 1
Severity: High
Contract: PoolGetters
Function name: totalRewarded()
PC address: 1667
Estimated Gas Usage: 2933 - 37922
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xf1a6bed23411d709069ddbd55a04700f9493476f.sol:5

dity ^0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.456952
Transaction Length: 1
Severity: High
Contract: PoolSetters
Function name: totalRewarded()
PC address: 1667
Estimated Gas Usage: 2933 - 37922
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xf1a6bed23411d709069ddbd55a04700f9493476f.sol:5

dity ^0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.276546
Transaction Length: 1
Severity: High
Contract: Liquidity
Function name: totalRewarded()
PC address: 1670
Estimated Gas Usage: 2933 - 37922
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xf1a6bed23411d709069ddbd55a04700f9493476f.sol:3



//pragma solidity ^0.5.17;
pragma solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.213625
Transaction Length: 1
Severity: High
Contract: PoolGetters
Function name: totalRewarded()
PC address: 1670
Estimated Gas Usage: 2933 - 37922
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xf1a6bed23411d709069ddbd55a04700f9493476f.sol:3



//pragma solidity ^0.5.17;
pragma solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.238733
Transaction Length: 1
Severity: High
Contract: PoolSetters
Function name: totalRewarded()
PC address: 1670
Estimated Gas Usage: 2933 - 37922
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xf1a6bed23411d709069ddbd55a04700f9493476f.sol:3



//pragma solidity ^0.5.17;
pragma solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.002832
Transaction Length: 1
Severity: High
Contract: Liquidity
Function name: totalRewarded()
PC address: 1682
Estimated Gas Usage: 2933 - 37922
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xf1a6bed23411d709069ddbd55a04700f9493476f.sol:1194

dollar().balanceOf(address(this))

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.909962
Transaction Length: 1
Severity: High
Contract: PoolGetters
Function name: totalRewarded()
PC address: 1682
Estimated Gas Usage: 2933 - 37922
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xf1a6bed23411d709069ddbd55a04700f9493476f.sol:1194

dollar().balanceOf(address(this))

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.936706
Transaction Length: 1
Severity: High
Contract: PoolSetters
Function name: totalRewarded()
PC address: 1682
Estimated Gas Usage: 2933 - 37922
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xf1a6bed23411d709069ddbd55a04700f9493476f.sol:1194

dollar().balanceOf(address(this))

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:03.038286
Transaction Length: 1
Severity: High
Contract: Liquidity
Function name: totalRewarded()
PC address: 2749
Estimated Gas Usage: 2933 - 37922
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xf1a6bed23411d709069ddbd55a04700f9493476f.sol:19

s library instead of th

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:02.951914
Transaction Length: 1
Severity: High
Contract: PoolGetters
Function name: totalRewarded()
PC address: 2749
Estimated Gas Usage: 2933 - 37922
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xf1a6bed23411d709069ddbd55a04700f9493476f.sol:19

s library instead of th

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:02.975788
Transaction Length: 1
Severity: High
Contract: PoolSetters
Function name: totalRewarded()
PC address: 2749
Estimated Gas Usage: 2933 - 37922
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xf1a6bed23411d709069ddbd55a04700f9493476f.sol:19

s library instead of th

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xdec090a12f2e280b089daa225892d9efa8ed0ee8.sol
Total states:77
2.938334
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x24Ad4499218F2eFfD3d9663420e319cb989f3C80.sol
Total states:90
1.55322
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol
Total states:43926
6792.63983
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.165334
Transaction Length: 1
Severity: High
Contract: ClaimIssuer
Function name: isClaimRevoked(bytes)
PC address: 754
Estimated Gas Usage: 408 - 503
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:3



*/



// File: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:48.526599
Transaction Length: 1
Severity: High
Contract: ClaimIssuer
Function name: isClaimValid(address,bytes32,uint256,bytes,bytes)
PC address: 1030
Estimated Gas Usage: 517 - 612
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:3



*/



// File: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.244384
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchSetAddressFrozen(address[],bool[])
PC address: 1082
Estimated Gas Usage: 386 - 481
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:9

e: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.954969
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchSetAddressFrozen(address[],bool[])
PC address: 1084
Estimated Gas Usage: 386 - 481
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:3



*/



// File: @onchain-id/solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.871911
Transaction Length: 1
Severity: High
Contract: ERC734
Function name: execute(address,uint256,bytes)
PC address: 1102
Estimated Gas Usage: 399 - 494
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:3



*/



// File: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:19.516423
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchSetAddressFrozen(address[],bool[])
PC address: 1167
Estimated Gas Usage: 562 - 657
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:9

e: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:51.130467
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchSetAddressFrozen(address[],bool[])
PC address: 1169
Estimated Gas Usage: 562 - 657
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:3



*/



// File: @onchain-id/solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:59.721336
Transaction Length: 1
Severity: High
Contract: ClaimIssuer
Function name: isClaimValid(address,bytes32,uint256,bytes,bytes)
PC address: 1181
Estimated Gas Usage: 859 - 3636
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:3



*/



// File: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.071485
Transaction Length: 1
Severity: High
Contract: Identity
Function name: addClaim(uint256,uint256,address,bytes,bytes,string)
PC address: 1396
Estimated Gas Usage: 450 - 545
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:3



*/



// File: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:14.129820
Transaction Length: 1
Severity: High
Contract: Identity
Function name: addClaim(uint256,uint256,address,bytes,bytes,string)
PC address: 1547
Estimated Gas Usage: 792 - 3569
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:3



*/



// File: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:29.478855
Transaction Length: 1
Severity: High
Contract: ERC734
Function name: getKeyPurposes(bytes32)
PC address: 1601
Estimated Gas Usage: 1442 - 2479
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:423

function getKeyPurposes(bytes32 _key)

    public

    view

    returns(uint256[] memory _purposes)

    {

        return (keys[_key].purposes);

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:43.453646
Transaction Length: 1
Severity: High
Contract: ERC734
Function name: getKeyPurposes(bytes32)
PC address: 1641
Estimated Gas Usage: 1592 - 3005
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:423

function getKeyPurposes(bytes32 _key)

    public

    view

    returns(uint256[] memory _purposes)

    {

        return (keys[_key].purposes);

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:33.153185
Transaction Length: 1
Severity: High
Contract: Identity
Function name: addClaim(uint256,uint256,address,bytes,bytes,string)
PC address: 1698
Estimated Gas Usage: 1134 - 6593
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:3



*/



// File: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:39.358726
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchForcedTransfer(address[],address[],uint256[])
PC address: 1826
Estimated Gas Usage: 452 - 547
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:9

e: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:42.499158
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchForcedTransfer(address[],address[],uint256[])
PC address: 1828
Estimated Gas Usage: 452 - 547
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:3



*/



// File: @onchain-id/solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:48.280923
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchForcedTransfer(address[],address[],uint256[])
PC address: 1911
Estimated Gas Usage: 628 - 723
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:9

e: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:04.025594
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchForcedTransfer(address[],address[],uint256[])
PC address: 1913
Estimated Gas Usage: 628 - 723
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:3



*/



// File: @onchain-id/solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:51.521385
Transaction Length: 1
Severity: High
Contract: Identity
Function name: execute(address,uint256,bytes)
PC address: 1947
Estimated Gas Usage: 421 - 516
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:3



*/



// File: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:36.354872
Transaction Length: 1
Severity: High
Contract: Identity
Function name: execute(address,uint256,bytes)
PC address: 1989
Estimated Gas Usage: 19184 - 83569
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:645

function execute(address _to, uint256 _value, bytes memory _data)

    public

    payable

    returns (uint256 executionId)

    {

        require(!executions[executionNonce].executed, "Already executed");

        executions[executionNonce].to = _to;

        executions[executionNonce].value = _value;

        executions[executionNonce].data = _data;



        emit ExecutionRequested(executionNonce, _to, _value, _data);



        if (keyHasPurpose(keccak256(abi.encode(msg.sender)), 2)) {

            approve(executionNonce, true);

        }



        executionNonce++;

        return executionNonce-1;

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:19.038958
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchForcedTransfer(address[],address[],uint256[])
PC address: 1996
Estimated Gas Usage: 804 - 899
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:9

e: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:46.638991
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchForcedTransfer(address[],address[],uint256[])
PC address: 1998
Estimated Gas Usage: 804 - 899
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:3



*/



// File: @onchain-id/solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:07.712198
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchUnfreezePartialTokens(address[],uint256[])
PC address: 2117
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:9

e: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:10.818723
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchUnfreezePartialTokens(address[],uint256[])
PC address: 2119
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:3



*/



// File: @onchain-id/solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:16.626386
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchUnfreezePartialTokens(address[],uint256[])
PC address: 2202
Estimated Gas Usage: 539 - 634
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:9

e: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:33.108348
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchUnfreezePartialTokens(address[],uint256[])
PC address: 2204
Estimated Gas Usage: 539 - 634
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:3



*/



// File: @onchain-id/solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:47:12.554684
Transaction Length: 1
Severity: High
Contract: Identity
Function name: getClaim(bytes32)
PC address: 2314
Estimated Gas Usage: 5415 - 8771
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:1325

function getClaim(bytes32 _claimId)

    public

    view

    returns(

        uint256 topic,

        uint256 scheme,

        address issuer,

        bytes memory signature,

        bytes memory data,

        string memory uri

    )

    {

        return (

            claims[_claimId].topic,

            claims[_claimId].scheme,

            claims[_claimId].issuer,

            claims[_claimId].signature,

            claims[_claimId].data,

            claims[_claimId].uri

        );

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:18:52.154491
Transaction Length: 1
Severity: High
Contract: Identity
Function name: getClaim(bytes32)
PC address: 2416
Estimated Gas Usage: 5569 - 9301
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:1325

function getClaim(bytes32 _claimId)

    public

    view

    returns(

        uint256 topic,

        uint256 scheme,

        address issuer,

        bytes memory signature,

        bytes memory data,

        string memory uri

    )

    {

        return (

            claims[_claimId].topic,

            claims[_claimId].scheme,

            claims[_claimId].issuer,

            claims[_claimId].signature,

            claims[_claimId].data,

            claims[_claimId].uri

        );

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:13:54.652700
Transaction Length: 1
Severity: High
Contract: Identity
Function name: getClaim(bytes32)
PC address: 2518
Estimated Gas Usage: 5723 - 9831
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:1325

function getClaim(bytes32 _claimId)

    public

    view

    returns(

        uint256 topic,

        uint256 scheme,

        address issuer,

        bytes memory signature,

        bytes memory data,

        string memory uri

    )

    {

        return (

            claims[_claimId].topic,

            claims[_claimId].scheme,

            claims[_claimId].issuer,

            claims[_claimId].signature,

            claims[_claimId].data,

            claims[_claimId].uri

        );

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:04.677110
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchTransfer(address[],uint256[])
PC address: 2673
Estimated Gas Usage: 430 - 525
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:9

e: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:08.688791
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchTransfer(address[],uint256[])
PC address: 2675
Estimated Gas Usage: 430 - 525
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:3



*/



// File: @onchain-id/solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:14.885093
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchTransfer(address[],uint256[])
PC address: 2758
Estimated Gas Usage: 606 - 701
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:9

e: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:35.094360
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchTransfer(address[],uint256[])
PC address: 2760
Estimated Gas Usage: 606 - 701
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:3



*/



// File: @onchain-id/solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.931348
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3044
Estimated Gas Usage: 989 - 1464
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:2017

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:10.455585
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchFreezePartialTokens(address[],uint256[])
PC address: 4219
Estimated Gas Usage: 450 - 545
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:9

e: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:14.190869
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchFreezePartialTokens(address[],uint256[])
PC address: 4221
Estimated Gas Usage: 450 - 545
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:3



*/



// File: @onchain-id/solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:20.779848
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchFreezePartialTokens(address[],uint256[])
PC address: 4304
Estimated Gas Usage: 626 - 721
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:9

e: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:38.546708
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchFreezePartialTokens(address[],uint256[])
PC address: 4306
Estimated Gas Usage: 626 - 721
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:3



*/



// File: @onchain-id/solidit

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:30.399279
Transaction Length: 1
Severity: Low
Contract: TransferManager
Function name: batchSetAddressFrozen(address[],bool[])
PC address: 5155
Estimated Gas Usage: 763 - 858
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:3724

freeze[i]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:03:58.386192
Transaction Length: 2
Severity: Low
Contract: TransferManager
Function name: batchSetAddressFrozen(address[],bool[])
PC address: 5155
Estimated Gas Usage: 763 - 858
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:3724

freeze[i]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:15.684562
Transaction Length: 1
Severity: High
Contract: ClaimIssuer
Function name: isClaimValid(address,bytes32,uint256,bytes,bytes)
PC address: 5311
Estimated Gas Usage: 1375 - 7681
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:1562

abi.encode(_identity, claimTopic, data)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:04:02.620485
Transaction Length: 1
Severity: Low
Contract: TransferManager
Function name: batchUnfreezePartialTokens(address[],uint256[])
PC address: 7908
Estimated Gas Usage: 740 - 835
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:3838

amounts[i]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:04:27.983184
Transaction Length: 2
Severity: Low
Contract: TransferManager
Function name: batchUnfreezePartialTokens(address[],uint256[])
PC address: 7908
Estimated Gas Usage: 740 - 835
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:3838

amounts[i]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:04:03.322933
Transaction Length: 1
Severity: Low
Contract: TransferManager
Function name: claimsNotInNewAddress(uint256)
PC address: 8404
Estimated Gas Usage: 702 - 797
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:3132

bytes32[] public claimsNotInNewAddress

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:04:30.398430
Transaction Length: 2
Severity: Low
Contract: TransferManager
Function name: claimsNotInNewAddress(uint256)
PC address: 8404
Estimated Gas Usage: 702 - 797
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:3132

bytes32[] public claimsNotInNewAddress

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:05:07.069204
Transaction Length: 1
Severity: Low
Contract: TransferManager
Function name: batchTransfer(address[],uint256[])
PC address: 8994
Estimated Gas Usage: 807 - 902
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:3316

_values[i]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:04:52.109420
Transaction Length: 2
Severity: Low
Contract: TransferManager
Function name: batchTransfer(address[],uint256[])
PC address: 8994
Estimated Gas Usage: 807 - 902
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:3316

_values[i]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:04.744278
Transaction Length: 1
Severity: High
Contract: Identity
Function name: execute(address,uint256,bytes)
PC address: 10576
Estimated Gas Usage: 19184 - 83569
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:661

executions[executionNonce].data = _data

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:36.477263
Transaction Length: 1
Severity: High
Contract: Identity
Function name: execute(address,uint256,bytes)
PC address: 12318
Estimated Gas Usage: 14140 - 58525
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:1065

contract Identity is ERC734, IERC735 {



    mapping (bytes32 => Claim) private claims;

    mapping (uint256 => bytes32[]) private claimsByTopic;



    /**

       * @notice Implementation of the addClaim function from the ERC-735 standard

       *  Require that the msg.sender has claim signer key.

       *

       * @param _topic The type of claim

       * @param _scheme The scheme with which this claim SHOULD be verified or how it should be processed.

       * @param _issuer The issuers identity contract address, or the address used to sign the above signature.

       * @param _signature Signature which is the proof that the claim issuer issued a claim of topic for this identity.

       * it MUST be a signed message of the following structure: keccak256(address identityHolder_address, uint256 _ topic, bytes data)

       * or keccak256(abi.encode(identityHolder_address, topic, data))

       * @param _data The hash of the claim data, sitting in another location, a bit-mask, call data, or actual data based on the claim scheme.

       * @param _uri The location of the claim, this can be HTTP links, swarm hashes, IPFS hashes, and such.

       *

       * @return Returns claimRequestId: COULD be send to the approve function, to approve or reject this claim.

       * triggers ClaimAdded event.

       */



    function addClaim(

        uint256 _topic,

        uint256 _scheme,

        address _issuer,

        bytes memory _signature,

        bytes memory _data,

        string memory _uri

    )

    public

    returns (bytes32 claimRequestId)

    {

        bytes32 claimId = keccak256(abi.encode(_issuer, _topic));



        if (msg.sender != address(this)) {

            require(keyHasPurpose(keccak256(abi.encode(msg.sender)), 3), "Permissions: Sender does not have claim signer key");

        }



        if (claims[claimId].issuer != _issuer) {

            claimsByTopic[_topic].push(claimId);

            claims[claimId].topic = _topic;

            claims[claimId].scheme = _scheme;

            claims[claimId].issuer = _issuer;

            claims[claimId].signature = _signature;

            claims[claimId].data = _data;

            claims[claimId].uri = _uri;



            emit ClaimAdded(

                claimId,

                _topic,

                _scheme,

                _issuer,

                _signature,

                _data,

                _uri

            );

        } else {

            claims[claimId].topic = _topic;

            claims[claimId].scheme = _scheme;

            claims[claimId].issuer = _issuer;

            claims[claimId].signature = _signature;

            claims[claimId].data = _data;

            claims[claimId].uri = _uri;



            emit ClaimChanged(

                claimId,

                _topic,

                _scheme,

                _issuer,

                _signature,

                _data,

                _uri

            );

        }



        return claimId;

    }



    /**

       * @notice Implementation of the removeClaim function from the ERC-735 standard

       * Require that the msg.sender has management key.

       * Can only be removed by the claim issuer, or the claim holder itself.

       *

       * @param _claimId The identity of the claim i.e. keccak256(address issuer_address + uint256 topic)

       *

       * @return Returns TRUE when the claim was removed.

       * triggers ClaimRemoved event

       */



    function removeClaim(bytes32 _claimId) public returns (bool success) {

        if (msg.sender != address(this)) {

            require(keyHasPurpose(keccak256(abi.encode(msg.sender)), 1), "Permissions: Sender does not have CLAIM key");

        }



        if (claims[_claimId].topic == 0) {

            revert("NonExisting: There is no claim with this ID");

        }



        uint claimIndex = 0;

        while (claimsByTopic[claims[_claimId].topic][claimIndex] != _claimId) {

            claimIndex++;

        }



        claimsByTopic[claims[_claimId].topic][claimIndex] = claimsByTopic[claims[_claimId].topic][claimsByTopic[claims[_claimId].topic].length - 1];

        claimsByTopic[claims[_claimId].topic].pop();



        emit ClaimRemoved(

            _claimId,

            claims[_claimId].topic,

            claims[_claimId].scheme,

            claims[_claimId].issuer,

            claims[_claimId].signature,

            claims[_claimId].data,

            claims[_claimId].uri

        );



        delete claims[_claimId];



        return true;

    }



    /**

        * @notice Implementation of the getClaim function from the ERC-735 standard.

        *

        * @param _claimId The identity of the claim i.e. keccak256(address issuer_address + uint256 topic)

        *

        * @return Returns all the parameters of the claim for the specified _claimId (topic, scheme, signature, issuer, data, uri) .

        */



    function getClaim(bytes32 _claimId)

    public

    view

    returns(

        uint256 topic,

        uint256 scheme,

        address issuer,

        bytes memory signature,

        bytes memory data,

        string memory uri

    )

    {

        return (

            claims[_claimId].topic,

            claims[_claimId].scheme,

            claims[_claimId].issuer,

            claims[_claimId].signature,

            claims[_claimId].data,

            claims[_claimId].uri

        );

    }



    /**

        * @notice Implementation of the getClaimIdsByTopic function from the ERC-735 standard.

        * used to get all the claims from the specified topic

        *

        * @param _topic The identity of the claim i.e. keccak256(address issuer_address + uint256 topic)

        *

        * @return Returns an array of claim IDs by topic.

        */



    function getClaimIdsByTopic(uint256 _topic)

    public

    view

    returns(bytes32[] memory claimIds)

    {

        return claimsByTopic[_topic];

    }

}

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:10.079334
Transaction Length: 1
Severity: High
Contract: Identity
Function name: execute(address,uint256,bytes)
PC address: 12332
Estimated Gas Usage: 19184 - 83569
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:1065

contract Identity is ERC734, IERC735 {



    mapping (bytes32 => Claim) private claims;

    mapping (uint256 => bytes32[]) private claimsByTopic;



    /**

       * @notice Implementation of the addClaim function from the ERC-735 standard

       *  Require that the msg.sender has claim signer key.

       *

       * @param _topic The type of claim

       * @param _scheme The scheme with which this claim SHOULD be verified or how it should be processed.

       * @param _issuer The issuers identity contract address, or the address used to sign the above signature.

       * @param _signature Signature which is the proof that the claim issuer issued a claim of topic for this identity.

       * it MUST be a signed message of the following structure: keccak256(address identityHolder_address, uint256 _ topic, bytes data)

       * or keccak256(abi.encode(identityHolder_address, topic, data))

       * @param _data The hash of the claim data, sitting in another location, a bit-mask, call data, or actual data based on the claim scheme.

       * @param _uri The location of the claim, this can be HTTP links, swarm hashes, IPFS hashes, and such.

       *

       * @return Returns claimRequestId: COULD be send to the approve function, to approve or reject this claim.

       * triggers ClaimAdded event.

       */



    function addClaim(

        uint256 _topic,

        uint256 _scheme,

        address _issuer,

        bytes memory _signature,

        bytes memory _data,

        string memory _uri

    )

    public

    returns (bytes32 claimRequestId)

    {

        bytes32 claimId = keccak256(abi.encode(_issuer, _topic));



        if (msg.sender != address(this)) {

            require(keyHasPurpose(keccak256(abi.encode(msg.sender)), 3), "Permissions: Sender does not have claim signer key");

        }



        if (claims[claimId].issuer != _issuer) {

            claimsByTopic[_topic].push(claimId);

            claims[claimId].topic = _topic;

            claims[claimId].scheme = _scheme;

            claims[claimId].issuer = _issuer;

            claims[claimId].signature = _signature;

            claims[claimId].data = _data;

            claims[claimId].uri = _uri;



            emit ClaimAdded(

                claimId,

                _topic,

                _scheme,

                _issuer,

                _signature,

                _data,

                _uri

            );

        } else {

            claims[claimId].topic = _topic;

            claims[claimId].scheme = _scheme;

            claims[claimId].issuer = _issuer;

            claims[claimId].signature = _signature;

            claims[claimId].data = _data;

            claims[claimId].uri = _uri;



            emit ClaimChanged(

                claimId,

                _topic,

                _scheme,

                _issuer,

                _signature,

                _data,

                _uri

            );

        }



        return claimId;

    }



    /**

       * @notice Implementation of the removeClaim function from the ERC-735 standard

       * Require that the msg.sender has management key.

       * Can only be removed by the claim issuer, or the claim holder itself.

       *

       * @param _claimId The identity of the claim i.e. keccak256(address issuer_address + uint256 topic)

       *

       * @return Returns TRUE when the claim was removed.

       * triggers ClaimRemoved event

       */



    function removeClaim(bytes32 _claimId) public returns (bool success) {

        if (msg.sender != address(this)) {

            require(keyHasPurpose(keccak256(abi.encode(msg.sender)), 1), "Permissions: Sender does not have CLAIM key");

        }



        if (claims[_claimId].topic == 0) {

            revert("NonExisting: There is no claim with this ID");

        }



        uint claimIndex = 0;

        while (claimsByTopic[claims[_claimId].topic][claimIndex] != _claimId) {

            claimIndex++;

        }



        claimsByTopic[claims[_claimId].topic][claimIndex] = claimsByTopic[claims[_claimId].topic][claimsByTopic[claims[_claimId].topic].length - 1];

        claimsByTopic[claims[_claimId].topic].pop();



        emit ClaimRemoved(

            _claimId,

            claims[_claimId].topic,

            claims[_claimId].scheme,

            claims[_claimId].issuer,

            claims[_claimId].signature,

            claims[_claimId].data,

            claims[_claimId].uri

        );



        delete claims[_claimId];



        return true;

    }



    /**

        * @notice Implementation of the getClaim function from the ERC-735 standard.

        *

        * @param _claimId The identity of the claim i.e. keccak256(address issuer_address + uint256 topic)

        *

        * @return Returns all the parameters of the claim for the specified _claimId (topic, scheme, signature, issuer, data, uri) .

        */



    function getClaim(bytes32 _claimId)

    public

    view

    returns(

        uint256 topic,

        uint256 scheme,

        address issuer,

        bytes memory signature,

        bytes memory data,

        string memory uri

    )

    {

        return (

            claims[_claimId].topic,

            claims[_claimId].scheme,

            claims[_claimId].issuer,

            claims[_claimId].signature,

            claims[_claimId].data,

            claims[_claimId].uri

        );

    }



    /**

        * @notice Implementation of the getClaimIdsByTopic function from the ERC-735 standard.

        * used to get all the claims from the specified topic

        *

        * @param _topic The identity of the claim i.e. keccak256(address issuer_address + uint256 topic)

        *

        * @return Returns an array of claim IDs by topic.

        */



    function getClaimIdsByTopic(uint256 _topic)

    public

    view

    returns(bytes32[] memory claimIds)

    {

        return claimsByTopic[_topic];

    }

}

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:05.610892
Transaction Length: 1
Severity: High
Contract: Identity
Function name: execute(address,uint256,bytes)
PC address: 12349
Estimated Gas Usage: 29324 - 133895
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:1065

contract Identity is ERC734, IERC735 {



    mapping (bytes32 => Claim) private claims;

    mapping (uint256 => bytes32[]) private claimsByTopic;



    /**

       * @notice Implementation of the addClaim function from the ERC-735 standard

       *  Require that the msg.sender has claim signer key.

       *

       * @param _topic The type of claim

       * @param _scheme The scheme with which this claim SHOULD be verified or how it should be processed.

       * @param _issuer The issuers identity contract address, or the address used to sign the above signature.

       * @param _signature Signature which is the proof that the claim issuer issued a claim of topic for this identity.

       * it MUST be a signed message of the following structure: keccak256(address identityHolder_address, uint256 _ topic, bytes data)

       * or keccak256(abi.encode(identityHolder_address, topic, data))

       * @param _data The hash of the claim data, sitting in another location, a bit-mask, call data, or actual data based on the claim scheme.

       * @param _uri The location of the claim, this can be HTTP links, swarm hashes, IPFS hashes, and such.

       *

       * @return Returns claimRequestId: COULD be send to the approve function, to approve or reject this claim.

       * triggers ClaimAdded event.

       */



    function addClaim(

        uint256 _topic,

        uint256 _scheme,

        address _issuer,

        bytes memory _signature,

        bytes memory _data,

        string memory _uri

    )

    public

    returns (bytes32 claimRequestId)

    {

        bytes32 claimId = keccak256(abi.encode(_issuer, _topic));



        if (msg.sender != address(this)) {

            require(keyHasPurpose(keccak256(abi.encode(msg.sender)), 3), "Permissions: Sender does not have claim signer key");

        }



        if (claims[claimId].issuer != _issuer) {

            claimsByTopic[_topic].push(claimId);

            claims[claimId].topic = _topic;

            claims[claimId].scheme = _scheme;

            claims[claimId].issuer = _issuer;

            claims[claimId].signature = _signature;

            claims[claimId].data = _data;

            claims[claimId].uri = _uri;



            emit ClaimAdded(

                claimId,

                _topic,

                _scheme,

                _issuer,

                _signature,

                _data,

                _uri

            );

        } else {

            claims[claimId].topic = _topic;

            claims[claimId].scheme = _scheme;

            claims[claimId].issuer = _issuer;

            claims[claimId].signature = _signature;

            claims[claimId].data = _data;

            claims[claimId].uri = _uri;



            emit ClaimChanged(

                claimId,

                _topic,

                _scheme,

                _issuer,

                _signature,

                _data,

                _uri

            );

        }



        return claimId;

    }



    /**

       * @notice Implementation of the removeClaim function from the ERC-735 standard

       * Require that the msg.sender has management key.

       * Can only be removed by the claim issuer, or the claim holder itself.

       *

       * @param _claimId The identity of the claim i.e. keccak256(address issuer_address + uint256 topic)

       *

       * @return Returns TRUE when the claim was removed.

       * triggers ClaimRemoved event

       */



    function removeClaim(bytes32 _claimId) public returns (bool success) {

        if (msg.sender != address(this)) {

            require(keyHasPurpose(keccak256(abi.encode(msg.sender)), 1), "Permissions: Sender does not have CLAIM key");

        }



        if (claims[_claimId].topic == 0) {

            revert("NonExisting: There is no claim with this ID");

        }



        uint claimIndex = 0;

        while (claimsByTopic[claims[_claimId].topic][claimIndex] != _claimId) {

            claimIndex++;

        }



        claimsByTopic[claims[_claimId].topic][claimIndex] = claimsByTopic[claims[_claimId].topic][claimsByTopic[claims[_claimId].topic].length - 1];

        claimsByTopic[claims[_claimId].topic].pop();



        emit ClaimRemoved(

            _claimId,

            claims[_claimId].topic,

            claims[_claimId].scheme,

            claims[_claimId].issuer,

            claims[_claimId].signature,

            claims[_claimId].data,

            claims[_claimId].uri

        );



        delete claims[_claimId];



        return true;

    }



    /**

        * @notice Implementation of the getClaim function from the ERC-735 standard.

        *

        * @param _claimId The identity of the claim i.e. keccak256(address issuer_address + uint256 topic)

        *

        * @return Returns all the parameters of the claim for the specified _claimId (topic, scheme, signature, issuer, data, uri) .

        */



    function getClaim(bytes32 _claimId)

    public

    view

    returns(

        uint256 topic,

        uint256 scheme,

        address issuer,

        bytes memory signature,

        bytes memory data,

        string memory uri

    )

    {

        return (

            claims[_claimId].topic,

            claims[_claimId].scheme,

            claims[_claimId].issuer,

            claims[_claimId].signature,

            claims[_claimId].data,

            claims[_claimId].uri

        );

    }



    /**

        * @notice Implementation of the getClaimIdsByTopic function from the ERC-735 standard.

        * used to get all the claims from the specified topic

        *

        * @param _topic The identity of the claim i.e. keccak256(address issuer_address + uint256 topic)

        *

        * @return Returns an array of claim IDs by topic.

        */



    function getClaimIdsByTopic(uint256 _topic)

    public

    view

    returns(bytes32[] memory claimIds)

    {

        return claimsByTopic[_topic];

    }

}

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:06:12.838164
Transaction Length: 1
Severity: Low
Contract: TransferManager
Function name: batchFreezePartialTokens(address[],uint256[])
PC address: 16383
Estimated Gas Usage: 827 - 922
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:3782

amounts[i]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:05:16.733161
Transaction Length: 2
Severity: Low
Contract: TransferManager
Function name: batchFreezePartialTokens(address[],uint256[])
PC address: 16383
Estimated Gas Usage: 827 - 922
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:3782

amounts[i]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:16.399956
Transaction Length: 2
Severity: High
Contract: TransferManager
Function name: increaseAllowance(address,uint256)
PC address: 18797
Estimated Gas Usage: 1012 - 1487
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:2017

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x3993f0c72ffd1f02a422a6d1db0740e6dd08e361.sol
Total states:2324
2.180637
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xF258A5DebC0694E7E85f8EBDc628017C3Fad2010.sol
Total states:4368
569.207077
==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.005503
Transaction Length: 0
Severity: Medium
Contract: Governance
Function name: constructor
PC address: 18
Estimated Gas Usage: 42 - 137
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../contracts/m_loop/loop3/0xF258A5DebC0694E7E85f8EBDc628017C3Fad2010.sol:639

tx.origin

--------------------

==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.030886
Transaction Length: 0
Severity: Medium
Contract: LPTokenWrapper
Function name: constructor
PC address: 241
Estimated Gas Usage: 16419 - 77504
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../contracts/m_loop/loop3/0xF258A5DebC0694E7E85f8EBDc628017C3Fad2010.sol:639

tx.origin

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.288564
Transaction Length: 0
Severity: High
Contract: UniswapReward
Function name: constructor
PC address: 516
Estimated Gas Usage: 37837 - 179912
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xF258A5DebC0694E7E85f8EBDc628017C3Fad2010.sol:796

now + 365 days

--------------------

==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.732233
Transaction Length: 0
Severity: Medium
Contract: UniswapReward
Function name: constructor
PC address: 580
Estimated Gas Usage: 78340 - 380745
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../contracts/m_loop/loop3/0xF258A5DebC0694E7E85f8EBDc628017C3Fad2010.sol:639

tx.origin

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.755749
Transaction Length: 1
Severity: High
Contract: LPTokenWrapper
Function name: stake(uint256,string)
PC address: 873
Estimated Gas Usage: 411 - 506
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xF258A5DebC0694E7E85f8EBDc628017C3Fad2010.sol:3

*/

/***
 *    ██████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.586443
Transaction Length: 1
Severity: High
Contract: UniswapReward
Function name: stake(uint256,string)
PC address: 2435
Estimated Gas Usage: 456 - 551
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xF258A5DebC0694E7E85f8EBDc628017C3Fad2010.sol:3

*/

/***
 *    ██████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:46.956259
Transaction Length: 1
Severity: High
Contract: UniswapReward
Function name: seize(address,uint256)
PC address: 13914
Estimated Gas Usage: 2651 - 5713
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xF258A5DebC0694E7E85f8EBDc628017C3Fad2010.sol:544

address(token).call(abi.encodeWithSelector(SELECTOR, to, value))

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:06:40.948171
Transaction Length: 1
Severity: Medium
Contract: UniswapReward
Function name: seize(address,uint256)
PC address: 13931
Estimated Gas Usage: 2976 - 7118
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../contracts/m_loop/loop3/0xF258A5DebC0694E7E85f8EBDc628017C3Fad2010.sol:544

address(token).call(abi.encodeWithSelector(SELECTOR, to, value))

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x8b12b81f7acd205efb32e581075b97fd1c5af476.sol
Total states:840
5.991438
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x27dcc3a6db94eca8850b133fb04ed56477f2e900.sol
Total states:2036
28.587203
==== Delegatecall Proxy ====
SWC ID: 112
FOUND TIME: 0:00:00.003848
Transaction Length: 1
Severity: Low
Contract: Proxy
Function name: fallback
PC address: 54
Estimated Gas Usage: 459 - 2951
The contract implements a delegatecall proxy.
The smart contract forwards the received calldata via delegatecall. Note that callerscan execute arbitrary functions in the callee contract and that the callee contract can access the storage of the calling contract. Make sure that the callee contract is audited properly.DELEGATECALL target: Concat(6_code(Proxy),
       6_code(Proxy),
       6_code(Proxy),
       6_code(Proxy),
       6_code(Proxy),
       6_code(Proxy),
       6_code(Proxy),
       6_code(Proxy),
       6_code(Proxy),
       6_code(Proxy),
       6_code(Proxy),
       6_code(Proxy),
       6_code(Proxy),
       6_code(Proxy),
       6_code(Proxy),
       6_code(Proxy),
       6_code(Proxy),
       6_code(Proxy),
       6_code(Proxy),
       6_code(Proxy),
       6_code(Proxy),
       6_code(Proxy),
       6_code(Proxy),
       6_code(Proxy),
       6_code(Proxy),
       6_code(Proxy),
       6_code(Proxy),
       6_code(Proxy),
       6_code(Proxy),
       6_code(Proxy),
       6_code(Proxy),
       6_code(Proxy))
--------------------
In file: ../../contracts/m_loop/loop3/0x27dcc3a6db94eca8850b133fb04ed56477f2e900.sol:606

delegatecall(gas, contractLogic, ptr, calldatasize, 0, 0)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:16.001552
Transaction Length: 1
Severity: Low
Contract: PaymentHandler
Function name: fallback
PC address: 559
Estimated Gas Usage: 4932 - 75189
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop3/0x27dcc3a6db94eca8850b133fb04ed56477f2e900.sol:567

master.firePaymentReceivedEvent(address(this), msg.sender, msg.value)

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:16.006484
Transaction Length: 1
Severity: Medium
Contract: PaymentHandler
Function name: fallback
PC address: 582
Estimated Gas Usage: 5665 - 109922
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 239
Offset: 1157
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop3/0x27dcc3a6db94eca8850b133fb04ed56477f2e900.sol:531

contract PaymentHandler {
	using SafeERC20 for IERC20;

	// a boolean to track whether a Proxied instance of this contract has been initialized
	bool public initialized = false;

	// Keep track of the parent master contract - cannot be changed once set
	PaymentMaster public master;

	/**
	 * General constructor called by the master
	 */
	function initialize(PaymentMaster _master) public {
		require(initialized == false, 'Contract is already initialized');
		initialized = true;
		master = _master;
	}

	/**
	 * Helper function to return the parent master's address
	 */
	function getMasterAddress() public view returns (address) {
		return address(master);
	}

	/**
	 * Default payable function - forwards to the owner and triggers event
	 */
	function() external payable {
		// Get the parent master's owner address - explicity convert to payable
		address payable ownerAddress = address(uint160(master.owner()));

		// Forward the funds to the owner
		Address.sendValue(ownerAddress, msg.value);

		// Trigger the event notification in the parent master
		master.firePaymentReceivedEvent(address(this), msg.sender, msg.value);
	}

	/**
	 * Sweep any tokens to the owner of the master
	 */
	function sweepTokens(IERC20 token) public {
		// Get the owner address
		address ownerAddress = master.owner();

		// Get the current balance
		uint balance = token.balanceOf(address(this));

		// Transfer to the owner
		token.safeTransfer(ownerAddress, balance);
	}

}

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:00.176783
Transaction Length: 1
Severity: Low
Contract: PaymentHandler
Function name: fallback
PC address: 1157
Estimated Gas Usage: 2622 - 37700
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop3/0x27dcc3a6db94eca8850b133fb04ed56477f2e900.sol:432

recipient.call.value(amount)("")

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:00:11.229151
Transaction Length: 1
Severity: Medium
Contract: PaymentHandler
Function name: fallback
PC address: 1157
Estimated Gas Usage: 2743 - 37821
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../contracts/m_loop/loop3/0x27dcc3a6db94eca8850b133fb04ed56477f2e900.sol:432

recipient.call.value(amount)("")

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xec62480b06268ef472d54af722ac1565bdf5e1b1.sol
Total states:360
0.401554
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.100156
Transaction Length: 0
Severity: High
Contract: RicardianLLC
Function name: constructor
PC address: 268
Estimated Gas Usage: 11863 - 55954
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xec62480b06268ef472d54af722ac1565bdf5e1b1.sol:7

═══╝██╔══██╗██

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x57805e5a227937bac2b0fdacaa30413ddac6b8e1.sol
Total states:951
25.760927
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x0228e1074bd0d089719e69f7c3bf0a97b6ab0c05.sol
Total states:138
294.250864
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.695445
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: convertOddToCvpAndSendToPayout(address[])
PC address: 663
Estimated Gas Usage: 386 - 481
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x0228e1074bd0d089719e69f7c3bf0a97b6ab0c05.sol:6

/powerpool.finance/



--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.564776
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: convertOddToCvpAndSendToPayout(address[])
PC address: 665
Estimated Gas Usage: 386 - 481
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x0228e1074bd0d089719e69f7c3bf0a97b6ab0c05.sol:3

*/

/*
https://powerpool.finance/

 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:58.896805
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: setTokensSettings(address[],address[],bool[])
PC address: 1266
Estimated Gas Usage: 385 - 480
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x0228e1074bd0d089719e69f7c3bf0a97b6ab0c05.sol:6

/powerpool.finance/



--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:01.849336
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: setTokensSettings(address[],address[],bool[])
PC address: 1268
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x0228e1074bd0d089719e69f7c3bf0a97b6ab0c05.sol:3

*/

/*
https://powerpool.finance/

 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:07.033697
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: setTokensSettings(address[],address[],bool[])
PC address: 1351
Estimated Gas Usage: 561 - 656
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x0228e1074bd0d089719e69f7c3bf0a97b6ab0c05.sol:6

/powerpool.finance/



--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:23.367157
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: setTokensSettings(address[],address[],bool[])
PC address: 1353
Estimated Gas Usage: 561 - 656
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x0228e1074bd0d089719e69f7c3bf0a97b6ab0c05.sol:3

*/

/*
https://powerpool.finance/

 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:37.902544
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: setTokensSettings(address[],address[],bool[])
PC address: 1436
Estimated Gas Usage: 737 - 832
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x0228e1074bd0d089719e69f7c3bf0a97b6ab0c05.sol:6

/powerpool.finance/



--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:01.682955
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: setTokensSettings(address[],address[],bool[])
PC address: 1438
Estimated Gas Usage: 737 - 832
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x0228e1074bd0d089719e69f7c3bf0a97b6ab0c05.sol:3

*/

/*
https://powerpool.finance/

 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:28.824929
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: swapEthToPiptByInputs(uint256[],uint256[],uint256)
PC address: 1600
Estimated Gas Usage: 405 - 500
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x0228e1074bd0d089719e69f7c3bf0a97b6ab0c05.sol:6

/powerpool.finance/



--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:33.088261
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: swapEthToPiptByInputs(uint256[],uint256[],uint256)
PC address: 1602
Estimated Gas Usage: 405 - 500
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x0228e1074bd0d089719e69f7c3bf0a97b6ab0c05.sol:3

*/

/*
https://powerpool.finance/

 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:44.694262
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: swapEthToPiptByInputs(uint256[],uint256[],uint256)
PC address: 1748
Estimated Gas Usage: 738 - 3515
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x0228e1074bd0d089719e69f7c3bf0a97b6ab0c05.sol:6

/powerpool.finance/



--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:55.653087
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: swapEthToPiptByInputs(uint256[],uint256[],uint256)
PC address: 1750
Estimated Gas Usage: 738 - 3515
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x0228e1074bd0d089719e69f7c3bf0a97b6ab0c05.sol:3

*/

/*
https://powerpool.finance/

 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:28.020021
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: getEthAndTokensIn(uint256,address[],uint256)
PC address: 2011
Estimated Gas Usage: 368 - 463
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x0228e1074bd0d089719e69f7c3bf0a97b6ab0c05.sol:6

/powerpool.finance/



--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:33.361469
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: getEthAndTokensIn(uint256,address[],uint256)
PC address: 2013
Estimated Gas Usage: 368 - 463
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x0228e1074bd0d089719e69f7c3bf0a97b6ab0c05.sol:3

*/

/*
https://powerpool.finance/

 

--------------------

==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:14.893866
Transaction Length: 1
Severity: Medium
Contract: EthPiptSwap
Function name: convertOddToCvpAndSendToPayout(address[])
PC address: 3691
Estimated Gas Usage: 596 - 3373
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../contracts/m_loop/loop3/0x0228e1074bd0d089719e69f7c3bf0a97b6ab0c05.sol:831

tx.origin

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:25.378831
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: swapEthToPipt(uint256)
PC address: 13565
Estimated Gas Usage: 3123 - 38395
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x0228e1074bd0d089719e69f7c3bf0a97b6ab0c05.sol:6

werpool.finance

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.961409
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: getAmountOut(uint256,uint256,uint256)
PC address: 18458
Estimated Gas Usage: 522 - 617
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x0228e1074bd0d089719e69f7c3bf0a97b6ab0c05.sol:289

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xd814e02e779a216c5abaa5789e624cc017fb0876.sol
Total states:2301
2.214144
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.056209
Transaction Length: 0
Severity: High
Contract: ERC20
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xd814e02e779a216c5abaa5789e624cc017fb0876.sol:22

al functions; to access them see `ERC20Deta

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.041686
Transaction Length: 0
Severity: High
Contract: TulipToken
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xd814e02e779a216c5abaa5789e624cc017fb0876.sol:22

al functions; to access them see `ERC20Deta

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xb70de327e77a8e7f873157fcf1c7d8d20e409db9.sol
Total states:3610
80.148128
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.960443
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: initialize(uint256,uint256,address[],uint256[],address)
PC address: 787
Estimated Gas Usage: 461 - 556
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xb70de327e77a8e7f873157fcf1c7d8d20e409db9.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.639073
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: initialize(uint256,uint256,address[],uint256[],address)
PC address: 789
Estimated Gas Usage: 461 - 556
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xb70de327e77a8e7f873157fcf1c7d8d20e409db9.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.847201
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: initialize(uint256,uint256,address[],uint256[],address)
PC address: 872
Estimated Gas Usage: 637 - 732
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xb70de327e77a8e7f873157fcf1c7d8d20e409db9.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:23.423972
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: initialize(uint256,uint256,address[],uint256[],address)
PC address: 874
Estimated Gas Usage: 637 - 732
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xb70de327e77a8e7f873157fcf1c7d8d20e409db9.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:32.339390
Transaction Length: 1
Severity: Medium
Contract: LidTeamLock
Function name: startRelease()
PC address: 1025
Estimated Gas Usage: 20818 - 150697
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 4521
Offset: 4885
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop3/0xb70de327e77a8e7f873157fcf1c7d8d20e409db9.sol:694

function startRelease() external {

        require(releaseStart == 0, "Has already started.");

        require(address(this).balance != 0, "Must have some ether deposited.");

        require(lidToken.balanceOf(address(this)) != 0, "Must have some lid deposited.");

        startingLid = lidToken.balanceOf(address(this));

        startingEth = address(this).balance;

        releaseStart = now.add(24 hours);

    }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:00.664235
Transaction Length: 2
Severity: Medium
Contract: LidTeamLock
Function name: startRelease()
PC address: 1025
Estimated Gas Usage: 20818 - 150697
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 4521
Offset: 4885
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop3/0xb70de327e77a8e7f873157fcf1c7d8d20e409db9.sol:694

function startRelease() external {

        require(releaseStart == 0, "Has already started.");

        require(address(this).balance != 0, "Must have some ether deposited.");

        require(lidToken.balanceOf(address(this)) != 0, "Must have some lid deposited.");

        startingLid = lidToken.balanceOf(address(this));

        startingEth = address(this).balance;

        releaseStart = now.add(24 hours);

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:33.507229
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 1163
Estimated Gas Usage: 407 - 502
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xb70de327e77a8e7f873157fcf1c7d8d20e409db9.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:36.371776
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 1165
Estimated Gas Usage: 407 - 502
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xb70de327e77a8e7f873157fcf1c7d8d20e409db9.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:41.856211
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 1248
Estimated Gas Usage: 583 - 678
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xb70de327e77a8e7f873157fcf1c7d8d20e409db9.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:56.094560
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 1250
Estimated Gas Usage: 583 - 678
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xb70de327e77a8e7f873157fcf1c7d8d20e409db9.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.777032
Transaction Length: 1
Severity: Low
Contract: LidTeamLock
Function name: teamMemberBPs(uint256)
PC address: 1624
Estimated Gas Usage: 679 - 774
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xb70de327e77a8e7f873157fcf1c7d8d20e409db9.sol:572

uint[] public teamMemberBPs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:16.535896
Transaction Length: 1
Severity: Low
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 5028
Estimated Gas Usage: 1070 - 1165
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xb70de327e77a8e7f873157fcf1c7d8d20e409db9.sol:720

teamMemberAddresses[0]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:16.996678
Transaction Length: 1
Severity: Low
Contract: LidTeamLock
Function name: teamMemberAddresses(uint256)
PC address: 5599
Estimated Gas Usage: 678 - 773
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xb70de327e77a8e7f873157fcf1c7d8d20e409db9.sol:570

address payable[] public teamMemberAddresses

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:31.352328
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: startRelease()
PC address: 6647
Estimated Gas Usage: 15758 - 125637
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xb70de327e77a8e7f873157fcf1c7d8d20e409db9.sol:186

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xbc1541c45d5ee6b9b2f1aa04f92195040c3e5b21.sol
Total states:92
1.06887
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x460a0f98f9a1eb9107550b1877204cc41ea6f149.sol
Total states:272
33.715097
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.049554
Transaction Length: 0
Severity: High
Contract: Staking
Function name: constructor
PC address: 205
Estimated Gas Usage: 16034 - 76459
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x460a0f98f9a1eb9107550b1877204cc41ea6f149.sol:54

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.768033
Transaction Length: 0
Severity: Low
Contract: Staking
Function name: constructor
PC address: 219
Estimated Gas Usage: 16044 - 76469
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x460a0f98f9a1eb9107550b1877204cc41ea6f149.sol:55

assert(c >= a)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xa605e1e5627cd55f31c10623e3b1697bcfef07622.sol
Total states:3572
4.518568
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.249488
Transaction Length: 0
Severity: High
Contract: TokenStake
Function name: constructor
PC address: 195
Estimated Gas Usage: 27403 - 131259
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xa605e1e5627cd55f31c10623e3b1697bcfef07622.sol:100

aprPercentage * thousand

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.984864
Transaction Length: 1
Severity: Low
Contract: TokenStake
Function name: claimStake(uint256)
PC address: 3101
Estimated Gas Usage: 1427 - 2042
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xa605e1e5627cd55f31c10623e3b1697bcfef07622.sol:168

_staker[account][id]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.730413
Transaction Length: 1
Severity: Low
Contract: TokenStake
Function name: _activeAddress(uint256)
PC address: 5732
Estimated Gas Usage: 893 - 988
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xa605e1e5627cd55f31c10623e3b1697bcfef07622.sol:87

address [] public _activeAddress

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:02.335641
Transaction Length: 1
Severity: Low
Contract: TokenStake
Function name: unlockStake(uint256)
PC address: 6835
Estimated Gas Usage: 1448 - 2063
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xa605e1e5627cd55f31c10623e3b1697bcfef07622.sol:151

_staker[msg.sender][stakeId]

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xd1e3dbd2476d374f97b93ad7f686eacbebd8f56d.sol
Total states:5597
273.292495
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.943817
Transaction Length: 1
Severity: High
Contract: ERC721Holder
Function name: onERC721Received(address,address,uint256,bytes)
PC address: 234
Estimated Gas Usage: 389 - 484
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xd1e3dbd2476d374f97b93ad7f686eacbebd8f56d.sol:3

*/

// File: contracts/roles/Roles.

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.035069
Transaction Length: 1
Severity: High
Contract: SPLCardGateway
Function name: onERC721Received(address,address,uint256,bytes)
PC address: 572
Estimated Gas Usage: 457 - 552
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xd1e3dbd2476d374f97b93ad7f686eacbebd8f56d.sol:3

*/

// File: contracts/roles/Roles.

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:01:26.029118
Transaction Length: 1
Severity: Medium
Contract: SPLCardGateway
Function name: deposit(uint256)
PC address: 1602
Estimated Gas Usage: 6114 - 76864
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 5456
Offset: 5900
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop3/0xd1e3dbd2476d374f97b93ad7f686eacbebd8f56d.sol:279

function deposit(uint256 _tokenId) public whenNotPaused() {
        address owner = assetContract.ownerOf(_tokenId);
        require(owner == msg.sender, "msg.sender must be _tokenId owner");
        assetContract.safeTransferFrom(msg.sender, address(this), _tokenId);
        emit Deposit(owner, _tokenId);
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:34.500867
Transaction Length: 1
Severity: High
Contract: SPLCardGateway
Function name: bulkDeposit(uint256[])
PC address: 1697
Estimated Gas Usage: 384 - 479
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xd1e3dbd2476d374f97b93ad7f686eacbebd8f56d.sol:5

ontracts/roles/Roles.

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:38.000050
Transaction Length: 1
Severity: High
Contract: SPLCardGateway
Function name: bulkDeposit(uint256[])
PC address: 1699
Estimated Gas Usage: 384 - 479
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xd1e3dbd2476d374f97b93ad7f686eacbebd8f56d.sol:3

*/

// File: contracts/roles/Roles.s

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:18.704588
Transaction Length: 1
Severity: High
Contract: SPLCardGateway
Function name: bulkWithdraw(address[],uint256[],uint256[],bytes32[])
PC address: 1899
Estimated Gas Usage: 404 - 499
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xd1e3dbd2476d374f97b93ad7f686eacbebd8f56d.sol:5

ontracts/roles/Roles.

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:22.317274
Transaction Length: 1
Severity: High
Contract: SPLCardGateway
Function name: bulkWithdraw(address[],uint256[],uint256[],bytes32[])
PC address: 1901
Estimated Gas Usage: 404 - 499
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xd1e3dbd2476d374f97b93ad7f686eacbebd8f56d.sol:3

*/

// File: contracts/roles/Roles.s

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:27.160614
Transaction Length: 1
Severity: High
Contract: SPLCardGateway
Function name: bulkWithdraw(address[],uint256[],uint256[],bytes32[])
PC address: 1984
Estimated Gas Usage: 580 - 675
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xd1e3dbd2476d374f97b93ad7f686eacbebd8f56d.sol:5

ontracts/roles/Roles.

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:36.668238
Transaction Length: 1
Severity: High
Contract: SPLCardGateway
Function name: bulkWithdraw(address[],uint256[],uint256[],bytes32[])
PC address: 1986
Estimated Gas Usage: 580 - 675
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xd1e3dbd2476d374f97b93ad7f686eacbebd8f56d.sol:3

*/

// File: contracts/roles/Roles.s

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:48.698213
Transaction Length: 1
Severity: High
Contract: SPLCardGateway
Function name: bulkWithdraw(address[],uint256[],uint256[],bytes32[])
PC address: 2069
Estimated Gas Usage: 756 - 851
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xd1e3dbd2476d374f97b93ad7f686eacbebd8f56d.sol:5

ontracts/roles/Roles.

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:07.756592
Transaction Length: 1
Severity: High
Contract: SPLCardGateway
Function name: bulkWithdraw(address[],uint256[],uint256[],bytes32[])
PC address: 2071
Estimated Gas Usage: 756 - 851
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xd1e3dbd2476d374f97b93ad7f686eacbebd8f56d.sol:3

*/

// File: contracts/roles/Roles.s

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:27.166184
Transaction Length: 1
Severity: High
Contract: SPLCardGateway
Function name: bulkWithdraw(address[],uint256[],uint256[],bytes32[])
PC address: 2154
Estimated Gas Usage: 932 - 1027
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xd1e3dbd2476d374f97b93ad7f686eacbebd8f56d.sol:5

ontracts/roles/Roles.

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:53.231976
Transaction Length: 1
Severity: High
Contract: SPLCardGateway
Function name: bulkWithdraw(address[],uint256[],uint256[],bytes32[])
PC address: 2156
Estimated Gas Usage: 932 - 1027
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xd1e3dbd2476d374f97b93ad7f686eacbebd8f56d.sol:3

*/

// File: contracts/roles/Roles.s

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:02:02.641436
Transaction Length: 1
Severity: Low
Contract: SPLCardGateway
Function name: bulkDeposit(uint256[])
PC address: 5900
Estimated Gas Usage: 4469 - 40682
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop3/0xd1e3dbd2476d374f97b93ad7f686eacbebd8f56d.sol:282

assetContract.safeTransferFrom(msg.sender, address(this), _tokenId)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x1770129cd23C680C1c52C8D3a9c3D527B73CE1de.sol
Total states:3409
250.40119
==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:30.517103
Transaction Length: 1
Severity: High
Contract: Math
Function name: safeSub(uint256,uint256)
PC address: 820
Estimated Gas Usage: 309 - 404
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x1770129cd23C680C1c52C8D3a9c3D527B73CE1de.sol:109

x - y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:30.339559
Transaction Length: 1
Severity: High
Contract: Memberlist
Function name: updateMembers(address[],uint256)
PC address: 827
Estimated Gas Usage: 407 - 502
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x1770129cd23C680C1c52C8D3a9c3D527B73CE1de.sol:5

d using https://dapp.

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:33.196682
Transaction Length: 1
Severity: High
Contract: Memberlist
Function name: updateMembers(address[],uint256)
PC address: 829
Estimated Gas Usage: 407 - 502
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x1770129cd23C680C1c52C8D3a9c3D527B73CE1de.sol:3

*/

// Verified using https://dapp.t

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:32.503638
Transaction Length: 1
Severity: Low
Contract: Math
Function name: safeDiv(uint256,uint256)
PC address: 959
Estimated Gas Usage: 324 - 419
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x1770129cd23C680C1c52C8D3a9c3D527B73CE1de.sol:117

x / y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.100797
Transaction Length: 1
Severity: High
Contract: Math
Function name: rdiv(uint256,uint256)
PC address: 985
Estimated Gas Usage: 382 - 477
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x1770129cd23C680C1c52C8D3a9c3D527B73CE1de.sol:113

x * y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:19.982565
Transaction Length: 1
Severity: High
Contract: Math
Function name: rdiv(uint256,uint256)
PC address: 1128
Estimated Gas Usage: 496 - 591
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x1770129cd23C680C1c52C8D3a9c3D527B73CE1de.sol:105

x + y

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:39.985632
Transaction Length: 1
Severity: High
Contract: Memberlist
Function name: safeSub(uint256,uint256)
PC address: 2809
Estimated Gas Usage: 332 - 427
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x1770129cd23C680C1c52C8D3a9c3D527B73CE1de.sol:109

x - y

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:53.458383
Transaction Length: 1
Severity: Low
Contract: Memberlist
Function name: safeDiv(uint256,uint256)
PC address: 2948
Estimated Gas Usage: 347 - 442
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x1770129cd23C680C1c52C8D3a9c3D527B73CE1de.sol:117

x / y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.157656
Transaction Length: 1
Severity: High
Contract: Memberlist
Function name: rdiv(uint256,uint256)
PC address: 2998
Estimated Gas Usage: 450 - 545
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x1770129cd23C680C1c52C8D3a9c3D527B73CE1de.sol:113

x * y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.730972
Transaction Length: 1
Severity: High
Contract: Memberlist
Function name: rdiv(uint256,uint256)
PC address: 3141
Estimated Gas Usage: 564 - 659
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x1770129cd23C680C1c52C8D3a9c3D527B73CE1de.sol:105

x + y

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x0935a2cefdb728c13049498a4ea75fea7537b78b.sol
Total states:5283
10.635925
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.039629
Transaction Length: 0
Severity: High
Contract: ERC20
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x0935a2cefdb728c13049498a4ea75fea7537b78b.sol:19

//

// Provide liquidity to the LIQLO-ETH o

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x642bF34F2aeC4c28a8273C8f032c1b0a21EceDcf.sol
Total states:976
24.86744
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.722757
Transaction Length: 1
Severity: High
Contract: UniswapV2
Function name: allPairsLength()
PC address: 398
Estimated Gas Usage: 2192 - 37086
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x642bF34F2aeC4c28a8273C8f032c1b0a21EceDcf.sol:5

racts/lib/IERC2

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.366304
Transaction Length: 1
Severity: High
Contract: UniswapV2
Function name: allPairsLength()
PC address: 401
Estimated Gas Usage: 2192 - 37086
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x642bF34F2aeC4c28a8273C8f032c1b0a21EceDcf.sol:3



// File: contracts/lib/IERC20.sol

//prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.170722
Transaction Length: 1
Severity: High
Contract: UniswapV2
Function name: allPairsLength()
PC address: 413
Estimated Gas Usage: 2192 - 37086
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x642bF34F2aeC4c28a8273C8f032c1b0a21EceDcf.sol:154

factory.allPairsLength()

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:06.671531
Transaction Length: 1
Severity: High
Contract: UniswapV2
Function name: getPairs(uint256,uint256)
PC address: 2557
Estimated Gas Usage: 560 - 938
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x642bF34F2aeC4c28a8273C8f032c1b0a21EceDcf.sol:158

toIndex - fromIndex

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:02.280967
Transaction Length: 1
Severity: High
Contract: UniswapV2
Function name: allPairsLength()
PC address: 3659
Estimated Gas Usage: 2192 - 37086
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x642bF34F2aeC4c28a8273C8f032c1b0a21EceDcf.sol:44

e number of decimals us

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x8ad16ed35b1cfc6072af325005213fe8c29c7477.sol
Total states:35050
171.156094
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.107060
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1004
Estimated Gas Usage: 417 - 512
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x8ad16ed35b1cfc6072af325005213fe8c29c7477.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.199662
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1006
Estimated Gas Usage: 417 - 512
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x8ad16ed35b1cfc6072af325005213fe8c29c7477.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.076326
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1089
Estimated Gas Usage: 593 - 688
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x8ad16ed35b1cfc6072af325005213fe8c29c7477.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:26.484475
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1091
Estimated Gas Usage: 593 - 688
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x8ad16ed35b1cfc6072af325005213fe8c29c7477.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.937452
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1250
Estimated Gas Usage: 462 - 557
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x8ad16ed35b1cfc6072af325005213fe8c29c7477.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.847903
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1252
Estimated Gas Usage: 462 - 557
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x8ad16ed35b1cfc6072af325005213fe8c29c7477.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.037435
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1335
Estimated Gas Usage: 638 - 733
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x8ad16ed35b1cfc6072af325005213fe8c29c7477.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:19.007298
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1337
Estimated Gas Usage: 638 - 733
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x8ad16ed35b1cfc6072af325005213fe8c29c7477.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.845502
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeBP(uint256)
PC address: 2585
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x8ad16ed35b1cfc6072af325005213fe8c29c7477.sol:784

uint[] public bonusRangeBP

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.404271
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3621
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x8ad16ed35b1cfc6072af325005213fe8c29c7477.sol:1226

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:03.991987
Transaction Length: 2
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3621
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x8ad16ed35b1cfc6072af325005213fe8c29c7477.sol:1226

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:41.361075
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeStart(uint256)
PC address: 6017
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x8ad16ed35b1cfc6072af325005213fe8c29c7477.sol:783

uint[] public bonusRangeStart

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:33.686500
Transaction Length: 1
Severity: Low
Contract: LidStaking
Function name: stakeHandlers(uint256)
PC address: 6118
Estimated Gas Usage: 790 - 885
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x8ad16ed35b1cfc6072af325005213fe8c29c7477.sol:961

IStakeHandler[] public stakeHandlers

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.763670
Transaction Length: 2
Severity: High
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6315
Estimated Gas Usage: 1699 - 2124
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x8ad16ed35b1cfc6072af325005213fe8c29c7477.sol:1111

stakeHandlers.length-1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:08.173390
Transaction Length: 2
Severity: Low
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6326
Estimated Gas Usage: 1709 - 2134
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x8ad16ed35b1cfc6072af325005213fe8c29c7477.sol:1111

stakeHandlers[stakeHandlers.length-1]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:37.136725
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: calculateRatePerEth(uint256,uint256,uint256)
PC address: 6866
Estimated Gas Usage: 955 - 1050
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x8ad16ed35b1cfc6072af325005213fe8c29c7477.sol:162

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.481291
Transaction Length: 1
Severity: High
Contract: LidStaking
Function name: findTaxAmount(uint256,uint256)
PC address: 13348
Estimated Gas Usage: 474 - 569
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x8ad16ed35b1cfc6072af325005213fe8c29c7477.sol:162

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:31.133965
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPoolBPs(uint256)
PC address: 15373
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x8ad16ed35b1cfc6072af325005213fe8c29c7477.sol:1227

uint[] public tokenPoolBPs

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x4fe07232cbee71a97178559d5900f311b91ac618.sol
Total states:92
1.123952
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xd9d4962722a4777BC3565e562f01F698bFc0b906.sol
Total states:5978
10828.280723
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.152813
Transaction Length: 0
Severity: High
Contract: Ether5
Function name: constructor
PC address: 287
Estimated Gas Usage: 66753 - 330473
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xd9d4962722a4777BC3565e562f01F698bFc0b906.sol:216

now + poolTime

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x408853127724fbb2686362c516d8ba162063e333.sol
Total states:80555
297.11136
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.030500
Transaction Length: 0
Severity: High
Contract: TokenAccessList
Function name: constructor
PC address: 108
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x408853127724fbb2686362c516d8ba162063e333.sol:16

ping (address => bool) bearer;
    }

    /

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.762115
Transaction Length: 1
Severity: High
Contract: TokenFactory
Function name: createToken(string,string,uint8,string)
PC address: 347
Estimated Gas Usage: 319 - 414
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x408853127724fbb2686362c516d8ba162063e333.sol:3

*/

//pragma solidity ^0.5.8;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.298224
Transaction Length: 1
Severity: High
Contract: TokenAccessList
Function name: disableWalletList(address[])
PC address: 362
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x408853127724fbb2686362c516d8ba162063e333.sol:5

olidity ^0.5.8;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.648335
Transaction Length: 1
Severity: High
Contract: TokenAccessList
Function name: disableWalletList(address[])
PC address: 364
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x408853127724fbb2686362c516d8ba162063e333.sol:3

*/

//pragma solidity ^0.5.8;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.865904
Transaction Length: 1
Severity: High
Contract: TokenFactory
Function name: identifier()
PC address: 435
Estimated Gas Usage: 495 - 590
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x408853127724fbb2686362c516d8ba162063e333.sol:3

*/

//pragma solidity ^0.5.8;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:14.442971
Transaction Length: 1
Severity: High
Contract: TokenFactory
Function name: identifier()
PC address: 536
Estimated Gas Usage: 704 - 799
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x408853127724fbb2686362c516d8ba162063e333.sol:3

*/

//pragma solidity ^0.5.8;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:27.642112
Transaction Length: 1
Severity: High
Contract: TokenFactory
Function name: addAccessList(address,string,uint256,address)
PC address: 877
Estimated Gas Usage: 440 - 535
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x408853127724fbb2686362c516d8ba162063e333.sol:3

*/

//pragma solidity ^0.5.8;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:17.552912
Transaction Length: 1
Severity: High
Contract: TokenAccessList
Function name: enableWalletList(address[])
PC address: 878
Estimated Gas Usage: 362 - 457
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x408853127724fbb2686362c516d8ba162063e333.sol:5

olidity ^0.5.8;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:20.930084
Transaction Length: 1
Severity: High
Contract: TokenAccessList
Function name: enableWalletList(address[])
PC address: 880
Estimated Gas Usage: 362 - 457
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x408853127724fbb2686362c516d8ba162063e333.sol:3

*/

//pragma solidity ^0.5.8;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:31.779586
Transaction Length: 1
Severity: High
Contract: TokenFactory
Function name: createAccessList(string)
PC address: 1158
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x408853127724fbb2686362c516d8ba162063e333.sol:3

*/

//pragma solidity ^0.5.8;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:35.449326
Transaction Length: 1
Severity: High
Contract: TokenFactory
Function name: addToken(string,string,uint8,string,uint256,address,address)
PC address: 1455
Estimated Gas Usage: 362 - 457
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x408853127724fbb2686362c516d8ba162063e333.sol:3

*/

//pragma solidity ^0.5.8;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:38.524159
Transaction Length: 1
Severity: High
Contract: TokenFactory
Function name: addToken(string,string,uint8,string,uint256,address,address)
PC address: 1543
Estimated Gas Usage: 538 - 633
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x408853127724fbb2686362c516d8ba162063e333.sol:3

*/

//pragma solidity ^0.5.8;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:48.209642
Transaction Length: 1
Severity: High
Contract: TokenFactory
Function name: addToken(string,string,uint8,string,uint256,address,address)
PC address: 1644
Estimated Gas Usage: 747 - 842
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x408853127724fbb2686362c516d8ba162063e333.sol:3

*/

//pragma solidity ^0.5.8;
pragm

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:27.862947
Transaction Length: 1
Severity: High
Contract: TokenAccessList
Function name: identifier()
PC address: 2134
Estimated Gas Usage: 1331 - 2178
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x408853127724fbb2686362c516d8ba162063e333.sol:995

string public identifier

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:27.437448
Transaction Length: 1
Severity: High
Contract: TokenAccessList
Function name: identifier()
PC address: 2186
Estimated Gas Usage: 1190 - 1568
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x408853127724fbb2686362c516d8ba162063e333.sol:995

string public identifier

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.351244
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3044
Estimated Gas Usage: 989 - 1464
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x408853127724fbb2686362c516d8ba162063e333.sol:331

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.362472
Transaction Length: 2
Severity: High
Contract: ERC20Mintable
Function name: increaseAllowance(address,uint256)
PC address: 3626
Estimated Gas Usage: 989 - 1464
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x408853127724fbb2686362c516d8ba162063e333.sol:331

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.403151
Transaction Length: 2
Severity: High
Contract: ERC20BurnableAdmin
Function name: increaseAllowance(address,uint256)
PC address: 3881
Estimated Gas Usage: 989 - 1464
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x408853127724fbb2686362c516d8ba162063e333.sol:331

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.098579
Transaction Length: 2
Severity: High
Contract: ERC20Operator
Function name: increaseAllowance(address,uint256)
PC address: 4057
Estimated Gas Usage: 1011 - 1486
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x408853127724fbb2686362c516d8ba162063e333.sol:331

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.694668
Transaction Length: 2
Severity: High
Contract: ERC20CapEnabler
Function name: increaseAllowance(address,uint256)
PC address: 4836
Estimated Gas Usage: 967 - 1442
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x408853127724fbb2686362c516d8ba162063e333.sol:331

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x41456fa30c9f98d6bebbb767e9fffce1ebacf433.sol
Total states:1225
3.040633
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x24f15537229590f33c1bdf6f2fe3d55eed26ca6d.sol
Total states:35615
159.927647
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.095339
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1004
Estimated Gas Usage: 417 - 512
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x24f15537229590f33c1bdf6f2fe3d55eed26ca6d.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.156982
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1006
Estimated Gas Usage: 417 - 512
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x24f15537229590f33c1bdf6f2fe3d55eed26ca6d.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.890358
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1089
Estimated Gas Usage: 593 - 688
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x24f15537229590f33c1bdf6f2fe3d55eed26ca6d.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:25.660100
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1091
Estimated Gas Usage: 593 - 688
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x24f15537229590f33c1bdf6f2fe3d55eed26ca6d.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.788513
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1261
Estimated Gas Usage: 462 - 557
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x24f15537229590f33c1bdf6f2fe3d55eed26ca6d.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.859490
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1263
Estimated Gas Usage: 462 - 557
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x24f15537229590f33c1bdf6f2fe3d55eed26ca6d.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.281112
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1346
Estimated Gas Usage: 638 - 733
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x24f15537229590f33c1bdf6f2fe3d55eed26ca6d.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:19.157039
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1348
Estimated Gas Usage: 638 - 733
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x24f15537229590f33c1bdf6f2fe3d55eed26ca6d.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.774665
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeBP(uint256)
PC address: 2585
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x24f15537229590f33c1bdf6f2fe3d55eed26ca6d.sol:784

uint[] public bonusRangeBP

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.371624
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3707
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x24f15537229590f33c1bdf6f2fe3d55eed26ca6d.sol:1226

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:03.739609
Transaction Length: 2
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3707
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x24f15537229590f33c1bdf6f2fe3d55eed26ca6d.sol:1226

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:39.704424
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeStart(uint256)
PC address: 6017
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x24f15537229590f33c1bdf6f2fe3d55eed26ca6d.sol:783

uint[] public bonusRangeStart

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:26.144844
Transaction Length: 1
Severity: Low
Contract: LidStaking
Function name: stakeHandlers(uint256)
PC address: 6118
Estimated Gas Usage: 790 - 885
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x24f15537229590f33c1bdf6f2fe3d55eed26ca6d.sol:961

IStakeHandler[] public stakeHandlers

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.666502
Transaction Length: 2
Severity: High
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6315
Estimated Gas Usage: 1699 - 2124
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x24f15537229590f33c1bdf6f2fe3d55eed26ca6d.sol:1111

stakeHandlers.length-1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:07.465421
Transaction Length: 2
Severity: Low
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6326
Estimated Gas Usage: 1709 - 2134
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x24f15537229590f33c1bdf6f2fe3d55eed26ca6d.sol:1111

stakeHandlers[stakeHandlers.length-1]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:35.960160
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: calculateRatePerEth(uint256,uint256,uint256)
PC address: 6866
Estimated Gas Usage: 955 - 1050
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x24f15537229590f33c1bdf6f2fe3d55eed26ca6d.sol:162

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.330266
Transaction Length: 1
Severity: High
Contract: LidStaking
Function name: findTaxAmount(uint256,uint256)
PC address: 13348
Estimated Gas Usage: 474 - 569
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x24f15537229590f33c1bdf6f2fe3d55eed26ca6d.sol:162

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:30.696387
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPoolBPs(uint256)
PC address: 15577
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x24f15537229590f33c1bdf6f2fe3d55eed26ca6d.sol:1227

uint[] public tokenPoolBPs

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xdd6a801e7b0f30bcae4bb4f490bcf9784a6f9690.sol
Total states:24218
66.780118
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.892793
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3244
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xdd6a801e7b0f30bcae4bb4f490bcf9784a6f9690.sol:121

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.521099
Transaction Length: 1
Severity: High
Contract: DynamicSwap
Function name: swapExactAmountOut(address,address,uint256,uint256,uint256)
PC address: 10892
Estimated Gas Usage: 2277 - 37169
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xdd6a801e7b0f30bcae4bb4f490bcf9784a6f9690.sol:140

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.336044
Transaction Length: 2
Severity: High
Contract: DynamicSwap
Function name: increaseAllowance(address,uint256)
PC address: 11821
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xdd6a801e7b0f30bcae4bb4f490bcf9784a6f9690.sol:121

a + b

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:08.282673
Transaction Length: 1
Severity: High
Contract: DynamicSwap
Function name: getInExactOut(int256,int256,int256)
PC address: 12781
Estimated Gas Usage: 484 - 579
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xdd6a801e7b0f30bcae4bb4f490bcf9784a6f9690.sol:229

a - b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:21.182799
Transaction Length: 1
Severity: High
Contract: DynamicSwap
Function name: getOutExactIn(int256,int256,int256)
PC address: 14894
Estimated Gas Usage: 550 - 645
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xdd6a801e7b0f30bcae4bb4f490bcf9784a6f9690.sol:235

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.518408
Transaction Length: 1
Severity: High
Contract: DynamicSwap
Function name: getInExactOut(int256,int256,int256)
PC address: 16019
Estimated Gas Usage: 734 - 829
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xdd6a801e7b0f30bcae4bb4f490bcf9784a6f9690.sol:215

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x68AEA07c99D571aa6C1681CD91f10BA73E0Ac6B3.sol
Total states:22614
786.40886
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.926498
Transaction Length: 1
Severity: High
Contract: Module
Function name: getModuleAddress(string)
PC address: 416
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x68AEA07c99D571aa6C1681CD91f10BA73E0Ac6B3.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.210936
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 511
Estimated Gas Usage: 364 - 459
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x68AEA07c99D571aa6C1681CD91f10BA73E0Ac6B3.sol:5

openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.861176
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 513
Estimated Gas Usage: 364 - 459
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x68AEA07c99D571aa6C1681CD91f10BA73E0Ac6B3.sol:3

*/

// File: @openzeppelin\upgrades\

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.585029
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 596
Estimated Gas Usage: 540 - 635
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x68AEA07c99D571aa6C1681CD91f10BA73E0Ac6B3.sol:5

openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:15.515960
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 598
Estimated Gas Usage: 540 - 635
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x68AEA07c99D571aa6C1681CD91f10BA73E0Ac6B3.sol:3

*/

// File: @openzeppelin\upgrades\

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:30.164425
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 681
Estimated Gas Usage: 716 - 811
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x68AEA07c99D571aa6C1681CD91f10BA73E0Ac6B3.sol:5

openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:47.907944
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 683
Estimated Gas Usage: 716 - 811
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x68AEA07c99D571aa6C1681CD91f10BA73E0Ac6B3.sol:3

*/

// File: @openzeppelin\upgrades\

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:07.863097
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 766
Estimated Gas Usage: 892 - 987
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x68AEA07c99D571aa6C1681CD91f10BA73E0Ac6B3.sol:5

openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:48.949933
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 768
Estimated Gas Usage: 892 - 987
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x68AEA07c99D571aa6C1681CD91f10BA73E0Ac6B3.sol:3

*/

// File: @openzeppelin\upgrades\

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.146882
Transaction Length: 1
Severity: High
Contract: StakingPoolBase
Function name: stake(uint256,bytes)
PC address: 876
Estimated Gas Usage: 414 - 509
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x68AEA07c99D571aa6C1681CD91f10BA73E0Ac6B3.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.312007
Transaction Length: 1
Severity: High
Contract: StakingPool
Function name: stake(uint256,bytes)
PC address: 1086
Estimated Gas Usage: 436 - 531
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x68AEA07c99D571aa6C1681CD91f10BA73E0Ac6B3.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:27.215554
Transaction Length: 1
Severity: High
Contract: StakingPoolBase
Function name: stakeFor(address,uint256,bytes)
PC address: 1105
Estimated Gas Usage: 469 - 564
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x68AEA07c99D571aa6C1681CD91f10BA73E0Ac6B3.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.536952
Transaction Length: 1
Severity: High
Contract: StakingPool
Function name: stakeFor(address,uint256,bytes)
PC address: 1315
Estimated Gas Usage: 491 - 586
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x68AEA07c99D571aa6C1681CD91f10BA73E0Ac6B3.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:21.542123
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: getModuleAddress(string)
PC address: 1453
Estimated Gas Usage: 451 - 546
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x68AEA07c99D571aa6C1681CD91f10BA73E0Ac6B3.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:20.067866
Transaction Length: 1
Severity: High
Contract: StakingPoolBase
Function name: getPersonalStakeUnlockedTimestamps(address)
PC address: 1667
Estimated Gas Usage: 2628 - 4231
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x68AEA07c99D571aa6C1681CD91f10BA73E0Ac6B3.sol:1518

function getPersonalStakeUnlockedTimestamps(address _address) external view returns (uint256[] memory) {
    uint256[] memory timestamps;
    (timestamps,,) = getPersonalStakes(_address);

    return timestamps;
  }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:10.058736
Transaction Length: 1
Severity: High
Contract: StakingPool
Function name: getPersonalStakeUnlockedTimestamps(address)
PC address: 1877
Estimated Gas Usage: 2584 - 4187
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x68AEA07c99D571aa6C1681CD91f10BA73E0Ac6B3.sol:1518

function getPersonalStakeUnlockedTimestamps(address _address) external view returns (uint256[] memory) {
    uint256[] memory timestamps;
    (timestamps,,) = getPersonalStakes(_address);

    return timestamps;
  }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:33.810555
Transaction Length: 1
Severity: High
Contract: StakingPool
Function name: getPersonalStakeUnlockedTimestamps(address)
PC address: 1917
Estimated Gas Usage: 2734 - 4713
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x68AEA07c99D571aa6C1681CD91f10BA73E0Ac6B3.sol:1518

function getPersonalStakeUnlockedTimestamps(address _address) external view returns (uint256[] memory) {
    uint256[] memory timestamps;
    (timestamps,,) = getPersonalStakes(_address);

    return timestamps;
  }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.715162
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3249
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x68AEA07c99D571aa6C1681CD91f10BA73E0Ac6B3.sol:212

a + b

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:54.577477
Transaction Length: 1
Severity: Low
Contract: StakingPoolBase
Function name: stakeFor(address,uint256,bytes)
PC address: 13457
Estimated Gas Usage: 2998 - 7001
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop3/0x68AEA07c99D571aa6C1681CD91f10BA73E0Ac6B3.sol:1378

stakingToken.transferFrom(_address, address(this), _amount)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x78005e1a9f97e5883c18fdd3831eaac2b12b925b.sol
Total states:3610
84.095781
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.965989
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: initialize(uint256,uint256,address[],uint256[],address)
PC address: 787
Estimated Gas Usage: 461 - 556
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x78005e1a9f97e5883c18fdd3831eaac2b12b925b.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.507612
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: initialize(uint256,uint256,address[],uint256[],address)
PC address: 789
Estimated Gas Usage: 461 - 556
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x78005e1a9f97e5883c18fdd3831eaac2b12b925b.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:14.876233
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: initialize(uint256,uint256,address[],uint256[],address)
PC address: 872
Estimated Gas Usage: 637 - 732
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x78005e1a9f97e5883c18fdd3831eaac2b12b925b.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:24.828052
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: initialize(uint256,uint256,address[],uint256[],address)
PC address: 874
Estimated Gas Usage: 637 - 732
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x78005e1a9f97e5883c18fdd3831eaac2b12b925b.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:34.002548
Transaction Length: 1
Severity: Medium
Contract: LidTeamLock
Function name: startRelease()
PC address: 1025
Estimated Gas Usage: 20818 - 150697
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 4521
Offset: 4885
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop3/0x78005e1a9f97e5883c18fdd3831eaac2b12b925b.sol:694

function startRelease() external {

        require(releaseStart == 0, "Has already started.");

        require(address(this).balance != 0, "Must have some ether deposited.");

        require(lidToken.balanceOf(address(this)) != 0, "Must have some lid deposited.");

        startingLid = lidToken.balanceOf(address(this));

        startingEth = address(this).balance;

        releaseStart = now.add(24 hours);

    }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:00.655057
Transaction Length: 2
Severity: Medium
Contract: LidTeamLock
Function name: startRelease()
PC address: 1025
Estimated Gas Usage: 20818 - 150697
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 4521
Offset: 4885
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop3/0x78005e1a9f97e5883c18fdd3831eaac2b12b925b.sol:694

function startRelease() external {

        require(releaseStart == 0, "Has already started.");

        require(address(this).balance != 0, "Must have some ether deposited.");

        require(lidToken.balanceOf(address(this)) != 0, "Must have some lid deposited.");

        startingLid = lidToken.balanceOf(address(this));

        startingEth = address(this).balance;

        releaseStart = now.add(24 hours);

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:35.421478
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 1163
Estimated Gas Usage: 407 - 502
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x78005e1a9f97e5883c18fdd3831eaac2b12b925b.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:38.470331
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 1165
Estimated Gas Usage: 407 - 502
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x78005e1a9f97e5883c18fdd3831eaac2b12b925b.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:44.206102
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 1248
Estimated Gas Usage: 583 - 678
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x78005e1a9f97e5883c18fdd3831eaac2b12b925b.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:57.388426
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 1250
Estimated Gas Usage: 583 - 678
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x78005e1a9f97e5883c18fdd3831eaac2b12b925b.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.778390
Transaction Length: 1
Severity: Low
Contract: LidTeamLock
Function name: teamMemberBPs(uint256)
PC address: 1624
Estimated Gas Usage: 679 - 774
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x78005e1a9f97e5883c18fdd3831eaac2b12b925b.sol:572

uint[] public teamMemberBPs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:20.477751
Transaction Length: 1
Severity: Low
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 5028
Estimated Gas Usage: 1070 - 1165
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x78005e1a9f97e5883c18fdd3831eaac2b12b925b.sol:720

teamMemberAddresses[0]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:20.935720
Transaction Length: 1
Severity: Low
Contract: LidTeamLock
Function name: teamMemberAddresses(uint256)
PC address: 5599
Estimated Gas Usage: 678 - 773
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x78005e1a9f97e5883c18fdd3831eaac2b12b925b.sol:570

address payable[] public teamMemberAddresses

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:32.954745
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: startRelease()
PC address: 6647
Estimated Gas Usage: 15758 - 125637
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x78005e1a9f97e5883c18fdd3831eaac2b12b925b.sol:186

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol
Total states:53090
307.297645
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.046653
Transaction Length: 1
Severity: High
Contract: Getters
Function name: totalNet()
PC address: 4280
Estimated Gas Usage: 2753 - 37647
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:5

dity ^0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.903098
Transaction Length: 1
Severity: High
Contract: Getters
Function name: totalNet()
PC address: 4283
Estimated Gas Usage: 2753 - 37647
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:3



//pragma solidity ^0.5.17;
pragma solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.486086
Transaction Length: 1
Severity: High
Contract: Getters
Function name: totalNet()
PC address: 4295
Estimated Gas Usage: 2753 - 37647
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:1004

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.525317
Transaction Length: 1
Severity: High
Contract: Comptroller
Function name: totalNet()
PC address: 4480
Estimated Gas Usage: 2753 - 37647
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:5

dity ^0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.261585
Transaction Length: 1
Severity: High
Contract: Permission
Function name: totalNet()
PC address: 4480
Estimated Gas Usage: 2753 - 37647
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:5

dity ^0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.074103
Transaction Length: 1
Severity: High
Contract: Regulator
Function name: totalNet()
PC address: 4480
Estimated Gas Usage: 2753 - 37647
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:5

dity ^0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.013810
Transaction Length: 1
Severity: High
Contract: Setters
Function name: totalNet()
PC address: 4480
Estimated Gas Usage: 2753 - 37647
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:5

dity ^0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.334161
Transaction Length: 1
Severity: High
Contract: Comptroller
Function name: totalNet()
PC address: 4483
Estimated Gas Usage: 2753 - 37647
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:3



//pragma solidity ^0.5.17;
pragma solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.122628
Transaction Length: 1
Severity: High
Contract: Permission
Function name: totalNet()
PC address: 4483
Estimated Gas Usage: 2753 - 37647
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:3



//pragma solidity ^0.5.17;
pragma solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.931489
Transaction Length: 1
Severity: High
Contract: Regulator
Function name: totalNet()
PC address: 4483
Estimated Gas Usage: 2753 - 37647
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:3



//pragma solidity ^0.5.17;
pragma solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.946922
Transaction Length: 1
Severity: High
Contract: Setters
Function name: totalNet()
PC address: 4483
Estimated Gas Usage: 2753 - 37647
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:3



//pragma solidity ^0.5.17;
pragma solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.942987
Transaction Length: 1
Severity: High
Contract: Comptroller
Function name: totalNet()
PC address: 4495
Estimated Gas Usage: 2753 - 37647
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:1004

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.735245
Transaction Length: 1
Severity: High
Contract: Permission
Function name: totalNet()
PC address: 4495
Estimated Gas Usage: 2753 - 37647
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:1004

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.514459
Transaction Length: 1
Severity: High
Contract: Regulator
Function name: totalNet()
PC address: 4495
Estimated Gas Usage: 2753 - 37647
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:1004

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.489755
Transaction Length: 1
Severity: High
Contract: Setters
Function name: totalNet()
PC address: 4495
Estimated Gas Usage: 2753 - 37647
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:1004

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.464397
Transaction Length: 1
Severity: High
Contract: Market
Function name: totalNet()
PC address: 5472
Estimated Gas Usage: 2841 - 37735
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:5

dity ^0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.309558
Transaction Length: 1
Severity: High
Contract: Market
Function name: totalNet()
PC address: 5475
Estimated Gas Usage: 2841 - 37735
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:3



//pragma solidity ^0.5.17;
pragma solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.900742
Transaction Length: 1
Severity: High
Contract: Market
Function name: totalNet()
PC address: 5487
Estimated Gas Usage: 2841 - 37735
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:1004

dollar().totalSupply()

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:04.591594
Transaction Length: 1
Severity: High
Contract: Getters
Function name: totalNet()
PC address: 5571
Estimated Gas Usage: 2753 - 37647
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:57

rpart to Solidity's `-`

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.102825
Transaction Length: 1
Severity: High
Contract: Comptroller
Function name: totalNet()
PC address: 5861
Estimated Gas Usage: 2753 - 37647
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:76

     *
     * Requireme

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:04.786451
Transaction Length: 1
Severity: High
Contract: Permission
Function name: totalNet()
PC address: 5861
Estimated Gas Usage: 2753 - 37647
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:76

     *
     * Requireme

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:04.624666
Transaction Length: 1
Severity: High
Contract: Regulator
Function name: totalNet()
PC address: 5861
Estimated Gas Usage: 2753 - 37647
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:76

     *
     * Requireme

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:04.535682
Transaction Length: 1
Severity: High
Contract: Setters
Function name: totalNet()
PC address: 5861
Estimated Gas Usage: 2753 - 37647
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:76

     *
     * Requireme

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.233680
Transaction Length: 1
Severity: High
Contract: Bonding
Function name: totalNet()
PC address: 5864
Estimated Gas Usage: 2863 - 37757
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:5

dity ^0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.145574
Transaction Length: 1
Severity: High
Contract: Bonding
Function name: totalNet()
PC address: 5867
Estimated Gas Usage: 2863 - 37757
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:3



//pragma solidity ^0.5.17;
pragma solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.695529
Transaction Length: 1
Severity: High
Contract: Bonding
Function name: totalNet()
PC address: 5879
Estimated Gas Usage: 2863 - 37757
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:1004

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.553908
Transaction Length: 1
Severity: High
Contract: Market
Function name: couponPremium(uint256)
PC address: 6079
Estimated Gas Usage: 2510 - 37404
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:5

dity ^0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.204227
Transaction Length: 1
Severity: High
Contract: Market
Function name: couponPremium(uint256)
PC address: 6082
Estimated Gas Usage: 2510 - 37404
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:3



//pragma solidity ^0.5.17;
pragma solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.434572
Transaction Length: 1
Severity: High
Contract: Market
Function name: couponPremium(uint256)
PC address: 6094
Estimated Gas Usage: 2510 - 37404
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:1935

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.972205
Transaction Length: 1
Severity: High
Contract: Implementation
Function name: totalNet()
PC address: 7850
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:5

dity ^0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.846506
Transaction Length: 1
Severity: High
Contract: Implementation
Function name: totalNet()
PC address: 7853
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:3



//pragma solidity ^0.5.17;
pragma solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.424990
Transaction Length: 1
Severity: High
Contract: Implementation
Function name: totalNet()
PC address: 7865
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:1004

dollar().totalSupply()

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:04.759024
Transaction Length: 1
Severity: High
Contract: Bonding
Function name: totalNet()
PC address: 10022
Estimated Gas Usage: 2863 - 37757
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:84

 {
            return 0

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:15.321948
Transaction Length: 1
Severity: Low
Contract: Market
Function name: purchaseCoupons(uint256)
PC address: 10459
Estimated Gas Usage: 703 - 1362
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:1601

result[i]

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.021645
Transaction Length: 1
Severity: High
Contract: Market
Function name: totalNet()
PC address: 12260
Estimated Gas Usage: 2841 - 37735
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:105

t256 a, uint256 b) inte

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.514932
Transaction Length: 1
Severity: High
Contract: Implementation
Function name: totalNet()
PC address: 23486
Estimated Gas Usage: 2775 - 37669
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:139

quirements:
     * - Th

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xdbb4d5b3671d418a58c201713cbda6958969430f.sol
Total states:1133
0.828877
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x9d7242f7f2514e0cc5e691dc6d3c789ea184bf8c.sol
Total states:1367
3.476938
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x87b9382164968b2a17d324986b455bd4d76f19c7.sol
Total states:1225
3.775268
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xb7964456b82918de574be07ea5a9fc5640287e52.sol
Total states:5739
11.171715
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x41560ff6352d5e32c41deeb29fa36291bb70efb0.sol
Total states:3568
14.368393
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.572785
Transaction Length: 1
Severity: Low
Contract: Authorizable
Function name: authorities(uint256)
PC address: 472
Estimated Gas Usage: 805 - 900
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x41560ff6352d5e32c41deeb29fa36291bb70efb0.sol:2356

address[] public authorities

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.404710
Transaction Length: 1
Severity: Low
Contract: ERC20BridgeProxy
Function name: authorities(uint256)
PC address: 1015
Estimated Gas Usage: 827 - 922
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x41560ff6352d5e32c41deeb29fa36291bb70efb0.sol:2356

address[] public authorities

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xb9c806a415a6f0a735c76418e9a21da2c2d92788.sol
Total states:1255
1.204423
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.056118
Transaction Length: 0
Severity: High
Contract: Token2021
Function name: constructor
PC address: 296
Estimated Gas Usage: 16197 - 79630
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xb9c806a415a6f0a735c76418e9a21da2c2d92788.sol:11

ance(address owner, address spender) extern

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xac2b08a05bb78b6d804ad329fa388ace3e09e4dc.sol
Total states:35615
155.116516
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.045083
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1004
Estimated Gas Usage: 417 - 512
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xac2b08a05bb78b6d804ad329fa388ace3e09e4dc.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.873179
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1006
Estimated Gas Usage: 417 - 512
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xac2b08a05bb78b6d804ad329fa388ace3e09e4dc.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.373688
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1089
Estimated Gas Usage: 593 - 688
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xac2b08a05bb78b6d804ad329fa388ace3e09e4dc.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:23.308927
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1091
Estimated Gas Usage: 593 - 688
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xac2b08a05bb78b6d804ad329fa388ace3e09e4dc.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.800790
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1261
Estimated Gas Usage: 462 - 557
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xac2b08a05bb78b6d804ad329fa388ace3e09e4dc.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.732306
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1263
Estimated Gas Usage: 462 - 557
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xac2b08a05bb78b6d804ad329fa388ace3e09e4dc.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.092375
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1346
Estimated Gas Usage: 638 - 733
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xac2b08a05bb78b6d804ad329fa388ace3e09e4dc.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:18.700248
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1348
Estimated Gas Usage: 638 - 733
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xac2b08a05bb78b6d804ad329fa388ace3e09e4dc.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.753558
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeBP(uint256)
PC address: 2585
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xac2b08a05bb78b6d804ad329fa388ace3e09e4dc.sol:784

uint[] public bonusRangeBP

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.372414
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3707
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xac2b08a05bb78b6d804ad329fa388ace3e09e4dc.sol:1226

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:03.733033
Transaction Length: 2
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3707
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xac2b08a05bb78b6d804ad329fa388ace3e09e4dc.sol:1226

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:36.892655
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeStart(uint256)
PC address: 6017
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xac2b08a05bb78b6d804ad329fa388ace3e09e4dc.sol:783

uint[] public bonusRangeStart

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:23.723393
Transaction Length: 1
Severity: Low
Contract: LidStaking
Function name: stakeHandlers(uint256)
PC address: 6118
Estimated Gas Usage: 790 - 885
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xac2b08a05bb78b6d804ad329fa388ace3e09e4dc.sol:961

IStakeHandler[] public stakeHandlers

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.659825
Transaction Length: 2
Severity: High
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6315
Estimated Gas Usage: 1699 - 2124
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xac2b08a05bb78b6d804ad329fa388ace3e09e4dc.sol:1111

stakeHandlers.length-1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:07.591257
Transaction Length: 2
Severity: Low
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6326
Estimated Gas Usage: 1709 - 2134
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xac2b08a05bb78b6d804ad329fa388ace3e09e4dc.sol:1111

stakeHandlers[stakeHandlers.length-1]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:33.158122
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: calculateRatePerEth(uint256,uint256,uint256)
PC address: 6866
Estimated Gas Usage: 955 - 1050
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xac2b08a05bb78b6d804ad329fa388ace3e09e4dc.sol:162

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.427255
Transaction Length: 1
Severity: High
Contract: LidStaking
Function name: findTaxAmount(uint256,uint256)
PC address: 13348
Estimated Gas Usage: 474 - 569
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xac2b08a05bb78b6d804ad329fa388ace3e09e4dc.sol:162

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:31.058008
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPoolBPs(uint256)
PC address: 15577
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xac2b08a05bb78b6d804ad329fa388ace3e09e4dc.sol:1227

uint[] public tokenPoolBPs

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x9c0999b1edbb8dcebbc12ac0d2f3c6118d7657a8.sol
Total states:1225
2.842057
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x0a81056b72db5694d3f50f9bf7110b60d8af995e.sol
Total states:212
0.751787
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x043b963e1b2214ec90046167ea29c2c8bdd7c0ec.sol
Total states:1999
2.886934
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x1Bc55bcAf89f514CE5a8336bEC7429a99e804910.sol
Total states:3409
248.128783
==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:31.548182
Transaction Length: 1
Severity: High
Contract: Math
Function name: safeSub(uint256,uint256)
PC address: 820
Estimated Gas Usage: 309 - 404
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x1Bc55bcAf89f514CE5a8336bEC7429a99e804910.sol:109

x - y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:30.285222
Transaction Length: 1
Severity: High
Contract: Memberlist
Function name: updateMembers(address[],uint256)
PC address: 827
Estimated Gas Usage: 407 - 502
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x1Bc55bcAf89f514CE5a8336bEC7429a99e804910.sol:5

d using https://dapp.

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:33.148647
Transaction Length: 1
Severity: High
Contract: Memberlist
Function name: updateMembers(address[],uint256)
PC address: 829
Estimated Gas Usage: 407 - 502
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x1Bc55bcAf89f514CE5a8336bEC7429a99e804910.sol:3

*/

// Verified using https://dapp.t

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:33.623493
Transaction Length: 1
Severity: Low
Contract: Math
Function name: safeDiv(uint256,uint256)
PC address: 959
Estimated Gas Usage: 324 - 419
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x1Bc55bcAf89f514CE5a8336bEC7429a99e804910.sol:117

x / y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.088253
Transaction Length: 1
Severity: High
Contract: Math
Function name: rdiv(uint256,uint256)
PC address: 985
Estimated Gas Usage: 382 - 477
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x1Bc55bcAf89f514CE5a8336bEC7429a99e804910.sol:113

x * y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:21.123383
Transaction Length: 1
Severity: High
Contract: Math
Function name: rdiv(uint256,uint256)
PC address: 1128
Estimated Gas Usage: 496 - 591
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x1Bc55bcAf89f514CE5a8336bEC7429a99e804910.sol:105

x + y

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:39.865234
Transaction Length: 1
Severity: High
Contract: Memberlist
Function name: safeSub(uint256,uint256)
PC address: 2809
Estimated Gas Usage: 332 - 427
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x1Bc55bcAf89f514CE5a8336bEC7429a99e804910.sol:109

x - y

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:53.669432
Transaction Length: 1
Severity: Low
Contract: Memberlist
Function name: safeDiv(uint256,uint256)
PC address: 2948
Estimated Gas Usage: 347 - 442
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x1Bc55bcAf89f514CE5a8336bEC7429a99e804910.sol:117

x / y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.293692
Transaction Length: 1
Severity: High
Contract: Memberlist
Function name: rdiv(uint256,uint256)
PC address: 2998
Estimated Gas Usage: 450 - 545
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x1Bc55bcAf89f514CE5a8336bEC7429a99e804910.sol:113

x * y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.964385
Transaction Length: 1
Severity: High
Contract: Memberlist
Function name: rdiv(uint256,uint256)
PC address: 3141
Estimated Gas Usage: 564 - 659
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x1Bc55bcAf89f514CE5a8336bEC7429a99e804910.sol:105

x + y

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xc2a9aa6aa4d9aded3d7b3463d9860e360a0ccb30.sol
Total states:426
0.808441
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xd9ce2f076e405b346ed9d9653abf9924d7e0f679.sol
Total states:1367
3.256543
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x03bF758A70c0f1d7515eaE6962FbF990Ce76f8f2.sol
Total states:3164
7.976335
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.307267
Transaction Length: 1
Severity: High
Contract: OptionsPrice
Function name: calOptionsPriceRatio(uint256,uint256,uint256)
PC address: 2920
Estimated Gas Usage: 374 - 469
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x03bF758A70c0f1d7515eaE6962FbF990Ce76f8f2.sol:655

selfOccupied*2

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xe8d36d84c58ba104c346726641d0deca05ad237c.sol
Total states:5754
1418.821791
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.799277
Transaction Length: 1
Severity: High
Contract: DMGBurnerV1
Function name: enableTokens(address[])
PC address: 580
Estimated Gas Usage: 340 - 435
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xe8d36d84c58ba104c346726641d0deca05ad237c.sol:5

olidity ^0.5.0;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.019568
Transaction Length: 1
Severity: High
Contract: DMGBurnerV1
Function name: enableTokens(address[])
PC address: 582
Estimated Gas Usage: 340 - 435
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xe8d36d84c58ba104c346726641d0deca05ad237c.sol:3

*/

//pragma solidity ^0.5.0;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:33.974328
Transaction Length: 1
Severity: High
Contract: DMGBurnerV1
Function name: burnDmg(address,uint256,address[])
PC address: 806
Estimated Gas Usage: 422 - 517
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xe8d36d84c58ba104c346726641d0deca05ad237c.sol:5

olidity ^0.5.0;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:38.871146
Transaction Length: 1
Severity: High
Contract: DMGBurnerV1
Function name: burnDmg(address,uint256,address[])
PC address: 808
Estimated Gas Usage: 422 - 517
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xe8d36d84c58ba104c346726641d0deca05ad237c.sol:3

*/

//pragma solidity ^0.5.0;
pragma

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xecbc624bebc96fcae982f417dd1ac12b38b52c51.sol
Total states:426
0.820082
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xecb5054213ead4c5e2d3f2033b8e8afb41715ba12.sol
Total states:421
0.394176
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x8dd4b9c337fafb5ae3dc52c3be95c9a96ee62567.sol
Total states:20932
55.343781
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.945246
Transaction Length: 1
Severity: High
Contract: AskoTeamLock
Function name: initialize(uint256,uint256,uint256,address[],address)
PC address: 794
Estimated Gas Usage: 487 - 582
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x8dd4b9c337fafb5ae3dc52c3be95c9a96ee62567.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.033574
Transaction Length: 1
Severity: High
Contract: AskoTeamLock
Function name: initialize(uint256,uint256,uint256,address[],address)
PC address: 796
Estimated Gas Usage: 487 - 582
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x8dd4b9c337fafb5ae3dc52c3be95c9a96ee62567.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.473442
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3249
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x8dd4b9c337fafb5ae3dc52c3be95c9a96ee62567.sol:186

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.764640
Transaction Length: 2
Severity: High
Contract: ERC20Burnable
Function name: increaseAllowance(address,uint256)
PC address: 3429
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x8dd4b9c337fafb5ae3dc52c3be95c9a96ee62567.sol:186

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.758793
Transaction Length: 1
Severity: Low
Contract: AskoTeamLock
Function name: teamMembers(uint256)
PC address: 3688
Estimated Gas Usage: 722 - 817
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x8dd4b9c337fafb5ae3dc52c3be95c9a96ee62567.sol:1187

address[] public teamMembers

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xcfd4a2d1a84c754555321822aa2e72d56f5476da.sol
Total states:6297
13.617042
==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:00:05.600118
Transaction Length: 1
Severity: Medium
Contract: ContributionTrigger
Function name: depositeToken(address,address,uint256)
PC address: 8332
Estimated Gas Usage: 1239 - 1805
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../contracts/m_loop/loop3/0xcfd4a2d1a84c754555321822aa2e72d56f5476da.sol:456

_token.transfer(_to, _amount)

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:00:03.402216
Transaction Length: 1
Severity: Medium
Contract: ContributionTrigger
Function name: depositeToken(address,address,uint256)
PC address: 8727
Estimated Gas Usage: 1272 - 1933
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../contracts/m_loop/loop3/0xcfd4a2d1a84c754555321822aa2e72d56f5476da.sol:459

_token.transferFrom(_from, _to, _amount)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x1fda8eee35eaa3e7925f0e1db467e81f4dccb0ac.sol
Total states:10013
48.720145
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.595816
Transaction Length: 1
Severity: High
Contract: Liquidity
Function name: totalRewarded()
PC address: 1667
Estimated Gas Usage: 2933 - 37922
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x1fda8eee35eaa3e7925f0e1db467e81f4dccb0ac.sol:9

ency file: @ope

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.709824
Transaction Length: 1
Severity: High
Contract: PoolGetters
Function name: totalRewarded()
PC address: 1667
Estimated Gas Usage: 2933 - 37922
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x1fda8eee35eaa3e7925f0e1db467e81f4dccb0ac.sol:9

ency file: @ope

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.445000
Transaction Length: 1
Severity: High
Contract: PoolSetters
Function name: totalRewarded()
PC address: 1667
Estimated Gas Usage: 2933 - 37922
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x1fda8eee35eaa3e7925f0e1db467e81f4dccb0ac.sol:9

ency file: @ope

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.307870
Transaction Length: 1
Severity: High
Contract: Liquidity
Function name: totalRewarded()
PC address: 1670
Estimated Gas Usage: 2933 - 37922
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x1fda8eee35eaa3e7925f0e1db467e81f4dccb0ac.sol:5

*/



// Dependency file: @openzeppelin/con

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.196149
Transaction Length: 1
Severity: High
Contract: PoolGetters
Function name: totalRewarded()
PC address: 1670
Estimated Gas Usage: 2933 - 37922
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x1fda8eee35eaa3e7925f0e1db467e81f4dccb0ac.sol:5

*/



// Dependency file: @openzeppelin/con

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.243294
Transaction Length: 1
Severity: High
Contract: PoolSetters
Function name: totalRewarded()
PC address: 1670
Estimated Gas Usage: 2933 - 37922
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x1fda8eee35eaa3e7925f0e1db467e81f4dccb0ac.sol:5

*/



// Dependency file: @openzeppelin/con

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.060736
Transaction Length: 1
Severity: High
Contract: Liquidity
Function name: totalRewarded()
PC address: 1682
Estimated Gas Usage: 2933 - 37922
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x1fda8eee35eaa3e7925f0e1db467e81f4dccb0ac.sol:2623

dollar().balanceOf(address(this))

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.126632
Transaction Length: 1
Severity: High
Contract: PoolGetters
Function name: totalRewarded()
PC address: 1682
Estimated Gas Usage: 2933 - 37922
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x1fda8eee35eaa3e7925f0e1db467e81f4dccb0ac.sol:2623

dollar().balanceOf(address(this))

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.937464
Transaction Length: 1
Severity: High
Contract: PoolSetters
Function name: totalRewarded()
PC address: 1682
Estimated Gas Usage: 2933 - 37922
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x1fda8eee35eaa3e7925f0e1db467e81f4dccb0ac.sol:2623

dollar().balanceOf(address(this))

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:03.139056
Transaction Length: 1
Severity: High
Contract: Liquidity
Function name: totalRewarded()
PC address: 2749
Estimated Gas Usage: 2933 - 37922
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x1fda8eee35eaa3e7925f0e1db467e81f4dccb0ac.sol:35

 *

 * Using this libra

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:03.225278
Transaction Length: 1
Severity: High
Contract: PoolGetters
Function name: totalRewarded()
PC address: 2749
Estimated Gas Usage: 2933 - 37922
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x1fda8eee35eaa3e7925f0e1db467e81f4dccb0ac.sol:35

 *

 * Using this libra

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:02.964126
Transaction Length: 1
Severity: High
Contract: PoolSetters
Function name: totalRewarded()
PC address: 2749
Estimated Gas Usage: 2933 - 37922
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x1fda8eee35eaa3e7925f0e1db467e81f4dccb0ac.sol:35

 *

 * Using this libra

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xb040c6d5025305acc66c3c6f922114fcc1d10e34.sol
Total states:8715
13.98771
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.155836
Transaction Length: 0
Severity: High
Contract: CLIPricingStrategy
Function name: constructor
PC address: 130
Estimated Gas Usage: 317 - 3276
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xb040c6d5025305acc66c3c6f922114fcc1d10e34.sol:13

ferent criterias
/// 

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xef0ff94b152c00ed4620b149ee934f2f4a526387.sol
Total states:11731
77.624595
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.997950
Transaction Length: 1
Severity: High
Contract: GAMMA
Function name: transferBatch(address[],uint256[])
PC address: 1197
Estimated Gas Usage: 385 - 480
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xef0ff94b152c00ed4620b149ee934f2f4a526387.sol:5

olidity 0.5.17;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.288593
Transaction Length: 1
Severity: High
Contract: GAMMA
Function name: transferBatch(address[],uint256[])
PC address: 1199
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xef0ff94b152c00ed4620b149ee934f2f4a526387.sol:3

*/

//pragma solidity 0.5.17;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.651599
Transaction Length: 1
Severity: High
Contract: GAMMA
Function name: transferBatch(address[],uint256[])
PC address: 1282
Estimated Gas Usage: 561 - 656
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xef0ff94b152c00ed4620b149ee934f2f4a526387.sol:5

olidity 0.5.17;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:23.020803
Transaction Length: 1
Severity: High
Contract: GAMMA
Function name: transferBatch(address[],uint256[])
PC address: 1284
Estimated Gas Usage: 561 - 656
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xef0ff94b152c00ed4620b149ee934f2f4a526387.sol:3

*/

//pragma solidity 0.5.17;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:34.355097
Transaction Length: 1
Severity: High
Contract: GAMMA
Function name: mint(uint256,string,bool)
PC address: 1886
Estimated Gas Usage: 412 - 507
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xef0ff94b152c00ed4620b149ee934f2f4a526387.sol:3

*/

//pragma solidity 0.5.17;
pragm

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:14.971183
Transaction Length: 2
Severity: High
Contract: GAMMA
Function name: transferFrom(address,address,uint256)
PC address: 8394
Estimated Gas Usage: 35665 - 160730
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xef0ff94b152c00ed4620b149ee934f2f4a526387.sol:72

tokenId - 1

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:17.254310
Transaction Length: 2
Severity: High
Contract: GAMMA
Function name: transferFrom(address,address,uint256)
PC address: 8482
Estimated Gas Usage: 35665 - 160730
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xef0ff94b152c00ed4620b149ee934f2f4a526387.sol:73

tokenId - 1

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xd51153899a050485b12ea2f9e4accf58e6107ea5.sol
Total states:11782
1142.715206
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.976177
Transaction Length: 1
Severity: High
Contract: LexTokenLiteFactory
Function name: LaunchLexTokenLite(string,string,uint8,address,address,uint256,uint256,bytes32,bool)
PC address: 377
Estimated Gas Usage: 316 - 411
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xd51153899a050485b12ea2f9e4accf58e6107ea5.sol:3

*/

//pragma solidity 0.5.17;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.668665
Transaction Length: 1
Severity: High
Contract: LexTokenLiteFactory
Function name: LaunchLexTokenLite(string,string,uint8,address,address,uint256,uint256,bytes32,bool)
PC address: 528
Estimated Gas Usage: 661 - 3438
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xd51153899a050485b12ea2f9e4accf58e6107ea5.sol:3

*/

//pragma solidity 0.5.17;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.134625
Transaction Length: 1
Severity: High
Contract: LexTokenLite
Function name: transferBatch(address[],uint256[])
PC address: 1100
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xd51153899a050485b12ea2f9e4accf58e6107ea5.sol:5

olidity 0.5.17;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.940852
Transaction Length: 1
Severity: High
Contract: LexTokenLite
Function name: transferBatch(address[],uint256[])
PC address: 1102
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xd51153899a050485b12ea2f9e4accf58e6107ea5.sol:3

*/

//pragma solidity 0.5.17;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.555024
Transaction Length: 1
Severity: High
Contract: LexTokenLite
Function name: transferBatch(address[],uint256[])
PC address: 1185
Estimated Gas Usage: 539 - 634
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xd51153899a050485b12ea2f9e4accf58e6107ea5.sol:5

olidity 0.5.17;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:24.863421
Transaction Length: 1
Severity: High
Contract: LexTokenLite
Function name: transferBatch(address[],uint256[])
PC address: 1187
Estimated Gas Usage: 539 - 634
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xd51153899a050485b12ea2f9e4accf58e6107ea5.sol:3

*/

//pragma solidity 0.5.17;
pragma

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:05:32.693462
Transaction Length: 1
Severity: Low
Contract: LexTokenLiteFactory
Function name: LaunchLexTokenLite(string,string,uint8,address,address,uint256,uint256,bytes32,bool)
PC address: 1599
Estimated Gas Usage: 35144 - 43715
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop3/0xd51153899a050485b12ea2f9e4accf58e6107ea5.sol:256

lexLite.init(
            _name, 
            _symbol,
            _decimals, 
            _owner, 
            _resolver,
            ownerSupply, 
            _totalSupplyCap, 
            _message, 
            _transferable)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:01:37.257660
Transaction Length: 1
Severity: Low
Contract: LexTokenLiteFactory
Function name: LaunchLexTokenLite(string,string,uint8,address,address,uint256,uint256,bytes32,bool)
PC address: 1701
Estimated Gas Usage: 36230 - 78611
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop3/0xd51153899a050485b12ea2f9e4accf58e6107ea5.sol:267

lexDAO.call.value(msg.value)("")

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:41.301665
Transaction Length: 1
Severity: High
Contract: LexTokenLite
Function name: mintBatch(address[],uint256[])
PC address: 1710
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xd51153899a050485b12ea2f9e4accf58e6107ea5.sol:5

olidity 0.5.17;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:44.146175
Transaction Length: 1
Severity: High
Contract: LexTokenLite
Function name: mintBatch(address[],uint256[])
PC address: 1712
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xd51153899a050485b12ea2f9e4accf58e6107ea5.sol:3

*/

//pragma solidity 0.5.17;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:50.838981
Transaction Length: 1
Severity: High
Contract: LexTokenLite
Function name: mintBatch(address[],uint256[])
PC address: 1795
Estimated Gas Usage: 539 - 634
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xd51153899a050485b12ea2f9e4accf58e6107ea5.sol:5

olidity 0.5.17;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:03.787718
Transaction Length: 1
Severity: High
Contract: LexTokenLite
Function name: mintBatch(address[],uint256[])
PC address: 1797
Estimated Gas Usage: 539 - 634
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xd51153899a050485b12ea2f9e4accf58e6107ea5.sol:3

*/

//pragma solidity 0.5.17;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:18.118889
Transaction Length: 1
Severity: High
Contract: LexTokenLite
Function name: init(string,string,uint8,address,address,uint256,uint256,bytes32,bool)
PC address: 2095
Estimated Gas Usage: 451 - 546
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xd51153899a050485b12ea2f9e4accf58e6107ea5.sol:3

*/

//pragma solidity 0.5.17;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:23.003001
Transaction Length: 1
Severity: High
Contract: LexTokenLite
Function name: init(string,string,uint8,address,address,uint256,uint256,bytes32,bool)
PC address: 2180
Estimated Gas Usage: 627 - 722
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xd51153899a050485b12ea2f9e4accf58e6107ea5.sol:3

*/

//pragma solidity 0.5.17;
pragm

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xd6bb3f3f860df5eb3f5384614c0cc23f6b11bddd.sol
Total states:426
0.773461
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol
Total states:49005
313.938138
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.475633
Transaction Length: 1
Severity: Low
Contract: Getters
Function name: expiringCouponsAtIndex(uint256,uint256)
PC address: 2821
Estimated Gas Usage: 1090 - 1375
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:1181

_state.epochs[epoch].coupons.expiring[i]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.782730
Transaction Length: 1
Severity: High
Contract: Getters
Function name: totalNet()
PC address: 4187
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:5

 file: @openzep

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.702989
Transaction Length: 1
Severity: High
Contract: Getters
Function name: totalNet()
PC address: 4190
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:3



// Dependency file: @openzeppelin/contrac

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.256435
Transaction Length: 1
Severity: High
Contract: Getters
Function name: totalNet()
PC address: 4202
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:1096

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.630390
Transaction Length: 1
Severity: High
Contract: Comptroller
Function name: totalNet()
PC address: 4387
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:5

 file: @openzep

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.759194
Transaction Length: 1
Severity: High
Contract: Permission
Function name: totalNet()
PC address: 4387
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:5

 file: @openzep

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.910199
Transaction Length: 1
Severity: High
Contract: Regulator
Function name: totalNet()
PC address: 4387
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:5

 file: @openzep

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.775085
Transaction Length: 1
Severity: High
Contract: Setters
Function name: totalNet()
PC address: 4387
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:5

 file: @openzep

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.533922
Transaction Length: 1
Severity: High
Contract: Comptroller
Function name: totalNet()
PC address: 4390
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:3



// Dependency file: @openzeppelin/contrac

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.625527
Transaction Length: 1
Severity: High
Contract: Permission
Function name: totalNet()
PC address: 4390
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:3



// Dependency file: @openzeppelin/contrac

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.781554
Transaction Length: 1
Severity: High
Contract: Regulator
Function name: totalNet()
PC address: 4390
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:3



// Dependency file: @openzeppelin/contrac

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.658374
Transaction Length: 1
Severity: High
Contract: Setters
Function name: totalNet()
PC address: 4390
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:3



// Dependency file: @openzeppelin/contrac

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.096109
Transaction Length: 1
Severity: High
Contract: Comptroller
Function name: totalNet()
PC address: 4402
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:1096

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.203508
Transaction Length: 1
Severity: High
Contract: Permission
Function name: totalNet()
PC address: 4402
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:1096

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.360622
Transaction Length: 1
Severity: High
Contract: Regulator
Function name: totalNet()
PC address: 4402
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:1096

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.224054
Transaction Length: 1
Severity: High
Contract: Setters
Function name: totalNet()
PC address: 4402
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:1096

dollar().totalSupply()

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.321444
Transaction Length: 1
Severity: High
Contract: Getters
Function name: totalNet()
PC address: 5627
Estimated Gas Usage: 2775 - 37669
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:56

rt to Solidity's `-` op

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.345634
Transaction Length: 1
Severity: High
Contract: Bonding
Function name: totalNet()
PC address: 5771
Estimated Gas Usage: 2753 - 37647
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:5

 file: @openzep

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.313950
Transaction Length: 1
Severity: High
Contract: Bonding
Function name: totalNet()
PC address: 5774
Estimated Gas Usage: 2753 - 37647
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:3



// Dependency file: @openzeppelin/contrac

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.839625
Transaction Length: 1
Severity: High
Contract: Bonding
Function name: totalNet()
PC address: 5786
Estimated Gas Usage: 2753 - 37647
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:1096

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.592929
Transaction Length: 1
Severity: High
Contract: Market
Function name: totalNet()
PC address: 5827
Estimated Gas Usage: 2863 - 37757
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:5

 file: @openzep

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.529527
Transaction Length: 1
Severity: High
Contract: Market
Function name: totalNet()
PC address: 5830
Estimated Gas Usage: 2863 - 37757
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:3



// Dependency file: @openzeppelin/contrac

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.077074
Transaction Length: 1
Severity: High
Contract: Market
Function name: totalNet()
PC address: 5842
Estimated Gas Usage: 2863 - 37757
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:1096

dollar().totalSupply()

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.155824
Transaction Length: 1
Severity: High
Contract: Comptroller
Function name: totalNet()
PC address: 5917
Estimated Gas Usage: 2775 - 37669
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:75

  *
     * Requirements

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:06.306096
Transaction Length: 1
Severity: High
Contract: Permission
Function name: totalNet()
PC address: 5917
Estimated Gas Usage: 2775 - 37669
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:75

  *
     * Requirements

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.459303
Transaction Length: 1
Severity: High
Contract: Regulator
Function name: totalNet()
PC address: 5917
Estimated Gas Usage: 2775 - 37669
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:75

  *
     * Requirements

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.323807
Transaction Length: 1
Severity: High
Contract: Setters
Function name: totalNet()
PC address: 5917
Estimated Gas Usage: 2775 - 37669
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:75

  *
     * Requirements

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.779251
Transaction Length: 1
Severity: High
Contract: Market
Function name: couponPremium(uint256)
PC address: 7042
Estimated Gas Usage: 2555 - 37449
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:5

 file: @openzep

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.309880
Transaction Length: 1
Severity: High
Contract: Market
Function name: couponPremium(uint256)
PC address: 7045
Estimated Gas Usage: 2555 - 37449
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:3



// Dependency file: @openzeppelin/contrac

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.692152
Transaction Length: 1
Severity: High
Contract: Market
Function name: couponPremium(uint256)
PC address: 7057
Estimated Gas Usage: 2555 - 37449
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:2091

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.572443
Transaction Length: 1
Severity: High
Contract: Implementation
Function name: totalNet()
PC address: 8733
Estimated Gas Usage: 2797 - 37691
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:5

 file: @openzep

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.494973
Transaction Length: 1
Severity: High
Contract: Implementation
Function name: totalNet()
PC address: 8736
Estimated Gas Usage: 2797 - 37691
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:3



// Dependency file: @openzeppelin/contrac

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.047003
Transaction Length: 1
Severity: High
Contract: Implementation
Function name: totalNet()
PC address: 8748
Estimated Gas Usage: 2797 - 37691
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:1096

dollar().totalSupply()

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:04.848566
Transaction Length: 1
Severity: High
Contract: Bonding
Function name: totalNet()
PC address: 10093
Estimated Gas Usage: 2753 - 37647
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:84

            return 0;
 

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:14.512038
Transaction Length: 1
Severity: Low
Contract: Market
Function name: purchaseCoupons(uint256)
PC address: 10671
Estimated Gas Usage: 681 - 1340
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:1711

result[i]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.307803
Transaction Length: 1
Severity: High
Contract: Implementation
Function name: couponPremium(uint256)
PC address: 11345
Estimated Gas Usage: 2533 - 37427
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:5

 file: @openzep

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.688482
Transaction Length: 1
Severity: High
Contract: Implementation
Function name: couponPremium(uint256)
PC address: 11348
Estimated Gas Usage: 2533 - 37427
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:3



// Dependency file: @openzeppelin/contrac

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.048920
Transaction Length: 1
Severity: High
Contract: Implementation
Function name: couponPremium(uint256)
PC address: 11360
Estimated Gas Usage: 2533 - 37427
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:2091

dollar().totalSupply()

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.121519
Transaction Length: 1
Severity: High
Contract: Market
Function name: totalNet()
PC address: 13211
Estimated Gas Usage: 2863 - 37757
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:104

6 a, uint256 b) interna

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:06.095310
Transaction Length: 1
Severity: High
Contract: Implementation
Function name: totalNet()
PC address: 25502
Estimated Gas Usage: 2797 - 37691
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:138

rements:
     * - The d

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0x248fd59aba2c8e7184b23733b4b30d257770a99d.sol
Total states:5004
24.747911
==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:11.711246
Transaction Length: 1
Severity: Medium
Contract: KOREv2Router
Function name: refreshApproval()
PC address: 1203
Estimated Gas Usage: 7875 - 113921
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 5916
Offset: 6239
Offset: 6562
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop4/0x248fd59aba2c8e7184b23733b4b30d257770a99d.sol:840

function refreshApproval() public {
        IUniswapV2Pair(_koreWETHPair).approve(address(_koreVault), uint(-1));
        IERC20(_koreToken).approve(_wKoreToken, uint(-1));
        IERC20(_wKoreToken).approve(address(_koreVault), uint(-1));
    }

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:08.098688
Transaction Length: 1
Severity: Low
Contract: KOREv2Router
Function name: fallback
PC address: 2301
Estimated Gas Usage: 7975 - 29769
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop4/0x248fd59aba2c8e7184b23733b4b30d257770a99d.sol:878

_WETH.deposit.value(msg.value)()

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:09.103805
Transaction Length: 1
Severity: Low
Contract: KOREv2Router
Function name: refreshApproval()
PC address: 5916
Estimated Gas Usage: 1958 - 3184
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop4/0x248fd59aba2c8e7184b23733b4b30d257770a99d.sol:841

IUniswapV2Pair(_koreWETHPair).approve(address(_koreVault), uint(-1))

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:10.198941
Transaction Length: 1
Severity: Low
Contract: KOREv2Router
Function name: refreshApproval()
PC address: 6239
Estimated Gas Usage: 4506 - 41049
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop4/0x248fd59aba2c8e7184b23733b4b30d257770a99d.sol:842

IERC20(_koreToken).approve(_wKoreToken, uint(-1))

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:11.620963
Transaction Length: 1
Severity: Low
Contract: KOREv2Router
Function name: refreshApproval()
PC address: 6562
Estimated Gas Usage: 7054 - 78914
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop4/0x248fd59aba2c8e7184b23733b4b30d257770a99d.sol:843

IERC20(_wKoreToken).approve(address(_koreVault), uint(-1))

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0x287e3DED4441117Ed742864e71e05C4439189ABC.sol
Total states:272
69.239211
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.081253
Transaction Length: 0
Severity: High
Contract: FarmPrdzEth96
Function name: constructor
PC address: 430
Estimated Gas Usage: 82565 - 406328
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x287e3DED4441117Ed742864e71e05C4439189ABC.sol:38

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.528807
Transaction Length: 0
Severity: Low
Contract: FarmPrdzEth96
Function name: constructor
PC address: 444
Estimated Gas Usage: 82575 - 406338
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop4/0x287e3DED4441117Ed742864e71e05C4439189ABC.sol:39

assert(c >= a)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0x330c5a9ab746b16020d70108167ea518226a6a8b.sol
Total states:13356
355.901672
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.946895
Transaction Length: 1
Severity: High
Contract: Module
Function name: getModuleAddress(string)
PC address: 416
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x330c5a9ab746b16020d70108167ea518226a6a8b.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.568104
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 659
Estimated Gas Usage: 386 - 481
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x330c5a9ab746b16020d70108167ea518226a6a8b.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.148902
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 661
Estimated Gas Usage: 386 - 481
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x330c5a9ab746b16020d70108167ea518226a6a8b.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.473843
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 744
Estimated Gas Usage: 562 - 657
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x330c5a9ab746b16020d70108167ea518226a6a8b.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:19.395704
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 746
Estimated Gas Usage: 562 - 657
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x330c5a9ab746b16020d70108167ea518226a6a8b.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:34.995330
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 829
Estimated Gas Usage: 738 - 833
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x330c5a9ab746b16020d70108167ea518226a6a8b.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:54.538780
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 831
Estimated Gas Usage: 738 - 833
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x330c5a9ab746b16020d70108167ea518226a6a8b.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:14.862288
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 914
Estimated Gas Usage: 914 - 1009
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x330c5a9ab746b16020d70108167ea518226a6a8b.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:46.190547
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 916
Estimated Gas Usage: 914 - 1009
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x330c5a9ab746b16020d70108167ea518226a6a8b.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:16.903256
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: getModuleAddress(string)
PC address: 1601
Estimated Gas Usage: 451 - 546
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x330c5a9ab746b16020d70108167ea518226a6a8b.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:15.946342
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: update(address[],address[],uint256)
PC address: 2390
Estimated Gas Usage: 384 - 479
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x330c5a9ab746b16020d70108167ea518226a6a8b.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:19.124948
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: update(address[],address[],uint256)
PC address: 2392
Estimated Gas Usage: 384 - 479
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x330c5a9ab746b16020d70108167ea518226a6a8b.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:30.184996
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: update(address[],address[],uint256)
PC address: 2538
Estimated Gas Usage: 717 - 3494
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x330c5a9ab746b16020d70108167ea518226a6a8b.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:40.881702
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: update(address[],address[],uint256)
PC address: 2540
Estimated Gas Usage: 717 - 3494
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x330c5a9ab746b16020d70108167ea518226a6a8b.sol:3

*/

// File: @openzeppelin\contracts

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0xaad291c225f04beb18e8111576b808d1dcedd717.sol
Total states:18334
2661.27296
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.484680
Transaction Length: 1
Severity: High
Contract: master
Function name: airdrop(address,address[],uint256[])
PC address: 458
Estimated Gas Usage: 375 - 470
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xaad291c225f04beb18e8111576b808d1dcedd717.sol:5

olidity 0.5.7;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.543157
Transaction Length: 1
Severity: High
Contract: master
Function name: airdrop(address,address[],uint256[])
PC address: 460
Estimated Gas Usage: 375 - 470
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xaad291c225f04beb18e8111576b808d1dcedd717.sol:3

*/

//pragma solidity 0.5.7;
pragma 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:16.357586
Transaction Length: 1
Severity: High
Contract: master
Function name: airdrop(address,address[],uint256[])
PC address: 606
Estimated Gas Usage: 717 - 3494
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xaad291c225f04beb18e8111576b808d1dcedd717.sol:5

olidity 0.5.7;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:26.740263
Transaction Length: 1
Severity: High
Contract: master
Function name: airdrop(address,address[],uint256[])
PC address: 608
Estimated Gas Usage: 717 - 3494
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xaad291c225f04beb18e8111576b808d1dcedd717.sol:3

*/

//pragma solidity 0.5.7;
pragma 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:05.470120
Transaction Length: 1
Severity: High
Contract: master
Function name: name()
PC address: 790
Estimated Gas Usage: 1914 - 3044
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xaad291c225f04beb18e8111576b808d1dcedd717.sol:68

function name() public view returns(string memory) {
        return _name;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:11:16.697499
Transaction Length: 1
Severity: High
Contract: master
Function name: symbol()
PC address: 1757
Estimated Gas Usage: 1957 - 3087
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xaad291c225f04beb18e8111576b808d1dcedd717.sol:72

function symbol() public view returns(string memory) {
        return _symbol;
    }

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:14:06.065736
Transaction Length: 1
Severity: Low
Contract: master
Function name: decreaseAllowance(address,uint256)
PC address: 9553
Estimated Gas Usage: 973 - 1448
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop4/0xaad291c225f04beb18e8111576b808d1dcedd717.sol:40

assert(b <= a)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:26:57.923295
Transaction Length: 2
Severity: Low
Contract: master
Function name: decreaseAllowance(address,uint256)
PC address: 9553
Estimated Gas Usage: 973 - 1448
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop4/0xaad291c225f04beb18e8111576b808d1dcedd717.sol:40

assert(b <= a)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:17:52.387486
Transaction Length: 2
Severity: High
Contract: master
Function name: increaseAllowance(address,uint256)
PC address: 9571
Estimated Gas Usage: 1003 - 1478
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xaad291c225f04beb18e8111576b808d1dcedd717.sol:45

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:24:26.782150
Transaction Length: 2
Severity: Low
Contract: master
Function name: increaseAllowance(address,uint256)
PC address: 9584
Estimated Gas Usage: 1013 - 1488
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop4/0xaad291c225f04beb18e8111576b808d1dcedd717.sol:46

assert(c >= a)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0xa8181bc9ea1ebfba0e1a42a1ac08f1533cbbf402.sol
Total states:1759
5.606968
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0xb824867f6afbd01eea3bdcd24b573a9feaa69b3d.sol
Total states:1308
1.078048
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0x063E22147bcA7eA413327e2125F5F01DA537D48E.sol
Total states:22644
1105.745132
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.169709
Transaction Length: 1
Severity: High
Contract: Module
Function name: getModuleAddress(string)
PC address: 416
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x063E22147bcA7eA413327e2125F5F01DA537D48E.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.414886
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 511
Estimated Gas Usage: 364 - 459
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x063E22147bcA7eA413327e2125F5F01DA537D48E.sol:5

openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.907050
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 513
Estimated Gas Usage: 364 - 459
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x063E22147bcA7eA413327e2125F5F01DA537D48E.sol:3

*/

// File: @openzeppelin\upgrades\

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.207898
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 596
Estimated Gas Usage: 540 - 635
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x063E22147bcA7eA413327e2125F5F01DA537D48E.sol:5

openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:19.162179
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 598
Estimated Gas Usage: 540 - 635
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x063E22147bcA7eA413327e2125F5F01DA537D48E.sol:3

*/

// File: @openzeppelin\upgrades\

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:30.500471
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 681
Estimated Gas Usage: 716 - 811
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x063E22147bcA7eA413327e2125F5F01DA537D48E.sol:5

openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:46.713554
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 683
Estimated Gas Usage: 716 - 811
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x063E22147bcA7eA413327e2125F5F01DA537D48E.sol:3

*/

// File: @openzeppelin\upgrades\

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:06.815719
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 766
Estimated Gas Usage: 892 - 987
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x063E22147bcA7eA413327e2125F5F01DA537D48E.sol:5

openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:45.397549
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 768
Estimated Gas Usage: 892 - 987
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x063E22147bcA7eA413327e2125F5F01DA537D48E.sol:3

*/

// File: @openzeppelin\upgrades\

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.343311
Transaction Length: 1
Severity: High
Contract: StakingPoolBase
Function name: stake(uint256,bytes)
PC address: 876
Estimated Gas Usage: 414 - 509
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x063E22147bcA7eA413327e2125F5F01DA537D48E.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.693115
Transaction Length: 1
Severity: High
Contract: StakingPool
Function name: stake(uint256,bytes)
PC address: 1086
Estimated Gas Usage: 436 - 531
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x063E22147bcA7eA413327e2125F5F01DA537D48E.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.413796
Transaction Length: 1
Severity: High
Contract: StakingPoolADEL
Function name: stake(uint256,bytes)
PC address: 1086
Estimated Gas Usage: 436 - 531
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x063E22147bcA7eA413327e2125F5F01DA537D48E.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:28.365700
Transaction Length: 1
Severity: High
Contract: StakingPoolBase
Function name: stakeFor(address,uint256,bytes)
PC address: 1105
Estimated Gas Usage: 469 - 564
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x063E22147bcA7eA413327e2125F5F01DA537D48E.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:16.133673
Transaction Length: 1
Severity: High
Contract: StakingPool
Function name: stakeFor(address,uint256,bytes)
PC address: 1315
Estimated Gas Usage: 491 - 586
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x063E22147bcA7eA413327e2125F5F01DA537D48E.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:19.075007
Transaction Length: 1
Severity: High
Contract: StakingPoolADEL
Function name: stakeFor(address,uint256,bytes)
PC address: 1315
Estimated Gas Usage: 491 - 586
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x063E22147bcA7eA413327e2125F5F01DA537D48E.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:20.141961
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: getModuleAddress(string)
PC address: 1453
Estimated Gas Usage: 451 - 546
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x063E22147bcA7eA413327e2125F5F01DA537D48E.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:22.633747
Transaction Length: 1
Severity: High
Contract: StakingPoolBase
Function name: getPersonalStakeUnlockedTimestamps(address)
PC address: 1667
Estimated Gas Usage: 2628 - 4231
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x063E22147bcA7eA413327e2125F5F01DA537D48E.sol:1518

function getPersonalStakeUnlockedTimestamps(address _address) external view returns (uint256[] memory) {
    uint256[] memory timestamps;
    (timestamps,,) = getPersonalStakes(_address);

    return timestamps;
  }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:07.913839
Transaction Length: 1
Severity: High
Contract: StakingPool
Function name: getPersonalStakeUnlockedTimestamps(address)
PC address: 1877
Estimated Gas Usage: 2584 - 4187
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x063E22147bcA7eA413327e2125F5F01DA537D48E.sol:1518

function getPersonalStakeUnlockedTimestamps(address _address) external view returns (uint256[] memory) {
    uint256[] memory timestamps;
    (timestamps,,) = getPersonalStakes(_address);

    return timestamps;
  }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:25.612666
Transaction Length: 1
Severity: High
Contract: StakingPoolADEL
Function name: getPersonalStakeUnlockedTimestamps(address)
PC address: 1877
Estimated Gas Usage: 2584 - 4187
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x063E22147bcA7eA413327e2125F5F01DA537D48E.sol:1518

function getPersonalStakeUnlockedTimestamps(address _address) external view returns (uint256[] memory) {
    uint256[] memory timestamps;
    (timestamps,,) = getPersonalStakes(_address);

    return timestamps;
  }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:28.600300
Transaction Length: 1
Severity: High
Contract: StakingPool
Function name: getPersonalStakeUnlockedTimestamps(address)
PC address: 1917
Estimated Gas Usage: 2734 - 4713
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x063E22147bcA7eA413327e2125F5F01DA537D48E.sol:1518

function getPersonalStakeUnlockedTimestamps(address _address) external view returns (uint256[] memory) {
    uint256[] memory timestamps;
    (timestamps,,) = getPersonalStakes(_address);

    return timestamps;
  }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:50.935255
Transaction Length: 1
Severity: High
Contract: StakingPoolADEL
Function name: getPersonalStakeUnlockedTimestamps(address)
PC address: 1917
Estimated Gas Usage: 2734 - 4713
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x063E22147bcA7eA413327e2125F5F01DA537D48E.sol:1518

function getPersonalStakeUnlockedTimestamps(address _address) external view returns (uint256[] memory) {
    uint256[] memory timestamps;
    (timestamps,,) = getPersonalStakes(_address);

    return timestamps;
  }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.791484
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3249
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x063E22147bcA7eA413327e2125F5F01DA537D48E.sol:212

a + b

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:54.981706
Transaction Length: 1
Severity: Low
Contract: StakingPoolBase
Function name: stakeFor(address,uint256,bytes)
PC address: 13457
Estimated Gas Usage: 2998 - 7001
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop4/0x063E22147bcA7eA413327e2125F5F01DA537D48E.sol:1378

stakingToken.transferFrom(_address, address(this), _amount)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0x091ac882e57b89e071c8b153be3aab668a80303d.sol
Total states:22554
102.923462
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.157057
Transaction Length: 0
Severity: High
Contract: Town
Function name: constructor
PC address: 844
Estimated Gas Usage: 558 - 3889
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x091ac882e57b89e071c8b153be3aab668a80303d.sol:1404

distributionPeriod * 1 days

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:21.945879
Transaction Length: 0
Severity: High
Contract: Town
Function name: constructor
PC address: 1422
Estimated Gas Usage: 46536 - 230197
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x091ac882e57b89e071c8b153be3aab668a80303d.sol:303

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.661804
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3044
Estimated Gas Usage: 989 - 1464
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x091ac882e57b89e071c8b153be3aab668a80303d.sol:225

a + b

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:02.990707
Transaction Length: 1
Severity: Low
Contract: TownToken
Function name: transfer(address,uint256)
PC address: 3334
Estimated Gas Usage: 2044 - 3175
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop4/0x091ac882e57b89e071c8b153be3aab668a80303d.sol:1100

_town.checkProposal(recipient)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.603528
Transaction Length: 2
Severity: High
Contract: ExternalTokenTemplate
Function name: increaseAllowance(address,uint256)
PC address: 3494
Estimated Gas Usage: 922 - 1397
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x091ac882e57b89e071c8b153be3aab668a80303d.sol:225

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:03.590329
Transaction Length: 1
Severity: Low
Contract: TownToken
Function name: getHolderByIndex(uint256)
PC address: 4982
Estimated Gas Usage: 725 - 820
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop4/0x091ac882e57b89e071c8b153be3aab668a80303d.sol:1076

_holders[index]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.756409
Transaction Length: 2
Severity: High
Contract: TownToken
Function name: increaseAllowance(address,uint256)
PC address: 6628
Estimated Gas Usage: 967 - 1442
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x091ac882e57b89e071c8b153be3aab668a80303d.sol:225

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0x9a0a8c3ab75544b471abb6381388cfb96365132c.sol
Total states:149
2.762547
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0x548c847f97f42E11948aee042dacD2e6F2076274.sol
Total states:17674
689.484666
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.922051
Transaction Length: 1
Severity: High
Contract: Module
Function name: getModuleAddress(string)
PC address: 416
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x548c847f97f42E11948aee042dacD2e6F2076274.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.349301
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 511
Estimated Gas Usage: 364 - 459
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x548c847f97f42E11948aee042dacD2e6F2076274.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.183574
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 513
Estimated Gas Usage: 364 - 459
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x548c847f97f42E11948aee042dacD2e6F2076274.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.082183
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 596
Estimated Gas Usage: 540 - 635
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x548c847f97f42E11948aee042dacD2e6F2076274.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:18.656699
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 598
Estimated Gas Usage: 540 - 635
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x548c847f97f42E11948aee042dacD2e6F2076274.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:35.772163
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 681
Estimated Gas Usage: 716 - 811
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x548c847f97f42E11948aee042dacD2e6F2076274.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:03.947237
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 683
Estimated Gas Usage: 716 - 811
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x548c847f97f42E11948aee042dacD2e6F2076274.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:29.989594
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 766
Estimated Gas Usage: 892 - 987
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x548c847f97f42E11948aee042dacD2e6F2076274.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:56.032109
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 768
Estimated Gas Usage: 892 - 987
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x548c847f97f42E11948aee042dacD2e6F2076274.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:21.567403
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: getModuleAddress(string)
PC address: 1453
Estimated Gas Usage: 451 - 546
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x548c847f97f42E11948aee042dacD2e6F2076274.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.231474
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_renBTC
Function name: handleDeposit(address[],uint256[])
PC address: 1711
Estimated Gas Usage: 452 - 547
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x548c847f97f42E11948aee042dacD2e6F2076274.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.235404
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_renBTC
Function name: handleDeposit(address[],uint256[])
PC address: 1713
Estimated Gas Usage: 452 - 547
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x548c847f97f42E11948aee042dacD2e6F2076274.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:15.686680
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_renBTC
Function name: handleDeposit(address[],uint256[])
PC address: 1859
Estimated Gas Usage: 785 - 3562
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x548c847f97f42E11948aee042dacD2e6F2076274.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:28.176015
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_renBTC
Function name: handleDeposit(address[],uint256[])
PC address: 1861
Estimated Gas Usage: 785 - 3562
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x548c847f97f42E11948aee042dacD2e6F2076274.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:32.296415
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_renBTC
Function name: getModuleAddress(string)
PC address: 2143
Estimated Gas Usage: 407 - 502
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x548c847f97f42E11948aee042dacD2e6F2076274.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:07.180172
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_renBTC
Function name: withdraw(address,uint256[])
PC address: 2508
Estimated Gas Usage: 397 - 492
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x548c847f97f42E11948aee042dacD2e6F2076274.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:11.919609
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_renBTC
Function name: withdraw(address,uint256[])
PC address: 2510
Estimated Gas Usage: 397 - 492
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x548c847f97f42E11948aee042dacD2e6F2076274.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:38.622265
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_renBTC
Function name: supportedTokens()
PC address: 3015
Estimated Gas Usage: 1250 - 2097
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x548c847f97f42E11948aee042dacD2e6F2076274.sol:1595

function supportedTokens() public view returns(address[] memory){
        return _registeredTokens;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:57.117887
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_renBTC
Function name: supportedTokens()
PC address: 3055
Estimated Gas Usage: 1400 - 2623
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x548c847f97f42E11948aee042dacD2e6F2076274.sol:1595

function supportedTokens() public view returns(address[] memory){
        return _registeredTokens;
    }

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0xf3c6586e56c0c595749b8b75ac2a888d20bb48da.sol
Total states:1682
10.262216
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.844111
Transaction Length: 1
Severity: High
Contract: TokenPool
Function name: balance()
PC address: 1682
Estimated Gas Usage: 2430 - 37419
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xf3c6586e56c0c595749b8b75ac2a888d20bb48da.sol:5

racts/contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.619371
Transaction Length: 1
Severity: High
Contract: TokenPool
Function name: balance()
PC address: 1685
Estimated Gas Usage: 2430 - 37419
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xf3c6586e56c0c595749b8b75ac2a888d20bb48da.sol:3



// File: contracts/contracts/math/SafeMat

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.330987
Transaction Length: 1
Severity: High
Contract: TokenPool
Function name: balance()
PC address: 1697
Estimated Gas Usage: 2430 - 37419
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xf3c6586e56c0c595749b8b75ac2a888d20bb48da.sol:407

token.balanceOf(address(this))

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:02.349871
Transaction Length: 1
Severity: High
Contract: TokenPool
Function name: balance()
PC address: 2443
Estimated Gas Usage: 2430 - 37419
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xf3c6586e56c0c595749b8b75ac2a888d20bb48da.sol:66

ing zero, but the
     

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0xe9d7e590171cb5080ab8dfd45850692a714260f0.sol
Total states:77
2.944607
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0xd79e0a04d7f8bca8cf9bce460f63b8765defbc8e.sol
Total states:184
0.256447
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0xad81748b316716070005c6664e8ef562dfb9d602.sol
Total states:736
1.415532
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0xf79b548ff56E661ee19a59303178E444E9e81FCc.sol
Total states:1466
37.118539
==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:02.727212
Transaction Length: 1
Severity: Medium
Contract: Comptroller
Function name: harvest()
PC address: 365
Estimated Gas Usage: 5543 - 75299
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 1951
Offset: 2150
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop4/0xf79b548ff56E661ee19a59303178E444E9e81FCc.sol:501

function harvest() external {
        // address(this) needs to be the authorizedController() in core
        core.harvest();

        // any extraneous dusd tokens in the contract will also be harvested
        uint revenue = dusd.balanceOf(address(this));
        emit Harvested(revenue);
        if (revenue > 0) {
            address[] memory _beneficiaries = beneficiaries;
            uint beneficiariesLength = _beneficiaries.length;
            for (uint i = 0; i < beneficiariesLength; i++) {
                dusd.safeTransfer(_beneficiaries[i], revenue.mul(allocations[i]).div(MAX));
            }
        }
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.879169
Transaction Length: 1
Severity: High
Contract: Comptroller
Function name: modifyBeneficiaries(address[],uint256[])
PC address: 447
Estimated Gas Usage: 385 - 480
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xf79b548ff56E661ee19a59303178E444E9e81FCc.sol:9

ma solidity 0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.686164
Transaction Length: 1
Severity: High
Contract: Comptroller
Function name: modifyBeneficiaries(address[],uint256[])
PC address: 449
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xf79b548ff56E661ee19a59303178E444E9e81FCc.sol:3



*/



//pragma solidity 0.5.17;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.101656
Transaction Length: 1
Severity: High
Contract: Comptroller
Function name: modifyBeneficiaries(address[],uint256[])
PC address: 532
Estimated Gas Usage: 561 - 656
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xf79b548ff56E661ee19a59303178E444E9e81FCc.sol:9

ma solidity 0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:26.094943
Transaction Length: 1
Severity: High
Contract: Comptroller
Function name: modifyBeneficiaries(address[],uint256[])
PC address: 534
Estimated Gas Usage: 561 - 656
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xf79b548ff56E661ee19a59303178E444E9e81FCc.sol:3



*/



//pragma solidity 0.5.17;
pr

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:02.089949
Transaction Length: 1
Severity: Low
Contract: Comptroller
Function name: allocations(uint256)
PC address: 1807
Estimated Gas Usage: 679 - 774
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop4/0xf79b548ff56E661ee19a59303178E444E9e81FCc.sol:488

uint[] public allocations

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:02.630105
Transaction Length: 1
Severity: Low
Contract: Comptroller
Function name: harvest()
PC address: 1951
Estimated Gas Usage: 989 - 1365
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop4/0xf79b548ff56E661ee19a59303178E444E9e81FCc.sol:503

core.harvest()

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:35.318801
Transaction Length: 1
Severity: Low
Contract: Comptroller
Function name: beneficiaries(uint256)
PC address: 3775
Estimated Gas Usage: 722 - 817
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop4/0xf79b548ff56E661ee19a59303178E444E9e81FCc.sol:487

address[] public beneficiaries

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.465897
Transaction Length: 1
Severity: High
Contract: Comptroller
Function name: earned(address)
PC address: 3989
Estimated Gas Usage: 3576 - 72700
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xf79b548ff56E661ee19a59303178E444E9e81FCc.sol:205

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0xA5976897BC0081e3895013B08654DfEc50Bcb33F.sol
Total states:9233
32.260266
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0xb36574b390afbccc1bc68ed8c0e38b0da489e067.sol
Total states:52177
1028.844277
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.142228
Transaction Length: 1
Severity: High
Contract: Module
Function name: getModuleAddress(string)
PC address: 416
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xb36574b390afbccc1bc68ed8c0e38b0da489e067.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.428314
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(string,string,uint8)
PC address: 1000
Estimated Gas Usage: 409 - 504
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xb36574b390afbccc1bc68ed8c0e38b0da489e067.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.495329
Transaction Length: 1
Severity: High
Contract: PoolToken_CurveFi_SBTC
Function name: initialize(string,string,uint8)
PC address: 1000
Estimated Gas Usage: 409 - 504
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xb36574b390afbccc1bc68ed8c0e38b0da489e067.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.224336
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(string,string,uint8)
PC address: 1151
Estimated Gas Usage: 751 - 3528
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xb36574b390afbccc1bc68ed8c0e38b0da489e067.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.415919
Transaction Length: 1
Severity: High
Contract: PoolToken_CurveFi_SBTC
Function name: initialize(string,string,uint8)
PC address: 1151
Estimated Gas Usage: 751 - 3528
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xb36574b390afbccc1bc68ed8c0e38b0da489e067.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.392064
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[],uint256)
PC address: 2226
Estimated Gas Usage: 429 - 524
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xb36574b390afbccc1bc68ed8c0e38b0da489e067.sol:5

openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.009614
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[],uint256)
PC address: 2228
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xb36574b390afbccc1bc68ed8c0e38b0da489e067.sol:3

*/

// File: @openzeppelin\upgrades\

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.500636
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[])
PC address: 2357
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xb36574b390afbccc1bc68ed8c0e38b0da489e067.sol:5

openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:14.793512
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[])
PC address: 2359
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xb36574b390afbccc1bc68ed8c0e38b0da489e067.sol:3

*/

// File: @openzeppelin\upgrades\

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:24.621402
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: getModuleAddress(string)
PC address: 2526
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xb36574b390afbccc1bc68ed8c0e38b0da489e067.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:20.388454
Transaction Length: 1
Severity: High
Contract: PoolToken_CurveFi_SBTC
Function name: getModuleAddress(string)
PC address: 2526
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xb36574b390afbccc1bc68ed8c0e38b0da489e067.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:14.378860
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(address,string,string)
PC address: 3179
Estimated Gas Usage: 485 - 580
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xb36574b390afbccc1bc68ed8c0e38b0da489e067.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:17.696750
Transaction Length: 1
Severity: High
Contract: PoolToken_CurveFi_SBTC
Function name: initialize(address,string,string)
PC address: 3179
Estimated Gas Usage: 485 - 580
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xb36574b390afbccc1bc68ed8c0e38b0da489e067.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.894787
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3249
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xb36574b390afbccc1bc68ed8c0e38b0da489e067.sol:212

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:33.430916
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(address,string,string)
PC address: 3330
Estimated Gas Usage: 827 - 3604
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xb36574b390afbccc1bc68ed8c0e38b0da489e067.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:39.778408
Transaction Length: 1
Severity: High
Contract: PoolToken_CurveFi_SBTC
Function name: initialize(address,string,string)
PC address: 3330
Estimated Gas Usage: 827 - 3604
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xb36574b390afbccc1bc68ed8c0e38b0da489e067.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.300301
Transaction Length: 1
Severity: Low
Contract: DistributionToken
Function name: distributions(uint256)
PC address: 3405
Estimated Gas Usage: 724 - 819
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop4/0xb36574b390afbccc1bc68ed8c0e38b0da489e067.sol:995

Distribution[] public distributions

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.545085
Transaction Length: 2
Severity: High
Contract: ERC20Burnable
Function name: increaseAllowance(address,uint256)
PC address: 3429
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xb36574b390afbccc1bc68ed8c0e38b0da489e067.sol:212

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.953336
Transaction Length: 2
Severity: High
Contract: ERC20Mintable
Function name: increaseAllowance(address,uint256)
PC address: 4214
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xb36574b390afbccc1bc68ed8c0e38b0da489e067.sol:212

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:33.432579
Transaction Length: 1
Severity: Low
Contract: PoolToken
Function name: distributions(uint256)
PC address: 6392
Estimated Gas Usage: 768 - 863
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop4/0xb36574b390afbccc1bc68ed8c0e38b0da489e067.sol:995

Distribution[] public distributions

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:32.334898
Transaction Length: 1
Severity: Low
Contract: PoolToken_CurveFi_SBTC
Function name: distributions(uint256)
PC address: 6392
Estimated Gas Usage: 768 - 863
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop4/0xb36574b390afbccc1bc68ed8c0e38b0da489e067.sol:995

Distribution[] public distributions

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.794231
Transaction Length: 2
Severity: High
Contract: DistributionToken
Function name: increaseAllowance(address,uint256)
PC address: 6759
Estimated Gas Usage: 1104 - 1579
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xb36574b390afbccc1bc68ed8c0e38b0da489e067.sol:212

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0x5cc1477f5b86a97abc6b82229f76fc9bba52b399.sol
Total states:90
1.101847
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0xf988df5509af01cc5b76ff1fa3ed3b5f31baaf84.sol
Total states:738
3.624396
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0x4b03b591b8cd6dc9000af9e1e350b8b1a3bdb157.sol
Total states:426
0.654317
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0xd210336b5918dbc8425442528f12d4d65fd093ea.sol
Total states:16824
34.893722
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.509248
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3044
Estimated Gas Usage: 989 - 1464
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xd210336b5918dbc8425442528f12d4d65fd093ea.sol:38

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.507469
Transaction Length: 1
Severity: Low
Contract: TOKENBOX
Function name: lockState(address,uint256)
PC address: 4015
Estimated Gas Usage: 830 - 1115
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop4/0xd210336b5918dbc8425442528f12d4d65fd093ea.sol:319

lockInfo[_holder][_idx]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.580502
Transaction Length: 2
Severity: High
Contract: TOKENBOX
Function name: increaseAllowance(address,uint256)
PC address: 11746
Estimated Gas Usage: 968 - 1443
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xd210336b5918dbc8425442528f12d4d65fd093ea.sol:38

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0x154c28ba3736ee4e5e89e0081a00f04ec67992f0.sol
Total states:195
1177.002823
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:43.445670
Transaction Length: 1
Severity: High
Contract: Core
Function name: whitelistTokens(address[])
PC address: 887
Estimated Gas Usage: 364 - 459
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x154c28ba3736ee4e5e89e0081a00f04ec67992f0.sol:9

ma solidity 0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:46.602000
Transaction Length: 1
Severity: High
Contract: Core
Function name: whitelistTokens(address[])
PC address: 889
Estimated Gas Usage: 364 - 459
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x154c28ba3736ee4e5e89e0081a00f04ec67992f0.sol:3



*/



//pragma solidity 0.5.17;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:11.624998
Transaction Length: 1
Severity: High
Contract: Core
Function name: whitelistPeak(address,uint256[],uint256,bool)
PC address: 1096
Estimated Gas Usage: 441 - 536
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x154c28ba3736ee4e5e89e0081a00f04ec67992f0.sol:9

ma solidity 0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:15.959146
Transaction Length: 1
Severity: High
Contract: Core
Function name: whitelistPeak(address,uint256[],uint256,bool)
PC address: 1098
Estimated Gas Usage: 441 - 536
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x154c28ba3736ee4e5e89e0081a00f04ec67992f0.sol:3



*/



//pragma solidity 0.5.17;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.165436
Transaction Length: 1
Severity: High
Contract: Core
Function name: currentSystemState()
PC address: 2994
Estimated Gas Usage: 2276 - 37170
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x154c28ba3736ee4e5e89e0081a00f04ec67992f0.sol:9

solidity 0.5.17

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.090227
Transaction Length: 1
Severity: High
Contract: Core
Function name: currentSystemState()
PC address: 2997
Estimated Gas Usage: 2322 - 37309
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x154c28ba3736ee4e5e89e0081a00f04ec67992f0.sol:5

*/



//pragma solidity 0.5.17;
pragma soli

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.782021
Transaction Length: 1
Severity: High
Contract: Core
Function name: totalSystemAssets()
PC address: 3018
Estimated Gas Usage: 2322 - 37309
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x154c28ba3736ee4e5e89e0081a00f04ec67992f0.sol:728

oracle.getPriceFeed()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.376321
Transaction Length: 1
Severity: High
Contract: Core
Function name: totalSystemAssets()
PC address: 3043
Estimated Gas Usage: 2322 - 37309
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x154c28ba3736ee4e5e89e0081a00f04ec67992f0.sol:3

6

*/



//pragma sol

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.619738
Transaction Length: 1
Severity: High
Contract: Core
Function name: totalSystemAssets()
PC address: 3049
Estimated Gas Usage: 2322 - 37309
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x154c28ba3736ee4e5e89e0081a00f04ec67992f0.sol:10

=0.5 <0.7.17;


--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.726479
Transaction Length: 1
Severity: High
Contract: Core
Function name: totalSystemAssets()
PC address: 3069
Estimated Gas Usage: 2380 - 37460
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x154c28ba3736ee4e5e89e0081a00f04ec67992f0.sol:20

s the amount of token

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.816620
Transaction Length: 1
Severity: High
Contract: Core
Function name: totalSystemAssets()
PC address: 3071
Estimated Gas Usage: 2380 - 37460
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x154c28ba3736ee4e5e89e0081a00f04ec67992f0.sol:19

/**
     * @dev Returns the amount of tokens

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:38.899876
Transaction Length: 1
Severity: High
Contract: Core
Function name: dusdToUsd(uint256,bool)
PC address: 13475
Estimated Gas Usage: 2367 - 37354
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x154c28ba3736ee4e5e89e0081a00f04ec67992f0.sol:185

div(a, b, "SafeMath: division by zero")

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0xCc336bD59cDCb4eD6f6d145E86b3474CD2c6640f.sol
Total states:48326
443.409359
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.693105
Transaction Length: 1
Severity: High
Contract: Liquidity
Function name: totalRewarded()
PC address: 1667
Estimated Gas Usage: 2933 - 37922
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xCc336bD59cDCb4eD6f6d145E86b3474CD2c6640f.sol:5

se-Identifier: 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.509161
Transaction Length: 1
Severity: High
Contract: PoolGetters
Function name: totalRewarded()
PC address: 1667
Estimated Gas Usage: 2933 - 37922
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xCc336bD59cDCb4eD6f6d145E86b3474CD2c6640f.sol:5

se-Identifier: 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.542948
Transaction Length: 1
Severity: High
Contract: PoolSetters
Function name: totalRewarded()
PC address: 1667
Estimated Gas Usage: 2933 - 37922
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xCc336bD59cDCb4eD6f6d145E86b3474CD2c6640f.sol:5

se-Identifier: 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.332414
Transaction Length: 1
Severity: High
Contract: Liquidity
Function name: totalRewarded()
PC address: 1670
Estimated Gas Usage: 2933 - 37922
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xCc336bD59cDCb4eD6f6d145E86b3474CD2c6640f.sol:3



// SPDX-License-Identifier: apache

//pra

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.317886
Transaction Length: 1
Severity: High
Contract: PoolGetters
Function name: totalRewarded()
PC address: 1670
Estimated Gas Usage: 2933 - 37922
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xCc336bD59cDCb4eD6f6d145E86b3474CD2c6640f.sol:3



// SPDX-License-Identifier: apache

//pra

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.320265
Transaction Length: 1
Severity: High
Contract: PoolSetters
Function name: totalRewarded()
PC address: 1670
Estimated Gas Usage: 2933 - 37922
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xCc336bD59cDCb4eD6f6d145E86b3474CD2c6640f.sol:3



// SPDX-License-Identifier: apache

//pra

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.001904
Transaction Length: 1
Severity: High
Contract: Liquidity
Function name: totalRewarded()
PC address: 1682
Estimated Gas Usage: 2933 - 37922
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xCc336bD59cDCb4eD6f6d145E86b3474CD2c6640f.sol:2252

dollar().balanceOf(address(this))

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.982626
Transaction Length: 1
Severity: High
Contract: PoolGetters
Function name: totalRewarded()
PC address: 1682
Estimated Gas Usage: 2933 - 37922
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xCc336bD59cDCb4eD6f6d145E86b3474CD2c6640f.sol:2252

dollar().balanceOf(address(this))

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.989935
Transaction Length: 1
Severity: High
Contract: PoolSetters
Function name: totalRewarded()
PC address: 1682
Estimated Gas Usage: 2933 - 37922
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xCc336bD59cDCb4eD6f6d145E86b3474CD2c6640f.sol:2252

dollar().balanceOf(address(this))

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:03.246457
Transaction Length: 1
Severity: High
Contract: Liquidity
Function name: totalRewarded()
PC address: 2749
Estimated Gas Usage: 2933 - 37922
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xCc336bD59cDCb4eD6f6d145E86b3474CD2c6640f.sol:26

      return c;
    }



--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:03.026410
Transaction Length: 1
Severity: High
Contract: PoolGetters
Function name: totalRewarded()
PC address: 2749
Estimated Gas Usage: 2933 - 37922
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xCc336bD59cDCb4eD6f6d145E86b3474CD2c6640f.sol:26

      return c;
    }



--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:03.077034
Transaction Length: 1
Severity: High
Contract: PoolSetters
Function name: totalRewarded()
PC address: 2749
Estimated Gas Usage: 2933 - 37922
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xCc336bD59cDCb4eD6f6d145E86b3474CD2c6640f.sol:26

      return c;
    }



--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.490367
Transaction Length: 1
Severity: Low
Contract: Getters
Function name: expiringCouponsAtIndex(uint256,uint256)
PC address: 2821
Estimated Gas Usage: 1090 - 1375
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop4/0xCc336bD59cDCb4eD6f6d145E86b3474CD2c6640f.sol:3076

_state.epochs[epoch].coupons.expiring[i]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.862391
Transaction Length: 1
Severity: High
Contract: Getters
Function name: totalNet()
PC address: 4187
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xCc336bD59cDCb4eD6f6d145E86b3474CD2c6640f.sol:5

se-Identifier: 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.763151
Transaction Length: 1
Severity: High
Contract: Getters
Function name: totalNet()
PC address: 4190
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xCc336bD59cDCb4eD6f6d145E86b3474CD2c6640f.sol:3



// SPDX-License-Identifier: apache

//pra

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.324731
Transaction Length: 1
Severity: High
Contract: Getters
Function name: totalNet()
PC address: 4202
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xCc336bD59cDCb4eD6f6d145E86b3474CD2c6640f.sol:2971

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.622407
Transaction Length: 1
Severity: High
Contract: Permission
Function name: totalNet()
PC address: 4387
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xCc336bD59cDCb4eD6f6d145E86b3474CD2c6640f.sol:5

se-Identifier: 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.721147
Transaction Length: 1
Severity: High
Contract: Setters
Function name: totalNet()
PC address: 4387
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xCc336bD59cDCb4eD6f6d145E86b3474CD2c6640f.sol:5

se-Identifier: 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.540245
Transaction Length: 1
Severity: High
Contract: Permission
Function name: totalNet()
PC address: 4390
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xCc336bD59cDCb4eD6f6d145E86b3474CD2c6640f.sol:3



// SPDX-License-Identifier: apache

//pra

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.615090
Transaction Length: 1
Severity: High
Contract: Setters
Function name: totalNet()
PC address: 4390
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xCc336bD59cDCb4eD6f6d145E86b3474CD2c6640f.sol:3



// SPDX-License-Identifier: apache

//pra

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.102330
Transaction Length: 1
Severity: High
Contract: Permission
Function name: totalNet()
PC address: 4402
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xCc336bD59cDCb4eD6f6d145E86b3474CD2c6640f.sol:2971

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.189285
Transaction Length: 1
Severity: High
Contract: Setters
Function name: totalNet()
PC address: 4402
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xCc336bD59cDCb4eD6f6d145E86b3474CD2c6640f.sol:2971

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.857586
Transaction Length: 1
Severity: High
Contract: Deployer1
Function name: totalNet()
PC address: 5018
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xCc336bD59cDCb4eD6f6d145E86b3474CD2c6640f.sol:5

se-Identifier: 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.765549
Transaction Length: 1
Severity: High
Contract: Deployer1
Function name: totalNet()
PC address: 5021
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xCc336bD59cDCb4eD6f6d145E86b3474CD2c6640f.sol:3



// SPDX-License-Identifier: apache

//pra

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.329399
Transaction Length: 1
Severity: High
Contract: Deployer1
Function name: totalNet()
PC address: 5034
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xCc336bD59cDCb4eD6f6d145E86b3474CD2c6640f.sol:2971

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.104101
Transaction Length: 1
Severity: High
Contract: Deployer2
Function name: totalNet()
PC address: 5175
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xCc336bD59cDCb4eD6f6d145E86b3474CD2c6640f.sol:5

se-Identifier: 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.995973
Transaction Length: 1
Severity: High
Contract: Deployer2
Function name: totalNet()
PC address: 5178
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xCc336bD59cDCb4eD6f6d145E86b3474CD2c6640f.sol:3



// SPDX-License-Identifier: apache

//pra

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.562411
Transaction Length: 1
Severity: High
Contract: Deployer2
Function name: totalNet()
PC address: 5191
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xCc336bD59cDCb4eD6f6d145E86b3474CD2c6640f.sol:2971

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.869248
Transaction Length: 1
Severity: High
Contract: Deployer3
Function name: totalNet()
PC address: 5208
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xCc336bD59cDCb4eD6f6d145E86b3474CD2c6640f.sol:5

se-Identifier: 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.745652
Transaction Length: 1
Severity: High
Contract: Deployer3
Function name: totalNet()
PC address: 5211
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xCc336bD59cDCb4eD6f6d145E86b3474CD2c6640f.sol:3



// SPDX-License-Identifier: apache

//pra

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.320843
Transaction Length: 1
Severity: High
Contract: Deployer3
Function name: totalNet()
PC address: 5224
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xCc336bD59cDCb4eD6f6d145E86b3474CD2c6640f.sol:2971

dollar().totalSupply()

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.542545
Transaction Length: 1
Severity: High
Contract: Getters
Function name: totalNet()
PC address: 5628
Estimated Gas Usage: 2775 - 37669
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xCc336bD59cDCb4eD6f6d145E86b3474CD2c6640f.sol:67

   * - Multiplication c

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.153306
Transaction Length: 1
Severity: High
Contract: Permission
Function name: totalNet()
PC address: 5918
Estimated Gas Usage: 2775 - 37669
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xCc336bD59cDCb4eD6f6d145E86b3474CD2c6640f.sol:80

urn c;
    }

    /**
 

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.250248
Transaction Length: 1
Severity: High
Contract: Setters
Function name: totalNet()
PC address: 5918
Estimated Gas Usage: 2775 - 37669
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xCc336bD59cDCb4eD6f6d145E86b3474CD2c6640f.sol:80

urn c;
    }

    /**
 

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.382915
Transaction Length: 1
Severity: High
Contract: Deployer1
Function name: totalNet()
PC address: 8077
Estimated Gas Usage: 2775 - 37669
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xCc336bD59cDCb4eD6f6d145E86b3474CD2c6640f.sol:80

urn c;
    }

    /**
 

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.641256
Transaction Length: 1
Severity: High
Contract: Deployer2
Function name: totalNet()
PC address: 8234
Estimated Gas Usage: 2775 - 37669
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xCc336bD59cDCb4eD6f6d145E86b3474CD2c6640f.sol:80

urn c;
    }

    /**
 

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.407444
Transaction Length: 1
Severity: High
Contract: Deployer3
Function name: totalNet()
PC address: 8333
Estimated Gas Usage: 2775 - 37669
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xCc336bD59cDCb4eD6f6d145E86b3474CD2c6640f.sol:91

   * Requirements:
    

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0xfd87ba715d93e2e00e66fc995c39549073cdf6fc.sol
Total states:3568
14.458129
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.578764
Transaction Length: 1
Severity: Low
Contract: Authorizable
Function name: authorities(uint256)
PC address: 472
Estimated Gas Usage: 805 - 900
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop4/0xfd87ba715d93e2e00e66fc995c39549073cdf6fc.sol:2356

address[] public authorities

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.450950
Transaction Length: 1
Severity: Low
Contract: ERC20BridgeProxy
Function name: authorities(uint256)
PC address: 1015
Estimated Gas Usage: 827 - 922
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop4/0xfd87ba715d93e2e00e66fc995c39549073cdf6fc.sol:2356

address[] public authorities

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0xe7a0f13bfac736976f8f1f7c39433e2b59f8bb52.sol
Total states:138
213.000514
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.593509
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: convertOddToCvpAndSendToPayout(address[])
PC address: 503
Estimated Gas Usage: 364 - 459
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xe7a0f13bfac736976f8f1f7c39433e2b59f8bb52.sol:6

/powerpool.finance/



--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.176879
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: convertOddToCvpAndSendToPayout(address[])
PC address: 505
Estimated Gas Usage: 364 - 459
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xe7a0f13bfac736976f8f1f7c39433e2b59f8bb52.sol:3

*/

/*
https://powerpool.finance/

 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:06.548561
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: getEthAndTokensIn(uint256,address[])
PC address: 970
Estimated Gas Usage: 390 - 485
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xe7a0f13bfac736976f8f1f7c39433e2b59f8bb52.sol:6

/powerpool.finance/



--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:10.993650
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: getEthAndTokensIn(uint256,address[])
PC address: 972
Estimated Gas Usage: 390 - 485
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xe7a0f13bfac736976f8f1f7c39433e2b59f8bb52.sol:3

*/

/*
https://powerpool.finance/

 

--------------------

==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:15.510653
Transaction Length: 1
Severity: Medium
Contract: EthPiptSwap
Function name: convertOddToCvpAndSendToPayout(address[])
PC address: 3111
Estimated Gas Usage: 574 - 3351
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../contracts/m_loop/loop4/0xe7a0f13bfac736976f8f1f7c39433e2b59f8bb52.sol:831

tx.origin

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:58.766306
Transaction Length: 1
Severity: Low
Contract: EthPiptSwap
Function name: getEthAndTokensIn(uint256,address[])
PC address: 6527
Estimated Gas Usage: 3152 - 41149
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop4/0xe7a0f13bfac736976f8f1f7c39433e2b59f8bb52.sol:871

tokens[0]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:33.651073
Transaction Length: 1
Severity: Low
Contract: EthPiptSwap
Function name: feeLevels(uint256)
PC address: 8707
Estimated Gas Usage: 767 - 862
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop4/0xe7a0f13bfac736976f8f1f7c39433e2b59f8bb52.sol:703

uint256[] public feeLevels

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.955892
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: getAmountOut(uint256,uint256,uint256)
PC address: 15569
Estimated Gas Usage: 500 - 595
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xe7a0f13bfac736976f8f1f7c39433e2b59f8bb52.sol:290

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0x1980d385b2416f3b3c240800c4b2f668e4e8b8ad.sol
Total states:2324
1.99385
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0x528732d7ff76a31bd419f1d57d549d7643c02db2.sol
Total states:1293
3.221533
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.053728
Transaction Length: 0
Severity: High
Contract: GLDS
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x528732d7ff76a31bd419f1d57d549d7643c02db2.sol:26

es two unsigned integers, reverts on overfl

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0x3246ac4f28148c75e18152ba4d80c93606555ad0.sol
Total states:3260
15.561067
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0x9028c4b1d36c8d72217902bd4c2c4e2bf38668fc.sol
Total states:16022
379.34483
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:01:54.531615
Transaction Length: 1
Severity: Low
Contract: SpacePodsUSDT
Function name: depositSZToken(address,uint256)
PC address: 7032
Estimated Gas Usage: 3085 - 4406
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop4/0x9028c4b1d36c8d72217902bd4c2c4e2bf38668fc.sol:336

token.intTransfer(_from,address(this),amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:02:45.715002
Transaction Length: 2
Severity: Low
Contract: SpacePodsUSDT
Function name: depositSZToken(address,uint256)
PC address: 7032
Estimated Gas Usage: 3085 - 4406
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop4/0x9028c4b1d36c8d72217902bd4c2c4e2bf38668fc.sol:336

token.intTransfer(_from,address(this),amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:01:21.143812
Transaction Length: 1
Severity: Low
Contract: SpacePodsUSDT
Function name: depositToken(address,uint256)
PC address: 7631
Estimated Gas Usage: 2685 - 3581
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop4/0x9028c4b1d36c8d72217902bd4c2c4e2bf38668fc.sol:309

token.deposit(_from,amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:02:15.011219
Transaction Length: 2
Severity: Low
Contract: SpacePodsUSDT
Function name: depositToken(address,uint256)
PC address: 7631
Estimated Gas Usage: 2685 - 3581
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop4/0x9028c4b1d36c8d72217902bd4c2c4e2bf38668fc.sol:309

token.deposit(_from,amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:01:05.069425
Transaction Length: 1
Severity: Low
Contract: SpacePodsUSDT
Function name: depositTokenTerm(address,uint256,uint256)
PC address: 7968
Estimated Gas Usage: 4425 - 40403
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop4/0x9028c4b1d36c8d72217902bd4c2c4e2bf38668fc.sol:312

token.intTransfer(_from,address(this),amount * (10 ** 12))

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:01:46.918346
Transaction Length: 2
Severity: Low
Contract: SpacePodsUSDT
Function name: depositTokenTerm(address,uint256,uint256)
PC address: 7968
Estimated Gas Usage: 4425 - 40403
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop4/0x9028c4b1d36c8d72217902bd4c2c4e2bf38668fc.sol:312

token.intTransfer(_from,address(this),amount * (10 ** 12))

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:09.167316
Transaction Length: 1
Severity: Low
Contract: SpacePodsUSDT
Function name: interests(uint256)
PC address: 11449
Estimated Gas Usage: 746 - 841
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop4/0x9028c4b1d36c8d72217902bd4c2c4e2bf38668fc.sol:146

InterestStruct[] public interests

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:03:17.505311
Transaction Length: 1
Severity: Low
Contract: SpacePodsUSDT
Function name: borrow(uint256)
PC address: 20812
Estimated Gas Usage: 57191 - 296141
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop4/0x9028c4b1d36c8d72217902bd4c2c4e2bf38668fc.sol:654

catToken.intTransfer(_addr,address(this),amount)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0x488E43a7aD0b7244767A223c68A60e0a684b33a4.sol
Total states:272
73.253061
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.082979
Transaction Length: 0
Severity: High
Contract: FarmPrdzEth60
Function name: constructor
PC address: 430
Estimated Gas Usage: 82565 - 406328
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x488E43a7aD0b7244767A223c68A60e0a684b33a4.sol:34

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.479976
Transaction Length: 0
Severity: Low
Contract: FarmPrdzEth60
Function name: constructor
PC address: 444
Estimated Gas Usage: 82575 - 406338
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop4/0x488E43a7aD0b7244767A223c68A60e0a684b33a4.sol:35

assert(c >= a)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0x33c2c9b579c04748a9dd1069aae24ef47239ff37.sol
Total states:10094
22.467474
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.046156
Transaction Length: 0
Severity: High
Contract: SOL
Function name: constructor
PC address: 98
Estimated Gas Usage: 233 - 3006
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x33c2c9b579c04748a9dd1069aae24ef47239ff37.sol:28

 view returns(uint);



    function transf

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.313322
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3244
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x33c2c9b579c04748a9dd1069aae24ef47239ff37.sol:288

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0xc8b227ae84a162744465007c38240b367928d5f8.sol
Total states:2116
85.26532
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:48.944507
Transaction Length: 1
Severity: Low
Contract: SakeSwapBatchTrade
Function name: swapExactETHForTokens(address,uint8,bool)
PC address: 1334
Estimated Gas Usage: 5815 - 76305
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop4/0xc8b227ae84a162744465007c38240b367928d5f8.sol:426

IWETH(weth).deposit.value(msg.value)()

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:59.264263
Transaction Length: 1
Severity: Low
Contract: SakeSwapBatchTrade
Function name: swapExactETHForTokens(address,uint8,bool)
PC address: 1622
Estimated Gas Usage: 8284 - 113905
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop4/0xc8b227ae84a162744465007c38240b367928d5f8.sol:427

IERC20(weth).approve(address(router), uint256(-1))

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:01:23.508732
Transaction Length: 1
Severity: Medium
Contract: SakeSwapBatchTrade
Function name: swapExactETHForTokens(address,uint8,bool)
PC address: 1911
Estimated Gas Usage: 10396 - 151004
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../contracts/m_loop/loop4/0xc8b227ae84a162744465007c38240b367928d5f8.sol:428

IERC20(token).approve(address(router), uint256(-1))

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:24.184540
Transaction Length: 1
Severity: Low
Contract: SakeSwapBatchTrade
Function name: receive()
PC address: 4183
Estimated Gas Usage: 613 - 1038
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop4/0xc8b227ae84a162744465007c38240b367928d5f8.sol:406

assert(msg.sender == weth)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0x5fe619bc74a971836c9c71ade2d944fd93457c60.sol
Total states:3281
3622.091788
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.574311
Transaction Length: 1
Severity: Low
Contract: AgnosticPrivateSale
Function name: allUsers(uint256)
PC address: 2771
Estimated Gas Usage: 701 - 796
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop4/0x5fe619bc74a971836c9c71ade2d944fd93457c60.sol:140

address[] public allUsers

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0xfdd6d5c17d5d0fff346554a657f183b9a03720ea.sol
Total states:77
3.265984
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0x8f3228A67Fde7BD306716904E1d086462f8711f8.sol
Total states:427
39.710708
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.194763
Transaction Length: 1
Severity: High
Contract: VaultKeeper
Function name: earn(address[])
PC address: 158
Estimated Gas Usage: 296 - 391
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x8f3228A67Fde7BD306716904E1d086462f8711f8.sol:5

olidity 0.7.0;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.481988
Transaction Length: 1
Severity: High
Contract: VaultKeeper
Function name: earn(address[])
PC address: 160
Estimated Gas Usage: 296 - 391
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x8f3228A67Fde7BD306716904E1d086462f8711f8.sol:3

*/

//pragma solidity 0.7.0;
pragma 

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:26.617522
Transaction Length: 1
Severity: Medium
Contract: VaultKeeper
Function name: earn(address[])
PC address: 197
Estimated Gas Usage: 3734 - 72391
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 360
Offset: 360
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop4/0x8f3228A67Fde7BD306716904E1d086462f8711f8.sol:14

function earn(address[] calldata vaults) external {
        for (uint i=0; i<vaults.length; i++) {
            Vault(vaults[i]).earn();
        }
    }

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:00:36.253889
Transaction Length: 1
Severity: Medium
Contract: VaultKeeper
Function name: earn(address[])
PC address: 360
Estimated Gas Usage: 4582 - 73520
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../contracts/m_loop/loop4/0x8f3228A67Fde7BD306716904E1d086462f8711f8.sol:16

Vault(vaults[i]).earn()

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0x50011ba91948c198ba6e298cc703f03cb66734e4.sol
Total states:35577
226.526857
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.129599
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1004
Estimated Gas Usage: 417 - 512
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x50011ba91948c198ba6e298cc703f03cb66734e4.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.154489
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1006
Estimated Gas Usage: 417 - 512
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x50011ba91948c198ba6e298cc703f03cb66734e4.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:15.129228
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1089
Estimated Gas Usage: 593 - 688
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x50011ba91948c198ba6e298cc703f03cb66734e4.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:25.894790
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1091
Estimated Gas Usage: 593 - 688
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x50011ba91948c198ba6e298cc703f03cb66734e4.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.232196
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1195
Estimated Gas Usage: 462 - 557
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x50011ba91948c198ba6e298cc703f03cb66734e4.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.236857
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1197
Estimated Gas Usage: 462 - 557
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x50011ba91948c198ba6e298cc703f03cb66734e4.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.373276
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1280
Estimated Gas Usage: 638 - 733
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x50011ba91948c198ba6e298cc703f03cb66734e4.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:19.195300
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1282
Estimated Gas Usage: 638 - 733
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x50011ba91948c198ba6e298cc703f03cb66734e4.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.407543
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleAccess
Function name: interpolate(uint256,uint256,uint256,uint256,uint256)
PC address: 2313
Estimated Gas Usage: 997 - 1848
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x50011ba91948c198ba6e298cc703f03cb66734e4.sol:162

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.788624
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeBP(uint256)
PC address: 2585
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop4/0x50011ba91948c198ba6e298cc703f03cb66734e4.sol:784

uint[] public bonusRangeBP

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.544132
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3262
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop4/0x50011ba91948c198ba6e298cc703f03cb66734e4.sol:1266

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:03.811877
Transaction Length: 2
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3262
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop4/0x50011ba91948c198ba6e298cc703f03cb66734e4.sol:1266

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:39.681187
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeStart(uint256)
PC address: 6017
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop4/0x50011ba91948c198ba6e298cc703f03cb66734e4.sol:783

uint[] public bonusRangeStart

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:37.163056
Transaction Length: 1
Severity: Low
Contract: LidStaking
Function name: stakeHandlers(uint256)
PC address: 6118
Estimated Gas Usage: 790 - 885
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop4/0x50011ba91948c198ba6e298cc703f03cb66734e4.sol:962

IStakeHandler[] public stakeHandlers

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.807930
Transaction Length: 2
Severity: High
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6315
Estimated Gas Usage: 1699 - 2124
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x50011ba91948c198ba6e298cc703f03cb66734e4.sol:1112

stakeHandlers.length-1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:09.071551
Transaction Length: 2
Severity: Low
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6326
Estimated Gas Usage: 1709 - 2134
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop4/0x50011ba91948c198ba6e298cc703f03cb66734e4.sol:1112

stakeHandlers[stakeHandlers.length-1]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:35.736570
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: calculateRatePerEth(uint256,uint256,uint256)
PC address: 6866
Estimated Gas Usage: 955 - 1050
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x50011ba91948c198ba6e298cc703f03cb66734e4.sol:162

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:30.303313
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPoolBPs(uint256)
PC address: 13267
Estimated Gas Usage: 722 - 817
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop4/0x50011ba91948c198ba6e298cc703f03cb66734e4.sol:1267

uint[] public tokenPoolBPs

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.858199
Transaction Length: 1
Severity: High
Contract: LidStaking
Function name: findTaxAmount(uint256,uint256)
PC address: 13348
Estimated Gas Usage: 474 - 569
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x50011ba91948c198ba6e298cc703f03cb66734e4.sol:162

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0x193495072f4beaef219bf6e075dcb3692a673fab.sol
Total states:39010
264.574162
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0x8c9e37f0e99d7e82bffed46dc83af17e9fe9f41f.sol
Total states:2324
1.913037
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0x594000baf94b5185054cf7ba809d9ec089e2e62e.sol
Total states:21448
41.052883
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0x5248ab2b7f0db71161f8fa975c49576a8e38a24f.sol
Total states:77
3.282717
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0xf8484b3d9e8189d4743b0ecf35a87c58b76cee7b.sol
Total states:77
2.922057
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0x27cf81031a70cb2e8af1772897220a3ddf02a46a.sol
Total states:474
1.01908
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.094448
Transaction Length: 0
Severity: High
Contract: EthMadness
Function name: constructor
PC address: 147
Estimated Gas Usage: 5724 - 28827
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x27cf81031a70cb2e8af1772897220a3ddf02a46a.sol:15

function approve(addr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.109753
Transaction Length: 0
Severity: High
Contract: EthMadness
Function name: constructor
PC address: 149
Estimated Gas Usage: 5724 - 28827
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x27cf81031a70cb2e8af1772897220a3ddf02a46a.sol:13

 returns (bool);

    function approve(addre

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0x0a037baedcec0a60c8d30dd33e41bf94717ed160.sol
Total states:15168
35.999766
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.098316
Transaction Length: 0
Severity: High
Contract: LexList
Function name: constructor
PC address: 110
Estimated Gas Usage: 257 - 3030
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x0a037baedcec0a60c8d30dd33e41bf94717ed160.sol:9

╗     
███

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.113458
Transaction Length: 0
Severity: High
Contract: LexList
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x0a037baedcec0a60c8d30dd33e41bf94717ed160.sol:9

═╝   ██╔██╗     
███

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.375591
Transaction Length: 1
Severity: High
Contract: LexList
Function name: list(address[])
PC address: 284
Estimated Gas Usage: 319 - 414
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x0a037baedcec0a60c8d30dd33e41bf94717ed160.sol:6

     ████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.887890
Transaction Length: 1
Severity: High
Contract: LexList
Function name: list(address[])
PC address: 286
Estimated Gas Usage: 319 - 414
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x0a037baedcec0a60c8d30dd33e41bf94717ed160.sol:3

*/

/*
██╗     █████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.889344
Transaction Length: 1
Severity: High
Contract: LexList
Function name: updateMessage(string)
PC address: 506
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x0a037baedcec0a60c8d30dd33e41bf94717ed160.sol:3

*/

/*
██╗     ████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:14.908503
Transaction Length: 1
Severity: High
Contract: LexList
Function name: delist(address[])
PC address: 625
Estimated Gas Usage: 385 - 480
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x0a037baedcec0a60c8d30dd33e41bf94717ed160.sol:6

     ████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:18.332216
Transaction Length: 1
Severity: High
Contract: LexList
Function name: delist(address[])
PC address: 627
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x0a037baedcec0a60c8d30dd33e41bf94717ed160.sol:3

*/

/*
██╗     █████

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:22.488732
Transaction Length: 1
Severity: Low
Contract: LexList
Function name: listings(uint256)
PC address: 4295
Estimated Gas Usage: 722 - 817
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop4/0x0a037baedcec0a60c8d30dd33e41bf94717ed160.sol:23

address[] public listings

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0xc18f41600d111a195b107f89e82f45331ace38bb.sol
Total states:3678
244.074627
==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:04:00.016124
Transaction Length: 1
Severity: Medium
Contract: miningPoolAirdropper
Function name: test(uint256,uint256)
PC address: 1224
Estimated Gas Usage: 4741 - 75368
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 5208
Offset: 5466
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop4/0xc18f41600d111a195b107f89e82f45331ace38bb.sol:1202

function test (uint256 j,uint256 pid) public view returns(uint256  a){

           address _addr =  masterChef.regisUser(j);

            

           (,uint256 amount,,,) =  masterChef.userInfo(pid,_addr);

           if(pid == 0){

               return Math.sqrt(amount.mul(amount).mul(1e18).div(pzUsdtPrice).div(1e6));

           }else if(pid == 1){

               return Math.sqrt(amount.mul(amount).mul(ethPzPrice));

           }

          

    }

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:01.214182
Transaction Length: 1
Severity: Low
Contract: miningPoolAirdropper
Function name: airDefiTransfer(address)
PC address: 2591
Estimated Gas Usage: 3020 - 4296
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop4/0xc18f41600d111a195b107f89e82f45331ace38bb.sol:1136

token.transfer(_recipients,airdropAmout)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:42.766264
Transaction Length: 1
Severity: High
Contract: miningPoolAirdropper
Function name: countPz(uint256,uint256)
PC address: 6086
Estimated Gas Usage: 859 - 954
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xc18f41600d111a195b107f89e82f45331ace38bb.sol:268

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0xaee188053b3911234e52305ec1b4d9603ff68863.sol
Total states:2324
2.067344
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0x672bf615718637b3349f8c417b0f0364a244593b.sol
Total states:4628
11.772827
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:02.395441
Transaction Length: 1
Severity: Low
Contract: HypeStake
Function name: ADDFUNDS(uint256)
PC address: 6904
Estimated Gas Usage: 1663 - 2654
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop4/0x672bf615718637b3349f8c417b0f0364a244593b.sol:764

IERC20(Hype).transferFromStake(msg.sender, address(this), tokens)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:06.255125
Transaction Length: 1
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 7447
Estimated Gas Usage: 2451 - 3442
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop4/0x672bf615718637b3349f8c417b0f0364a244593b.sol:668

IERC20(Hype).transferFromStake(msg.sender, address(this), tokens)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:02.397008
Transaction Length: 2
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 7447
Estimated Gas Usage: 2472 - 3463
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop4/0x672bf615718637b3349f8c417b0f0364a244593b.sol:668

IERC20(Hype).transferFromStake(msg.sender, address(this), tokens)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.039936
Transaction Length: 1
Severity: High
Contract: HypeStake
Function name: ADDFUNDS(uint256)
PC address: 9273
Estimated Gas Usage: 3425 - 38602
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x672bf615718637b3349f8c417b0f0364a244593b.sol:228

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0x785fc58bf1e5461da6192fc81cf9cb3c8e7e6928.sol
Total states:4378
15.705387
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:07.959422
Transaction Length: 1
Severity: Low
Contract: HDCOREv1Router
Function name: fallback
PC address: 2051
Estimated Gas Usage: 7941 - 29735
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop4/0x785fc58bf1e5461da6192fc81cf9cb3c8e7e6928.sol:641

_WETH.deposit.value(msg.value)()

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:08.794979
Transaction Length: 1
Severity: Low
Contract: HDCOREv1Router
Function name: refreshApproval()
PC address: 4460
Estimated Gas Usage: 1899 - 3125
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop4/0x785fc58bf1e5461da6192fc81cf9cb3c8e7e6928.sol:625

IUniswapV2Pair(_hdcoreWETHPair).approve(address(_hdcoreVault), uint(-1))

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol
Total states:60
43.723567
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:22.167061
Transaction Length: 1
Severity: Low
Contract: MainnetUsdtToUsdtAssimilator
Function name: intakeRawAndGetBalance(uint256)
PC address: 3607
Estimated Gas Usage: 896 - 3106
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop4/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol:956

token.call(data)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0xe29659a35260b87264ebf1155dd03b7de17d9b26.sol
Total states:14690
303.440997
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:01:44.195627
Transaction Length: 1
Severity: Low
Contract: SpacePodsDAI
Function name: depositSZToken(address,uint256)
PC address: 7015
Estimated Gas Usage: 2653 - 3974
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop4/0xe29659a35260b87264ebf1155dd03b7de17d9b26.sol:332

token.intTransfer(_from,address(this),amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:02:22.358880
Transaction Length: 2
Severity: Low
Contract: SpacePodsDAI
Function name: depositSZToken(address,uint256)
PC address: 7015
Estimated Gas Usage: 2653 - 3974
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop4/0xe29659a35260b87264ebf1155dd03b7de17d9b26.sol:332

token.intTransfer(_from,address(this),amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:01:17.677859
Transaction Length: 1
Severity: Low
Contract: SpacePodsDAI
Function name: depositToken(address,uint256)
PC address: 7599
Estimated Gas Usage: 2666 - 3892
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop4/0xe29659a35260b87264ebf1155dd03b7de17d9b26.sol:306

token.deposit(_from,amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:01:54.989882
Transaction Length: 2
Severity: Low
Contract: SpacePodsDAI
Function name: depositToken(address,uint256)
PC address: 7599
Estimated Gas Usage: 2666 - 3892
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop4/0xe29659a35260b87264ebf1155dd03b7de17d9b26.sol:306

token.deposit(_from,amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:01:01.066785
Transaction Length: 1
Severity: Low
Contract: SpacePodsDAI
Function name: depositTokenTerm(address,uint256,uint256)
PC address: 7929
Estimated Gas Usage: 4398 - 40706
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop4/0xe29659a35260b87264ebf1155dd03b7de17d9b26.sol:309

token.intTransfer(_from,address(this),amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:01:30.395631
Transaction Length: 2
Severity: Low
Contract: SpacePodsDAI
Function name: depositTokenTerm(address,uint256,uint256)
PC address: 7929
Estimated Gas Usage: 4398 - 40706
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop4/0xe29659a35260b87264ebf1155dd03b7de17d9b26.sol:309

token.intTransfer(_from,address(this),amount)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:49.518017
Transaction Length: 1
Severity: Low
Contract: SpacePodsDAI
Function name: interests(uint256)
PC address: 11068
Estimated Gas Usage: 746 - 841
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop4/0xe29659a35260b87264ebf1155dd03b7de17d9b26.sol:144

InterestStruct[] public interests

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0xebccd7d19767007fd6cedb5b1ead8e364e65fe39.sol
Total states:16824
35.986534
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.822157
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3044
Estimated Gas Usage: 989 - 1464
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xebccd7d19767007fd6cedb5b1ead8e364e65fe39.sol:38

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.480207
Transaction Length: 1
Severity: Low
Contract: COMMAOPENCHAT
Function name: lockState(address,uint256)
PC address: 4016
Estimated Gas Usage: 830 - 1115
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop4/0xebccd7d19767007fd6cedb5b1ead8e364e65fe39.sol:319

lockInfo[_holder][_idx]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.455475
Transaction Length: 2
Severity: High
Contract: COMMAOPENCHAT
Function name: increaseAllowance(address,uint256)
PC address: 11747
Estimated Gas Usage: 968 - 1443
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xebccd7d19767007fd6cedb5b1ead8e364e65fe39.sol:38

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0xcC4D9E47c0c43A384A205F954e8a80C2a2e9d0b1.sol
Total states:3761
41.722826
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.025881
Transaction Length: 1
Severity: High
Contract: Tellor
Function name: submitMiningSolution(string,uint256[5],uint256[5])
PC address: 1033
Estimated Gas Usage: 407 - 502
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xcC4D9E47c0c43A384A205F954e8a80C2a2e9d0b1.sol:3

*/

// File: contracts/libraries/Sa

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.361780
Transaction Length: 1
Severity: High
Contract: Tellor
Function name: submitMiningSolution(string,uint256,uint256)
PC address: 1230
Estimated Gas Usage: 341 - 436
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xcC4D9E47c0c43A384A205F954e8a80C2a2e9d0b1.sol:3

*/

// File: contracts/libraries/Sa

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0xa12AA89BeB87332e8bfC2087956d11960E3d103e.sol
Total states:34354
252.223207
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0x31d19349b6db6a3231a493bd272c942735f659db.sol
Total states:1759
6.188606
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0xc4749f416c7dc27e09f67ac02f23a90e0ba6ad21.sol
Total states:4618
965.548551
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.671557
Transaction Length: 1
Severity: High
Contract: AetherianLand
Function name: deleteTokens(uint256[])
PC address: 726
Estimated Gas Usage: 408 - 503
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xc4749f416c7dc27e09f67ac02f23a90e0ba6ad21.sol:9

e: openzeppelin-solid

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.635855
Transaction Length: 1
Severity: High
Contract: AetherianLand
Function name: deleteTokens(uint256[])
PC address: 728
Estimated Gas Usage: 408 - 503
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xc4749f416c7dc27e09f67ac02f23a90e0ba6ad21.sol:3



*/



// File: openzeppelin-solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.859039
Transaction Length: 1
Severity: High
Contract: ERC721
Function name: safeTransferFrom(address,address,uint256,bytes)
PC address: 1136
Estimated Gas Usage: 477 - 572
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xc4749f416c7dc27e09f67ac02f23a90e0ba6ad21.sol:3



*/



// File: openzeppelin-solid

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.808224
Transaction Length: 1
Severity: High
Contract: AetherianLand
Function name: safeTransferFrom(address,address,uint256,bytes)
PC address: 1759
Estimated Gas Usage: 522 - 617
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xc4749f416c7dc27e09f67ac02f23a90e0ba6ad21.sol:3



*/



// File: openzeppelin-solid

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:26.464116
Transaction Length: 1
Severity: High
Contract: AetherianLand
Function name: getMessageHash(address,uint256[],uint256)
PC address: 1976
Estimated Gas Usage: 373 - 468
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xc4749f416c7dc27e09f67ac02f23a90e0ba6ad21.sol:9

e: openzeppelin-solid

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:31.730739
Transaction Length: 1
Severity: High
Contract: AetherianLand
Function name: getMessageHash(address,uint256[],uint256)
PC address: 1978
Estimated Gas Usage: 373 - 468
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xc4749f416c7dc27e09f67ac02f23a90e0ba6ad21.sol:3



*/



// File: openzeppelin-solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:14:05.570406
Transaction Length: 1
Severity: High
Contract: AetherianLand
Function name: claimLandTokens(address,uint256[],uint256,uint8,bytes32,bytes32)
PC address: 2288
Estimated Gas Usage: 417 - 512
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xc4749f416c7dc27e09f67ac02f23a90e0ba6ad21.sol:9

e: openzeppelin-solid

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:14:10.975505
Transaction Length: 1
Severity: High
Contract: AetherianLand
Function name: claimLandTokens(address,uint256[],uint256,uint8,bytes32,bytes32)
PC address: 2290
Estimated Gas Usage: 417 - 512
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xc4749f416c7dc27e09f67ac02f23a90e0ba6ad21.sol:3



*/



// File: openzeppelin-solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:59.475928
Transaction Length: 1
Severity: High
Contract: AetherianLand
Function name: getMessageHash(address,uint256[],uint256)
PC address: 6030
Estimated Gas Usage: 786 - 4222
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xc4749f416c7dc27e09f67ac02f23a90e0ba6ad21.sol:2170

abi.encode(userAddress, plotIds, nonce)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:50.936490
Transaction Length: 1
Severity: High
Contract: AetherianLand
Function name: getMessageHash(address,uint256[],uint256)
PC address: 6070
Estimated Gas Usage: 936 - 4748
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xc4749f416c7dc27e09f67ac02f23a90e0ba6ad21.sol:2170

abi.encode(userAddress, plotIds, nonce)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0xc2080c74de89e6dc871b083ddc99279f25c3bc83.sol
Total states:669
1.299037
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0xaaa601ae20077f9fae80494ddc36bb39c952c2d03.sol
Total states:7896
55.37677
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.138430
Transaction Length: 1
Severity: High
Contract: PriceFeeds
Function name: setPriceFeed(address[],address[])
PC address: 1295
Estimated Gas Usage: 385 - 480
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xaaa601ae20077f9fae80494ddc36bb39c952c2d03.sol:6

yright 2017-2020, bZe

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.379989
Transaction Length: 1
Severity: High
Contract: PriceFeeds
Function name: setPriceFeed(address[],address[])
PC address: 1297
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xaaa601ae20077f9fae80494ddc36bb39c952c2d03.sol:3

*/

/**
 * Copyright 2017-2020, bZer

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:17.865967
Transaction Length: 1
Severity: High
Contract: PriceFeeds
Function name: setPriceFeed(address[],address[])
PC address: 1380
Estimated Gas Usage: 561 - 656
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xaaa601ae20077f9fae80494ddc36bb39c952c2d03.sol:6

yright 2017-2020, bZe

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:32.477612
Transaction Length: 1
Severity: High
Contract: PriceFeeds
Function name: setPriceFeed(address[],address[])
PC address: 1382
Estimated Gas Usage: 561 - 656
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xaaa601ae20077f9fae80494ddc36bb39c952c2d03.sol:3

*/

/**
 * Copyright 2017-2020, bZer

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:45.474610
Transaction Length: 1
Severity: High
Contract: PriceFeeds
Function name: setDecimals(address[])
PC address: 1865
Estimated Gas Usage: 385 - 480
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xaaa601ae20077f9fae80494ddc36bb39c952c2d03.sol:6

yright 2017-2020, bZe

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:49.336078
Transaction Length: 1
Severity: High
Contract: PriceFeeds
Function name: setDecimals(address[])
PC address: 1867
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xaaa601ae20077f9fae80494ddc36bb39c952c2d03.sol:3

*/

/**
 * Copyright 2017-2020, bZer

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.227737
Transaction Length: 1
Severity: High
Contract: PriceFeeds
Function name: checkPriceDisagreement(address,address,uint256,uint256,uint256)
PC address: 6399
Estimated Gas Usage: 1065 - 1490
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xaaa601ae20077f9fae80494ddc36bb39c952c2d03.sol:181

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0x5df8603b461d536bf6095c73d9857c14d1a8945d.sol
Total states:4206
6.989736
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.205632
Transaction Length: 1
Severity: Low
Contract: DODOMine
Function name: updatePool(uint256)
PC address: 3648
Estimated Gas Usage: 852 - 947
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop4/0x5df8603b461d536bf6095c73d9857c14d1a8945d.sol:517

poolInfos[_pid]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.581742
Transaction Length: 1
Severity: Low
Contract: DODOMine
Function name: poolInfos(uint256)
PC address: 4121
Estimated Gas Usage: 893 - 988
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop4/0x5df8603b461d536bf6095c73d9857c14d1a8945d.sol:360

PoolInfo[] public poolInfos

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0x1f29d7dB5428fe4d65524925014fC34294429B50.sol
Total states:52177
1061.389869
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.197083
Transaction Length: 1
Severity: High
Contract: Module
Function name: getModuleAddress(string)
PC address: 416
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x1f29d7dB5428fe4d65524925014fC34294429B50.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.040004
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(string,string,uint8)
PC address: 1000
Estimated Gas Usage: 409 - 504
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x1f29d7dB5428fe4d65524925014fC34294429B50.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.923613
Transaction Length: 1
Severity: High
Contract: PoolToken_Aave_sUSD
Function name: initialize(string,string,uint8)
PC address: 1000
Estimated Gas Usage: 409 - 504
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x1f29d7dB5428fe4d65524925014fC34294429B50.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.223049
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(string,string,uint8)
PC address: 1151
Estimated Gas Usage: 751 - 3528
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x1f29d7dB5428fe4d65524925014fC34294429B50.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.494867
Transaction Length: 1
Severity: High
Contract: PoolToken_Aave_sUSD
Function name: initialize(string,string,uint8)
PC address: 1151
Estimated Gas Usage: 751 - 3528
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x1f29d7dB5428fe4d65524925014fC34294429B50.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.419726
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[],uint256)
PC address: 2226
Estimated Gas Usage: 429 - 524
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x1f29d7dB5428fe4d65524925014fC34294429B50.sol:5

openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.179820
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[],uint256)
PC address: 2228
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x1f29d7dB5428fe4d65524925014fC34294429B50.sol:3

*/

// File: @openzeppelin\upgrades\

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.686898
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[])
PC address: 2357
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x1f29d7dB5428fe4d65524925014fC34294429B50.sol:5

openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:15.152636
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[])
PC address: 2359
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x1f29d7dB5428fe4d65524925014fC34294429B50.sol:3

*/

// File: @openzeppelin\upgrades\

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:30.185156
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: getModuleAddress(string)
PC address: 2526
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x1f29d7dB5428fe4d65524925014fC34294429B50.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:35.113024
Transaction Length: 1
Severity: High
Contract: PoolToken_Aave_sUSD
Function name: getModuleAddress(string)
PC address: 2526
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x1f29d7dB5428fe4d65524925014fC34294429B50.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:26.903693
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(address,string,string)
PC address: 3179
Estimated Gas Usage: 485 - 580
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x1f29d7dB5428fe4d65524925014fC34294429B50.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:31.442066
Transaction Length: 1
Severity: High
Contract: PoolToken_Aave_sUSD
Function name: initialize(address,string,string)
PC address: 3179
Estimated Gas Usage: 485 - 580
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x1f29d7dB5428fe4d65524925014fC34294429B50.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.109378
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3249
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x1f29d7dB5428fe4d65524925014fC34294429B50.sol:212

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:47.756613
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(address,string,string)
PC address: 3330
Estimated Gas Usage: 827 - 3604
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x1f29d7dB5428fe4d65524925014fC34294429B50.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:55.808216
Transaction Length: 1
Severity: High
Contract: PoolToken_Aave_sUSD
Function name: initialize(address,string,string)
PC address: 3330
Estimated Gas Usage: 827 - 3604
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x1f29d7dB5428fe4d65524925014fC34294429B50.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.343052
Transaction Length: 1
Severity: Low
Contract: DistributionToken
Function name: distributions(uint256)
PC address: 3405
Estimated Gas Usage: 724 - 819
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop4/0x1f29d7dB5428fe4d65524925014fC34294429B50.sol:995

Distribution[] public distributions

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.471998
Transaction Length: 2
Severity: High
Contract: ERC20Burnable
Function name: increaseAllowance(address,uint256)
PC address: 3429
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x1f29d7dB5428fe4d65524925014fC34294429B50.sol:212

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.041051
Transaction Length: 2
Severity: High
Contract: ERC20Mintable
Function name: increaseAllowance(address,uint256)
PC address: 4214
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x1f29d7dB5428fe4d65524925014fC34294429B50.sol:212

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:39.556159
Transaction Length: 1
Severity: Low
Contract: PoolToken
Function name: distributions(uint256)
PC address: 6392
Estimated Gas Usage: 768 - 863
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop4/0x1f29d7dB5428fe4d65524925014fC34294429B50.sol:995

Distribution[] public distributions

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:40.465638
Transaction Length: 1
Severity: Low
Contract: PoolToken_Aave_sUSD
Function name: distributions(uint256)
PC address: 6392
Estimated Gas Usage: 768 - 863
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop4/0x1f29d7dB5428fe4d65524925014fC34294429B50.sol:995

Distribution[] public distributions

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.001088
Transaction Length: 2
Severity: High
Contract: DistributionToken
Function name: increaseAllowance(address,uint256)
PC address: 6759
Estimated Gas Usage: 1104 - 1579
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x1f29d7dB5428fe4d65524925014fC34294429B50.sol:212

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0x0f58c61b4ba65b02e18f53a1c13bfd105bd61090.sol
Total states:18680
153.36429
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.848669
Transaction Length: 1
Severity: High
Contract: BasketCoin
Function name: bulkTransfer(address[],uint256[])
PC address: 757
Estimated Gas Usage: 408 - 503
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x0f58c61b4ba65b02e18f53a1c13bfd105bd61090.sol:5

olidity ^0.5.17;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.748484
Transaction Length: 1
Severity: High
Contract: BasketCoin
Function name: bulkTransfer(address[],uint256[])
PC address: 759
Estimated Gas Usage: 408 - 503
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x0f58c61b4ba65b02e18f53a1c13bfd105bd61090.sol:3

*/

//pragma solidity ^0.5.17;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.469851
Transaction Length: 1
Severity: High
Contract: BasketCoin
Function name: bulkTransfer(address[],uint256[])
PC address: 842
Estimated Gas Usage: 584 - 679
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x0f58c61b4ba65b02e18f53a1c13bfd105bd61090.sol:5

olidity ^0.5.17;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:27.252776
Transaction Length: 1
Severity: High
Contract: BasketCoin
Function name: bulkTransfer(address[],uint256[])
PC address: 844
Estimated Gas Usage: 584 - 679
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x0f58c61b4ba65b02e18f53a1c13bfd105bd61090.sol:3

*/

//pragma solidity ^0.5.17;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:46.555085
Transaction Length: 1
Severity: High
Contract: BasketCoin
Function name: transferAndCall(address,uint256,bytes)
PC address: 1417
Estimated Gas Usage: 511 - 606
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x0f58c61b4ba65b02e18f53a1c13bfd105bd61090.sol:3

*/

//pragma solidity ^0.5.17;
prag

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:56.013310
Transaction Length: 1
Severity: Low
Contract: BasketCoin
Function name: unfreeze(uint256)
PC address: 6429
Estimated Gas Usage: 1375 - 1660
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop4/0x0f58c61b4ba65b02e18f53a1c13bfd105bd61090.sol:212

_burnedAmount * FLOAT_SCALAR / info.totalFrozen

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:23.615762
Transaction Length: 2
Severity: Low
Contract: BasketCoin
Function name: unfreeze(uint256)
PC address: 6429
Estimated Gas Usage: 1375 - 1660
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop4/0x0f58c61b4ba65b02e18f53a1c13bfd105bd61090.sol:212

_burnedAmount * FLOAT_SCALAR / info.totalFrozen

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0x623e539cd4108e6cab4458f25517adc48eeb4725.sol
Total states:836
2.332797
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0x02c1ffd832143973fcec0cf3cac020ecb43dfb1a.sol
Total states:1950
5.902023
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol
Total states:1586
686.863016
==== Delegatecall Proxy ====
SWC ID: 112
FOUND TIME: 0:00:00.245935
Transaction Length: 1
Severity: Low
Contract: OwnedUpgradeabilityProxy
Function name: fallback
PC address: 180
Estimated Gas Usage: 771 - 5753
The contract implements a delegatecall proxy.
The smart contract forwards the received calldata via delegatecall. Note that callerscan execute arbitrary functions in the callee contract and that the callee contract can access the storage of the calling contract. Make sure that the callee contract is audited properly.DELEGATECALL target: Concat(5_code(OwnedUpgradeabilityProxy),
       5_code(OwnedUpgradeabilityProxy),
       5_code(OwnedUpgradeabilityProxy),
       5_code(OwnedUpgradeabilityProxy),
       5_code(OwnedUpgradeabilityProxy),
       5_code(OwnedUpgradeabilityProxy),
       5_code(OwnedUpgradeabilityProxy),
       5_code(OwnedUpgradeabilityProxy),
       5_code(OwnedUpgradeabilityProxy),
       5_code(OwnedUpgradeabilityProxy),
       5_code(OwnedUpgradeabilityProxy),
       5_code(OwnedUpgradeabilityProxy),
       5_code(OwnedUpgradeabilityProxy),
       5_code(OwnedUpgradeabilityProxy),
       5_code(OwnedUpgradeabilityProxy),
       5_code(OwnedUpgradeabilityProxy),
       5_code(OwnedUpgradeabilityProxy),
       5_code(OwnedUpgradeabilityProxy),
       5_code(OwnedUpgradeabilityProxy),
       5_code(OwnedUpgradeabilityProxy),
       5_code(OwnedUpgradeabilityProxy),
       5_code(OwnedUpgradeabilityProxy),
       5_code(OwnedUpgradeabilityProxy),
       5_code(OwnedUpgradeabilityProxy),
       5_code(OwnedUpgradeabilityProxy),
       5_code(OwnedUpgradeabilityProxy),
       5_code(OwnedUpgradeabilityProxy),
       5_code(OwnedUpgradeabilityProxy),
       5_code(OwnedUpgradeabilityProxy),
       5_code(OwnedUpgradeabilityProxy),
       5_code(OwnedUpgradeabilityProxy),
       5_code(OwnedUpgradeabilityProxy))
--------------------
In file: ../../contracts/m_loop/loop4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:913

delegatecall(gas, _impl, ptr, calldatasize, 0, 0)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.593810
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: initiate(address,address,address,address[])
PC address: 1211
Estimated Gas Usage: 463 - 558
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:9

e: contracts/external

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.548935
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: initiate(address,address,address,address[])
PC address: 1213
Estimated Gas Usage: 463 - 558
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:3



*/



// File: contracts/external/

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:01:16.630368
Transaction Length: 1
Severity: Medium
Contract: MarketRegistry
Function name: transferAssets(address,address,uint256)
PC address: 2105
Estimated Gas Usage: 3436 - 72609
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 10805
Offset: 26176
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:2516

function transferAssets(address _asset, address payable _to, uint _amount) external onlyAuthorizedToGovern {

      _transferAsset(_asset, _to, _amount);

    }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:01:38.583069
Transaction Length: 1
Severity: Medium
Contract: MarketRegistry
Function name: setMasterAddress()
PC address: 2131
Estimated Gas Usage: 20392 - 150836
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 11129
Offset: 11658
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:2176

function setMasterAddress() public {

      OwnedUpgradeabilityProxy proxy =  OwnedUpgradeabilityProxy(address(uint160(address(this))));

      require(msg.sender == proxy.proxyOwner(),"Sender is not proxy owner.");

      ms = IMaster(msg.sender);

      masterAddress = msg.sender;

      governance = IGovernance(ms.getLatestAddress("GV"));

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:28.447976
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: updateMarketImplementations(uint256[],address[])
PC address: 2899
Estimated Gas Usage: 451 - 546
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:9

e: contracts/external

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:31.401337
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: updateMarketImplementations(uint256[],address[])
PC address: 2901
Estimated Gas Usage: 451 - 546
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:3



*/



// File: contracts/external/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:36.482495
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: updateMarketImplementations(uint256[],address[])
PC address: 2987
Estimated Gas Usage: 627 - 722
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:9

e: contracts/external

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:52.878874
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: updateMarketImplementations(uint256[],address[])
PC address: 2989
Estimated Gas Usage: 627 - 722
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:3



*/



// File: contracts/external/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:08.743900
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: callMarketResultEvent(uint256[],uint256,uint256,uint256)
PC address: 3585
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:9

e: contracts/external

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:11.560238
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: callMarketResultEvent(uint256[],uint256,uint256,uint256)
PC address: 3587
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:3



*/



// File: contracts/external/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:18.997290
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: callClaimedEvent(address,uint256[],address[],uint256,address)
PC address: 4369
Estimated Gas Usage: 484 - 579
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:9

e: contracts/external

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:24.777669
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: callClaimedEvent(address,uint256[],address[],uint256,address)
PC address: 4371
Estimated Gas Usage: 484 - 579
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:3



*/



// File: contracts/external/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:33.288691
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: callClaimedEvent(address,uint256[],address[],uint256,address)
PC address: 4457
Estimated Gas Usage: 660 - 755
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:9

e: contracts/external

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:42.435122
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: callClaimedEvent(address,uint256[],address[],uint256,address)
PC address: 4459
Estimated Gas Usage: 660 - 755
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:3



*/



// File: contracts/external/

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:08:48.384240
Transaction Length: 1
Severity: Medium
Contract: MarketRegistry
Function name: upgradeContractImplementation(address,address)
PC address: 4762
Estimated Gas Usage: 4098 - 73461
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 21857
Offset: 22280
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:2152

function upgradeContractImplementation(address payable _proxyAddress, address _newImplementation) 

        external onlyAuthorizedToGovern

    {

      require(_newImplementation != address(0));

      OwnedUpgradeabilityProxy tempInstance 

          = OwnedUpgradeabilityProxy(_proxyAddress);

      tempInstance.upgradeTo(_newImplementation);

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:10:06.820061
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: createGovernanceProposal(string,string,string,bytes,uint256,address,uint256,uint256,uint256)
PC address: 5068
Estimated Gas Usage: 362 - 457
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:3



*/



// File: contracts/external

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:10:23.568427
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: createGovernanceProposal(string,string,string,bytes,uint256,address,uint256,uint256,uint256)
PC address: 5222
Estimated Gas Usage: 704 - 3481
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:3



*/



// File: contracts/external

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:10:55.737204
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: createGovernanceProposal(string,string,string,bytes,uint256,address,uint256,uint256,uint256)
PC address: 5376
Estimated Gas Usage: 1046 - 6505
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:3



*/



// File: contracts/external

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:02:19.897588
Transaction Length: 1
Severity: Low
Contract: MarketRegistry
Function name: updateConfigAddressParameters(bytes8,address)
PC address: 13397
Estimated Gas Usage: 3816 - 39604
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:2574

marketUtility.updateAddressParameters(code, value)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:03:31.163129
Transaction Length: 1
Severity: Low
Contract: MarketRegistry
Function name: updateUintParameters(bytes8,uint256)
PC address: 16788
Estimated Gas Usage: 3812 - 39600
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:2564

marketUtility.updateUintParameters(code, value)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:03:51.354676
Transaction Length: 1
Severity: Low
Contract: MarketRegistry
Function name: burnDisputedProposalTokens(uint256)
PC address: 17424
Estimated Gas Usage: 3858 - 39836
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:2442

IMarket(disputedMarket).resolveDispute(false, 0)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:04:00.652807
Transaction Length: 1
Severity: Low
Contract: MarketRegistry
Function name: burnDisputedProposalTokens(uint256)
PC address: 17752
Estimated Gas Usage: 7571 - 78982
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:2448

plotToken.burn(_stakedAmount)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:36.521540
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: getMarketDetails(address)
PC address: 18576
Estimated Gas Usage: 1945 - 36509
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:9

contracts/exter

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:47.903207
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: getMarketDetails(address)
PC address: 18579
Estimated Gas Usage: 2065 - 36815
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:5

*/



// File: contracts/external/openzeppe

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:52.508420
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: getMarketDetails(address)
PC address: 18602
Estimated Gas Usage: 2065 - 36815
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:2744

IMarket(_marketAdd).getData()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:43.207183
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: getMarketDetails(address)
PC address: 18638
Estimated Gas Usage: 2065 - 36815
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:3

8

*/



// File: con

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:57.874551
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: getMarketDetails(address)
PC address: 18644
Estimated Gas Usage: 2065 - 36815
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:9

lidity/math/Sa

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:05.785258
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: getMarketDetails(address)
PC address: 18665
Estimated Gas Usage: 2123 - 36966
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:26

metic operations in S

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:12.052684
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: getMarketDetails(address)
PC address: 18667
Estimated Gas Usage: 2123 - 36966
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:22

 checks.

 *

 * Arithmetic operations in So

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:20.305369
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: getMarketDetails(address)
PC address: 18720
Estimated Gas Usage: 2223 - 37159
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:3

8

*/



// File: con

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:26.210278
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: getMarketDetails(address)
PC address: 18726
Estimated Gas Usage: 2223 - 37159
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:9

lidity/math/Sa

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:34.528605
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: getMarketDetails(address)
PC address: 18747
Estimated Gas Usage: 2281 - 37310
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:26

metic operations in S

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:40.576647
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: getMarketDetails(address)
PC address: 18749
Estimated Gas Usage: 2281 - 37310
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:22

 checks.

 *

 * Arithmetic operations in So

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:50.701827
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: getMarketDetails(address)
PC address: 18802
Estimated Gas Usage: 2381 - 37503
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:3

8

*/



// File: con

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:56.367749
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: getMarketDetails(address)
PC address: 18808
Estimated Gas Usage: 2381 - 37503
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:9

lidity/math/Sa

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:05.636137
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: getMarketDetails(address)
PC address: 18829
Estimated Gas Usage: 2439 - 37654
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:26

metic operations in S

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:11.543364
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: getMarketDetails(address)
PC address: 18831
Estimated Gas Usage: 2439 - 37654
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:22

 checks.

 *

 * Arithmetic operations in So

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:06:17.805768
Transaction Length: 1
Severity: Low
Contract: MarketRegistry
Function name: createMarket(uint256,uint256)
PC address: 19617
Estimated Gas Usage: 2068 - 3583
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:2252

marketCurrencies[_marketCurrencyIndex]

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:08:48.360796
Transaction Length: 1
Severity: Medium
Contract: MarketRegistry
Function name: upgradeContractImplementation(address,address)
PC address: 22280
Estimated Gas Usage: 3350 - 38713
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../contracts/m_loop/loop4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:2164

tempInstance.upgradeTo(_newImplementation)

--------------------

==== Unprotected Ether Withdrawal ====
SWC ID: 105
FOUND TIME: 0:01:16.448012
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: transferAssets(address,address,uint256)
PC address: 26176
Estimated Gas Usage: 2655 - 37828
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: ../../contracts/m_loop/loop4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:2542

_recipient.transfer(_amount)

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:01:08.396800
Transaction Length: 1
Severity: Medium
Contract: MarketRegistry
Function name: transferAssets(address,address,uint256)
PC address: 26373
Estimated Gas Usage: 3452 - 38910
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../contracts/m_loop/loop4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:2546

IToken(_asset).transfer(_recipient, _amount)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0xcfcbd5c6fbbac2183bd76b5caa4bd86fa0953dd6.sol
Total states:426
0.735145
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0x35488195f26570a8fe0043e47186b0bc5681fe89.sol
Total states:2367
5.372737
==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:00.319918
Transaction Length: 2
Severity: Medium
Contract: EOGLottery
Function name: GetPoints()
PC address: 270
Estimated Gas Usage: 7630 - 78640
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 1279
Offset: 1594
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop4/0x35488195f26570a8fe0043e47186b0bc5681fe89.sol:56

function GetPoints() public view returns(uint){
        uint Maxrand=0;
        for(uint i=0 ;i < Competitors.length;i++){
            if( EIP20Interface(EOGAddress).balanceOf(Competitors[i])>MinEOG){
                Maxrand += EIP20Interface(EOGAddress).balanceOf(Competitors[i])/(10**13);
            }
        }
        return Maxrand;
    }

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.577040
Transaction Length: 1
Severity: Low
Contract: EOGLottery
Function name: GetMaxHolder()
PC address: 4150
Estimated Gas Usage: 625 - 720
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop4/0x35488195f26570a8fe0043e47186b0bc5681fe89.sol:74

Competitors[0]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.403915
Transaction Length: 1
Severity: Low
Contract: EOGLottery
Function name: Random(uint256)
PC address: 5388
Estimated Gas Usage: 1353 - 2297
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop4/0x35488195f26570a8fe0043e47186b0bc5681fe89.sol:69

uint(keccak256(abi.encodePacked(block.timestamp, block.difficulty,Competitors.length,seed))) % max

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:03.536935
Transaction Length: 2
Severity: Low
Contract: EOGLottery
Function name: Random(uint256)
PC address: 5388
Estimated Gas Usage: 1353 - 2297
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop4/0x35488195f26570a8fe0043e47186b0bc5681fe89.sol:69

uint(keccak256(abi.encodePacked(block.timestamp, block.difficulty,Competitors.length,seed))) % max

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0x65efb57c57c0b870f378ba08ee6ba305ca14491f.sol
Total states:491
0.583524
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0xA9A9300Ab9A70c43C19d6F42e3308Be24d73D885.sol
Total states:621
14.56237
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0x50dEb51bDB3f89D7A1536dc2a60A9EfCf85636d3.sol
Total states:1423
431.775737
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.219297
Transaction Length: 1
Severity: High
Contract: Airdrop
Function name: multiTransfer(address,address[],uint256[])
PC address: 223
Estimated Gas Usage: 329 - 424
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x50dEb51bDB3f89D7A1536dc2a60A9EfCf85636d3.sol:5

olidity 0.6.10;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.402667
Transaction Length: 1
Severity: High
Contract: Airdrop
Function name: multiTransfer(address,address[],uint256[])
PC address: 225
Estimated Gas Usage: 329 - 424
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x50dEb51bDB3f89D7A1536dc2a60A9EfCf85636d3.sol:3

*/

//pragma solidity 0.6.10;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:17.307939
Transaction Length: 1
Severity: High
Contract: Airdrop
Function name: multiTransfer(address,address[],uint256[])
PC address: 371
Estimated Gas Usage: 671 - 3448
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x50dEb51bDB3f89D7A1536dc2a60A9EfCf85636d3.sol:5

olidity 0.6.10;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:29.019594
Transaction Length: 1
Severity: High
Contract: Airdrop
Function name: multiTransfer(address,address[],uint256[])
PC address: 373
Estimated Gas Usage: 671 - 3448
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x50dEb51bDB3f89D7A1536dc2a60A9EfCf85636d3.sol:3

*/

//pragma solidity 0.6.10;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:19.934944
Transaction Length: 1
Severity: High
Contract: Airdrop
Function name: getSymbol(address)
PC address: 687
Estimated Gas Usage: 2291 - 37698
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x50dEb51bDB3f89D7A1536dc2a60A9EfCf85636d3.sol:83

function getSymbol(address token) public view returns(string memory) {
    return ERC20(token).symbol();
  }

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:07.384116
Transaction Length: 1
Severity: Low
Contract: Airdrop
Function name: multiTransfer(address,address[],uint256[])
PC address: 938
Estimated Gas Usage: 1039 - 6870
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop4/0x50dEb51bDB3f89D7A1536dc2a60A9EfCf85636d3.sol:93

amounts[i]

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:01:27.874001
Transaction Length: 1
Severity: Medium
Contract: Airdrop
Function name: multiTransfer(address,address[],uint256[])
PC address: 1136
Estimated Gas Usage: 1941 - 8431
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../contracts/m_loop/loop4/0x50dEb51bDB3f89D7A1536dc2a60A9EfCf85636d3.sol:93

ERC20(token).transferFrom(msg.sender, receivers[i], amounts[i])

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:26.068940
Transaction Length: 1
Severity: High
Contract: Airdrop
Function name: getSymbol(address)
PC address: 1389
Estimated Gas Usage: 1854 - 36418
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x50dEb51bDB3f89D7A1536dc2a60A9EfCf85636d3.sol:5

dity 0.6.10;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:41.766238
Transaction Length: 1
Severity: High
Contract: Airdrop
Function name: getSymbol(address)
PC address: 1392
Estimated Gas Usage: 1947 - 36604
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x50dEb51bDB3f89D7A1536dc2a60A9EfCf85636d3.sol:3



//pragma solidity 0.6.10;
pragma solidity

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:50.093450
Transaction Length: 1
Severity: High
Contract: Airdrop
Function name: getSymbol(address)
PC address: 1413
Estimated Gas Usage: 1947 - 36604
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x50dEb51bDB3f89D7A1536dc2a60A9EfCf85636d3.sol:84

ERC20(token).symbol()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:33.159250
Transaction Length: 1
Severity: High
Contract: Airdrop
Function name: getSymbol(address)
PC address: 1438
Estimated Gas Usage: 1947 - 36604
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x50dEb51bDB3f89D7A1536dc2a60A9EfCf85636d3.sol:2


*/

//pragma solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:59.069624
Transaction Length: 1
Severity: High
Contract: Airdrop
Function name: getSymbol(address)
PC address: 1444
Estimated Gas Usage: 1947 - 36604
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x50dEb51bDB3f89D7A1536dc2a60A9EfCf85636d3.sol:6

 <0.7.17;

lib

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:13.108338
Transaction Length: 1
Severity: High
Contract: Airdrop
Function name: getSymbol(address)
PC address: 1466
Estimated Gas Usage: 2005 - 36755
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x50dEb51bDB3f89D7A1536dc2a60A9EfCf85636d3.sol:12

6) {
    // Gas optimization: this is cheap

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0xe2eb8d3dafe3b1f3ccda5f3ba798d869646a1638.sol
Total states:3887
39.716205
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:08.049418
Transaction Length: 1
Severity: Low
Contract: MidasZAP
Function name: fallback()
PC address: 1212
Estimated Gas Usage: 2253 - 3667
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop4/0xe2eb8d3dafe3b1f3ccda5f3ba798d869646a1638.sol:294

_WETH.deposit.value(msg.value)()

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:29.904268
Transaction Length: 2
Severity: Low
Contract: MidasZAP
Function name: fallback()
PC address: 1212
Estimated Gas Usage: 2253 - 3667
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop4/0xe2eb8d3dafe3b1f3ccda5f3ba798d869646a1638.sol:294

_WETH.deposit.value(msg.value)()

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:00:21.429895
Transaction Length: 2
Severity: Medium
Contract: MidasZAP
Function name: addLiquidityETHOnly(address)
PC address: 1212
Estimated Gas Usage: 1798 - 2882
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../contracts/m_loop/loop4/0xe2eb8d3dafe3b1f3ccda5f3ba798d869646a1638.sol:294

_WETH.deposit.value(msg.value)()

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0x1376e533858302ba05ab910097f5babc5619692f.sol
Total states:195
1170.262917
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:41.384934
Transaction Length: 1
Severity: High
Contract: Core
Function name: whitelistTokens(address[])
PC address: 887
Estimated Gas Usage: 364 - 459
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x1376e533858302ba05ab910097f5babc5619692f.sol:9

ma solidity 0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:44.882646
Transaction Length: 1
Severity: High
Contract: Core
Function name: whitelistTokens(address[])
PC address: 889
Estimated Gas Usage: 364 - 459
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x1376e533858302ba05ab910097f5babc5619692f.sol:3



*/



//pragma solidity 0.5.17;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:10.471135
Transaction Length: 1
Severity: High
Contract: Core
Function name: whitelistPeak(address,uint256[],uint256,bool)
PC address: 1096
Estimated Gas Usage: 441 - 536
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x1376e533858302ba05ab910097f5babc5619692f.sol:9

ma solidity 0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:15.264137
Transaction Length: 1
Severity: High
Contract: Core
Function name: whitelistPeak(address,uint256[],uint256,bool)
PC address: 1098
Estimated Gas Usage: 441 - 536
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x1376e533858302ba05ab910097f5babc5619692f.sol:3



*/



//pragma solidity 0.5.17;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.159131
Transaction Length: 1
Severity: High
Contract: Core
Function name: currentSystemState()
PC address: 2994
Estimated Gas Usage: 2276 - 37170
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x1376e533858302ba05ab910097f5babc5619692f.sol:9

solidity 0.5.17

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.790767
Transaction Length: 1
Severity: High
Contract: Core
Function name: currentSystemState()
PC address: 2997
Estimated Gas Usage: 2322 - 37309
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x1376e533858302ba05ab910097f5babc5619692f.sol:5

*/



//pragma solidity 0.5.17;
pragma soli

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.492944
Transaction Length: 1
Severity: High
Contract: Core
Function name: totalSystemAssets()
PC address: 3018
Estimated Gas Usage: 2322 - 37309
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x1376e533858302ba05ab910097f5babc5619692f.sol:728

oracle.getPriceFeed()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.068363
Transaction Length: 1
Severity: High
Contract: Core
Function name: totalSystemAssets()
PC address: 3043
Estimated Gas Usage: 2322 - 37309
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x1376e533858302ba05ab910097f5babc5619692f.sol:3

5

*/



//pragma sol

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.350606
Transaction Length: 1
Severity: High
Contract: Core
Function name: totalSystemAssets()
PC address: 3049
Estimated Gas Usage: 2322 - 37309
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x1376e533858302ba05ab910097f5babc5619692f.sol:10

=0.5 <0.7.17;


--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.462354
Transaction Length: 1
Severity: High
Contract: Core
Function name: totalSystemAssets()
PC address: 3069
Estimated Gas Usage: 2380 - 37460
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x1376e533858302ba05ab910097f5babc5619692f.sol:20

s the amount of token

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.564382
Transaction Length: 1
Severity: High
Contract: Core
Function name: totalSystemAssets()
PC address: 3071
Estimated Gas Usage: 2380 - 37460
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x1376e533858302ba05ab910097f5babc5619692f.sol:19

/**
     * @dev Returns the amount of tokens

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:39.232095
Transaction Length: 1
Severity: High
Contract: Core
Function name: dusdToUsd(uint256,bool)
PC address: 13475
Estimated Gas Usage: 2367 - 37354
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x1376e533858302ba05ab910097f5babc5619692f.sol:185

div(a, b, "SafeMath: division by zero")

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0x7bdc1fe46bd1edf1b74a20886bc1786bc41dbd46.sol
Total states:1126
67.564385
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.798768
Transaction Length: 1
Severity: High
Contract: VaultBatchEarn
Function name: batchAddVault(address[],uint256[],uint8[])
PC address: 762
Estimated Gas Usage: 384 - 479
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x7bdc1fe46bd1edf1b74a20886bc1786bc41dbd46.sol:5

cense-Identifier: MIT

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.423147
Transaction Length: 1
Severity: High
Contract: VaultBatchEarn
Function name: batchAddVault(address[],uint256[],uint8[])
PC address: 764
Estimated Gas Usage: 384 - 479
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x7bdc1fe46bd1edf1b74a20886bc1786bc41dbd46.sol:3

*/

// SPDX-License-Identifier: MIT


--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.925531
Transaction Length: 1
Severity: High
Contract: VaultBatchEarn
Function name: batchAddVault(address[],uint256[],uint8[])
PC address: 847
Estimated Gas Usage: 560 - 655
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x7bdc1fe46bd1edf1b74a20886bc1786bc41dbd46.sol:5

cense-Identifier: MIT

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:19.208406
Transaction Length: 1
Severity: High
Contract: VaultBatchEarn
Function name: batchAddVault(address[],uint256[],uint8[])
PC address: 849
Estimated Gas Usage: 560 - 655
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x7bdc1fe46bd1edf1b74a20886bc1786bc41dbd46.sol:3

*/

// SPDX-License-Identifier: MIT


--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:30.452798
Transaction Length: 1
Severity: High
Contract: VaultBatchEarn
Function name: batchAddVault(address[],uint256[],uint8[])
PC address: 932
Estimated Gas Usage: 736 - 831
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x7bdc1fe46bd1edf1b74a20886bc1786bc41dbd46.sol:5

cense-Identifier: MIT

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:54.146811
Transaction Length: 1
Severity: High
Contract: VaultBatchEarn
Function name: batchAddVault(address[],uint256[],uint8[])
PC address: 934
Estimated Gas Usage: 736 - 831
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x7bdc1fe46bd1edf1b74a20886bc1786bc41dbd46.sol:3

*/

// SPDX-License-Identifier: MIT


--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0xd16d6d45a9b2eabdcfe303a8dcdbcbb87aa6fe25.sol
Total states:2324
2.195492
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0x2c0a32e0ca9834587d1336fca21db7e873682fcf.sol
Total states:738
3.655059
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0xac40e5ecbe40066c51d9e15361679f414d7dec12.sol
Total states:10269
3079.268756
==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:22.101793
Transaction Length: 2
Severity: Medium
Contract: LPStaker
Function name: withdraw(address)
PC address: 226
Estimated Gas Usage: 23398 - 156297
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 1742
Offset: 2124
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop4/0xac40e5ecbe40066c51d9e15361679f414d7dec12.sol:208

function withdraw(address to) external {
        StakeState storage ss = _states[msg.sender];
        require(ss.lockedUntil < block.timestamp, "still locked");
        require(ss.balance > 0, "must have tokens to withdraw");
        uint128 balance = ss.balance;
        uint64 reward = ss.reward;
        uint128 bonusBalance = ss.bonusBalance;
        ss.balance = 0;
        ss.lockedUntil = 0;
        ss.reward = 0;
        
        if (bonusBalance > 0) {
            ss.bonusBalance = 0;
            reward += uint64((2500 * 1000000 * bonusBalance) / totalBonusDeposits); // TODO
        }
        
        require(depositToken.transfer(to, balance), "transfer unsuccessful");
        require(rewardToken.transfer(to, reward), "transfer unsuccessful");
    }

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:09.974442
Transaction Length: 2
Severity: Low
Contract: LPStaker
Function name: withdraw(address)
PC address: 1742
Estimated Gas Usage: 20413 - 84139
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop4/0xac40e5ecbe40066c51d9e15361679f414d7dec12.sol:224

depositToken.transfer(to, balance)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:20.357923
Transaction Length: 2
Severity: Low
Contract: LPStaker
Function name: withdraw(address)
PC address: 2124
Estimated Gas Usage: 22549 - 121262
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop4/0xac40e5ecbe40066c51d9e15361679f414d7dec12.sol:225

rewardToken.transfer(to, reward)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:17:22.404548
Transaction Length: 1
Severity: Low
Contract: LPStaker
Function name: depositWithBonus(uint128,bool)
PC address: 3563
Estimated Gas Usage: 33957 - 139825
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop4/0xac40e5ecbe40066c51d9e15361679f414d7dec12.sol:205

depositToken.transferFrom(msg.sender, address(this), amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:22:01.467075
Transaction Length: 2
Severity: Low
Contract: LPStaker
Function name: depositWithBonus(uint128,bool)
PC address: 3563
Estimated Gas Usage: 33957 - 139825
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop4/0xac40e5ecbe40066c51d9e15361679f414d7dec12.sol:205

depositToken.transferFrom(msg.sender, address(this), amount)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0xe879f44E6e0002629A4EE8dC5bDfb8fB7d096f962.sol
Total states:24247
174.11615
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.924057
Transaction Length: 1
Severity: High
Contract: DMGYieldFarmingV1
Function name: initialize(address,address,address,uint256,address[],address[],uint8[],uint16[])
PC address: 3958
Estimated Gas Usage: 598 - 693
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xe879f44E6e0002629A4EE8dC5bDfb8fB7d096f962.sol:5

olidity ^0.5.0;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.950435
Transaction Length: 1
Severity: High
Contract: DMGYieldFarmingV1
Function name: initialize(address,address,address,uint256,address[],address[],uint8[],uint16[])
PC address: 3960
Estimated Gas Usage: 598 - 693
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xe879f44E6e0002629A4EE8dC5bDfb8fB7d096f962.sol:3

*/

//pragma solidity ^0.5.0;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:21.680858
Transaction Length: 1
Severity: High
Contract: DMGYieldFarmingV1
Function name: initialize(address,address,address,uint256,address[],address[],uint8[],uint16[])
PC address: 4106
Estimated Gas Usage: 931 - 3708
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xe879f44E6e0002629A4EE8dC5bDfb8fB7d096f962.sol:5

olidity ^0.5.0;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:28.871967
Transaction Length: 1
Severity: High
Contract: DMGYieldFarmingV1
Function name: initialize(address,address,address,uint256,address[],address[],uint8[],uint16[])
PC address: 4108
Estimated Gas Usage: 931 - 3708
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xe879f44E6e0002629A4EE8dC5bDfb8fB7d096f962.sol:3

*/

//pragma solidity ^0.5.0;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:48.399227
Transaction Length: 1
Severity: High
Contract: DMGYieldFarmingV1
Function name: initialize(address,address,address,uint256,address[],address[],uint8[],uint16[])
PC address: 4254
Estimated Gas Usage: 1264 - 6723
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xe879f44E6e0002629A4EE8dC5bDfb8fB7d096f962.sol:5

olidity ^0.5.0;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:59.014951
Transaction Length: 1
Severity: High
Contract: DMGYieldFarmingV1
Function name: initialize(address,address,address,uint256,address[],address[],uint8[],uint16[])
PC address: 4256
Estimated Gas Usage: 1264 - 6723
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xe879f44E6e0002629A4EE8dC5bDfb8fB7d096f962.sol:3

*/

//pragma solidity ^0.5.0;
pragma

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0xdc58a481c27a6a376c02b97e1be2fafa0b22775b.sol
Total states:4753
7.007625
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:02.103409
Transaction Length: 1
Severity: Low
Contract: YFVVIPVoteV2
Function name: voters(address,uint256,uint256)
PC address: 6948
Estimated Gas Usage: 554 - 1029
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop4/0xdc58a481c27a6a376c02b97e1be2fafa0b22775b.sol:177

mapping(address => mapping(uint256 => address[MAX_VOTERS_PER_ITEM])) public voters

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0xd27ecaf9a9119be565c87f6f081d5e604d846484.sol
Total states:4618
949.665446
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.646675
Transaction Length: 1
Severity: High
Contract: AetherianLand
Function name: deleteTokens(uint256[])
PC address: 726
Estimated Gas Usage: 408 - 503
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xd27ecaf9a9119be565c87f6f081d5e604d846484.sol:9

e: openzeppelin-solid

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.229272
Transaction Length: 1
Severity: High
Contract: AetherianLand
Function name: deleteTokens(uint256[])
PC address: 728
Estimated Gas Usage: 408 - 503
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xd27ecaf9a9119be565c87f6f081d5e604d846484.sol:3



*/



// File: openzeppelin-solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.796768
Transaction Length: 1
Severity: High
Contract: ERC721
Function name: safeTransferFrom(address,address,uint256,bytes)
PC address: 1136
Estimated Gas Usage: 477 - 572
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xd27ecaf9a9119be565c87f6f081d5e604d846484.sol:3



*/



// File: openzeppelin-solid

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.510371
Transaction Length: 1
Severity: High
Contract: AetherianLand
Function name: safeTransferFrom(address,address,uint256,bytes)
PC address: 1759
Estimated Gas Usage: 522 - 617
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xd27ecaf9a9119be565c87f6f081d5e604d846484.sol:3



*/



// File: openzeppelin-solid

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:25.205692
Transaction Length: 1
Severity: High
Contract: AetherianLand
Function name: getMessageHash(address,uint256[],uint256)
PC address: 1976
Estimated Gas Usage: 373 - 468
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xd27ecaf9a9119be565c87f6f081d5e604d846484.sol:9

e: openzeppelin-solid

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:30.273931
Transaction Length: 1
Severity: High
Contract: AetherianLand
Function name: getMessageHash(address,uint256[],uint256)
PC address: 1978
Estimated Gas Usage: 373 - 468
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xd27ecaf9a9119be565c87f6f081d5e604d846484.sol:3



*/



// File: openzeppelin-solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:13:49.846410
Transaction Length: 1
Severity: High
Contract: AetherianLand
Function name: claimLandTokens(address,uint256[],uint256,uint8,bytes32,bytes32)
PC address: 2288
Estimated Gas Usage: 417 - 512
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xd27ecaf9a9119be565c87f6f081d5e604d846484.sol:9

e: openzeppelin-solid

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:13:55.946240
Transaction Length: 1
Severity: High
Contract: AetherianLand
Function name: claimLandTokens(address,uint256[],uint256,uint8,bytes32,bytes32)
PC address: 2290
Estimated Gas Usage: 417 - 512
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xd27ecaf9a9119be565c87f6f081d5e604d846484.sol:3



*/



// File: openzeppelin-solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:57.904150
Transaction Length: 1
Severity: High
Contract: AetherianLand
Function name: getMessageHash(address,uint256[],uint256)
PC address: 6030
Estimated Gas Usage: 786 - 4222
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xd27ecaf9a9119be565c87f6f081d5e604d846484.sol:2170

abi.encode(userAddress, plotIds, nonce)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:48.113020
Transaction Length: 1
Severity: High
Contract: AetherianLand
Function name: getMessageHash(address,uint256[],uint256)
PC address: 6070
Estimated Gas Usage: 936 - 4748
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xd27ecaf9a9119be565c87f6f081d5e604d846484.sol:2170

abi.encode(userAddress, plotIds, nonce)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0xf69eb1fec5b166080ab6322ffe90fd7fb980807b.sol
Total states:11899
36.113008
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:17.886573
Transaction Length: 1
Severity: Low
Contract: LidStaking
Function name: stakeHandlers(uint256)
PC address: 6118
Estimated Gas Usage: 790 - 885
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop4/0xf69eb1fec5b166080ab6322ffe90fd7fb980807b.sol:405

IStakeHandler[] public stakeHandlers

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.681471
Transaction Length: 2
Severity: High
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6315
Estimated Gas Usage: 1699 - 2124
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xf69eb1fec5b166080ab6322ffe90fd7fb980807b.sol:555

stakeHandlers.length-1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:07.236260
Transaction Length: 2
Severity: Low
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6326
Estimated Gas Usage: 1709 - 2134
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop4/0xf69eb1fec5b166080ab6322ffe90fd7fb980807b.sol:555

stakeHandlers[stakeHandlers.length-1]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.270909
Transaction Length: 1
Severity: High
Contract: LidStaking
Function name: findTaxAmount(uint256,uint256)
PC address: 13348
Estimated Gas Usage: 474 - 569
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xf69eb1fec5b166080ab6322ffe90fd7fb980807b.sol:148

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0x3E63e6F0D6E90E120Eb31e005aa149b476a89492.sol
Total states:5490
22.141286
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0x1d78ec233c424b38c3893f2b19c3c85b7ba2b39a.sol
Total states:1216
0.769853
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.046516
Transaction Length: 0
Severity: High
Contract: SpartanCouncil
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x1d78ec233c424b38c3893f2b19c3c85b7ba2b39a.sol:20

e

 * there is an account (an owner) that c

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0xa57f64458d85073911263e4e92c9913805c45d0d.sol
Total states:1986
20.11027
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.180105
Transaction Length: 1
Severity: High
Contract: StrategyAddTwoSidesOptimal
Function name: execute(address,uint256,bytes)
PC address: 726
Estimated Gas Usage: 376 - 471
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xa57f64458d85073911263e4e92c9913805c45d0d.sol:3

*/

// File: openzeppelin-solidity-

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:00.178182
Transaction Length: 0
Severity: Medium
Contract: StrategyAddTwoSidesOptimal
Function name: constructor
PC address: 867
Estimated Gas Usage: 38791 - 235224
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 375
Offset: 664
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop4/0xa57f64458d85073911263e4e92c9913805c45d0d.sol:619

contract StrategyAddTwoSidesOptimal is Ownable, ReentrancyGuard, Strategy {
    using SafeToken for address;
    using SafeMath for uint256;

    IUniswapV2Factory public factory;
    IUniswapV2Router02 public router;
    address public weth;
    address public goblin;

    /// @dev Create a new add two-side optimal strategy instance.
    /// @param _router The Uniswap router smart contract.
    constructor(IUniswapV2Router02 _router, address _goblin) public {
        factory = IUniswapV2Factory(_router.factory());
        router = _router;
        weth = _router.WETH();
        goblin = _goblin;
    }
    
    /// @dev Throws if called by any account other than the goblin.
    modifier onlyGoblin() {
        require(isGoblin(), "caller is not the goblin");
        _;
    }

    /// @dev Returns true if the caller is the current goblin.
    function isGoblin() public view returns (bool) {
        return msg.sender == goblin;
    }

    /// @dev Compute optimal deposit amount
    /// @param amtA amount of token A desired to deposit
    /// @param amtB amonut of token B desired to deposit
    /// @param resA amount of token A in reserve
    /// @param resB amount of token B in reserve
    function optimalDeposit(
        uint256 amtA,
        uint256 amtB,
        uint256 resA,
        uint256 resB
    ) internal pure returns (uint256 swapAmt, bool isReversed) {
        if (amtA.mul(resB) >= amtB.mul(resA)) {
            swapAmt = _optimalDepositA(amtA, amtB, resA, resB);
            isReversed = false;
        } else {
            swapAmt = _optimalDepositA(amtB, amtA, resB, resA);
            isReversed = true;
        }
    }

    /// @dev Compute optimal deposit amount helper
    /// @param amtA amount of token A desired to deposit
    /// @param amtB amonut of token B desired to deposit
    /// @param resA amount of token A in reserve
    /// @param resB amount of token B in reserve
    function _optimalDepositA(
        uint256 amtA,
        uint256 amtB,
        uint256 resA,
        uint256 resB
    ) internal pure returns (uint256) {
        require(amtA.mul(resB) >= amtB.mul(resA), "Reversed");

        uint256 a = 997;
        uint256 b = uint256(1997).mul(resA);
        uint256 _c = (amtA.mul(resB)).sub(amtB.mul(resA));
        uint256 c = _c.mul(1000).div(amtB.add(resB)).mul(resA);

        uint256 d = a.mul(c).mul(4);
        uint256 e = Math.sqrt(b.mul(b).add(d));

        uint256 numerator = e.sub(b);
        uint256 denominator = a.mul(2);

        return numerator.div(denominator);
    }

    /// @dev Execute worker strategy. Take LP tokens + ETH. Return LP tokens + ETH.
    /// @param user User address
    /// @param data Extra calldata information passed along to this strategy.
    function execute(address user, uint256, /* debt */ bytes calldata data) 
        external         
        payable  
        onlyGoblin       
        nonReentrant 
    {
        // 1. Find out what farming token we are dealing with.
        (address fToken, uint256 fAmount, uint256 minLPAmount) = abi.decode(data, (address, uint256, uint256));
        IUniswapV2Pair lpToken = IUniswapV2Pair(factory.getPair(fToken, weth));        
        // 2. Compute the optimal amount of ETH and fToken to be converted.  
        if (fAmount > 0) {  
            fToken.safeTransferFrom(user, address(this), fAmount);            
        }
        uint256 ethBalance = address(this).balance;
        uint256 swapAmt;
        bool isReversed;
        {
            (uint256 r0, uint256 r1, ) = lpToken.getReserves();
            (uint256 ethReserve, uint256 fReserve) = lpToken.token0() == weth ? (r0, r1) : (r1, r0);
            (swapAmt, isReversed) = optimalDeposit(ethBalance, fToken.myBalance(), ethReserve, fReserve);
        }
        // 3. Convert between ETH and farming tokens
        fToken.safeApprove(address(router), 0);
        fToken.safeApprove(address(router), uint256(-1));
        address[] memory path = new address[](2);
        (path[0], path[1]) = isReversed ? (fToken, weth) : (weth, fToken);
        if (isReversed) {
            router.swapExactTokensForETH(swapAmt, 0, path, address(this), now); // farming tokens to ETH
        } else {
            router.swapExactETHForTokens.value(swapAmt)(0, path, address(this), now); // ETH to farming tokens
        }
        // 4. Mint more LP tokens and return all LP tokens to the sender.
        (,, uint256 moreLPAmount) = router.addLiquidityETH.value(address(this).balance)(
            fToken, fToken.myBalance(), 0, 0, address(this), now
        );
        require(moreLPAmount >= minLPAmount, "insufficient LP tokens received");
        lpToken.transfer(msg.sender, lpToken.balanceOf(address(this)));
    }

    /// @dev Recover ERC20 tokens that were accidentally sent to this smart contract.
    /// @param token The token contract. Can be anything. This contract should not hold ERC20 tokens.
    /// @param to The address to send the tokens to.
    /// @param value The number of tokens to transfer to `to`.
    function recover(address token, address to, uint256 value) external onlyOwner nonReentrant {
        token.safeTransfer(to, value);
    }

    function() external payable {}
}

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0x5B57e808b0ddCF097e25C5f5E3d8d3c2b0D26319.sol
Total states:2744
33.327102
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.996636
Transaction Length: 1
Severity: High
Contract: CompoundStrategy
Function name: initialize(address,address,address,address[],address[])
PC address: 1358
Estimated Gas Usage: 484 - 579
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x5B57e808b0ddCF097e25C5f5E3d8d3c2b0D26319.sol:5

olidity 0.5.11;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.470435
Transaction Length: 1
Severity: High
Contract: CompoundStrategy
Function name: initialize(address,address,address,address[],address[])
PC address: 1360
Estimated Gas Usage: 484 - 579
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x5B57e808b0ddCF097e25C5f5E3d8d3c2b0D26319.sol:3

*/

//pragma solidity 0.5.11;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.734854
Transaction Length: 1
Severity: High
Contract: CompoundStrategy
Function name: initialize(address,address,address,address[],address[])
PC address: 1443
Estimated Gas Usage: 660 - 755
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x5B57e808b0ddCF097e25C5f5E3d8d3c2b0D26319.sol:5

olidity 0.5.11;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:19.664169
Transaction Length: 1
Severity: High
Contract: CompoundStrategy
Function name: initialize(address,address,address,address[],address[])
PC address: 1445
Estimated Gas Usage: 660 - 755
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x5B57e808b0ddCF097e25C5f5E3d8d3c2b0D26319.sol:3

*/

//pragma solidity 0.5.11;
pragma

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0xdf9d4674a430bdcc096a3a403128357ab36844ba.sol
Total states:3589
130.208036
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.121744
Transaction Length: 1
Severity: High
Contract: WadzPayToken
Function name: whitelistAddresses(address[])
PC address: 1097
Estimated Gas Usage: 430 - 525
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xdf9d4674a430bdcc096a3a403128357ab36844ba.sol:5

olidity ^0.5.9;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.239800
Transaction Length: 1
Severity: High
Contract: WadzPayToken
Function name: whitelistAddresses(address[])
PC address: 1099
Estimated Gas Usage: 430 - 525
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xdf9d4674a430bdcc096a3a403128357ab36844ba.sol:3

*/

//pragma solidity ^0.5.9;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:54.880242
Transaction Length: 1
Severity: High
Contract: WadzPayToken
Function name: symbol()
PC address: 1967
Estimated Gas Usage: 550 - 1680
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xdf9d4674a430bdcc096a3a403128357ab36844ba.sol:46

string public constant symbol = "WTK"

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:41.428137
Transaction Length: 1
Severity: High
Contract: WadzPayToken
Function name: setAdministrators(address[])
PC address: 2268
Estimated Gas Usage: 407 - 502
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xdf9d4674a430bdcc096a3a403128357ab36844ba.sol:5

olidity ^0.5.9;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:44.787030
Transaction Length: 1
Severity: High
Contract: WadzPayToken
Function name: setAdministrators(address[])
PC address: 2270
Estimated Gas Usage: 407 - 502
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xdf9d4674a430bdcc096a3a403128357ab36844ba.sol:3

*/

//pragma solidity ^0.5.9;
pragma

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0xe879f44E6e0002629A4EE8dC5bDfb8fB7d096f96.sol
Total states:24247
175.639176
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.920787
Transaction Length: 1
Severity: High
Contract: DMGYieldFarmingV1
Function name: initialize(address,address,address,uint256,address[],address[],uint8[],uint16[])
PC address: 3958
Estimated Gas Usage: 598 - 693
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xe879f44E6e0002629A4EE8dC5bDfb8fB7d096f96.sol:5

olidity ^0.5.0;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.952492
Transaction Length: 1
Severity: High
Contract: DMGYieldFarmingV1
Function name: initialize(address,address,address,uint256,address[],address[],uint8[],uint16[])
PC address: 3960
Estimated Gas Usage: 598 - 693
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xe879f44E6e0002629A4EE8dC5bDfb8fB7d096f96.sol:3

*/

//pragma solidity ^0.5.0;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:21.686230
Transaction Length: 1
Severity: High
Contract: DMGYieldFarmingV1
Function name: initialize(address,address,address,uint256,address[],address[],uint8[],uint16[])
PC address: 4106
Estimated Gas Usage: 931 - 3708
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xe879f44E6e0002629A4EE8dC5bDfb8fB7d096f96.sol:5

olidity ^0.5.0;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:28.860055
Transaction Length: 1
Severity: High
Contract: DMGYieldFarmingV1
Function name: initialize(address,address,address,uint256,address[],address[],uint8[],uint16[])
PC address: 4108
Estimated Gas Usage: 931 - 3708
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xe879f44E6e0002629A4EE8dC5bDfb8fB7d096f96.sol:3

*/

//pragma solidity ^0.5.0;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:48.346774
Transaction Length: 1
Severity: High
Contract: DMGYieldFarmingV1
Function name: initialize(address,address,address,uint256,address[],address[],uint8[],uint16[])
PC address: 4254
Estimated Gas Usage: 1264 - 6723
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xe879f44E6e0002629A4EE8dC5bDfb8fB7d096f96.sol:5

olidity ^0.5.0;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:59.026645
Transaction Length: 1
Severity: High
Contract: DMGYieldFarmingV1
Function name: initialize(address,address,address,uint256,address[],address[],uint8[],uint16[])
PC address: 4256
Estimated Gas Usage: 1264 - 6723
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xe879f44E6e0002629A4EE8dC5bDfb8fB7d096f96.sol:3

*/

//pragma solidity ^0.5.0;
pragma

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0x9227a3d959654C8004fA77DfFc380EC40880FFF6.sol
Total states:10240
101.61488
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.074199
Transaction Length: 0
Severity: High
Contract: ERC721Full
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x9227a3d959654C8004fA77DfFc380EC40880FFF6.sol:22

 of the transaction and its data. While the

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.232999
Transaction Length: 0
Severity: High
Contract: ERC721Metadata
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x9227a3d959654C8004fA77DfFc380EC40880FFF6.sol:22

 of the transaction and its data. While the

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.047934
Transaction Length: 0
Severity: High
Contract: TradeableERC721Token
Function name: constructor
PC address: 117
Estimated Gas Usage: 5263 - 28036
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x9227a3d959654C8004fA77DfFc380EC40880FFF6.sol:22

 of the transaction and its data. While the

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.007574
Transaction Length: 1
Severity: High
Contract: ERC721
Function name: safeTransferFrom(address,address,uint256,bytes)
PC address: 1136
Estimated Gas Usage: 477 - 572
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x9227a3d959654C8004fA77DfFc380EC40880FFF6.sol:3



*/



// File: openzeppelin-solid

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.302543
Transaction Length: 1
Severity: High
Contract: ERC721Enumerable
Function name: safeTransferFrom(address,address,uint256,bytes)
PC address: 1379
Estimated Gas Usage: 477 - 572
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x9227a3d959654C8004fA77DfFc380EC40880FFF6.sol:3



*/



// File: openzeppelin-solid

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0x59d4082ea093060f99b652493fdf0d02f12e518e.sol
Total states:149
2.714642
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0x19c36da0293e6dccd1e5fba44a7a2d7eaff030e8.sol
Total states:2398
19.330913
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0xf2d4a5dd017d78289c404de98c37ce245e417c7f.sol
Total states:670
1.775826
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0xe0f176e57ef636b09c317edbb4ad2df4216a0816.sol
Total states:1880
93.193989
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.291254
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShip(address[])
PC address: 360
Estimated Gas Usage: 342 - 437
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xe0f176e57ef636b09c317edbb4ad2df4216a0816.sol:5

penzeppelin-solidity/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.821627
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShip(address[])
PC address: 362
Estimated Gas Usage: 342 - 437
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xe0f176e57ef636b09c317edbb4ad2df4216a0816.sol:3

*/

// File: openzeppelin-solidity/c

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:37.347112
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShipWithHowMany(address[],uint256)
PC address: 776
Estimated Gas Usage: 341 - 436
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xe0f176e57ef636b09c317edbb4ad2df4216a0816.sol:5

penzeppelin-solidity/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:40.229239
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShipWithHowMany(address[],uint256)
PC address: 778
Estimated Gas Usage: 341 - 436
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xe0f176e57ef636b09c317edbb4ad2df4216a0816.sol:3

*/

// File: openzeppelin-solidity/c

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:29.841749
Transaction Length: 1
Severity: Low
Contract: BeneficiaryOperations
Function name: allOperations(uint256)
PC address: 1715
Estimated Gas Usage: 701 - 796
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop4/0xe0f176e57ef636b09c317edbb4ad2df4216a0816.sol:386

bytes32[] public allOperations

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:27.947193
Transaction Length: 1
Severity: Low
Contract: BeneficiaryOperations
Function name: beneficiaries(uint256)
PC address: 4636
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop4/0xe0f176e57ef636b09c317edbb4ad2df4216a0816.sol:385

address[] public beneficiaries

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0xEEbeC7874f46C4452610A11FA6bE0264f7f0557F.sol
Total states:951
25.664909
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0x47935edfb3cdd358c50f6c0add1cc24662e30f5f.sol
Total states:27421
54.463924
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.519045
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3244
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x47935edfb3cdd358c50f6c0add1cc24662e30f5f.sol:134

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.898963
Transaction Length: 2
Severity: High
Contract: ERC20Burnable
Function name: increaseAllowance(address,uint256)
PC address: 3424
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x47935edfb3cdd358c50f6c0add1cc24662e30f5f.sol:134

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.252011
Transaction Length: 2
Severity: High
Contract: ERC20Mintable
Function name: increaseAllowance(address,uint256)
PC address: 3847
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x47935edfb3cdd358c50f6c0add1cc24662e30f5f.sol:134

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0xfe354e0180fba93d67e9766fb7b6c85130627124.sol
Total states:19207
246.200307
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.909826
Transaction Length: 1
Severity: High
Contract: H4X
Function name: bulkTransfer(address[],uint256[])
PC address: 757
Estimated Gas Usage: 408 - 503
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xfe354e0180fba93d67e9766fb7b6c85130627124.sol:7

 Kevin is Satoshi    

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.914816
Transaction Length: 1
Severity: High
Contract: H4X
Function name: bulkTransfer(address[],uint256[])
PC address: 759
Estimated Gas Usage: 408 - 503
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xfe354e0180fba93d67e9766fb7b6c85130627124.sol:3

*/

/**
 * 
 * Kevin is Satoshi     

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.540414
Transaction Length: 1
Severity: High
Contract: H4X
Function name: bulkTransfer(address[],uint256[])
PC address: 842
Estimated Gas Usage: 584 - 679
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xfe354e0180fba93d67e9766fb7b6c85130627124.sol:7

 Kevin is Satoshi    

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:25.647577
Transaction Length: 1
Severity: High
Contract: H4X
Function name: bulkTransfer(address[],uint256[])
PC address: 844
Estimated Gas Usage: 584 - 679
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xfe354e0180fba93d67e9766fb7b6c85130627124.sol:3

*/

/**
 * 
 * Kevin is Satoshi     

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:52.050698
Transaction Length: 1
Severity: High
Contract: H4X
Function name: transferAndCall(address,uint256,bytes)
PC address: 1417
Estimated Gas Usage: 511 - 606
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xfe354e0180fba93d67e9766fb7b6c85130627124.sol:3

*/

/**
 * 
 * Kevin is Satoshi    

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:00.035830
Transaction Length: 1
Severity: Low
Contract: H4X
Function name: unfreeze(uint256)
PC address: 6412
Estimated Gas Usage: 1375 - 1660
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop4/0xfe354e0180fba93d67e9766fb7b6c85130627124.sol:224

_burnedAmount * FLOAT_SCALAR / info.totalFrozen

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:37.555235
Transaction Length: 2
Severity: Low
Contract: H4X
Function name: unfreeze(uint256)
PC address: 6412
Estimated Gas Usage: 1375 - 1660
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop4/0xfe354e0180fba93d67e9766fb7b6c85130627124.sol:224

_burnedAmount * FLOAT_SCALAR / info.totalFrozen

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0xFDce35FfC60769C7eC608107361fF453Da541E66.sol
Total states:21393
1148.357977
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.717809
Transaction Length: 1
Severity: High
Contract: Module
Function name: getModuleAddress(string)
PC address: 416
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xFDce35FfC60769C7eC608107361fF453Da541E66.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.796031
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 511
Estimated Gas Usage: 364 - 459
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xFDce35FfC60769C7eC608107361fF453Da541E66.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.831149
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 513
Estimated Gas Usage: 364 - 459
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xFDce35FfC60769C7eC608107361fF453Da541E66.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.684239
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 596
Estimated Gas Usage: 540 - 635
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xFDce35FfC60769C7eC608107361fF453Da541E66.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:18.274861
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 598
Estimated Gas Usage: 540 - 635
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xFDce35FfC60769C7eC608107361fF453Da541E66.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:30.917303
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 681
Estimated Gas Usage: 716 - 811
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xFDce35FfC60769C7eC608107361fF453Da541E66.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:02.257980
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 683
Estimated Gas Usage: 716 - 811
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xFDce35FfC60769C7eC608107361fF453Da541E66.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:24.437131
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 766
Estimated Gas Usage: 892 - 987
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xFDce35FfC60769C7eC608107361fF453Da541E66.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:01.061522
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 768
Estimated Gas Usage: 892 - 987
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xFDce35FfC60769C7eC608107361fF453Da541E66.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.761310
Transaction Length: 1
Severity: High
Contract: CompoundProtocol
Function name: handleDeposit(address[],uint256[])
PC address: 1413
Estimated Gas Usage: 430 - 525
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xFDce35FfC60769C7eC608107361fF453Da541E66.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.368085
Transaction Length: 1
Severity: High
Contract: CompoundProtocol_DAI
Function name: handleDeposit(address[],uint256[])
PC address: 1413
Estimated Gas Usage: 430 - 525
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xFDce35FfC60769C7eC608107361fF453Da541E66.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.903980
Transaction Length: 1
Severity: High
Contract: CompoundProtocol
Function name: handleDeposit(address[],uint256[])
PC address: 1415
Estimated Gas Usage: 430 - 525
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xFDce35FfC60769C7eC608107361fF453Da541E66.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.565201
Transaction Length: 1
Severity: High
Contract: CompoundProtocol_DAI
Function name: handleDeposit(address[],uint256[])
PC address: 1415
Estimated Gas Usage: 430 - 525
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xFDce35FfC60769C7eC608107361fF453Da541E66.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:33.003391
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: getModuleAddress(string)
PC address: 1453
Estimated Gas Usage: 451 - 546
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xFDce35FfC60769C7eC608107361fF453Da541E66.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:18.405610
Transaction Length: 1
Severity: High
Contract: CompoundProtocol
Function name: handleDeposit(address[],uint256[])
PC address: 1561
Estimated Gas Usage: 763 - 3540
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xFDce35FfC60769C7eC608107361fF453Da541E66.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:23.202358
Transaction Length: 1
Severity: High
Contract: CompoundProtocol_DAI
Function name: handleDeposit(address[],uint256[])
PC address: 1561
Estimated Gas Usage: 763 - 3540
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xFDce35FfC60769C7eC608107361fF453Da541E66.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:33.090535
Transaction Length: 1
Severity: High
Contract: CompoundProtocol
Function name: handleDeposit(address[],uint256[])
PC address: 1563
Estimated Gas Usage: 763 - 3540
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xFDce35FfC60769C7eC608107361fF453Da541E66.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:38.568996
Transaction Length: 1
Severity: High
Contract: CompoundProtocol_DAI
Function name: handleDeposit(address[],uint256[])
PC address: 1563
Estimated Gas Usage: 763 - 3540
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xFDce35FfC60769C7eC608107361fF453Da541E66.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:59.806123
Transaction Length: 1
Severity: High
Contract: CompoundProtocol
Function name: getModuleAddress(string)
PC address: 1845
Estimated Gas Usage: 407 - 502
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xFDce35FfC60769C7eC608107361fF453Da541E66.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:59.519686
Transaction Length: 1
Severity: High
Contract: CompoundProtocol_DAI
Function name: getModuleAddress(string)
PC address: 1845
Estimated Gas Usage: 407 - 502
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xFDce35FfC60769C7eC608107361fF453Da541E66.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:28.105817
Transaction Length: 1
Severity: High
Contract: CompoundProtocol
Function name: withdraw(address,uint256[])
PC address: 2136
Estimated Gas Usage: 484 - 579
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xFDce35FfC60769C7eC608107361fF453Da541E66.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:33.590263
Transaction Length: 1
Severity: High
Contract: CompoundProtocol_DAI
Function name: withdraw(address,uint256[])
PC address: 2136
Estimated Gas Usage: 484 - 579
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xFDce35FfC60769C7eC608107361fF453Da541E66.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:32.504789
Transaction Length: 1
Severity: High
Contract: CompoundProtocol
Function name: withdraw(address,uint256[])
PC address: 2138
Estimated Gas Usage: 484 - 579
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xFDce35FfC60769C7eC608107361fF453Da541E66.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:38.819625
Transaction Length: 1
Severity: High
Contract: CompoundProtocol_DAI
Function name: withdraw(address,uint256[])
PC address: 2138
Estimated Gas Usage: 484 - 579
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xFDce35FfC60769C7eC608107361fF453Da541E66.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:40.673236
Transaction Length: 1
Severity: High
Contract: CompoundProtocol
Function name: supportedTokens()
PC address: 2569
Estimated Gas Usage: 988 - 4657
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xFDce35FfC60769C7eC608107361fF453Da541E66.sol:1402

function supportedTokens() public view returns(address[] memory){
        address[] memory tokens = new address[](1);
        tokens[0] = address(baseToken);
        return tokens;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:41.033454
Transaction Length: 1
Severity: High
Contract: CompoundProtocol_DAI
Function name: supportedTokens()
PC address: 2569
Estimated Gas Usage: 988 - 4657
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xFDce35FfC60769C7eC608107361fF453Da541E66.sol:1402

function supportedTokens() public view returns(address[] memory){
        address[] memory tokens = new address[](1);
        tokens[0] = address(baseToken);
        return tokens;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:03.537238
Transaction Length: 1
Severity: High
Contract: CompoundProtocol
Function name: supportedTokens()
PC address: 2609
Estimated Gas Usage: 1138 - 5183
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xFDce35FfC60769C7eC608107361fF453Da541E66.sol:1402

function supportedTokens() public view returns(address[] memory){
        address[] memory tokens = new address[](1);
        tokens[0] = address(baseToken);
        return tokens;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:06.824673
Transaction Length: 1
Severity: High
Contract: CompoundProtocol_DAI
Function name: supportedTokens()
PC address: 2609
Estimated Gas Usage: 1138 - 5183
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xFDce35FfC60769C7eC608107361fF453Da541E66.sol:1402

function supportedTokens() public view returns(address[] memory){
        address[] memory tokens = new address[](1);
        tokens[0] = address(baseToken);
        return tokens;
    }

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:01:03.214434
Transaction Length: 1
Severity: Low
Contract: CompoundProtocol
Function name: balanceOf(address)
PC address: 6632
Estimated Gas Usage: 2032 - 3163
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop4/0xFDce35FfC60769C7eC608107361fF453Da541E66.sol:1379

cToken.balanceOfUnderlying(address(this))

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:01:11.458211
Transaction Length: 1
Severity: Low
Contract: CompoundProtocol_DAI
Function name: balanceOf(address)
PC address: 6632
Estimated Gas Usage: 2032 - 3163
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop4/0xFDce35FfC60769C7eC608107361fF453Da541E66.sol:1379

cToken.balanceOfUnderlying(address(this))

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.918142
Transaction Length: 1
Severity: High
Contract: CompoundProtocol_DAI
Function name: normalizedBalance()
PC address: 16386
Estimated Gas Usage: 5661 - 43288
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xFDce35FfC60769C7eC608107361fF453Da541E66.sol:294

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.682120
Transaction Length: 1
Severity: High
Contract: CompoundProtocol
Function name: normalizedBalance()
PC address: 16715
Estimated Gas Usage: 5661 - 43288
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xFDce35FfC60769C7eC608107361fF453Da541E66.sol:294

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0x134d4cf3d8c94c698b82e374aae48adcc3794c7f.sol
Total states:1322
82.064306
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.843126
Transaction Length: 1
Severity: High
Contract: TimeLock
Function name: addParameters(address[],uint256[],uint256[])
PC address: 857
Estimated Gas Usage: 384 - 479
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x134d4cf3d8c94c698b82e374aae48adcc3794c7f.sol:5

olidity ^0.6.0;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.103097
Transaction Length: 1
Severity: High
Contract: TimeLock
Function name: addParameters(address[],uint256[],uint256[])
PC address: 859
Estimated Gas Usage: 384 - 479
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x134d4cf3d8c94c698b82e374aae48adcc3794c7f.sol:3

*/

//pragma solidity ^0.6.0;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.099465
Transaction Length: 1
Severity: High
Contract: TimeLock
Function name: addParameters(address[],uint256[],uint256[])
PC address: 942
Estimated Gas Usage: 560 - 655
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x134d4cf3d8c94c698b82e374aae48adcc3794c7f.sol:5

olidity ^0.6.0;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:23.703139
Transaction Length: 1
Severity: High
Contract: TimeLock
Function name: addParameters(address[],uint256[],uint256[])
PC address: 944
Estimated Gas Usage: 560 - 655
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x134d4cf3d8c94c698b82e374aae48adcc3794c7f.sol:3

*/

//pragma solidity ^0.6.0;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:37.847292
Transaction Length: 1
Severity: High
Contract: TimeLock
Function name: addParameters(address[],uint256[],uint256[])
PC address: 1027
Estimated Gas Usage: 736 - 831
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x134d4cf3d8c94c698b82e374aae48adcc3794c7f.sol:5

olidity ^0.6.0;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:01.817064
Transaction Length: 1
Severity: High
Contract: TimeLock
Function name: addParameters(address[],uint256[],uint256[])
PC address: 1029
Estimated Gas Usage: 736 - 831
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0x134d4cf3d8c94c698b82e374aae48adcc3794c7f.sol:3

*/

//pragma solidity ^0.6.0;
pragma

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0xfa30ec96de9840a611fcb64e7312f97bde6e155a.sol
Total states:11917
31.872376
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop4/0xda2f1b37aa2032c283611818c93589907e085293.sol
Total states:22554
99.981303
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.321470
Transaction Length: 0
Severity: High
Contract: Town
Function name: constructor
PC address: 844
Estimated Gas Usage: 558 - 3889
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xda2f1b37aa2032c283611818c93589907e085293.sol:1402

distributionPeriod * 1 days

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:21.581043
Transaction Length: 0
Severity: High
Contract: Town
Function name: constructor
PC address: 1422
Estimated Gas Usage: 46536 - 230197
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xda2f1b37aa2032c283611818c93589907e085293.sol:303

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.770043
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3044
Estimated Gas Usage: 989 - 1464
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xda2f1b37aa2032c283611818c93589907e085293.sol:225

a + b

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:02.880812
Transaction Length: 1
Severity: Low
Contract: TownToken
Function name: transfer(address,uint256)
PC address: 3334
Estimated Gas Usage: 2044 - 3175
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop4/0xda2f1b37aa2032c283611818c93589907e085293.sol:1100

_town.checkProposal(recipient)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.918223
Transaction Length: 2
Severity: High
Contract: ExternalTokenTemplate
Function name: increaseAllowance(address,uint256)
PC address: 3494
Estimated Gas Usage: 922 - 1397
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xda2f1b37aa2032c283611818c93589907e085293.sol:225

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:03.478442
Transaction Length: 1
Severity: Low
Contract: TownToken
Function name: getHolderByIndex(uint256)
PC address: 4982
Estimated Gas Usage: 725 - 820
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop4/0xda2f1b37aa2032c283611818c93589907e085293.sol:1076

_holders[index]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.791627
Transaction Length: 2
Severity: High
Contract: TownToken
Function name: increaseAllowance(address,uint256)
PC address: 6628
Estimated Gas Usage: 967 - 1442
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop4/0xda2f1b37aa2032c283611818c93589907e085293.sol:225

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x417aa847eaedcd956aba6901b1f38a86950dc6d8.sol
Total states:426
1.018277
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x5f0b23ba4dcb8e0bb5d81cee1db2de2b13e264a1.sol
Total states:18346
560.792016
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.242048
Transaction Length: 1
Severity: High
Contract: InDefiEcoPreMining
Function name: initialize(string,string,uint8)
PC address: 1011
Estimated Gas Usage: 431 - 526
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x5f0b23ba4dcb8e0bb5d81cee1db2de2b13e264a1.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.225942
Transaction Length: 1
Severity: High
Contract: InDefiEcoPreMining
Function name: initialize(string,string,uint8)
PC address: 1162
Estimated Gas Usage: 773 - 3550
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x5f0b23ba4dcb8e0bb5d81cee1db2de2b13e264a1.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:58.036566
Transaction Length: 1
Severity: High
Contract: InDefiEcoPreMining
Function name: externalCallToTokenizedStrategy(address,bytes,uint256)
PC address: 2466
Estimated Gas Usage: 418 - 513
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x5f0b23ba4dcb8e0bb5d81cee1db2de2b13e264a1.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.654834
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3185
Estimated Gas Usage: 989 - 1464
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x5f0b23ba4dcb8e0bb5d81cee1db2de2b13e264a1.sol:289

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:49.674621
Transaction Length: 1
Severity: High
Contract: InDefiEcoPreMining
Function name: transferFrom(address,address,uint256)
PC address: 15217
Estimated Gas Usage: 1320 - 4944
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x5f0b23ba4dcb8e0bb5d81cee1db2de2b13e264a1.sol:320

require(b <= a, errorMessage)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:51.173057
Transaction Length: 1
Severity: High
Contract: InDefiEcoPreMining
Function name: fundsToTokensUsePrice(address,uint256,uint256)
PC address: 16699
Estimated Gas Usage: 2202 - 36764
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x5f0b23ba4dcb8e0bb5d81cee1db2de2b13e264a1.sol:657

x * y

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0xcc392757cc8e5839b7147d2b0bb974690c874c1f.sol
Total states:16294
36.142265
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.137746
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3858
Estimated Gas Usage: 989 - 1464
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xcc392757cc8e5839b7147d2b0bb974690c874c1f.sol:32

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.683702
Transaction Length: 2
Severity: High
Contract: ColonyCLNY
Function name: increaseAllowance(address,uint256)
PC address: 4960
Estimated Gas Usage: 967 - 1442
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xcc392757cc8e5839b7147d2b0bb974690c874c1f.sol:32

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x8Ae6AE8F172d7fc103CCfa5890883d6fE46038C9.sol
Total states:1106
1.694081
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x69e2c1a516e1c617d96bb9524d739b30b54568a4.sol
Total states:18334
2670.721709
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.434513
Transaction Length: 1
Severity: High
Contract: master
Function name: airdrop(address,address[],uint256[])
PC address: 458
Estimated Gas Usage: 375 - 470
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x69e2c1a516e1c617d96bb9524d739b30b54568a4.sol:5

olidity 0.5.7;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.837836
Transaction Length: 1
Severity: High
Contract: master
Function name: airdrop(address,address[],uint256[])
PC address: 460
Estimated Gas Usage: 375 - 470
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x69e2c1a516e1c617d96bb9524d739b30b54568a4.sol:3

*/

//pragma solidity 0.5.7;
pragma 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:16.766818
Transaction Length: 1
Severity: High
Contract: master
Function name: airdrop(address,address[],uint256[])
PC address: 606
Estimated Gas Usage: 717 - 3494
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x69e2c1a516e1c617d96bb9524d739b30b54568a4.sol:5

olidity 0.5.7;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:27.643761
Transaction Length: 1
Severity: High
Contract: master
Function name: airdrop(address,address[],uint256[])
PC address: 608
Estimated Gas Usage: 717 - 3494
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x69e2c1a516e1c617d96bb9524d739b30b54568a4.sol:3

*/

//pragma solidity 0.5.7;
pragma 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:05.297428
Transaction Length: 1
Severity: High
Contract: master
Function name: name()
PC address: 790
Estimated Gas Usage: 1914 - 3044
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x69e2c1a516e1c617d96bb9524d739b30b54568a4.sol:68

function name() public view returns(string memory) {
        return _name;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:11:18.321370
Transaction Length: 1
Severity: High
Contract: master
Function name: symbol()
PC address: 1757
Estimated Gas Usage: 1957 - 3087
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x69e2c1a516e1c617d96bb9524d739b30b54568a4.sol:72

function symbol() public view returns(string memory) {
        return _symbol;
    }

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:13:53.735019
Transaction Length: 1
Severity: Low
Contract: master
Function name: decreaseAllowance(address,uint256)
PC address: 9553
Estimated Gas Usage: 973 - 1448
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x69e2c1a516e1c617d96bb9524d739b30b54568a4.sol:40

assert(b <= a)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:27:29.926354
Transaction Length: 2
Severity: Low
Contract: master
Function name: decreaseAllowance(address,uint256)
PC address: 9553
Estimated Gas Usage: 973 - 1448
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x69e2c1a516e1c617d96bb9524d739b30b54568a4.sol:40

assert(b <= a)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:18:30.484249
Transaction Length: 2
Severity: High
Contract: master
Function name: increaseAllowance(address,uint256)
PC address: 9571
Estimated Gas Usage: 1003 - 1478
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x69e2c1a516e1c617d96bb9524d739b30b54568a4.sol:45

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:25:04.849142
Transaction Length: 2
Severity: Low
Contract: master
Function name: increaseAllowance(address,uint256)
PC address: 9584
Estimated Gas Usage: 1013 - 1488
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x69e2c1a516e1c617d96bb9524d739b30b54568a4.sol:46

assert(c >= a)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0xB95EC860C1999bcd5111Ff3Ff086D0CeECadB7F9.sol
Total states:18016
34.780395
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.042261
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3847
Estimated Gas Usage: 1025 - 1500
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xB95EC860C1999bcd5111Ff3Ff086D0CeECadB7F9.sol:36

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.179066
Transaction Length: 2
Severity: High
Contract: ERC20Pausable
Function name: increaseAllowance(address,uint256)
PC address: 5606
Estimated Gas Usage: 1070 - 1545
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xB95EC860C1999bcd5111Ff3Ff086D0CeECadB7F9.sol:36

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0xedffadb79bc62737d6033594faf56a5a3df48aa2.sol
Total states:1517
1.337217
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0xf7c41056dabf08a82682f3a31fa04e427678ff55.sol
Total states:7204
33.54762
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.413532
Transaction Length: 1
Severity: Low
Contract: Layer2Storage
Function name: EROs(uint256)
PC address: 4148
Estimated Gas Usage: 746 - 841
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0xf7c41056dabf08a82682f3a31fa04e427678ff55.sol:1389

Data.Request[] public EROs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.937883
Transaction Length: 1
Severity: Low
Contract: Layer2Storage
Function name: URBs(uint256)
PC address: 4631
Estimated Gas Usage: 723 - 818
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0xf7c41056dabf08a82682f3a31fa04e427678ff55.sol:1394

Data.RequestBlock[] public URBs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:02.544403
Transaction Length: 1
Severity: Low
Contract: Layer2Storage
Function name: ORBs(uint256)
PC address: 5009
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0xf7c41056dabf08a82682f3a31fa04e427678ff55.sol:1393

Data.RequestBlock[] public ORBs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:02.924294
Transaction Length: 1
Severity: Low
Contract: Layer2Storage
Function name: ERUs(uint256)
PC address: 5209
Estimated Gas Usage: 766 - 861
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0xf7c41056dabf08a82682f3a31fa04e427678ff55.sol:1390

Data.Request[] public ERUs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:02.844249
Transaction Length: 1
Severity: Low
Contract: EpochHandler
Function name: EROs(uint256)
PC address: 10676
Estimated Gas Usage: 790 - 885
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0xf7c41056dabf08a82682f3a31fa04e427678ff55.sol:1389

Data.Request[] public EROs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:03.430180
Transaction Length: 1
Severity: Low
Contract: EpochHandler
Function name: URBs(uint256)
PC address: 11159
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0xf7c41056dabf08a82682f3a31fa04e427678ff55.sol:1394

Data.RequestBlock[] public URBs

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:04.567515
Transaction Length: 1
Severity: High
Contract: EpochHandler
Function name: prepareToSubmitURB()
PC address: 12323
Estimated Gas Usage: 65990 - 293115
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xf7c41056dabf08a82682f3a31fa04e427678ff55.sol:1614

ERUs.length - 1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:05.700753
Transaction Length: 1
Severity: Low
Contract: EpochHandler
Function name: ORBs(uint256)
PC address: 13973
Estimated Gas Usage: 766 - 861
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0xf7c41056dabf08a82682f3a31fa04e427678ff55.sol:1393

Data.RequestBlock[] public ORBs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:06.083656
Transaction Length: 1
Severity: Low
Contract: EpochHandler
Function name: ERUs(uint256)
PC address: 14173
Estimated Gas Usage: 788 - 883
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0xf7c41056dabf08a82682f3a31fa04e427678ff55.sol:1390

Data.Request[] public ERUs

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x4cc945e7b97fed1ead961cd83ed622fe48bbf3a0.sol
Total states:11132
656.38327
==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.004948
Transaction Length: 0
Severity: Medium
Contract: Governance
Function name: constructor
PC address: 18
Estimated Gas Usage: 42 - 137
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../contracts/m_loop/loop5/0x4cc945e7b97fed1ead961cd83ed622fe48bbf3a0.sol:625

tx.origin

--------------------

==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.055023
Transaction Length: 0
Severity: Medium
Contract: PlayerBook
Function name: constructor
PC address: 258
Estimated Gas Usage: 51024 - 251779
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../contracts/m_loop/loop5/0x4cc945e7b97fed1ead961cd83ed622fe48bbf3a0.sol:625

tx.origin

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.641310
Transaction Length: 1
Severity: High
Contract: PlayerBook
Function name: registerNameXName(string,string)
PC address: 1737
Estimated Gas Usage: 339 - 434
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x4cc945e7b97fed1ead961cd83ed622fe48bbf3a0.sol:3

*/

/***
 *    ██████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.706045
Transaction Length: 1
Severity: High
Contract: PlayerBook
Function name: registerNameXName(string,string)
PC address: 1888
Estimated Gas Usage: 681 - 3458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x4cc945e7b97fed1ead961cd83ed622fe48bbf3a0.sol:3

*/

/***
 *    ██████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:09.030728
Transaction Length: 1
Severity: High
Contract: PlayerBook
Function name: checkIfNameValid(string)
PC address: 2088
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x4cc945e7b97fed1ead961cd83ed622fe48bbf3a0.sol:3

*/

/***
 *    ██████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:07:32.651579
Transaction Length: 1
Severity: High
Contract: PlayerBook
Function name: bindRefer(address,string)
PC address: 3319
Estimated Gas Usage: 462 - 557
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x4cc945e7b97fed1ead961cd83ed622fe48bbf3a0.sol:3

*/

/***
 *    ██████

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:03:25.113755
Transaction Length: 1
Severity: Low
Contract: PlayerBook
Function name: checkIfNameValid(string)
PC address: 12849
Estimated Gas Usage: 878 - 4027
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x4cc945e7b97fed1ead961cd83ed622fe48bbf3a0.sol:337

_temp[1]

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0xefbe86f3b03681017907e4e0b3683f43773455aa.sol
Total states:14395
56.112788
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.982251
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1004
Estimated Gas Usage: 417 - 512
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xefbe86f3b03681017907e4e0b3683f43773455aa.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.988632
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1006
Estimated Gas Usage: 417 - 512
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xefbe86f3b03681017907e4e0b3683f43773455aa.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.165242
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1089
Estimated Gas Usage: 593 - 688
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xefbe86f3b03681017907e4e0b3683f43773455aa.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:20.003639
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1091
Estimated Gas Usage: 593 - 688
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xefbe86f3b03681017907e4e0b3683f43773455aa.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.795583
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeBP(uint256)
PC address: 2585
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0xefbe86f3b03681017907e4e0b3683f43773455aa.sol:629

uint[] public bonusRangeBP

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:35.075706
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeStart(uint256)
PC address: 6017
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0xefbe86f3b03681017907e4e0b3683f43773455aa.sol:628

uint[] public bonusRangeStart

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:32.169107
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: calculateRatePerEth(uint256,uint256,uint256)
PC address: 6866
Estimated Gas Usage: 955 - 1050
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xefbe86f3b03681017907e4e0b3683f43773455aa.sol:163

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x6518e0e9ff977ba017e5ec92d98e0ce2acdfccfa.sol
Total states:2673
114.401337
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.643413
Transaction Length: 1
Severity: High
Contract: PaymentMaster
Function name: multiHandlerSweep(address[],address)
PC address: 295
Estimated Gas Usage: 319 - 414
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x6518e0e9ff977ba017e5ec92d98e0ce2acdfccfa.sol:9

0 PaymentMaster







--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.507127
Transaction Length: 1
Severity: High
Contract: PaymentMaster
Function name: multiHandlerSweep(address[],address)
PC address: 297
Estimated Gas Usage: 319 - 414
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x6518e0e9ff977ba017e5ec92d98e0ce2acdfccfa.sol:3



*/



// v1.0 PaymentMaster





/

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:05.702529
Transaction Length: 1
Severity: Low
Contract: PaymentHandler
Function name: fallback()
PC address: 597
Estimated Gas Usage: 4310 - 74284
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop5/0x6518e0e9ff977ba017e5ec92d98e0ce2acdfccfa.sol:302

master.firePaymentReceivedEvent(address(this), msg.sender, msg.value)

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:05.707026
Transaction Length: 1
Severity: Medium
Contract: PaymentHandler
Function name: fallback()
PC address: 620
Estimated Gas Usage: 5043 - 109017
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 217
Offset: 597
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop5/0x6518e0e9ff977ba017e5ec92d98e0ce2acdfccfa.sol:242

contract PaymentHandler {



	// Keep track of the parent master contract - cannot be changed once set

	PaymentMaster public master;



	/**

	 * General constructor called by the master

	 */

	constructor(PaymentMaster _master) public {

		master = _master;

	}



	/**

	 * Helper function to return the parent master's address

	 */

	function getMasterAddress() public view returns (address) {

		return address(master);

	}



	/**

	 * Default payable function - forwards to the owner and triggers event

	 */

	function() external payable {

		// Get the parent master's owner address - explicity convert to payable

		address payable ownerAddress = address(uint160(master.owner()));



		// Forward the funds to the owner

		ownerAddress.transfer(msg.value);



		// Trigger the event notification in the parent master

		master.firePaymentReceivedEvent(address(this), msg.sender, msg.value);

	}



	/**

	 * Sweep any tokens to the owner of the master

	 */

	function sweepTokens(IERC20 token) public {

		// Get the owner address

		address ownerAddress = master.owner();



		// Get the current balance

		uint balance = token.balanceOf(address(this));



		// Transfer to the owner

		token.transfer(ownerAddress, balance);

	}



}

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:03.939563
Transaction Length: 1
Severity: Medium
Contract: PaymentHandler
Function name: sweepTokens(address)
PC address: 875
Estimated Gas Usage: 5654 - 109765
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 1090
Offset: 1306
Offset: 1530
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop5/0x6518e0e9ff977ba017e5ec92d98e0ce2acdfccfa.sol:314

function sweepTokens(IERC20 token) public {

		// Get the owner address

		address ownerAddress = master.owner();



		// Get the current balance

		uint balance = token.balanceOf(address(this));



		// Transfer to the owner

		token.transfer(ownerAddress, balance);

	}

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:42.701046
Transaction Length: 1
Severity: High
Contract: PaymentMaster
Function name: getHandlerList()
PC address: 932
Estimated Gas Usage: 1227 - 2074
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x6518e0e9ff977ba017e5ec92d98e0ce2acdfccfa.sol:429

function getHandlerList() public view returns (address[] memory) {

			// Return the entire list

      return handlerList;

  }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:51.970850
Transaction Length: 1
Severity: High
Contract: PaymentMaster
Function name: getHandlerList()
PC address: 972
Estimated Gas Usage: 1377 - 2600
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x6518e0e9ff977ba017e5ec92d98e0ce2acdfccfa.sol:429

function getHandlerList() public view returns (address[] memory) {

			// Return the entire list

      return handlerList;

  }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:01:48.161295
Transaction Length: 1
Severity: Medium
Contract: PaymentMaster
Function name: sweepTokens(address)
PC address: 1130
Estimated Gas Usage: 5292 - 109073
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 2955
Offset: 3142
Offset: 3335
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop5/0x6518e0e9ff977ba017e5ec92d98e0ce2acdfccfa.sol:509

function sweepTokens(IERC20 token) public {

		// Get the current balance

		uint balance = token.balanceOf(address(this));



		// Transfer to the owner

		token.transfer(this.owner(), balance);

	}

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:00:03.830485
Transaction Length: 1
Severity: Medium
Contract: PaymentHandler
Function name: sweepTokens(address)
PC address: 1530
Estimated Gas Usage: 4827 - 74752
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../contracts/m_loop/loop5/0x6518e0e9ff977ba017e5ec92d98e0ce2acdfccfa.sol:330

token.transfer(ownerAddress, balance)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:27.468077
Transaction Length: 1
Severity: Low
Contract: PaymentMaster
Function name: handlerList(uint256)
PC address: 1950
Estimated Gas Usage: 656 - 751
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x6518e0e9ff977ba017e5ec92d98e0ce2acdfccfa.sol:373

address[] public handlerList

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:01:43.601135
Transaction Length: 1
Severity: Medium
Contract: PaymentMaster
Function name: sweepTokens(address)
PC address: 3335
Estimated Gas Usage: 4467 - 74062
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../contracts/m_loop/loop5/0x6518e0e9ff977ba017e5ec92d98e0ce2acdfccfa.sol:519

token.transfer(this.owner(), balance)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x7b6c0726c8d2da330bf5c65c6889ee268cd19466.sol
Total states:35189
161.170814
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.048198
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1004
Estimated Gas Usage: 417 - 512
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x7b6c0726c8d2da330bf5c65c6889ee268cd19466.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.699683
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1006
Estimated Gas Usage: 417 - 512
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x7b6c0726c8d2da330bf5c65c6889ee268cd19466.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.913838
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1089
Estimated Gas Usage: 593 - 688
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x7b6c0726c8d2da330bf5c65c6889ee268cd19466.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:22.205927
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1091
Estimated Gas Usage: 593 - 688
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x7b6c0726c8d2da330bf5c65c6889ee268cd19466.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.915974
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1261
Estimated Gas Usage: 462 - 557
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x7b6c0726c8d2da330bf5c65c6889ee268cd19466.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.331037
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1263
Estimated Gas Usage: 462 - 557
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x7b6c0726c8d2da330bf5c65c6889ee268cd19466.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.331732
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1346
Estimated Gas Usage: 638 - 733
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x7b6c0726c8d2da330bf5c65c6889ee268cd19466.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:16.972291
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1348
Estimated Gas Usage: 638 - 733
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x7b6c0726c8d2da330bf5c65c6889ee268cd19466.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.770630
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeBP(uint256)
PC address: 2585
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x7b6c0726c8d2da330bf5c65c6889ee268cd19466.sol:784

uint[] public bonusRangeBP

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.448764
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3691
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x7b6c0726c8d2da330bf5c65c6889ee268cd19466.sol:1226

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:03.972470
Transaction Length: 2
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3691
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x7b6c0726c8d2da330bf5c65c6889ee268cd19466.sol:1226

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:34.811868
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeStart(uint256)
PC address: 6017
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x7b6c0726c8d2da330bf5c65c6889ee268cd19466.sol:783

uint[] public bonusRangeStart

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:32.831716
Transaction Length: 1
Severity: Low
Contract: LidStaking
Function name: stakeHandlers(uint256)
PC address: 6118
Estimated Gas Usage: 790 - 885
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x7b6c0726c8d2da330bf5c65c6889ee268cd19466.sol:961

IStakeHandler[] public stakeHandlers

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.662627
Transaction Length: 2
Severity: High
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6315
Estimated Gas Usage: 1699 - 2124
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x7b6c0726c8d2da330bf5c65c6889ee268cd19466.sol:1111

stakeHandlers.length-1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:07.405514
Transaction Length: 2
Severity: Low
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6326
Estimated Gas Usage: 1709 - 2134
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x7b6c0726c8d2da330bf5c65c6889ee268cd19466.sol:1111

stakeHandlers[stakeHandlers.length-1]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:30.653004
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: calculateRatePerEth(uint256,uint256,uint256)
PC address: 6866
Estimated Gas Usage: 955 - 1050
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x7b6c0726c8d2da330bf5c65c6889ee268cd19466.sol:162

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.335545
Transaction Length: 1
Severity: High
Contract: LidStaking
Function name: findTaxAmount(uint256,uint256)
PC address: 13348
Estimated Gas Usage: 474 - 569
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x7b6c0726c8d2da330bf5c65c6889ee268cd19466.sol:162

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:28.784269
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPoolBPs(uint256)
PC address: 15578
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x7b6c0726c8d2da330bf5c65c6889ee268cd19466.sol:1227

uint[] public tokenPoolBPs

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x40511f821857008644d07cedf5473d7e783b7e63.sol
Total states:87891
193.157604
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.493431
Transaction Length: 1
Severity: High
Contract: Airdropper
Function name: bulkTransfer(address,address[],uint256[])
PC address: 1173
Estimated Gas Usage: 439 - 534
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x40511f821857008644d07cedf5473d7e783b7e63.sol:5

olidity ^0.5.17;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.578395
Transaction Length: 1
Severity: High
Contract: Airdropper
Function name: bulkTransfer(address,address[],uint256[])
PC address: 1175
Estimated Gas Usage: 439 - 534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x40511f821857008644d07cedf5473d7e783b7e63.sol:3

*/

//pragma solidity ^0.5.17;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:20.293921
Transaction Length: 1
Severity: High
Contract: Airdropper
Function name: bulkTransfer(address,address[],uint256[])
PC address: 1321
Estimated Gas Usage: 772 - 3549
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x40511f821857008644d07cedf5473d7e783b7e63.sol:5

olidity ^0.5.17;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:27.538324
Transaction Length: 1
Severity: High
Contract: Airdropper
Function name: bulkTransfer(address,address[],uint256[])
PC address: 1323
Estimated Gas Usage: 772 - 3549
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x40511f821857008644d07cedf5473d7e783b7e63.sol:3

*/

//pragma solidity ^0.5.17;
pragm

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0xf89f6d0bcfeacd4de9022c7348b64603cc6b7f1f.sol
Total states:1682
10.855084
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.264998
Transaction Length: 1
Severity: High
Contract: TokenPool
Function name: balance()
PC address: 1682
Estimated Gas Usage: 2430 - 37419
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xf89f6d0bcfeacd4de9022c7348b64603cc6b7f1f.sol:5

racts/contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.725493
Transaction Length: 1
Severity: High
Contract: TokenPool
Function name: balance()
PC address: 1685
Estimated Gas Usage: 2430 - 37419
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xf89f6d0bcfeacd4de9022c7348b64603cc6b7f1f.sol:3



// File: contracts/contracts/math/SafeMat

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.602261
Transaction Length: 1
Severity: High
Contract: TokenPool
Function name: balance()
PC address: 1697
Estimated Gas Usage: 2430 - 37419
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xf89f6d0bcfeacd4de9022c7348b64603cc6b7f1f.sol:407

token.balanceOf(address(this))

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:02.787383
Transaction Length: 1
Severity: High
Contract: TokenPool
Function name: balance()
PC address: 2443
Estimated Gas Usage: 2430 - 37419
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xf89f6d0bcfeacd4de9022c7348b64603cc6b7f1f.sol:66

ing zero, but the
     

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x12c211dc731410ee5c5ee18670b54cb1b989e011.sol
Total states:1805
3.524187
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol
Total states:49005
336.710636
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.483296
Transaction Length: 1
Severity: Low
Contract: Getters
Function name: expiringCouponsAtIndex(uint256,uint256)
PC address: 2821
Estimated Gas Usage: 1090 - 1375
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:2361

_state.epochs[epoch].coupons.expiring[i]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.813241
Transaction Length: 1
Severity: High
Contract: Getters
Function name: totalNet()
PC address: 4187
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:9

ency file: @ope

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.721294
Transaction Length: 1
Severity: High
Contract: Getters
Function name: totalNet()
PC address: 4190
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:5

*/



// Dependency file: @openzeppelin/con

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.283119
Transaction Length: 1
Severity: High
Contract: Getters
Function name: totalNet()
PC address: 4202
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:2191

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.562618
Transaction Length: 1
Severity: High
Contract: Comptroller
Function name: totalNet()
PC address: 4387
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:9

ency file: @ope

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.751342
Transaction Length: 1
Severity: High
Contract: Permission
Function name: totalNet()
PC address: 4387
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:9

ency file: @ope

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.947565
Transaction Length: 1
Severity: High
Contract: Regulator
Function name: totalNet()
PC address: 4387
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:9

ency file: @ope

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.897919
Transaction Length: 1
Severity: High
Contract: Setters
Function name: totalNet()
PC address: 4387
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:9

ency file: @ope

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.454715
Transaction Length: 1
Severity: High
Contract: Comptroller
Function name: totalNet()
PC address: 4390
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:5

*/



// Dependency file: @openzeppelin/con

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.624015
Transaction Length: 1
Severity: High
Contract: Permission
Function name: totalNet()
PC address: 4390
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:5

*/



// Dependency file: @openzeppelin/con

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.842707
Transaction Length: 1
Severity: High
Contract: Regulator
Function name: totalNet()
PC address: 4390
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:5

*/



// Dependency file: @openzeppelin/con

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.795191
Transaction Length: 1
Severity: High
Contract: Setters
Function name: totalNet()
PC address: 4390
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:5

*/



// Dependency file: @openzeppelin/con

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.009744
Transaction Length: 1
Severity: High
Contract: Comptroller
Function name: totalNet()
PC address: 4402
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:2191

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.202449
Transaction Length: 1
Severity: High
Contract: Permission
Function name: totalNet()
PC address: 4402
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:2191

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.406392
Transaction Length: 1
Severity: High
Contract: Regulator
Function name: totalNet()
PC address: 4402
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:2191

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.357770
Transaction Length: 1
Severity: High
Contract: Setters
Function name: totalNet()
PC address: 4402
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:2191

dollar().totalSupply()

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.340370
Transaction Length: 1
Severity: High
Contract: Getters
Function name: totalNet()
PC address: 5628
Estimated Gas Usage: 2775 - 37669
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:107

when the result is nega

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.939778
Transaction Length: 1
Severity: High
Contract: Bonding
Function name: totalNet()
PC address: 5771
Estimated Gas Usage: 2753 - 37647
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:9

ency file: @ope

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.626830
Transaction Length: 1
Severity: High
Contract: Bonding
Function name: totalNet()
PC address: 5774
Estimated Gas Usage: 2753 - 37647
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:5

*/



// Dependency file: @openzeppelin/con

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.174879
Transaction Length: 1
Severity: High
Contract: Bonding
Function name: totalNet()
PC address: 5786
Estimated Gas Usage: 2753 - 37647
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:2191

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.189779
Transaction Length: 1
Severity: High
Contract: Market
Function name: totalNet()
PC address: 5827
Estimated Gas Usage: 2863 - 37757
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:9

ency file: @ope

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.610854
Transaction Length: 1
Severity: High
Contract: Market
Function name: totalNet()
PC address: 5830
Estimated Gas Usage: 2863 - 37757
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:5

*/



// Dependency file: @openzeppelin/con

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.398582
Transaction Length: 1
Severity: High
Contract: Market
Function name: totalNet()
PC address: 5842
Estimated Gas Usage: 2863 - 37757
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:2191

dollar().totalSupply()

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.081866
Transaction Length: 1
Severity: High
Contract: Comptroller
Function name: totalNet()
PC address: 5918
Estimated Gas Usage: 2775 - 37669
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:143

  * overflow.

     *



--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.286102
Transaction Length: 1
Severity: High
Contract: Permission
Function name: totalNet()
PC address: 5918
Estimated Gas Usage: 2775 - 37669
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:143

  * overflow.

     *



--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.477104
Transaction Length: 1
Severity: High
Contract: Regulator
Function name: totalNet()
PC address: 5918
Estimated Gas Usage: 2775 - 37669
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:143

  * overflow.

     *



--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.434053
Transaction Length: 1
Severity: High
Contract: Setters
Function name: totalNet()
PC address: 5918
Estimated Gas Usage: 2775 - 37669
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:143

  * overflow.

     *



--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.470534
Transaction Length: 1
Severity: High
Contract: Market
Function name: couponPremium(uint256)
PC address: 7042
Estimated Gas Usage: 2555 - 37449
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:9

ency file: @ope

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.991520
Transaction Length: 1
Severity: High
Contract: Market
Function name: couponPremium(uint256)
PC address: 7045
Estimated Gas Usage: 2555 - 37449
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:5

*/



// Dependency file: @openzeppelin/con

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.284318
Transaction Length: 1
Severity: High
Contract: Market
Function name: couponPremium(uint256)
PC address: 7057
Estimated Gas Usage: 2555 - 37449
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:4181

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.691059
Transaction Length: 1
Severity: High
Contract: Implementation
Function name: totalNet()
PC address: 8850
Estimated Gas Usage: 2797 - 37691
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:9

ency file: @ope

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.553171
Transaction Length: 1
Severity: High
Contract: Implementation
Function name: totalNet()
PC address: 8853
Estimated Gas Usage: 2797 - 37691
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:5

*/



// Dependency file: @openzeppelin/con

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.119669
Transaction Length: 1
Severity: High
Contract: Implementation
Function name: totalNet()
PC address: 8865
Estimated Gas Usage: 2797 - 37691
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:2191

dollar().totalSupply()

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.497265
Transaction Length: 1
Severity: High
Contract: Bonding
Function name: totalNet()
PC address: 10094
Estimated Gas Usage: 2753 - 37647
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:163

://github.com/OpenZeppe

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:16.816632
Transaction Length: 1
Severity: Low
Contract: Market
Function name: purchaseCoupons(uint256)
PC address: 10673
Estimated Gas Usage: 681 - 1340
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:3421

result[i]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.378218
Transaction Length: 1
Severity: High
Contract: Implementation
Function name: couponPremium(uint256)
PC address: 11462
Estimated Gas Usage: 2533 - 37427
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:9

ency file: @ope

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.803348
Transaction Length: 1
Severity: High
Contract: Implementation
Function name: couponPremium(uint256)
PC address: 11465
Estimated Gas Usage: 2533 - 37427
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:5

*/



// Dependency file: @openzeppelin/con

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.794080
Transaction Length: 1
Severity: High
Contract: Implementation
Function name: couponPremium(uint256)
PC address: 11477
Estimated Gas Usage: 2533 - 37427
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:4181

dollar().totalSupply()

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.995753
Transaction Length: 1
Severity: High
Contract: Market
Function name: totalNet()
PC address: 13213
Estimated Gas Usage: 2863 - 37757
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:197

.

     *

     * Requi

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:06.216046
Transaction Length: 1
Severity: High
Contract: Implementation
Function name: totalNet()
PC address: 25623
Estimated Gas Usage: 2797 - 37691
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:269

ves remaining gas untou

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0xcd243d70160707812c2475eabfcbc93b21b27fbc.sol
Total states:35050
161.155031
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.377540
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1004
Estimated Gas Usage: 417 - 512
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xcd243d70160707812c2475eabfcbc93b21b27fbc.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.657370
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1006
Estimated Gas Usage: 417 - 512
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xcd243d70160707812c2475eabfcbc93b21b27fbc.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.420131
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1089
Estimated Gas Usage: 593 - 688
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xcd243d70160707812c2475eabfcbc93b21b27fbc.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:23.525469
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1091
Estimated Gas Usage: 593 - 688
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xcd243d70160707812c2475eabfcbc93b21b27fbc.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.869321
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1250
Estimated Gas Usage: 462 - 557
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xcd243d70160707812c2475eabfcbc93b21b27fbc.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.154538
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1252
Estimated Gas Usage: 462 - 557
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xcd243d70160707812c2475eabfcbc93b21b27fbc.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.961742
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1335
Estimated Gas Usage: 638 - 733
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xcd243d70160707812c2475eabfcbc93b21b27fbc.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:17.023208
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1337
Estimated Gas Usage: 638 - 733
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xcd243d70160707812c2475eabfcbc93b21b27fbc.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.060530
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeBP(uint256)
PC address: 2585
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0xcd243d70160707812c2475eabfcbc93b21b27fbc.sol:784

uint[] public bonusRangeBP

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.385628
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3621
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0xcd243d70160707812c2475eabfcbc93b21b27fbc.sol:1226

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:03.722746
Transaction Length: 2
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3621
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0xcd243d70160707812c2475eabfcbc93b21b27fbc.sol:1226

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:35.810242
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeStart(uint256)
PC address: 6017
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0xcd243d70160707812c2475eabfcbc93b21b27fbc.sol:783

uint[] public bonusRangeStart

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:32.251808
Transaction Length: 1
Severity: Low
Contract: LidStaking
Function name: stakeHandlers(uint256)
PC address: 6118
Estimated Gas Usage: 790 - 885
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0xcd243d70160707812c2475eabfcbc93b21b27fbc.sol:961

IStakeHandler[] public stakeHandlers

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.742675
Transaction Length: 2
Severity: High
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6315
Estimated Gas Usage: 1699 - 2124
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xcd243d70160707812c2475eabfcbc93b21b27fbc.sol:1111

stakeHandlers.length-1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:07.830575
Transaction Length: 2
Severity: Low
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6326
Estimated Gas Usage: 1709 - 2134
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0xcd243d70160707812c2475eabfcbc93b21b27fbc.sol:1111

stakeHandlers[stakeHandlers.length-1]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:31.773037
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: calculateRatePerEth(uint256,uint256,uint256)
PC address: 6866
Estimated Gas Usage: 955 - 1050
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xcd243d70160707812c2475eabfcbc93b21b27fbc.sol:162

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.242241
Transaction Length: 1
Severity: High
Contract: LidStaking
Function name: findTaxAmount(uint256,uint256)
PC address: 13348
Estimated Gas Usage: 474 - 569
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xcd243d70160707812c2475eabfcbc93b21b27fbc.sol:162

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:28.368486
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPoolBPs(uint256)
PC address: 15373
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0xcd243d70160707812c2475eabfcbc93b21b27fbc.sol:1227

uint[] public tokenPoolBPs

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x8204A7Ed1335c103D82f1fA637e79f8Ae5BBE87A.sol
Total states:2391
19.791425
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0xa440cc047fd0bc519af1dab35d8d8fe558c358e3.sol
Total states:77
3.260095
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0xfb4d179d144c0390f759bdf4fe6d2891de863cdb.sol
Total states:998
43.479265
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.278804
Transaction Length: 1
Severity: High
Contract: MerkleDistributor
Function name: claim(uint256,address,uint256,bytes32[],uint256)
PC address: 343
Estimated Gas Usage: 427 - 522
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xfb4d179d144c0390f759bdf4fe6d2891de863cdb.sol:5

cense-Identifier: MIT

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.980004
Transaction Length: 1
Severity: High
Contract: MerkleDistributor
Function name: claim(uint256,address,uint256,bytes32[],uint256)
PC address: 345
Estimated Gas Usage: 427 - 522
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xfb4d179d144c0390f759bdf4fe6d2891de863cdb.sol:3

*/

// SPDX-License-Identifier: MIT


--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0xab47fbe8a0b75baa4ef846e99f6bb3b52007a115.sol
Total states:8498
78.564562
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:01.264377
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3645
Estimated Gas Usage: 1025 - 1500
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xab47fbe8a0b75baa4ef846e99f6bb3b52007a115.sol:186

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x1d4de814c6ea1ecf9020c26d73dcbae94b90b733.sol
Total states:2324
1.801116
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x158ef8873854b29b702d42ff48c99f3a59baac02.sol
Total states:3742
76.845083
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.924502
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: initialize(uint256,uint256,address[],uint256[],address)
PC address: 798
Estimated Gas Usage: 439 - 534
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x158ef8873854b29b702d42ff48c99f3a59baac02.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.069910
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: initialize(uint256,uint256,address[],uint256[],address)
PC address: 800
Estimated Gas Usage: 439 - 534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x158ef8873854b29b702d42ff48c99f3a59baac02.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.025972
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: initialize(uint256,uint256,address[],uint256[],address)
PC address: 883
Estimated Gas Usage: 615 - 710
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x158ef8873854b29b702d42ff48c99f3a59baac02.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:20.961771
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: initialize(uint256,uint256,address[],uint256[],address)
PC address: 885
Estimated Gas Usage: 615 - 710
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x158ef8873854b29b702d42ff48c99f3a59baac02.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:30.618712
Transaction Length: 1
Severity: Medium
Contract: LidTeamLock
Function name: startRelease()
PC address: 1036
Estimated Gas Usage: 20796 - 150675
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 4542
Offset: 4906
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop5/0x158ef8873854b29b702d42ff48c99f3a59baac02.sol:698

function startRelease() external {

        require(releaseStart == 0, "Has already started.");

        require(address(this).balance != 0, "Must have some ether deposited.");

        require(lidToken.balanceOf(address(this)) != 0, "Must have some lid deposited.");

        startingLid = lidToken.balanceOf(address(this));

        startingEth = address(this).balance;

        releaseStart = now.add(24 hours);

    }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:00.632401
Transaction Length: 2
Severity: Medium
Contract: LidTeamLock
Function name: startRelease()
PC address: 1036
Estimated Gas Usage: 20796 - 150675
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 4542
Offset: 4906
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop5/0x158ef8873854b29b702d42ff48c99f3a59baac02.sol:698

function startRelease() external {

        require(releaseStart == 0, "Has already started.");

        require(address(this).balance != 0, "Must have some ether deposited.");

        require(lidToken.balanceOf(address(this)) != 0, "Must have some lid deposited.");

        startingLid = lidToken.balanceOf(address(this));

        startingEth = address(this).balance;

        releaseStart = now.add(24 hours);

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:31.980287
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 1184
Estimated Gas Usage: 407 - 502
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x158ef8873854b29b702d42ff48c99f3a59baac02.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:34.906441
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 1186
Estimated Gas Usage: 407 - 502
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x158ef8873854b29b702d42ff48c99f3a59baac02.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:40.558172
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 1269
Estimated Gas Usage: 583 - 678
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x158ef8873854b29b702d42ff48c99f3a59baac02.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:55.650955
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 1271
Estimated Gas Usage: 583 - 678
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x158ef8873854b29b702d42ff48c99f3a59baac02.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.732457
Transaction Length: 1
Severity: Low
Contract: LidTeamLock
Function name: teamMemberBPs(uint256)
PC address: 1645
Estimated Gas Usage: 746 - 841
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x158ef8873854b29b702d42ff48c99f3a59baac02.sol:572

uint[] public teamMemberBPs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:12.948919
Transaction Length: 1
Severity: Low
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 5051
Estimated Gas Usage: 1070 - 1165
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x158ef8873854b29b702d42ff48c99f3a59baac02.sol:724

teamMemberAddresses[0]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:13.384230
Transaction Length: 1
Severity: Low
Contract: LidTeamLock
Function name: teamMemberAddresses(uint256)
PC address: 5622
Estimated Gas Usage: 678 - 773
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x158ef8873854b29b702d42ff48c99f3a59baac02.sol:570

address payable[] public teamMemberAddresses

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:29.479018
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: startRelease()
PC address: 6670
Estimated Gas Usage: 15736 - 125615
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x158ef8873854b29b702d42ff48c99f3a59baac02.sol:186

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0xcAAdcFC74404D54987D0763fa46484C74D166e92.sol
Total states:504
3.595711
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:00.802446
Transaction Length: 1
Severity: Low
Contract: SpellAction
Function name: execute()
PC address: 215
Estimated Gas Usage: 939 - 1315
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop5/0xcAAdcFC74404D54987D0763fa46484C74D166e92.sol:100

PotAbstract(MCD_POT).drip()

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:01.769005
Transaction Length: 1
Severity: Low
Contract: SpellAction
Function name: execute()
PC address: 458
Estimated Gas Usage: 2612 - 37645
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop5/0xcAAdcFC74404D54987D0763fa46484C74D166e92.sol:106

PotAbstract(MCD_POT).file("dsr", ZERO_PCT_RATE)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.944533
Transaction Length: 1
Severity: High
Contract: SpellAction
Function name: execute()
PC address: 644
Estimated Gas Usage: 4958 - 108460
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xcAAdcFC74404D54987D0763fa46484C74D166e92.sol:5

(C) 2020 Maker 

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0xd6bd449f82854e324786c0709c48272995b44b4d.sol
Total states:1569
3.531098
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:01.572660
Transaction Length: 1
Severity: Low
Contract: GenesisValidator
Function name: depositKAI(address,uint256)
PC address: 3044
Estimated Gas Usage: 2261 - 3252
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop5/0xd6bd449f82854e324786c0709c48272995b44b4d.sol:848

Token(KAI_ADDRESS).transferFrom(msg.sender, address(this), _amount)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0xd5a8551a6ee63ffccce8f92736d658112bccc7c9.sol
Total states:92
1.049907
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0xa468779f69af97031435bb104d657696c65634e0.sol
Total states:736
1.592527
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x75d98EfA9B4F38661cB3ade7A7b2840BB2954806.sol
Total states:4368
582.108348
==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.005552
Transaction Length: 0
Severity: Medium
Contract: Governance
Function name: constructor
PC address: 18
Estimated Gas Usage: 42 - 137
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../contracts/m_loop/loop5/0x75d98EfA9B4F38661cB3ade7A7b2840BB2954806.sol:639

tx.origin

--------------------

==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.030871
Transaction Length: 0
Severity: Medium
Contract: LPTokenWrapper
Function name: constructor
PC address: 241
Estimated Gas Usage: 16419 - 77504
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../contracts/m_loop/loop5/0x75d98EfA9B4F38661cB3ade7A7b2840BB2954806.sol:639

tx.origin

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.250387
Transaction Length: 0
Severity: High
Contract: UniswapReward
Function name: constructor
PC address: 517
Estimated Gas Usage: 37837 - 179912
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x75d98EfA9B4F38661cB3ade7A7b2840BB2954806.sol:796

now + 365 days

--------------------

==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.705255
Transaction Length: 0
Severity: Medium
Contract: UniswapReward
Function name: constructor
PC address: 583
Estimated Gas Usage: 78340 - 380745
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../contracts/m_loop/loop5/0x75d98EfA9B4F38661cB3ade7A7b2840BB2954806.sol:639

tx.origin

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.808698
Transaction Length: 1
Severity: High
Contract: LPTokenWrapper
Function name: stake(uint256,string)
PC address: 873
Estimated Gas Usage: 411 - 506
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x75d98EfA9B4F38661cB3ade7A7b2840BB2954806.sol:3

*/

/***
 *    ██████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.642331
Transaction Length: 1
Severity: High
Contract: UniswapReward
Function name: stake(uint256,string)
PC address: 2435
Estimated Gas Usage: 456 - 551
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x75d98EfA9B4F38661cB3ade7A7b2840BB2954806.sol:3

*/

/***
 *    ██████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:58.893642
Transaction Length: 1
Severity: High
Contract: UniswapReward
Function name: seize(address,uint256)
PC address: 13914
Estimated Gas Usage: 2651 - 5713
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x75d98EfA9B4F38661cB3ade7A7b2840BB2954806.sol:544

address(token).call(abi.encodeWithSelector(SELECTOR, to, value))

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:06:45.054659
Transaction Length: 1
Severity: Medium
Contract: UniswapReward
Function name: seize(address,uint256)
PC address: 13931
Estimated Gas Usage: 2976 - 7118
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../contracts/m_loop/loop5/0x75d98EfA9B4F38661cB3ade7A7b2840BB2954806.sol:544

address(token).call(abi.encodeWithSelector(SELECTOR, to, value))

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x6e15c68d0ba6068c6c6989a1cab84b783ca901ef.sol
Total states:3585
54.000368
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:37.594360
Transaction Length: 1
Severity: High
Contract: GOKUReserves
Function name: reserves()
PC address: 1833
Estimated Gas Usage: 2452 - 37441
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x6e15c68d0ba6068c6c6989a1cab84b783ca901ef.sol:5

dity ^0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:31.630399
Transaction Length: 1
Severity: High
Contract: GOKUReserves
Function name: reserves()
PC address: 1836
Estimated Gas Usage: 2452 - 37441
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x6e15c68d0ba6068c6c6989a1cab84b783ca901ef.sol:3



//pragma solidity ^0.5.17;
pragma solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:34.813308
Transaction Length: 1
Severity: High
Contract: GOKUReserves
Function name: reserves()
PC address: 1848
Estimated Gas Usage: 2452 - 37441
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x6e15c68d0ba6068c6c6989a1cab84b783ca901ef.sol:730

IERC20(reserveToken).balanceOf(address(this))

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:38.147181
Transaction Length: 1
Severity: High
Contract: GOKUReserves
Function name: reserves()
PC address: 3792
Estimated Gas Usage: 2452 - 37441
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x6e15c68d0ba6068c6c6989a1cab84b783ca901ef.sol:67

ion transferFrom(addres

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x96b3ce8154907bde5384928d3f3923a2b807ee46.sol
Total states:723
6.392013
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0xe853f71996f4bae84da2f1c9218ddcf5b486dacc.sol
Total states:426
0.681403
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x7d591ad2a38c489e9c6eaf31336018333faf68ad.sol
Total states:41890
215.701503
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.518680
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: updateBonus(uint256[],uint256[])
PC address: 723
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x7d591ad2a38c489e9c6eaf31336018333faf68ad.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.374186
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: updateBonus(uint256[],uint256[])
PC address: 725
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x7d591ad2a38c489e9c6eaf31336018333faf68ad.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.593375
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: updateBonus(uint256[],uint256[])
PC address: 808
Estimated Gas Usage: 539 - 634
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x7d591ad2a38c489e9c6eaf31336018333faf68ad.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:22.605335
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: updateBonus(uint256[],uint256[])
PC address: 810
Estimated Gas Usage: 539 - 634
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x7d591ad2a38c489e9c6eaf31336018333faf68ad.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:34.530395
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1221
Estimated Gas Usage: 417 - 512
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x7d591ad2a38c489e9c6eaf31336018333faf68ad.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:38.115276
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1223
Estimated Gas Usage: 417 - 512
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x7d591ad2a38c489e9c6eaf31336018333faf68ad.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.073079
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1261
Estimated Gas Usage: 462 - 557
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x7d591ad2a38c489e9c6eaf31336018333faf68ad.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.415922
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1263
Estimated Gas Usage: 462 - 557
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x7d591ad2a38c489e9c6eaf31336018333faf68ad.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:43.080503
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1306
Estimated Gas Usage: 593 - 688
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x7d591ad2a38c489e9c6eaf31336018333faf68ad.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:55.593109
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1308
Estimated Gas Usage: 593 - 688
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x7d591ad2a38c489e9c6eaf31336018333faf68ad.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.762407
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1346
Estimated Gas Usage: 638 - 733
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x7d591ad2a38c489e9c6eaf31336018333faf68ad.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:20.019273
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1348
Estimated Gas Usage: 638 - 733
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x7d591ad2a38c489e9c6eaf31336018333faf68ad.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:33.322600
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeBP(uint256)
PC address: 3309
Estimated Gas Usage: 767 - 862
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x7d591ad2a38c489e9c6eaf31336018333faf68ad.sol:1577

uint[] public bonusRangeBP

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.522945
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3707
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x7d591ad2a38c489e9c6eaf31336018333faf68ad.sol:2479

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:03.904271
Transaction Length: 2
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3707
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x7d591ad2a38c489e9c6eaf31336018333faf68ad.sol:2479

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:23.962640
Transaction Length: 1
Severity: Low
Contract: LidStaking
Function name: stakeHandlers(uint256)
PC address: 6118
Estimated Gas Usage: 790 - 885
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x7d591ad2a38c489e9c6eaf31336018333faf68ad.sol:1967

IStakeHandler[] public stakeHandlers

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.682585
Transaction Length: 2
Severity: High
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6315
Estimated Gas Usage: 1699 - 2124
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x7d591ad2a38c489e9c6eaf31336018333faf68ad.sol:2267

stakeHandlers.length-1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:07.986948
Transaction Length: 2
Severity: Low
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6326
Estimated Gas Usage: 1709 - 2134
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x7d591ad2a38c489e9c6eaf31336018333faf68ad.sol:2267

stakeHandlers[stakeHandlers.length-1]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:07.239576
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeStart(uint256)
PC address: 6741
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x7d591ad2a38c489e9c6eaf31336018333faf68ad.sol:1575

uint[] public bonusRangeStart

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:03.102314
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: calculateRatePerEth(uint256,uint256,uint256)
PC address: 7590
Estimated Gas Usage: 955 - 1050
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x7d591ad2a38c489e9c6eaf31336018333faf68ad.sol:444

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.470198
Transaction Length: 1
Severity: High
Contract: LidStaking
Function name: findTaxAmount(uint256,uint256)
PC address: 13348
Estimated Gas Usage: 474 - 569
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x7d591ad2a38c489e9c6eaf31336018333faf68ad.sol:444

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:32.421852
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPoolBPs(uint256)
PC address: 15577
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x7d591ad2a38c489e9c6eaf31336018333faf68ad.sol:2481

uint[] public tokenPoolBPs

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x09e5eaa0ffc9731176713f2c2d21475eecebe56a.sol
Total states:27421
55.905234
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.105377
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3244
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x09e5eaa0ffc9731176713f2c2d21475eecebe56a.sol:134

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.902678
Transaction Length: 2
Severity: High
Contract: ERC20Burnable
Function name: increaseAllowance(address,uint256)
PC address: 3424
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x09e5eaa0ffc9731176713f2c2d21475eecebe56a.sol:134

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.053036
Transaction Length: 2
Severity: High
Contract: ERC20Mintable
Function name: increaseAllowance(address,uint256)
PC address: 3847
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x09e5eaa0ffc9731176713f2c2d21475eecebe56a.sol:134

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0xc54b0EDfef6fE57Eb47Ce4f4893108e664A9eA2d.sol
Total states:1065
1.449597
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.944643
Transaction Length: 1
Severity: Low
Contract: SynthRegistry
Function name: availableSynths(uint256)
PC address: 3128
Estimated Gas Usage: 656 - 751
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0xc54b0EDfef6fE57Eb47Ce4f4893108e664A9eA2d.sol:278

address[] public availableSynths

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0xCb4336D9aA2027f563437B721b34C56a3E7A23F4.sol
Total states:1503
10.928202
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.090253
Transaction Length: 0
Severity: High
Contract: ERC20
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xCb4336D9aA2027f563437B721b34C56a3E7A23F4.sol:15

/**
    * 可选方法
    */
    function 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.186515
Transaction Length: 0
Severity: High
Contract: BtswapToken
Function name: constructor
PC address: 1203
Estimated Gas Usage: 1750 - 36312
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xCb4336D9aA2027f563437B721b34C56a3E7A23F4.sol:86

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x1e624aB76809c4BE098f38c3a4250b5306ADE2Ce.sol
Total states:475
4.956625
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x6b41459ced638645092a1c6d50726b428a66348a2.sol
Total states:596
1.605583
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x09D4fC517c7Ee9354acA81A80A13126179957B90.sol
Total states:6882
65.904334
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.097050
Transaction Length: 0
Severity: High
Contract: GGDAsset
Function name: constructor
PC address: 163
Estimated Gas Usage: 16051 - 79388
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x09D4fC517c7Ee9354acA81A80A13126179957B90.sol:16

 The Ownable contract has an owner address,

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.112050
Transaction Length: 1
Severity: High
Contract: ERC721
Function name: safeTransferFrom(address,address,uint256,bytes)
PC address: 1136
Estimated Gas Usage: 477 - 572
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x09D4fC517c7Ee9354acA81A80A13126179957B90.sol:3

*/

/**
 *Submitted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.466909
Transaction Length: 1
Severity: High
Contract: ERC721Enumerable
Function name: safeTransferFrom(address,address,uint256,bytes)
PC address: 1379
Estimated Gas Usage: 477 - 572
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x09D4fC517c7Ee9354acA81A80A13126179957B90.sol:3

*/

/**
 *Submitted for verificatio

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x3B3812BB9f6151bEb6fa10783F1ae848a77a0d46.sol
Total states:1697
40.506473
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x1ea84b986ee08b68d37bfe07c7564b84dee40bd6.sol
Total states:77
3.358326
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0xa30Ac92c04561aFF9eD644e8E1eC53A1A5e046DD.sol
Total states:1444
7.278102
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.709003
Transaction Length: 1
Severity: High
Contract: TokenPool
Function name: balance()
PC address: 1230
Estimated Gas Usage: 2430 - 37419
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xa30Ac92c04561aFF9eD644e8E1eC53A1A5e046DD.sol:5

zeppelin-solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.461140
Transaction Length: 1
Severity: High
Contract: TokenPool
Function name: balance()
PC address: 1233
Estimated Gas Usage: 2430 - 37419
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xa30Ac92c04561aFF9eD644e8E1eC53A1A5e046DD.sol:3



// File: openzeppelin-solidity/contracts/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.183891
Transaction Length: 1
Severity: High
Contract: TokenPool
Function name: balance()
PC address: 1245
Estimated Gas Usage: 2430 - 37419
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xa30Ac92c04561aFF9eD644e8E1eC53A1A5e046DD.sol:403

token.balanceOf(address(this))

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:02.223990
Transaction Length: 1
Severity: High
Contract: TokenPool
Function name: balance()
PC address: 1920
Estimated Gas Usage: 2430 - 37419
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xa30Ac92c04561aFF9eD644e8E1eC53A1A5e046DD.sol:49

 returns (uint256) {
  

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x10334122ef6ddb3c0cf84639d881b442c00ab2e8.sol
Total states:832
6.306287
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.189930
Transaction Length: 0
Severity: High
Contract: MasterChef_pizzas
Function name: constructor
PC address: 1695
Estimated Gas Usage: 75764 - 361619
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x10334122ef6ddb3c0cf84639d881b442c00ab2e8.sol:50

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x1bb925d0ee2a799224a9b8a1a314e34315257292.sol
Total states:13131
1064.692085
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.705953
Transaction Length: 1
Severity: High
Contract: MODERNA
Function name: dropToken(address[],uint256[])
PC address: 1909
Estimated Gas Usage: 340 - 435
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x1bb925d0ee2a799224a9b8a1a314e34315257292.sol:5

olidity ^0.5.0;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.277127
Transaction Length: 1
Severity: High
Contract: MODERNA
Function name: dropToken(address[],uint256[])
PC address: 1911
Estimated Gas Usage: 340 - 435
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x1bb925d0ee2a799224a9b8a1a314e34315257292.sol:3

*/

//pragma solidity ^0.5.0;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:15.868539
Transaction Length: 1
Severity: High
Contract: MODERNA
Function name: dropToken(address[],uint256[])
PC address: 2057
Estimated Gas Usage: 673 - 3450
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x1bb925d0ee2a799224a9b8a1a314e34315257292.sol:5

olidity ^0.5.0;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:27.933084
Transaction Length: 1
Severity: High
Contract: MODERNA
Function name: dropToken(address[],uint256[])
PC address: 2059
Estimated Gas Usage: 673 - 3450
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x1bb925d0ee2a799224a9b8a1a314e34315257292.sol:3

*/

//pragma solidity ^0.5.0;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:52.208692
Transaction Length: 1
Severity: High
Contract: MODERNA
Function name: approveAndCall(address,uint256,bytes)
PC address: 2285
Estimated Gas Usage: 422 - 517
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x1bb925d0ee2a799224a9b8a1a314e34315257292.sol:3

*/

//pragma solidity ^0.5.0;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:46.923999
Transaction Length: 1
Severity: High
Contract: MODERNA
Function name: approveAndCall(address,uint256,bytes)
PC address: 7994
Estimated Gas Usage: 9044 - 36742
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x1bb925d0ee2a799224a9b8a1a314e34315257292.sol:255

spender.receiveApproval(msg.sender, _value, address(this), _extraData)

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:02:31.367214
Transaction Length: 1
Severity: Medium
Contract: MODERNA
Function name: approveAndCall(address,uint256,bytes)
PC address: 8067
Estimated Gas Usage: 9754 - 37357
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../contracts/m_loop/loop5/0x1bb925d0ee2a799224a9b8a1a314e34315257292.sol:255

spender.receiveApproval(msg.sender, _value, address(this), _extraData)

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:02:56.179322
Transaction Length: 2
Severity: Medium
Contract: MODERNA
Function name: approveAndCall(address,uint256,bytes)
PC address: 8067
Estimated Gas Usage: 9754 - 37357
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../contracts/m_loop/loop5/0x1bb925d0ee2a799224a9b8a1a314e34315257292.sol:255

spender.receiveApproval(msg.sender, _value, address(this), _extraData)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:35.240716
Transaction Length: 1
Severity: High
Contract: MODERNA
Function name: approveAndCall(address,uint256,bytes)
PC address: 9075
Estimated Gas Usage: 1552 - 7858
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x1bb925d0ee2a799224a9b8a1a314e34315257292.sol:23

require(b <= a, errorMessage)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x5cad3a3f3ddba64336ea2801a2c5b99485edbdd9.sol
Total states:22554
99.334475
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.165627
Transaction Length: 0
Severity: High
Contract: Town
Function name: constructor
PC address: 844
Estimated Gas Usage: 558 - 3889
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x5cad3a3f3ddba64336ea2801a2c5b99485edbdd9.sol:1402

distributionPeriod * 1 days

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:20.598489
Transaction Length: 0
Severity: High
Contract: Town
Function name: constructor
PC address: 1422
Estimated Gas Usage: 46536 - 230197
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x5cad3a3f3ddba64336ea2801a2c5b99485edbdd9.sol:303

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.996001
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3044
Estimated Gas Usage: 989 - 1464
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x5cad3a3f3ddba64336ea2801a2c5b99485edbdd9.sol:225

a + b

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:03.052522
Transaction Length: 1
Severity: Low
Contract: TownToken
Function name: transfer(address,uint256)
PC address: 3334
Estimated Gas Usage: 2044 - 3175
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop5/0x5cad3a3f3ddba64336ea2801a2c5b99485edbdd9.sol:1100

_town.checkProposal(recipient)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.829192
Transaction Length: 2
Severity: High
Contract: ExternalTokenTemplate
Function name: increaseAllowance(address,uint256)
PC address: 3494
Estimated Gas Usage: 922 - 1397
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x5cad3a3f3ddba64336ea2801a2c5b99485edbdd9.sol:225

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:03.684860
Transaction Length: 1
Severity: Low
Contract: TownToken
Function name: getHolderByIndex(uint256)
PC address: 4982
Estimated Gas Usage: 725 - 820
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x5cad3a3f3ddba64336ea2801a2c5b99485edbdd9.sol:1076

_holders[index]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.097668
Transaction Length: 2
Severity: High
Contract: TownToken
Function name: increaseAllowance(address,uint256)
PC address: 6628
Estimated Gas Usage: 967 - 1442
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x5cad3a3f3ddba64336ea2801a2c5b99485edbdd9.sol:225

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x58d9aeff5bd966717a61439fffd2273102084b90.sol
Total states:3592
6.951505
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.195236
Transaction Length: 0
Severity: High
Contract: LuckAssetsPoolA
Function name: constructor
PC address: 513
Estimated Gas Usage: 54881 - 291329
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x58d9aeff5bd966717a61439fffd2273102084b90.sol:371

lib_math.OneDay() * 60

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.183039
Transaction Length: 0
Severity: High
Contract: LuckAssetsPoolA
Function name: constructor
PC address: 515
Estimated Gas Usage: 54881 - 291329
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x58d9aeff5bd966717a61439fffd2273102084b90.sol:371

now + lib_math.OneDay() * 60

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.260810
Transaction Length: 1
Severity: Low
Contract: InternalModule
Function name: _contractOwners(uint256)
PC address: 550
Estimated Gas Usage: 634 - 729
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x58d9aeff5bd966717a61439fffd2273102084b90.sol:26

address payable[] public _contractOwners = [

        address(0xc99D13544297d5baD9e0b0Ca0E94A4E614312F33)

    ]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.576286
Transaction Length: 1
Severity: Low
Contract: LuckAssetsPoolA
Function name: _contractOwners(uint256)
PC address: 3489
Estimated Gas Usage: 679 - 774
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x58d9aeff5bd966717a61439fffd2273102084b90.sol:26

address payable[] public _contractOwners = [

        address(0xc99D13544297d5baD9e0b0Ca0E94A4E614312F33)

    ]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:02.916440
Transaction Length: 1
Severity: Low
Contract: LuckAssetsPoolA
Function name: _investList(uint256)
PC address: 4986
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x58d9aeff5bd966717a61439fffd2273102084b90.sol:331

Invest[] public _investList

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x3d602bc3d36fbd89e0cd16d0f0aa73e4da66ba1a.sol
Total states:4378
16.366738
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:08.563780
Transaction Length: 1
Severity: Low
Contract: HDCOREv1Router
Function name: fallback
PC address: 2051
Estimated Gas Usage: 7941 - 29735
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop5/0x3d602bc3d36fbd89e0cd16d0f0aa73e4da66ba1a.sol:646

_WETH.deposit.value(msg.value)()

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:09.419428
Transaction Length: 1
Severity: Low
Contract: HDCOREv1Router
Function name: refreshApproval()
PC address: 4460
Estimated Gas Usage: 1899 - 3125
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop5/0x3d602bc3d36fbd89e0cd16d0f0aa73e4da66ba1a.sol:630

IUniswapV2Pair(_hdcoreWETHPair).approve(address(_hdcoreVault), uint(-1))

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0xa8ee490e4c4da48cc1653502c1a77479d4d818de.sol
Total states:9507
94.575561
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.074428
Transaction Length: 0
Severity: High
Contract: ERC721BaseCollection
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xa8ee490e4c4da48cc1653502c1a77479d4d818de.sol:15

vides a basic access control mechanism, whe

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.062044
Transaction Length: 0
Severity: High
Contract: ERC721Collection
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xa8ee490e4c4da48cc1653502c1a77479d4d818de.sol:15

vides a basic access control mechanism, whe

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.056214
Transaction Length: 0
Severity: High
Contract: ERC721Full
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xa8ee490e4c4da48cc1653502c1a77479d4d818de.sol:15

vides a basic access control mechanism, whe

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.049570
Transaction Length: 0
Severity: High
Contract: ERC721Metadata
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xa8ee490e4c4da48cc1653502c1a77479d4d818de.sol:15

vides a basic access control mechanism, whe

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.153910
Transaction Length: 1
Severity: High
Contract: ERC721
Function name: safeTransferFrom(address,address,uint256,bytes)
PC address: 1136
Estimated Gas Usage: 477 - 572
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xa8ee490e4c4da48cc1653502c1a77479d4d818de.sol:3

*/

/**
 *Submitted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.362307
Transaction Length: 1
Severity: High
Contract: ERC721Enumerable
Function name: safeTransferFrom(address,address,uint256,bytes)
PC address: 1379
Estimated Gas Usage: 477 - 572
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xa8ee490e4c4da48cc1653502c1a77479d4d818de.sol:3

*/

/**
 *Submitted for verificatio

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x20081862b301c1ef9357bc0a125aa414db210f2c.sol
Total states:10421
150.684065
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.473544
Transaction Length: 1
Severity: High
Contract: Operator
Function name: setOperators(address[])
PC address: 540
Estimated Gas Usage: 340 - 435
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x20081862b301c1ef9357bc0a125aa414db210f2c.sol:5

ontracts/modules/Owna

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.627562
Transaction Length: 1
Severity: High
Contract: Operator
Function name: setOperators(address[])
PC address: 542
Estimated Gas Usage: 340 - 435
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x20081862b301c1ef9357bc0a125aa414db210f2c.sol:3

*/

// File: contracts/modules/Ownab

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:27.932597
Transaction Length: 1
Severity: High
Contract: Operator
Function name: getOperator()
PC address: 763
Estimated Gas Usage: 1249 - 2096
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x20081862b301c1ef9357bc0a125aa414db210f2c.sol:443

function getOperator()public view returns (address[] memory) {
        return _operatorList;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:36.942776
Transaction Length: 1
Severity: High
Contract: Operator
Function name: getOperator()
PC address: 803
Estimated Gas Usage: 1399 - 2622
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x20081862b301c1ef9357bc0a125aa414db210f2c.sol:443

function getOperator()public view returns (address[] memory) {
        return _operatorList;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.122696
Transaction Length: 1
Severity: High
Contract: CollateralData
Function name: setOperators(address[])
PC address: 1436
Estimated Gas Usage: 429 - 524
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x20081862b301c1ef9357bc0a125aa414db210f2c.sol:5

ontracts/modules/Owna

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.819500
Transaction Length: 1
Severity: High
Contract: CollateralData
Function name: setOperators(address[])
PC address: 1438
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x20081862b301c1ef9357bc0a125aa414db210f2c.sol:3

*/

// File: contracts/modules/Ownab

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:34.243257
Transaction Length: 1
Severity: High
Contract: CollateralData
Function name: getOperator()
PC address: 1727
Estimated Gas Usage: 1249 - 2096
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x20081862b301c1ef9357bc0a125aa414db210f2c.sol:443

function getOperator()public view returns (address[] memory) {
        return _operatorList;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:43.291452
Transaction Length: 1
Severity: High
Contract: CollateralData
Function name: getOperator()
PC address: 1767
Estimated Gas Usage: 1399 - 2622
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x20081862b301c1ef9357bc0a125aa414db210f2c.sol:443

function getOperator()public view returns (address[] memory) {
        return _operatorList;
    }

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0xd074A91B12DE6B44D56A98025efE4D5cd9b55719.sol
Total states:17674
680.009094
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.346000
Transaction Length: 1
Severity: High
Contract: Module
Function name: getModuleAddress(string)
PC address: 416
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xd074A91B12DE6B44D56A98025efE4D5cd9b55719.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.747072
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 511
Estimated Gas Usage: 364 - 459
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xd074A91B12DE6B44D56A98025efE4D5cd9b55719.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.429795
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 513
Estimated Gas Usage: 364 - 459
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xd074A91B12DE6B44D56A98025efE4D5cd9b55719.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.365662
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 596
Estimated Gas Usage: 540 - 635
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xd074A91B12DE6B44D56A98025efE4D5cd9b55719.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:23.344126
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 598
Estimated Gas Usage: 540 - 635
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xd074A91B12DE6B44D56A98025efE4D5cd9b55719.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:36.550598
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 681
Estimated Gas Usage: 716 - 811
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xd074A91B12DE6B44D56A98025efE4D5cd9b55719.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:52.379052
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 683
Estimated Gas Usage: 716 - 811
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xd074A91B12DE6B44D56A98025efE4D5cd9b55719.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:14.733578
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 766
Estimated Gas Usage: 892 - 987
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xd074A91B12DE6B44D56A98025efE4D5cd9b55719.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:35.607325
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 768
Estimated Gas Usage: 892 - 987
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xd074A91B12DE6B44D56A98025efE4D5cd9b55719.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:01.933105
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: getModuleAddress(string)
PC address: 1453
Estimated Gas Usage: 451 - 546
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xd074A91B12DE6B44D56A98025efE4D5cd9b55719.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.151761
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SUSD
Function name: handleDeposit(address[],uint256[])
PC address: 1722
Estimated Gas Usage: 452 - 547
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xd074A91B12DE6B44D56A98025efE4D5cd9b55719.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.695704
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SUSD
Function name: handleDeposit(address[],uint256[])
PC address: 1724
Estimated Gas Usage: 452 - 547
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xd074A91B12DE6B44D56A98025efE4D5cd9b55719.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:14.851305
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SUSD
Function name: handleDeposit(address[],uint256[])
PC address: 1870
Estimated Gas Usage: 785 - 3562
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xd074A91B12DE6B44D56A98025efE4D5cd9b55719.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:26.790154
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SUSD
Function name: handleDeposit(address[],uint256[])
PC address: 1872
Estimated Gas Usage: 785 - 3562
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xd074A91B12DE6B44D56A98025efE4D5cd9b55719.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:29.790423
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SUSD
Function name: getModuleAddress(string)
PC address: 2154
Estimated Gas Usage: 407 - 502
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xd074A91B12DE6B44D56A98025efE4D5cd9b55719.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:04.842687
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SUSD
Function name: withdraw(address,uint256[])
PC address: 2519
Estimated Gas Usage: 397 - 492
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xd074A91B12DE6B44D56A98025efE4D5cd9b55719.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:08.703106
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SUSD
Function name: withdraw(address,uint256[])
PC address: 2521
Estimated Gas Usage: 397 - 492
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xd074A91B12DE6B44D56A98025efE4D5cd9b55719.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:34.440662
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SUSD
Function name: supportedTokens()
PC address: 3026
Estimated Gas Usage: 1250 - 2097
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xd074A91B12DE6B44D56A98025efE4D5cd9b55719.sol:1595

function supportedTokens() public view returns(address[] memory){
        return _registeredTokens;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:05.923092
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SUSD
Function name: supportedTokens()
PC address: 3066
Estimated Gas Usage: 1400 - 2623
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xd074A91B12DE6B44D56A98025efE4D5cd9b55719.sol:1595

function supportedTokens() public view returns(address[] memory){
        return _registeredTokens;
    }

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x083de49066c1D1c9261fB649eAFc5ea7D51560072.sol
Total states:1055
2.477769
==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.005817
Transaction Length: 0
Severity: Medium
Contract: Governance
Function name: constructor
PC address: 18
Estimated Gas Usage: 42 - 137
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../contracts/m_loop/loop5/0x083de49066c1D1c9261fB649eAFc5ea7D51560072.sol:220

tx.origin

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x3615687ac4e687cffcd01e69db5b48d83c4c1b87.sol
Total states:26284
197.475192
==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:42.146568
Transaction Length: 1
Severity: High
Contract: OptionsManagerV2
Function name: sellOption(uint256,uint256)
PC address: 25009
Estimated Gas Usage: 9969 - 66504
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3615687ac4e687cffcd01e69db5b48d83c4c1b87.sol:18

x - y

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x67122c473a6e195265b9e6d737c8f1cf5543b199.sol
Total states:17695
66.995878
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.509543
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3244
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x67122c473a6e195265b9e6d737c8f1cf5543b199.sol:121

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.829593
Transaction Length: 1
Severity: High
Contract: CreamUSD
Function name: getOutExactIn(address,address,uint256,int256,int256)
PC address: 13999
Estimated Gas Usage: 4698 - 74577
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x67122c473a6e195265b9e6d737c8f1cf5543b199.sol:140

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.412558
Transaction Length: 2
Severity: High
Contract: CreamUSD
Function name: increaseAllowance(address,uint256)
PC address: 14928
Estimated Gas Usage: 1081 - 1556
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x67122c473a6e195265b9e6d737c8f1cf5543b199.sol:121

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x8c18D6a985Ef69744b9d57248a45c0861874f244.sol
Total states:41682
107.736688
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.735947
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3244
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x8c18D6a985Ef69744b9d57248a45c0861874f244.sol:202

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.469621
Transaction Length: 1
Severity: Low
Contract: LockupContract
Function name: lockedAllocationData(address,uint256)
PC address: 3295
Estimated Gas Usage: 821 - 1106
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x8c18D6a985Ef69744b9d57248a45c0861874f244.sol:838

mapping(address => uint256[]) public lockedAllocationData

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.468828
Transaction Length: 2
Severity: High
Contract: LockupContract
Function name: getUnlockedBalance(address,uint256,uint256)
PC address: 3578
Estimated Gas Usage: 2951 - 4089
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x8c18D6a985Ef69744b9d57248a45c0861874f244.sol:905

uint256[] memory  addressLockupData = lockedAllocationData[_address]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.856305
Transaction Length: 2
Severity: High
Contract: LockupContract
Function name: getUnlockedBalance(address,uint256,uint256)
PC address: 3603
Estimated Gas Usage: 2951 - 4089
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x8c18D6a985Ef69744b9d57248a45c0861874f244.sol:905

uint256[] memory  addressLockupData = lockedAllocationData[_address]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.001788
Transaction Length: 2
Severity: High
Contract: LockupContract
Function name: getUnlockedBalance(address,uint256,uint256)
PC address: 3605
Estimated Gas Usage: 2951 - 4089
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x8c18D6a985Ef69744b9d57248a45c0861874f244.sol:905

uint256[] memory  addressLockupData = lockedAllocationData[_address]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.180957
Transaction Length: 2
Severity: High
Contract: ERC20Mintable
Function name: increaseAllowance(address,uint256)
PC address: 3847
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x8c18D6a985Ef69744b9d57248a45c0861874f244.sol:202

a + b

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:02.088612
Transaction Length: 1
Severity: Low
Contract: CLIAllocator
Function name: unlockManuallyLockedBalances(address)
PC address: 4785
Estimated Gas Usage: 5545 - 76368
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop5/0x8c18D6a985Ef69744b9d57248a45c0861874f244.sol:1265

lockupContract.setManuallyLockedForAddress(
            _holder,
            0
        )

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.437321
Transaction Length: 1
Severity: High
Contract: LockupContract
Function name: allocationLog(address,uint256,uint256,uint256,uint256,uint256)
PC address: 5243
Estimated Gas Usage: 13852 - 89787
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x8c18D6a985Ef69744b9d57248a45c0861874f244.sol:2

ification at Ether

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:04.684320
Transaction Length: 1
Severity: High
Contract: LockupContract
Function name: allocationLog(address,uint256,uint256,uint256,uint256,uint256)
PC address: 5255
Estimated Gas Usage: 24473 - 140693
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x8c18D6a985Ef69744b9d57248a45c0861874f244.sol:885

lockedAllocationData[_address].push(_amount)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.479227
Transaction Length: 1
Severity: High
Contract: LockupContract
Function name: allocationLog(address,uint256,uint256,uint256,uint256,uint256)
PC address: 5348
Estimated Gas Usage: 24473 - 140693
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x8c18D6a985Ef69744b9d57248a45c0861874f244.sol:2

ification at Ether

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:09.345395
Transaction Length: 1
Severity: High
Contract: LockupContract
Function name: allocationLog(address,uint256,uint256,uint256,uint256,uint256)
PC address: 5360
Estimated Gas Usage: 35094 - 191599
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x8c18D6a985Ef69744b9d57248a45c0861874f244.sol:886

lockedAllocationData[_address].push(_lockPeriodInSeconds)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.222285
Transaction Length: 1
Severity: High
Contract: LockupContract
Function name: allocationLog(address,uint256,uint256,uint256,uint256,uint256)
PC address: 5453
Estimated Gas Usage: 35094 - 191599
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x8c18D6a985Ef69744b9d57248a45c0861874f244.sol:2

ification at Ether

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0xe73f6f842f0bba2b711d42ad14facd1c42cf8bc1.sol
Total states:2324
1.799088
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x99bc263680a25d9f37b1a2667ca2ce561c7c1d97.sol
Total states:296
3.463156
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x1f1b038367a4ee60465ab22d8c76360523757cea.sol
Total states:17449
496.606899
==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:07:57.439731
Transaction Length: 1
Severity: Medium
Contract: MainnetASUsdToSUsdAssimilator
Function name: getASUsd()
PC address: 928
Estimated Gas Usage: 3898 - 74419
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 4676
Offset: 4913
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop5/0x1f1b038367a4ee60465ab22d8c76360523757cea.sol:994

function getASUsd () public view returns (IAToken) {

        ILendingPool pool = ILendingPool(lpProvider.getLendingPool());
        (,,,,,,,,,,,address aTokenAddress,) = pool.getReserveData(address(susd));
        return IAToken(aTokenAddress);

    }

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:07:49.371122
Transaction Length: 1
Severity: Low
Contract: MainnetASUsdToSUsdAssimilator
Function name: outputRawAndGetBalance(address,uint256)
PC address: 2194
Estimated Gas Usage: 4850 - 75466
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop5/0x1f1b038367a4ee60465ab22d8c76360523757cea.sol:1056

_asusd.deposit(_amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:07:51.784625
Transaction Length: 1
Severity: Low
Contract: MainnetASUsdToSUsdAssimilator
Function name: outputRawAndGetBalance(address,uint256)
PC address: 2383
Estimated Gas Usage: 6448 - 111535
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop5/0x1f1b038367a4ee60465ab22d8c76360523757cea.sol:1058

_asusd.transfer(_dst, _amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:07:54.360737
Transaction Length: 1
Severity: Low
Contract: MainnetASUsdToSUsdAssimilator
Function name: intakeRawAndGetBalance(uint256)
PC address: 3668
Estimated Gas Usage: 4801 - 75607
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop5/0x1f1b038367a4ee60465ab22d8c76360523757cea.sol:1007

_asusd.transferFrom(msg.sender, address(this), _amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:07:56.835617
Transaction Length: 1
Severity: Low
Contract: MainnetASUsdToSUsdAssimilator
Function name: intakeRawAndGetBalance(uint256)
PC address: 3957
Estimated Gas Usage: 6471 - 111839
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop5/0x1f1b038367a4ee60465ab22d8c76360523757cea.sol:1011

_asusd.redeem(_amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:07:59.929474
Transaction Length: 1
Severity: Low
Contract: MainnetASUsdToSUsdAssimilator
Function name: outputRaw(address,uint256)
PC address: 5239
Estimated Gas Usage: 4832 - 75448
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop5/0x1f1b038367a4ee60465ab22d8c76360523757cea.sol:1075

_asusd.deposit(_amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:08:02.291739
Transaction Length: 1
Severity: Low
Contract: MainnetASUsdToSUsdAssimilator
Function name: outputRaw(address,uint256)
PC address: 5428
Estimated Gas Usage: 6430 - 111517
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop5/0x1f1b038367a4ee60465ab22d8c76360523757cea.sol:1077

_asusd.transfer(_dst, _amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:08:12.681335
Transaction Length: 1
Severity: Low
Contract: MainnetASUsdToSUsdAssimilator
Function name: intakeRaw(uint256)
PC address: 5909
Estimated Gas Usage: 4908 - 75714
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop5/0x1f1b038367a4ee60465ab22d8c76360523757cea.sol:1026

_asusd.transferFrom(msg.sender, address(this), _amount)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x391fdcfbac5008770c26aff9e5b2e58331d2e98a.sol
Total states:426
0.782719
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x2C866FdDf7B1AA1AE27e2E90ae91C3a4241f2bfC2.sol
Total states:24017
173.343382
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.001560
Transaction Length: 1
Severity: High
Contract: DMGYieldFarmingV1
Function name: initialize(address,address,address,uint256,address[],address[],uint8[],uint16[])
PC address: 3958
Estimated Gas Usage: 598 - 693
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x2C866FdDf7B1AA1AE27e2E90ae91C3a4241f2bfC2.sol:5

olidity ^0.5.0;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.465136
Transaction Length: 1
Severity: High
Contract: DMGYieldFarmingV1
Function name: initialize(address,address,address,uint256,address[],address[],uint8[],uint16[])
PC address: 3960
Estimated Gas Usage: 598 - 693
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x2C866FdDf7B1AA1AE27e2E90ae91C3a4241f2bfC2.sol:3

*/

//pragma solidity ^0.5.0;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:20.735793
Transaction Length: 1
Severity: High
Contract: DMGYieldFarmingV1
Function name: initialize(address,address,address,uint256,address[],address[],uint8[],uint16[])
PC address: 4106
Estimated Gas Usage: 931 - 3708
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x2C866FdDf7B1AA1AE27e2E90ae91C3a4241f2bfC2.sol:5

olidity ^0.5.0;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:27.139716
Transaction Length: 1
Severity: High
Contract: DMGYieldFarmingV1
Function name: initialize(address,address,address,uint256,address[],address[],uint8[],uint16[])
PC address: 4108
Estimated Gas Usage: 931 - 3708
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x2C866FdDf7B1AA1AE27e2E90ae91C3a4241f2bfC2.sol:3

*/

//pragma solidity ^0.5.0;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:45.822789
Transaction Length: 1
Severity: High
Contract: DMGYieldFarmingV1
Function name: initialize(address,address,address,uint256,address[],address[],uint8[],uint16[])
PC address: 4254
Estimated Gas Usage: 1264 - 6723
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x2C866FdDf7B1AA1AE27e2E90ae91C3a4241f2bfC2.sol:5

olidity ^0.5.0;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:55.787349
Transaction Length: 1
Severity: High
Contract: DMGYieldFarmingV1
Function name: initialize(address,address,address,uint256,address[],address[],uint8[],uint16[])
PC address: 4256
Estimated Gas Usage: 1264 - 6723
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x2C866FdDf7B1AA1AE27e2E90ae91C3a4241f2bfC2.sol:3

*/

//pragma solidity ^0.5.0;
pragma

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x43dfc4159d86f3a37a5a4b3d4580b888ad7d4ddd.sol
Total states:1751
1.359935
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x1f10ff148a0ad63a57f98530ab472568e90a72c5.sol
Total states:1506
20.234524
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.142651
Transaction Length: 1
Severity: High
Contract: KYFV2
Function name: removeMultiple(address[])
PC address: 1130
Estimated Gas Usage: 384 - 479
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x1f10ff148a0ad63a57f98530ab472568e90a72c5.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.891869
Transaction Length: 1
Severity: High
Contract: KYFV2
Function name: removeMultiple(address[])
PC address: 1132
Estimated Gas Usage: 384 - 479
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x1f10ff148a0ad63a57f98530ab472568e90a72c5.sol:3

*/

/**
 *Submitted for verification

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x055225ac7a4c2a91fbba70fa219a7f254d17cd8f.sol
Total states:18473
23.469112
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.852310
Transaction Length: 1
Severity: Low
Contract: WhiteListStorage
Function name: tokenToTransferringRuleArray(uint8,uint256)
PC address: 1710
Estimated Gas Usage: 863 - 1148
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x055225ac7a4c2a91fbba70fa219a7f254d17cd8f.sol:79

mapping(uint8 => TransferringRule[]) public tokenToTransferringRuleArray

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.306075
Transaction Length: 1
Severity: Low
Contract: RegisteryWhiteList
Function name: tokenToTransferringRuleArray(uint8,uint256)
PC address: 5616
Estimated Gas Usage: 863 - 1148
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x055225ac7a4c2a91fbba70fa219a7f254d17cd8f.sol:79

mapping(uint8 => TransferringRule[]) public tokenToTransferringRuleArray

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:02.945080
Transaction Length: 1
Severity: Low
Contract: WhiteList
Function name: tokenToTransferringRuleArray(uint8,uint256)
PC address: 12049
Estimated Gas Usage: 864 - 1149
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x055225ac7a4c2a91fbba70fa219a7f254d17cd8f.sol:79

mapping(uint8 => TransferringRule[]) public tokenToTransferringRuleArray

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x29630bddc51da9212f718a710b9e85fe8f3b2879.sol
Total states:1055
2.461921
==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.005668
Transaction Length: 0
Severity: Medium
Contract: Governance
Function name: constructor
PC address: 18
Estimated Gas Usage: 42 - 137
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../contracts/m_loop/loop5/0x29630bddc51da9212f718a710b9e85fe8f3b2879.sol:106

tx.origin

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0xC4D477BCF1578ebF4Dee2318E19aB7649a83F5bB.sol
Total states:5429
21.95678
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x1b719f95423077213a376de770f415993396a4ab.sol
Total states:1322
70.456251
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.851040
Transaction Length: 1
Severity: High
Contract: TimeLock
Function name: addParameters(address[],uint256[],uint256[])
PC address: 857
Estimated Gas Usage: 384 - 479
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x1b719f95423077213a376de770f415993396a4ab.sol:5

olidity ^0.6.0;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.491919
Transaction Length: 1
Severity: High
Contract: TimeLock
Function name: addParameters(address[],uint256[],uint256[])
PC address: 859
Estimated Gas Usage: 384 - 479
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x1b719f95423077213a376de770f415993396a4ab.sol:3

*/

//pragma solidity ^0.6.0;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.216621
Transaction Length: 1
Severity: High
Contract: TimeLock
Function name: addParameters(address[],uint256[],uint256[])
PC address: 942
Estimated Gas Usage: 560 - 655
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x1b719f95423077213a376de770f415993396a4ab.sol:5

olidity ^0.6.0;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:19.323960
Transaction Length: 1
Severity: High
Contract: TimeLock
Function name: addParameters(address[],uint256[],uint256[])
PC address: 944
Estimated Gas Usage: 560 - 655
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x1b719f95423077213a376de770f415993396a4ab.sol:3

*/

//pragma solidity ^0.6.0;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:32.462586
Transaction Length: 1
Severity: High
Contract: TimeLock
Function name: addParameters(address[],uint256[],uint256[])
PC address: 1027
Estimated Gas Usage: 736 - 831
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x1b719f95423077213a376de770f415993396a4ab.sol:5

olidity ^0.6.0;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:53.816527
Transaction Length: 1
Severity: High
Contract: TimeLock
Function name: addParameters(address[],uint256[],uint256[])
PC address: 1029
Estimated Gas Usage: 736 - 831
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x1b719f95423077213a376de770f415993396a4ab.sol:3

*/

//pragma solidity ^0.6.0;
pragma

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x5baff73622fe06282496fabebc8711b57cc75d42.sol
Total states:1880
89.605134
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.273404
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShip(address[])
PC address: 360
Estimated Gas Usage: 342 - 437
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x5baff73622fe06282496fabebc8711b57cc75d42.sol:5

penzeppelin-solidity/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.331766
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShip(address[])
PC address: 362
Estimated Gas Usage: 342 - 437
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x5baff73622fe06282496fabebc8711b57cc75d42.sol:3

*/

// File: openzeppelin-solidity/c

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:35.167659
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShipWithHowMany(address[],uint256)
PC address: 776
Estimated Gas Usage: 341 - 436
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x5baff73622fe06282496fabebc8711b57cc75d42.sol:5

penzeppelin-solidity/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:37.893493
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShipWithHowMany(address[],uint256)
PC address: 778
Estimated Gas Usage: 341 - 436
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x5baff73622fe06282496fabebc8711b57cc75d42.sol:3

*/

// File: openzeppelin-solidity/c

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:27.820567
Transaction Length: 1
Severity: Low
Contract: BeneficiaryOperations
Function name: allOperations(uint256)
PC address: 1715
Estimated Gas Usage: 701 - 796
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x5baff73622fe06282496fabebc8711b57cc75d42.sol:386

bytes32[] public allOperations

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:24.405535
Transaction Length: 1
Severity: Low
Contract: BeneficiaryOperations
Function name: beneficiaries(uint256)
PC address: 4636
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x5baff73622fe06282496fabebc8711b57cc75d42.sol:385

address[] public beneficiaries

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x254bc132532c2932f00347f9ba4ea425bc1768ef.sol
Total states:738
3.65273
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x781a0861395Ba245e8254a61e74B0e7cD3Ac8eAf.sol
Total states:4368
565.12392
==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.005639
Transaction Length: 0
Severity: Medium
Contract: Governance
Function name: constructor
PC address: 18
Estimated Gas Usage: 42 - 137
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../contracts/m_loop/loop5/0x781a0861395Ba245e8254a61e74B0e7cD3Ac8eAf.sol:639

tx.origin

--------------------

==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.030863
Transaction Length: 0
Severity: Medium
Contract: LPTokenWrapper
Function name: constructor
PC address: 241
Estimated Gas Usage: 16419 - 77504
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../contracts/m_loop/loop5/0x781a0861395Ba245e8254a61e74B0e7cD3Ac8eAf.sol:639

tx.origin

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.275852
Transaction Length: 0
Severity: High
Contract: UniswapReward
Function name: constructor
PC address: 516
Estimated Gas Usage: 37837 - 179912
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x781a0861395Ba245e8254a61e74B0e7cD3Ac8eAf.sol:796

now + 365 days

--------------------

==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.740837
Transaction Length: 0
Severity: Medium
Contract: UniswapReward
Function name: constructor
PC address: 582
Estimated Gas Usage: 78340 - 380745
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../contracts/m_loop/loop5/0x781a0861395Ba245e8254a61e74B0e7cD3Ac8eAf.sol:639

tx.origin

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.743601
Transaction Length: 1
Severity: High
Contract: LPTokenWrapper
Function name: stake(uint256,string)
PC address: 873
Estimated Gas Usage: 411 - 506
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x781a0861395Ba245e8254a61e74B0e7cD3Ac8eAf.sol:3

*/

/***
 *    ██████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.689103
Transaction Length: 1
Severity: High
Contract: UniswapReward
Function name: stake(uint256,string)
PC address: 2435
Estimated Gas Usage: 456 - 551
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x781a0861395Ba245e8254a61e74B0e7cD3Ac8eAf.sol:3

*/

/***
 *    ██████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:48.357377
Transaction Length: 1
Severity: High
Contract: UniswapReward
Function name: seize(address,uint256)
PC address: 13914
Estimated Gas Usage: 2651 - 5713
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x781a0861395Ba245e8254a61e74B0e7cD3Ac8eAf.sol:544

address(token).call(abi.encodeWithSelector(SELECTOR, to, value))

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:06:33.851141
Transaction Length: 1
Severity: Medium
Contract: UniswapReward
Function name: seize(address,uint256)
PC address: 13931
Estimated Gas Usage: 2976 - 7118
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../contracts/m_loop/loop5/0x781a0861395Ba245e8254a61e74B0e7cD3Ac8eAf.sol:544

address(token).call(abi.encodeWithSelector(SELECTOR, to, value))

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0xe5d078f380d67b72ece5c55c65c4e0ec97ea1439.sol
Total states:16470
28.0276
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0xE0384c1741c051333BC28585321217d9B8E9d988.sol
Total states:1055
2.483204
==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.005901
Transaction Length: 0
Severity: Medium
Contract: Governance
Function name: constructor
PC address: 18
Estimated Gas Usage: 42 - 137
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../contracts/m_loop/loop5/0xE0384c1741c051333BC28585321217d9B8E9d988.sol:220

tx.origin

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0xa8d95129457194b5711c630ec7774ccb5f70bdb3.sol
Total states:7571
20.910246
==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.005544
Transaction Length: 0
Severity: Medium
Contract: Governance
Function name: constructor
PC address: 18
Estimated Gas Usage: 42 - 137
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../contracts/m_loop/loop5/0xa8d95129457194b5711c630ec7774ccb5f70bdb3.sol:994

tx.origin

--------------------

==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.026599
Transaction Length: 0
Severity: Medium
Contract: Tx2UNI
Function name: constructor
PC address: 188
Estimated Gas Usage: 10976 - 51731
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../contracts/m_loop/loop5/0xa8d95129457194b5711c630ec7774ccb5f70bdb3.sol:994

tx.origin

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:03.361140
Transaction Length: 1
Severity: Medium
Contract: Tx2UNI
Function name: seizeTOKEN(address)
PC address: 887
Estimated Gas Usage: 4598 - 74572
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 4358
Offset: 4616
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop5/0xa8d95129457194b5711c630ec7774ccb5f70bdb3.sol:1438

function seizeTOKEN( address tokenaddr ) external onlyGovernance {

        Erc20Token _token =  Erc20Token(tokenaddr);

        uint256 _currentBalance = _token.balanceOf(address(this));

        _token.transfer(_teamWallet, _currentBalance);

    }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:08.555489
Transaction Length: 2
Severity: Medium
Contract: Tx2UNI
Function name: seizeTOKEN(address)
PC address: 887
Estimated Gas Usage: 4604 - 74578
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 4358
Offset: 4616
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop5/0xa8d95129457194b5711c630ec7774ccb5f70bdb3.sol:1438

function seizeTOKEN( address tokenaddr ) external onlyGovernance {

        Erc20Token _token =  Erc20Token(tokenaddr);

        uint256 _currentBalance = _token.balanceOf(address(this));

        _token.transfer(_teamWallet, _currentBalance);

    }

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.715637
Transaction Length: 1
Severity: Low
Contract: Tx2UNI
Function name: _pair_weth_TOKEN(uint256)
PC address: 3951
Estimated Gas Usage: 723 - 818
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0xa8d95129457194b5711c630ec7774ccb5f70bdb3.sol:1250

address[] public _pair_weth_TOKEN

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:00:03.261428
Transaction Length: 1
Severity: Medium
Contract: Tx2UNI
Function name: seizeTOKEN(address)
PC address: 4616
Estimated Gas Usage: 3771 - 39559
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../contracts/m_loop/loop5/0xa8d95129457194b5711c630ec7774ccb5f70bdb3.sol:1444

_token.transfer(_teamWallet, _currentBalance)

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:00:08.361373
Transaction Length: 2
Severity: Medium
Contract: Tx2UNI
Function name: seizeTOKEN(address)
PC address: 4616
Estimated Gas Usage: 3777 - 39565
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../contracts/m_loop/loop5/0xa8d95129457194b5711c630ec7774ccb5f70bdb3.sol:1444

_token.transfer(_teamWallet, _currentBalance)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:04.478358
Transaction Length: 1
Severity: Low
Contract: Tx2UNI
Function name: _pair_TOKEN_weth(uint256)
PC address: 5486
Estimated Gas Usage: 723 - 818
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0xa8d95129457194b5711c630ec7774ccb5f70bdb3.sol:1248

address[] public _pair_TOKEN_weth

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:05.459448
Transaction Length: 1
Severity: Low
Contract: Tx2UNI
Function name: _validbots(uint256)
PC address: 5712
Estimated Gas Usage: 700 - 795
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0xa8d95129457194b5711c630ec7774ccb5f70bdb3.sol:1252

address[] public _validbots

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x52305c065579a8a620690cc39394514af905ff42.sol
Total states:361
5.872148
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0xdb171f41af8df36c1dbdddf076ed3b2e1ef4667a.sol
Total states:11782
1107.25437
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.963935
Transaction Length: 1
Severity: High
Contract: LexTokenLiteFactory
Function name: LaunchLexTokenLite(string,string,uint8,address,address,uint256,uint256,bytes32,bool)
PC address: 377
Estimated Gas Usage: 316 - 411
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xdb171f41af8df36c1dbdddf076ed3b2e1ef4667a.sol:3

*/

//pragma solidity 0.5.17;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.265649
Transaction Length: 1
Severity: High
Contract: LexTokenLiteFactory
Function name: LaunchLexTokenLite(string,string,uint8,address,address,uint256,uint256,bytes32,bool)
PC address: 528
Estimated Gas Usage: 661 - 3438
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xdb171f41af8df36c1dbdddf076ed3b2e1ef4667a.sol:3

*/

//pragma solidity 0.5.17;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.173499
Transaction Length: 1
Severity: High
Contract: LexTokenLite
Function name: transferBatch(address[],uint256[])
PC address: 1100
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xdb171f41af8df36c1dbdddf076ed3b2e1ef4667a.sol:5

olidity 0.5.17;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.003627
Transaction Length: 1
Severity: High
Contract: LexTokenLite
Function name: transferBatch(address[],uint256[])
PC address: 1102
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xdb171f41af8df36c1dbdddf076ed3b2e1ef4667a.sol:3

*/

//pragma solidity 0.5.17;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.540314
Transaction Length: 1
Severity: High
Contract: LexTokenLite
Function name: transferBatch(address[],uint256[])
PC address: 1185
Estimated Gas Usage: 539 - 634
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xdb171f41af8df36c1dbdddf076ed3b2e1ef4667a.sol:5

olidity 0.5.17;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:24.250767
Transaction Length: 1
Severity: High
Contract: LexTokenLite
Function name: transferBatch(address[],uint256[])
PC address: 1187
Estimated Gas Usage: 539 - 634
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xdb171f41af8df36c1dbdddf076ed3b2e1ef4667a.sol:3

*/

//pragma solidity 0.5.17;
pragma

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:05:21.914545
Transaction Length: 1
Severity: Low
Contract: LexTokenLiteFactory
Function name: LaunchLexTokenLite(string,string,uint8,address,address,uint256,uint256,bytes32,bool)
PC address: 1599
Estimated Gas Usage: 35144 - 43715
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop5/0xdb171f41af8df36c1dbdddf076ed3b2e1ef4667a.sol:256

lexLite.init(
            _name, 
            _symbol,
            _decimals, 
            _owner, 
            _resolver,
            ownerSupply, 
            _totalSupplyCap, 
            _message, 
            _transferable)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:01:34.915349
Transaction Length: 1
Severity: Low
Contract: LexTokenLiteFactory
Function name: LaunchLexTokenLite(string,string,uint8,address,address,uint256,uint256,bytes32,bool)
PC address: 1701
Estimated Gas Usage: 36230 - 78611
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop5/0xdb171f41af8df36c1dbdddf076ed3b2e1ef4667a.sol:267

lexDAO.call.value(msg.value)("")

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:40.163318
Transaction Length: 1
Severity: High
Contract: LexTokenLite
Function name: mintBatch(address[],uint256[])
PC address: 1710
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xdb171f41af8df36c1dbdddf076ed3b2e1ef4667a.sol:5

olidity 0.5.17;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:42.966622
Transaction Length: 1
Severity: High
Contract: LexTokenLite
Function name: mintBatch(address[],uint256[])
PC address: 1712
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xdb171f41af8df36c1dbdddf076ed3b2e1ef4667a.sol:3

*/

//pragma solidity 0.5.17;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:49.410621
Transaction Length: 1
Severity: High
Contract: LexTokenLite
Function name: mintBatch(address[],uint256[])
PC address: 1795
Estimated Gas Usage: 539 - 634
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xdb171f41af8df36c1dbdddf076ed3b2e1ef4667a.sol:5

olidity 0.5.17;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:01.754409
Transaction Length: 1
Severity: High
Contract: LexTokenLite
Function name: mintBatch(address[],uint256[])
PC address: 1797
Estimated Gas Usage: 539 - 634
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xdb171f41af8df36c1dbdddf076ed3b2e1ef4667a.sol:3

*/

//pragma solidity 0.5.17;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:15.855139
Transaction Length: 1
Severity: High
Contract: LexTokenLite
Function name: init(string,string,uint8,address,address,uint256,uint256,bytes32,bool)
PC address: 2095
Estimated Gas Usage: 451 - 546
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xdb171f41af8df36c1dbdddf076ed3b2e1ef4667a.sol:3

*/

//pragma solidity 0.5.17;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:20.786586
Transaction Length: 1
Severity: High
Contract: LexTokenLite
Function name: init(string,string,uint8,address,address,uint256,uint256,bytes32,bool)
PC address: 2180
Estimated Gas Usage: 627 - 722
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xdb171f41af8df36c1dbdddf076ed3b2e1ef4667a.sol:3

*/

//pragma solidity 0.5.17;
pragm

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x4bf1c68aed4dbd3f7b7e2116e0f6bc1a6711abff.sol
Total states:2324
1.877429
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x5631be2f1f70cee9f377a45d06b722a85d0027ca.sol
Total states:18334
2619.668165
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.354481
Transaction Length: 1
Severity: High
Contract: master
Function name: airdrop(address,address[],uint256[])
PC address: 458
Estimated Gas Usage: 375 - 470
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x5631be2f1f70cee9f377a45d06b722a85d0027ca.sol:5

olidity 0.5.7;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.730632
Transaction Length: 1
Severity: High
Contract: master
Function name: airdrop(address,address[],uint256[])
PC address: 460
Estimated Gas Usage: 375 - 470
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x5631be2f1f70cee9f377a45d06b722a85d0027ca.sol:3

*/

//pragma solidity 0.5.7;
pragma 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:15.046151
Transaction Length: 1
Severity: High
Contract: master
Function name: airdrop(address,address[],uint256[])
PC address: 606
Estimated Gas Usage: 717 - 3494
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x5631be2f1f70cee9f377a45d06b722a85d0027ca.sol:5

olidity 0.5.7;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:25.474854
Transaction Length: 1
Severity: High
Contract: master
Function name: airdrop(address,address[],uint256[])
PC address: 608
Estimated Gas Usage: 717 - 3494
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x5631be2f1f70cee9f377a45d06b722a85d0027ca.sol:3

*/

//pragma solidity 0.5.7;
pragma 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:08.671918
Transaction Length: 1
Severity: High
Contract: master
Function name: name()
PC address: 790
Estimated Gas Usage: 1914 - 3044
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x5631be2f1f70cee9f377a45d06b722a85d0027ca.sol:68

function name() public view returns(string memory) {
        return _name;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:10:25.569217
Transaction Length: 1
Severity: High
Contract: master
Function name: symbol()
PC address: 1757
Estimated Gas Usage: 1957 - 3087
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x5631be2f1f70cee9f377a45d06b722a85d0027ca.sol:72

function symbol() public view returns(string memory) {
        return _symbol;
    }

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:13:22.611131
Transaction Length: 1
Severity: Low
Contract: master
Function name: decreaseAllowance(address,uint256)
PC address: 9553
Estimated Gas Usage: 973 - 1448
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x5631be2f1f70cee9f377a45d06b722a85d0027ca.sol:40

assert(b <= a)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:27:07.823015
Transaction Length: 2
Severity: Low
Contract: master
Function name: decreaseAllowance(address,uint256)
PC address: 9553
Estimated Gas Usage: 973 - 1448
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x5631be2f1f70cee9f377a45d06b722a85d0027ca.sol:40

assert(b <= a)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:18:19.217552
Transaction Length: 2
Severity: High
Contract: master
Function name: increaseAllowance(address,uint256)
PC address: 9571
Estimated Gas Usage: 1003 - 1478
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x5631be2f1f70cee9f377a45d06b722a85d0027ca.sol:45

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:24:58.039936
Transaction Length: 2
Severity: Low
Contract: master
Function name: increaseAllowance(address,uint256)
PC address: 9584
Estimated Gas Usage: 1013 - 1488
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x5631be2f1f70cee9f377a45d06b722a85d0027ca.sol:46

assert(c >= a)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x6e3ce0f2abe08539479139928eedddff41177144.sol
Total states:648
1.526811
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0xe3013029af5f33ec3fc0f3b71508acb775ddc196.sol
Total states:4923
67.507389
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:02.206920
Transaction Length: 1
Severity: Low
Contract: ShuttleOneDepositPools
Function name: withdraw(uint256)
PC address: 5467
Estimated Gas Usage: 4298 - 5384
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop5/0xe3013029af5f33ec3fc0f3b71508acb775ddc196.sol:232

token.transfer(msg.sender,amount)

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:02.523519
Transaction Length: 1
Severity: High
Contract: ShuttleOneDepositPools
Function name: withdraw(uint256)
PC address: 5677
Estimated Gas Usage: 11588 - 67240
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xe3013029af5f33ec3fc0f3b71508acb775ddc196.sol:234

depositIdx[msg.sender] - 1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:05.284965
Transaction Length: 1
Severity: Low
Contract: ShuttleOneDepositPools
Function name: deposit(address,uint256)
PC address: 5873
Estimated Gas Usage: 770 - 1195
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0xe3013029af5f33ec3fc0f3b71508acb775ddc196.sol:189

amount % (10 ** decimal)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:06.488298
Transaction Length: 1
Severity: Low
Contract: ShuttleOneDepositPools
Function name: supplyInterest()
PC address: 7605
Estimated Gas Usage: 1058 - 1483
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0xe3013029af5f33ec3fc0f3b71508acb775ddc196.sol:386

totalSupply / (10 ** decimal)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:01:00.133358
Transaction Length: 1
Severity: Low
Contract: ShuttleOneDepositPools
Function name: borrow(uint256)
PC address: 11442
Estimated Gas Usage: 57150 - 296100
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop5/0xe3013029af5f33ec3fc0f3b71508acb775ddc196.sol:420

catToken.intTransfer(_addr,address(this),amount)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x36122ed55522ae20304d7ef68bc3f3696d72fc1c.sol
Total states:6928
22.642379
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:02.657584
Transaction Length: 1
Severity: Low
Contract: TouchEvent
Function name: userBidGirl(uint256,uint256)
PC address: 5109
Estimated Gas Usage: 8010 - 29801
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop5/0x36122ed55522ae20304d7ef68bc3f3696d72fc1c.sol:640

staker.userDepositsCounts(_user)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:05.586645
Transaction Length: 1
Severity: Low
Contract: TouchEvent
Function name: userLikeGirl(uint256,uint256)
PC address: 11725
Estimated Gas Usage: 7965 - 29756
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop5/0x36122ed55522ae20304d7ef68bc3f3696d72fc1c.sol:640

staker.userDepositsCounts(_user)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.182495
Transaction Length: 1
Severity: High
Contract: TouchEvent
Function name: getOptionLiker(uint256,uint256,uint256,uint256)
PC address: 14837
Estimated Gas Usage: 1028 - 3710
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x36122ed55522ae20304d7ef68bc3f3696d72fc1c.sol:2

or verification

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x5918705f9a172d5caabbd2e2ddb5086ae033dfe8.sol
Total states:5554
259.308463
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.335045
Transaction Length: 1
Severity: High
Contract: TokenDecimalsView
Function name: getTokenDecimals(address[])
PC address: 158
Estimated Gas Usage: 296 - 391
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x5918705f9a172d5caabbd2e2ddb5086ae033dfe8.sol:6

uthors: [@mtsalenc]
 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.840392
Transaction Length: 1
Severity: High
Contract: TokenDecimalsView
Function name: getTokenDecimals(address[])
PC address: 160
Estimated Gas Usage: 296 - 391
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x5918705f9a172d5caabbd2e2ddb5086ae033dfe8.sol:3

*/

/**
 *  @authors: [@mtsalenc]
 *

--------------------

==== Unchecked Call Return Value ====
SWC ID: 104
FOUND TIME: 0:02:18.744168
Transaction Length: 1
Severity: Low
Contract: TokenDecimalsView
Function name: getTokenDecimals(address[])
PC address: 480
Estimated Gas Usage: 1836 - 39878
The return value of a message call is not checked.
External calls return a boolean value. If the callee contract halts with an exception, 'false' is returned and execution continues in the caller. It is usually recommended to wrap external calls into a require statement to prevent unexpected states.
--------------------
In file: ../../contracts/m_loop/loop5/0x5918705f9a172d5caabbd2e2ddb5086ae033dfe8.sol:43

staticcall(
                    30000,              // 30k gas
                    tokenAddress,       // The call target.
                    x,                  // Inputs are stored at location x
                    0x04,               // Input is 4 bytes long
                    x,                  // Overwrite x with output
                    0x20                // The output length
                )

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x2bf0689b22c1092aaf6a09437af316985e67ba12.sol
Total states:77
3.344387
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x6c8b098427D17c8afe8d9bD3c68D5999240c7ACa.sol
Total states:17674
724.377059
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.391072
Transaction Length: 1
Severity: High
Contract: Module
Function name: getModuleAddress(string)
PC address: 416
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x6c8b098427D17c8afe8d9bD3c68D5999240c7ACa.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.255296
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 511
Estimated Gas Usage: 364 - 459
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x6c8b098427D17c8afe8d9bD3c68D5999240c7ACa.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.447152
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 513
Estimated Gas Usage: 364 - 459
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x6c8b098427D17c8afe8d9bD3c68D5999240c7ACa.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.605415
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 596
Estimated Gas Usage: 540 - 635
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x6c8b098427D17c8afe8d9bD3c68D5999240c7ACa.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:18.400622
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 598
Estimated Gas Usage: 540 - 635
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x6c8b098427D17c8afe8d9bD3c68D5999240c7ACa.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:31.413672
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 681
Estimated Gas Usage: 716 - 811
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x6c8b098427D17c8afe8d9bD3c68D5999240c7ACa.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:59.405156
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 683
Estimated Gas Usage: 716 - 811
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x6c8b098427D17c8afe8d9bD3c68D5999240c7ACa.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:19.302082
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 766
Estimated Gas Usage: 892 - 987
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x6c8b098427D17c8afe8d9bD3c68D5999240c7ACa.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:46.404872
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 768
Estimated Gas Usage: 892 - 987
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x6c8b098427D17c8afe8d9bD3c68D5999240c7ACa.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:20.319694
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: getModuleAddress(string)
PC address: 1453
Estimated Gas Usage: 451 - 546
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x6c8b098427D17c8afe8d9bD3c68D5999240c7ACa.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.303697
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_BUSD
Function name: handleDeposit(address[],uint256[])
PC address: 1744
Estimated Gas Usage: 452 - 547
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x6c8b098427D17c8afe8d9bD3c68D5999240c7ACa.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.908492
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_BUSD
Function name: handleDeposit(address[],uint256[])
PC address: 1746
Estimated Gas Usage: 452 - 547
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x6c8b098427D17c8afe8d9bD3c68D5999240c7ACa.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:14.851224
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_BUSD
Function name: handleDeposit(address[],uint256[])
PC address: 1892
Estimated Gas Usage: 785 - 3562
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x6c8b098427D17c8afe8d9bD3c68D5999240c7ACa.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:32.446889
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_BUSD
Function name: handleDeposit(address[],uint256[])
PC address: 1894
Estimated Gas Usage: 785 - 3562
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x6c8b098427D17c8afe8d9bD3c68D5999240c7ACa.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:29.124632
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_BUSD
Function name: getModuleAddress(string)
PC address: 2176
Estimated Gas Usage: 407 - 502
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x6c8b098427D17c8afe8d9bD3c68D5999240c7ACa.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:09.185963
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_BUSD
Function name: withdraw(address,uint256[])
PC address: 2541
Estimated Gas Usage: 506 - 601
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x6c8b098427D17c8afe8d9bD3c68D5999240c7ACa.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:13.611706
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_BUSD
Function name: withdraw(address,uint256[])
PC address: 2543
Estimated Gas Usage: 506 - 601
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x6c8b098427D17c8afe8d9bD3c68D5999240c7ACa.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:21.256756
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_BUSD
Function name: supportedTokens()
PC address: 3158
Estimated Gas Usage: 1250 - 2097
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x6c8b098427D17c8afe8d9bD3c68D5999240c7ACa.sol:1597

function supportedTokens() public view returns(address[] memory){
        return _registeredTokens;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:49.652085
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_BUSD
Function name: supportedTokens()
PC address: 3198
Estimated Gas Usage: 1400 - 2623
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x6c8b098427D17c8afe8d9bD3c68D5999240c7ACa.sol:1597

function supportedTokens() public view returns(address[] memory){
        return _registeredTokens;
    }

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:03:17.407055
Transaction Length: 1
Severity: Low
Contract: CurveFiProtocol_BUSD
Function name: yTokens(uint256)
PC address: 13200
Estimated Gas Usage: 790 - 885
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x6c8b098427D17c8afe8d9bD3c68D5999240c7ACa.sol:1743

address[] public yTokens

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0xace87eea8517918634ef3d5d8885cdacbfc6297a.sol
Total states:1759
5.77668
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x73a1f80f8aed786490d8f706785d5d7d4e413358.sol
Total states:3478
3613.617993
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.620649
Transaction Length: 1
Severity: Low
Contract: AgnosticPrivateSale
Function name: allUsers(uint256)
PC address: 2894
Estimated Gas Usage: 723 - 818
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x73a1f80f8aed786490d8f706785d5d7d4e413358.sol:146

address[] public allUsers

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x4B2464D5FfaB717ab0Bd26E5E30cB432B47E1EEd.sol
Total states:52525
1082.527392
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.156122
Transaction Length: 1
Severity: High
Contract: AccessChecker
Function name: getModuleAddress(string)
PC address: 416
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x4B2464D5FfaB717ab0Bd26E5E30cB432B47E1EEd.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.883966
Transaction Length: 1
Severity: High
Contract: Module
Function name: getModuleAddress(string)
PC address: 416
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x4B2464D5FfaB717ab0Bd26E5E30cB432B47E1EEd.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.173661
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(string,string,uint8)
PC address: 1000
Estimated Gas Usage: 409 - 504
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x4B2464D5FfaB717ab0Bd26E5E30cB432B47E1EEd.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.390914
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(string,string,uint8)
PC address: 1151
Estimated Gas Usage: 751 - 3528
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x4B2464D5FfaB717ab0Bd26E5E30cB432B47E1EEd.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.716163
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[],uint256)
PC address: 2226
Estimated Gas Usage: 429 - 524
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x4B2464D5FfaB717ab0Bd26E5E30cB432B47E1EEd.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.868404
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[],uint256)
PC address: 2228
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x4B2464D5FfaB717ab0Bd26E5E30cB432B47E1EEd.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.429219
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[])
PC address: 2357
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x4B2464D5FfaB717ab0Bd26E5E30cB432B47E1EEd.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:17.408459
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[])
PC address: 2359
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x4B2464D5FfaB717ab0Bd26E5E30cB432B47E1EEd.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:39.116182
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: getModuleAddress(string)
PC address: 2526
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x4B2464D5FfaB717ab0Bd26E5E30cB432B47E1EEd.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.305368
Transaction Length: 1
Severity: High
Contract: SavingsModule
Function name: deposit(address,address[],uint256[])
PC address: 2654
Estimated Gas Usage: 419 - 514
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x4B2464D5FfaB717ab0Bd26E5E30cB432B47E1EEd.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.600272
Transaction Length: 1
Severity: High
Contract: SavingsModule
Function name: deposit(address,address[],uint256[])
PC address: 2656
Estimated Gas Usage: 419 - 514
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x4B2464D5FfaB717ab0Bd26E5E30cB432B47E1EEd.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:18.775984
Transaction Length: 1
Severity: High
Contract: SavingsModule
Function name: deposit(address,address[],uint256[])
PC address: 2802
Estimated Gas Usage: 752 - 3529
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x4B2464D5FfaB717ab0Bd26E5E30cB432B47E1EEd.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:30.165014
Transaction Length: 1
Severity: High
Contract: SavingsModule
Function name: deposit(address,address[],uint256[])
PC address: 2804
Estimated Gas Usage: 752 - 3529
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x4B2464D5FfaB717ab0Bd26E5E30cB432B47E1EEd.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:50.215448
Transaction Length: 1
Severity: High
Contract: SavingsModule
Function name: getModuleAddress(string)
PC address: 3167
Estimated Gas Usage: 451 - 546
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x4B2464D5FfaB717ab0Bd26E5E30cB432B47E1EEd.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:43.923451
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(address,string,string)
PC address: 3179
Estimated Gas Usage: 485 - 580
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x4B2464D5FfaB717ab0Bd26E5E30cB432B47E1EEd.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.157491
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3249
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x4B2464D5FfaB717ab0Bd26E5E30cB432B47E1EEd.sol:34

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:07:04.576459
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(address,string,string)
PC address: 3330
Estimated Gas Usage: 827 - 3604
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x4B2464D5FfaB717ab0Bd26E5E30cB432B47E1EEd.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.389351
Transaction Length: 1
Severity: Low
Contract: DistributionToken
Function name: distributions(uint256)
PC address: 3405
Estimated Gas Usage: 724 - 819
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x4B2464D5FfaB717ab0Bd26E5E30cB432B47E1EEd.sol:1328

Distribution[] public distributions

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.673433
Transaction Length: 2
Severity: High
Contract: ERC20Burnable
Function name: increaseAllowance(address,uint256)
PC address: 3429
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x4B2464D5FfaB717ab0Bd26E5E30cB432B47E1EEd.sol:34

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.759172
Transaction Length: 2
Severity: High
Contract: ERC20Mintable
Function name: increaseAllowance(address,uint256)
PC address: 4214
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x4B2464D5FfaB717ab0Bd26E5E30cB432B47E1EEd.sol:34

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:47.330522
Transaction Length: 1
Severity: Low
Contract: PoolToken
Function name: distributions(uint256)
PC address: 6392
Estimated Gas Usage: 768 - 863
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x4B2464D5FfaB717ab0Bd26E5E30cB432B47E1EEd.sol:1328

Distribution[] public distributions

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.571793
Transaction Length: 2
Severity: High
Contract: DistributionToken
Function name: increaseAllowance(address,uint256)
PC address: 6759
Estimated Gas Usage: 1104 - 1579
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x4B2464D5FfaB717ab0Bd26E5E30cB432B47E1EEd.sol:34

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:03:21.876988
Transaction Length: 1
Severity: Low
Contract: SavingsModule
Function name: registeredPoolTokens()
PC address: 16017
Estimated Gas Usage: 1175 - 1646
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x4B2464D5FfaB717ab0Bd26E5E30cB432B47E1EEd.sol:2311

registeredProtocols[i]

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0xb09b1500e55b845966705f0881187f4d3d8b64d8.sol
Total states:14554
34.387122
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:01.696352
Transaction Length: 1
Severity: Low
Contract: TokenTimelock
Function name: release()
PC address: 1359
Estimated Gas Usage: 4557 - 41005
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop5/0xb09b1500e55b845966705f0881187f4d3d8b64d8.sol:103

token.transfer(to, value)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.934646
Transaction Length: 2
Severity: High
Contract: StandardToken
Function name: increaseApproval(address,uint256)
PC address: 4235
Estimated Gas Usage: 980 - 1455
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xb09b1500e55b845966705f0881187f4d3d8b64d8.sol:31

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x0d0f5c0ed5cbc91b7bdd557cfd095c88cc66657f.sol
Total states:463
0.775288
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x7fb9fbbb6ab369808df6d92539547093a56fa76d.sol
Total states:305
3.925737
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x365c0f05ccfae37899b55d79459eb7c0fcb20e3a.sol
Total states:24322
95.308965
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.100778
Transaction Length: 0
Severity: High
Contract: LexAIR
Function name: constructor
PC address: 110
Estimated Gas Usage: 257 - 3030
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x365c0f05ccfae37899b55d79459eb7c0fcb20e3a.sol:10

█████╗

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.112070
Transaction Length: 0
Severity: High
Contract: LexAIR
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x365c0f05ccfae37899b55d79459eb7c0fcb20e3a.sol:9

█╔██╗ 
███████╗█

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.437247
Transaction Length: 1
Severity: High
Contract: LexAIR
Function name: list(address[])
PC address: 273
Estimated Gas Usage: 319 - 414
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x365c0f05ccfae37899b55d79459eb7c0fcb20e3a.sol:6

     ████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.780614
Transaction Length: 1
Severity: High
Contract: LexAIR
Function name: list(address[])
PC address: 275
Estimated Gas Usage: 319 - 414
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x365c0f05ccfae37899b55d79459eb7c0fcb20e3a.sol:3

*/

/*
██╗     █████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:18.414255
Transaction Length: 1
Severity: High
Contract: LexAIR
Function name: updateMessage(string)
PC address: 396
Estimated Gas Usage: 341 - 436
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x365c0f05ccfae37899b55d79459eb7c0fcb20e3a.sol:3

*/

/*
██╗     ████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:22.371640
Transaction Length: 1
Severity: High
Contract: LexAIR
Function name: delist(address[])
PC address: 515
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x365c0f05ccfae37899b55d79459eb7c0fcb20e3a.sol:6

     ████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:25.514948
Transaction Length: 1
Severity: High
Contract: LexAIR
Function name: delist(address[])
PC address: 517
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x365c0f05ccfae37899b55d79459eb7c0fcb20e3a.sol:3

*/

/*
██╗     █████

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0xfee3d089590625e16681cf87483d455b39f4715b.sol
Total states:426
0.78991
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0xb2c56373aabe89ee34bbcf8fcc874dbc00bc7057.sol
Total states:822
12.364078
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol
Total states:48547
325.607374
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.519133
Transaction Length: 1
Severity: Low
Contract: Getters
Function name: expiringCouponsAtIndex(uint256,uint256)
PC address: 2821
Estimated Gas Usage: 1090 - 1375
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:1153

_state.epochs[epoch].coupons.expiring[i]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.926216
Transaction Length: 1
Severity: High
Contract: Getters
Function name: totalNet()
PC address: 4187
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:9

solidity ^0.5.1

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.809944
Transaction Length: 1
Severity: High
Contract: Getters
Function name: totalNet()
PC address: 4190
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:5

*/



//pragma solidity ^0.5.17;
pragma sol

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.376651
Transaction Length: 1
Severity: High
Contract: Getters
Function name: totalNet()
PC address: 4202
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:1048

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.909684
Transaction Length: 1
Severity: High
Contract: Comptroller
Function name: totalNet()
PC address: 4387
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:9

solidity ^0.5.1

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.755619
Transaction Length: 1
Severity: High
Contract: Permission
Function name: totalNet()
PC address: 4387
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:9

solidity ^0.5.1

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.956028
Transaction Length: 1
Severity: High
Contract: Regulator
Function name: totalNet()
PC address: 4387
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:9

solidity ^0.5.1

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.726700
Transaction Length: 1
Severity: High
Contract: Setters
Function name: totalNet()
PC address: 4387
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:9

solidity ^0.5.1

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.553698
Transaction Length: 1
Severity: High
Contract: Comptroller
Function name: totalNet()
PC address: 4390
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:5

*/



//pragma solidity ^0.5.17;
pragma sol

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.632284
Transaction Length: 1
Severity: High
Contract: Permission
Function name: totalNet()
PC address: 4390
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:5

*/



//pragma solidity ^0.5.17;
pragma sol

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.826065
Transaction Length: 1
Severity: High
Contract: Regulator
Function name: totalNet()
PC address: 4390
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:5

*/



//pragma solidity ^0.5.17;
pragma sol

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.137565
Transaction Length: 1
Severity: High
Contract: Setters
Function name: totalNet()
PC address: 4390
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:5

*/



//pragma solidity ^0.5.17;
pragma sol

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.143971
Transaction Length: 1
Severity: High
Contract: Comptroller
Function name: totalNet()
PC address: 4402
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:1048

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.212382
Transaction Length: 1
Severity: High
Contract: Permission
Function name: totalNet()
PC address: 4402
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:1048

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.402017
Transaction Length: 1
Severity: High
Contract: Regulator
Function name: totalNet()
PC address: 4402
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:1048

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.899230
Transaction Length: 1
Severity: High
Contract: Setters
Function name: totalNet()
PC address: 4402
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:1048

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.479479
Transaction Length: 1
Severity: High
Contract: Market
Function name: totalNet()
PC address: 5379
Estimated Gas Usage: 2863 - 37757
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:9

solidity ^0.5.1

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.085793
Transaction Length: 1
Severity: High
Contract: Market
Function name: totalNet()
PC address: 5382
Estimated Gas Usage: 2863 - 37757
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:5

*/



//pragma solidity ^0.5.17;
pragma sol

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.923934
Transaction Length: 1
Severity: High
Contract: Market
Function name: totalNet()
PC address: 5394
Estimated Gas Usage: 2863 - 37757
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:1048

dollar().totalSupply()

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.744823
Transaction Length: 1
Severity: High
Contract: Getters
Function name: totalNet()
PC address: 5628
Estimated Gas Usage: 2775 - 37669
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:61

unterpart to Solidity's

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.482135
Transaction Length: 1
Severity: High
Contract: Bonding
Function name: totalNet()
PC address: 5771
Estimated Gas Usage: 2753 - 37647
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:9

solidity ^0.5.1

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.400610
Transaction Length: 1
Severity: High
Contract: Bonding
Function name: totalNet()
PC address: 5774
Estimated Gas Usage: 2753 - 37647
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:5

*/



//pragma solidity ^0.5.17;
pragma sol

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.952282
Transaction Length: 1
Severity: High
Contract: Bonding
Function name: totalNet()
PC address: 5786
Estimated Gas Usage: 2753 - 37647
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:1048

dollar().totalSupply()

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.641624
Transaction Length: 1
Severity: High
Contract: Comptroller
Function name: totalNet()
PC address: 5918
Estimated Gas Usage: 2775 - 37669
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:79

or.
     *
     * Requi

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.283843
Transaction Length: 1
Severity: High
Contract: Permission
Function name: totalNet()
PC address: 5918
Estimated Gas Usage: 2775 - 37669
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:79

or.
     *
     * Requi

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.507598
Transaction Length: 1
Severity: High
Contract: Regulator
Function name: totalNet()
PC address: 5918
Estimated Gas Usage: 2775 - 37669
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:79

or.
     *
     * Requi

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:06.282484
Transaction Length: 1
Severity: High
Contract: Setters
Function name: totalNet()
PC address: 5918
Estimated Gas Usage: 2775 - 37669
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:79

or.
     *
     * Requi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.467766
Transaction Length: 1
Severity: High
Contract: Market
Function name: couponPremium(uint256)
PC address: 6066
Estimated Gas Usage: 2510 - 37404
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:9

solidity ^0.5.1

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.039861
Transaction Length: 1
Severity: High
Contract: Market
Function name: couponPremium(uint256)
PC address: 6069
Estimated Gas Usage: 2510 - 37404
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:5

*/



//pragma solidity ^0.5.17;
pragma sol

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.362385
Transaction Length: 1
Severity: High
Contract: Market
Function name: couponPremium(uint256)
PC address: 6081
Estimated Gas Usage: 2510 - 37404
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:2152

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.541964
Transaction Length: 1
Severity: High
Contract: Implementation
Function name: totalNet()
PC address: 8369
Estimated Gas Usage: 2819 - 37713
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:9

solidity ^0.5.1

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.421359
Transaction Length: 1
Severity: High
Contract: Implementation
Function name: totalNet()
PC address: 8372
Estimated Gas Usage: 2819 - 37713
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:5

*/



//pragma solidity ^0.5.17;
pragma sol

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.993790
Transaction Length: 1
Severity: High
Contract: Implementation
Function name: totalNet()
PC address: 8384
Estimated Gas Usage: 2819 - 37713
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:1048

dollar().totalSupply()

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.010384
Transaction Length: 1
Severity: High
Contract: Bonding
Function name: totalNet()
PC address: 10094
Estimated Gas Usage: 2753 - 37647
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:88

= 0) {
            retu

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:15.587494
Transaction Length: 1
Severity: Low
Contract: Market
Function name: purchaseCoupons(uint256)
PC address: 10333
Estimated Gas Usage: 703 - 1362
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:1756

result[i]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.720385
Transaction Length: 1
Severity: High
Contract: Implementation
Function name: couponPremium(uint256)
PC address: 10453
Estimated Gas Usage: 2533 - 37427
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:9

solidity ^0.5.1

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.938704
Transaction Length: 1
Severity: High
Contract: Implementation
Function name: couponPremium(uint256)
PC address: 10456
Estimated Gas Usage: 2533 - 37427
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:5

*/



//pragma solidity ^0.5.17;
pragma sol

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.327888
Transaction Length: 1
Severity: High
Contract: Implementation
Function name: couponPremium(uint256)
PC address: 10468
Estimated Gas Usage: 2533 - 37427
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:2152

dollar().totalSupply()

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:06.030007
Transaction Length: 1
Severity: High
Contract: Market
Function name: totalNet()
PC address: 12180
Estimated Gas Usage: 2863 - 37757
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:109

(uint256 a, uint256 b) 

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:06.118649
Transaction Length: 1
Severity: High
Contract: Implementation
Function name: totalNet()
PC address: 24692
Estimated Gas Usage: 2819 - 37713
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:143

* Requirements:
     * 

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x95DFe0152cA29697c4a78F105888F2ef8d0bccf2.sol
Total states:22774
1087.907491
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.997241
Transaction Length: 1
Severity: High
Contract: Module
Function name: getModuleAddress(string)
PC address: 416
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x95DFe0152cA29697c4a78F105888F2ef8d0bccf2.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.538750
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 648
Estimated Gas Usage: 386 - 481
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x95DFe0152cA29697c4a78F105888F2ef8d0bccf2.sol:5

openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.025887
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 650
Estimated Gas Usage: 386 - 481
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x95DFe0152cA29697c4a78F105888F2ef8d0bccf2.sol:3

*/

// File: @openzeppelin\upgrades\

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.725558
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 733
Estimated Gas Usage: 562 - 657
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x95DFe0152cA29697c4a78F105888F2ef8d0bccf2.sol:5

openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:19.922543
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 735
Estimated Gas Usage: 562 - 657
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x95DFe0152cA29697c4a78F105888F2ef8d0bccf2.sol:3

*/

// File: @openzeppelin\upgrades\

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:31.662448
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 818
Estimated Gas Usage: 738 - 833
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x95DFe0152cA29697c4a78F105888F2ef8d0bccf2.sol:5

openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:56.992951
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 820
Estimated Gas Usage: 738 - 833
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x95DFe0152cA29697c4a78F105888F2ef8d0bccf2.sol:3

*/

// File: @openzeppelin\upgrades\

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:18.635831
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 903
Estimated Gas Usage: 914 - 1009
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x95DFe0152cA29697c4a78F105888F2ef8d0bccf2.sol:5

openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:44.241622
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 905
Estimated Gas Usage: 914 - 1009
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x95DFe0152cA29697c4a78F105888F2ef8d0bccf2.sol:3

*/

// File: @openzeppelin\upgrades\

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.887472
Transaction Length: 1
Severity: High
Contract: StakingPoolBase
Function name: stake(uint256,bytes)
PC address: 914
Estimated Gas Usage: 414 - 509
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x95DFe0152cA29697c4a78F105888F2ef8d0bccf2.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.780351
Transaction Length: 1
Severity: High
Contract: StakingPool
Function name: stake(uint256,bytes)
PC address: 1124
Estimated Gas Usage: 459 - 554
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x95DFe0152cA29697c4a78F105888F2ef8d0bccf2.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.403659
Transaction Length: 1
Severity: High
Contract: StakingPoolADEL
Function name: stake(uint256,bytes)
PC address: 1124
Estimated Gas Usage: 459 - 554
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x95DFe0152cA29697c4a78F105888F2ef8d0bccf2.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:25.194279
Transaction Length: 1
Severity: High
Contract: StakingPoolBase
Function name: stakeFor(address,uint256,bytes)
PC address: 1143
Estimated Gas Usage: 469 - 564
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x95DFe0152cA29697c4a78F105888F2ef8d0bccf2.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:15.287047
Transaction Length: 1
Severity: High
Contract: StakingPool
Function name: stakeFor(address,uint256,bytes)
PC address: 1353
Estimated Gas Usage: 447 - 542
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x95DFe0152cA29697c4a78F105888F2ef8d0bccf2.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:18.547576
Transaction Length: 1
Severity: High
Contract: StakingPoolADEL
Function name: stakeFor(address,uint256,bytes)
PC address: 1353
Estimated Gas Usage: 447 - 542
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x95DFe0152cA29697c4a78F105888F2ef8d0bccf2.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:18.384285
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: getModuleAddress(string)
PC address: 1590
Estimated Gas Usage: 341 - 436
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x95DFe0152cA29697c4a78F105888F2ef8d0bccf2.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:26.184982
Transaction Length: 1
Severity: High
Contract: StakingPoolBase
Function name: getPersonalStakeUnlockedTimestamps(address)
PC address: 1705
Estimated Gas Usage: 2606 - 4209
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x95DFe0152cA29697c4a78F105888F2ef8d0bccf2.sol:1539

function getPersonalStakeUnlockedTimestamps(address _address) external view returns (uint256[] memory) {
    uint256[] memory timestamps;
    (timestamps,,) = getPersonalStakes(_address);

    return timestamps;
  }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:55.380529
Transaction Length: 1
Severity: High
Contract: StakingPoolBase
Function name: getPersonalStakeUnlockedTimestamps(address)
PC address: 1745
Estimated Gas Usage: 2756 - 4735
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x95DFe0152cA29697c4a78F105888F2ef8d0bccf2.sol:1539

function getPersonalStakeUnlockedTimestamps(address _address) external view returns (uint256[] memory) {
    uint256[] memory timestamps;
    (timestamps,,) = getPersonalStakes(_address);

    return timestamps;
  }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:16.595285
Transaction Length: 1
Severity: High
Contract: StakingPool
Function name: getPersonalStakeUnlockedTimestamps(address)
PC address: 1915
Estimated Gas Usage: 2629 - 4232
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x95DFe0152cA29697c4a78F105888F2ef8d0bccf2.sol:1539

function getPersonalStakeUnlockedTimestamps(address _address) external view returns (uint256[] memory) {
    uint256[] memory timestamps;
    (timestamps,,) = getPersonalStakes(_address);

    return timestamps;
  }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:32.964795
Transaction Length: 1
Severity: High
Contract: StakingPoolADEL
Function name: getPersonalStakeUnlockedTimestamps(address)
PC address: 1915
Estimated Gas Usage: 2629 - 4232
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x95DFe0152cA29697c4a78F105888F2ef8d0bccf2.sol:1539

function getPersonalStakeUnlockedTimestamps(address _address) external view returns (uint256[] memory) {
    uint256[] memory timestamps;
    (timestamps,,) = getPersonalStakes(_address);

    return timestamps;
  }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.456324
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3249
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x95DFe0152cA29697c4a78F105888F2ef8d0bccf2.sol:212

a + b

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:59.258040
Transaction Length: 1
Severity: Low
Contract: StakingPoolBase
Function name: stakeFor(address,uint256,bytes)
PC address: 13555
Estimated Gas Usage: 2998 - 7001
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop5/0x95DFe0152cA29697c4a78F105888F2ef8d0bccf2.sol:1397

stakingToken.transferFrom(_address, address(this), _amount)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol
Total states:10676
563.529141
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.917650
Transaction Length: 1
Severity: High
Contract: DeployFactory
Function name: createCashBox(address,address,uint256,uint256,string,string,string)
PC address: 386
Estimated Gas Usage: 438 - 533
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol:3



*/



// File: contracts/StockLiq

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.066050
Transaction Length: 1
Severity: High
Contract: DeployFactory
Function name: createCashBox(address,address,uint256,uint256,string,string,string)
PC address: 540
Estimated Gas Usage: 780 - 3557
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol:3



*/



// File: contracts/StockLiq

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:31.597445
Transaction Length: 1
Severity: High
Contract: DeployFactory
Function name: createCashBox(address,address,uint256,uint256,string,string,string)
PC address: 694
Estimated Gas Usage: 1122 - 6581
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol:3



*/



// File: contracts/StockLiq

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:52.958054
Transaction Length: 1
Severity: High
Contract: DeployFactory
Function name: getCashBoxesByUser(address)
PC address: 1122
Estimated Gas Usage: 1462 - 3528
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol:1645

function getCashBoxesByUser(address account)

        external

        view

        returns (address[] memory)

    {

        uint256 len = cashBoxes.length;

        address[] memory cashBoxesByUser = new address[](len);

        uint256 index = 0;



        for (uint256 i = 0; i < len; i++) {

            address payable cashBoxAddress = address(uint160(cashBoxes[i]));

            StockLiquiditator cashbox = StockLiquiditator(cashBoxAddress);



            if (cashbox.owner() == account) {

                cashBoxesByUser[index] = cashBoxes[i];

                index++;

            }

        }



        // to remove zero addresses from the result

        address[] memory result = new address[](index);

        for (uint256 i = 0; i < result.length; i++) {

            result[i] = cashBoxesByUser[i];

        }



        return result;

    }

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:54.811560
Transaction Length: 1
Severity: Low
Contract: DeployFactory
Function name: cashBoxes(uint256)
PC address: 2376
Estimated Gas Usage: 678 - 773
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol:1571

address[] public cashBoxes

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:09:01.935567
Transaction Length: 1
Severity: Low
Contract: DeployFactory
Function name: getCashBoxesByUser(address)
PC address: 3030
Estimated Gas Usage: 982 - 1829
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol:1689

cashBoxesByUser[i]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.625844
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3244
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol:238

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x10e612f9c80ed35d74a6b34aaeb18db881ccb51e.sol
Total states:474
1.015945
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.094484
Transaction Length: 0
Severity: High
Contract: EthMadness
Function name: constructor
PC address: 147
Estimated Gas Usage: 5724 - 28827
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x10e612f9c80ed35d74a6b34aaeb18db881ccb51e.sol:15

function approve(addr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.109852
Transaction Length: 0
Severity: High
Contract: EthMadness
Function name: constructor
PC address: 149
Estimated Gas Usage: 5724 - 28827
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x10e612f9c80ed35d74a6b34aaeb18db881ccb51e.sol:13

 returns (bool);

    function approve(addre

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x67C1d2552a0cE8572AAfFD0c9664EeA7edbBCeF3.sol
Total states:14979
193.918195
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.034067
Transaction Length: 0
Severity: High
Contract: ERC721Metadata
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x67C1d2552a0cE8572AAfFD0c9664EeA7edbBCeF3.sol:12

PDX-License-Identifier: GPL-3.0-or-later

/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.043730
Transaction Length: 0
Severity: High
Contract: Title
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x67C1d2552a0cE8572AAfFD0c9664EeA7edbBCeF3.sol:12

PDX-License-Identifier: GPL-3.0-or-later

/

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:20.747252
Transaction Length: 1
Severity: High
Contract: Math
Function name: safeSub(uint256,uint256)
PC address: 820
Estimated Gas Usage: 309 - 404
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x67C1d2552a0cE8572AAfFD0c9664EeA7edbBCeF3.sol:545

x - y

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:22.929422
Transaction Length: 1
Severity: Low
Contract: Math
Function name: safeDiv(uint256,uint256)
PC address: 959
Estimated Gas Usage: 324 - 419
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x67C1d2552a0cE8572AAfFD0c9664EeA7edbBCeF3.sol:553

x / y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.329840
Transaction Length: 1
Severity: High
Contract: Math
Function name: rdiv(uint256,uint256)
PC address: 985
Estimated Gas Usage: 382 - 477
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x67C1d2552a0cE8572AAfFD0c9664EeA7edbBCeF3.sol:549

x * y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.002037
Transaction Length: 1
Severity: High
Contract: Math
Function name: rdiv(uint256,uint256)
PC address: 1128
Estimated Gas Usage: 496 - 591
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x67C1d2552a0cE8572AAfFD0c9664EeA7edbBCeF3.sol:541

x + y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.975464
Transaction Length: 1
Severity: High
Contract: ERC721
Function name: safeTransferFrom(address,address,uint256,bytes)
PC address: 1136
Estimated Gas Usage: 477 - 572
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x67C1d2552a0cE8572AAfFD0c9664EeA7edbBCeF3.sol:3

*/

// Verified using https://dapp.

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:42.910203
Transaction Length: 1
Severity: Medium
Contract: Shelf
Function name: issue(address,uint256)
PC address: 1819
Estimated Gas Usage: 22744 - 157449
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 11416
Offset: 12054
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop8/0x67C1d2552a0cE8572AAfFD0c9664EeA7edbBCeF3.sol:1410

function issue(address registry_, uint token_) external note returns (uint) {
        require(NFTLike_2(registry_).ownerOf(token_) == msg.sender, "nft-not-owned");
        bytes32 nft = keccak256(abi.encodePacked(registry_, token_));
        require(nftlookup[nft] == 0, "nft-in-use");
        uint loan = title.issue(msg.sender);
        nftlookup[nft] = loan;
        shelf[loan].registry = registry_;
        shelf[loan].tokenId = token_;

        return loan;
    }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:51.700676
Transaction Length: 2
Severity: Medium
Contract: Shelf
Function name: lock(uint256)
PC address: 2627
Estimated Gas Usage: 7640 - 81359
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 15479
Offset: 16139
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop8/0x67C1d2552a0cE8572AAfFD0c9664EeA7edbBCeF3.sol:1513

function lock(uint loan) external owner(loan) note {
        if(address(subscriber) != address(0)) {
            subscriber.unlockEvent(loan);
        }
        NFTLike_2(shelf[loan].registry).transferFrom(msg.sender, address(this), shelf[loan].tokenId);
    }

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:01.713883
Transaction Length: 1
Severity: Low
Contract: Shelf
Function name: withdraw(uint256,uint256,address)
PC address: 4850
Estimated Gas Usage: 1674 - 2475
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x67C1d2552a0cE8572AAfFD0c9664EeA7edbBCeF3.sol:1289

title.ownerOf(loan)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:06.547742
Transaction Length: 2
Severity: Low
Contract: Shelf
Function name: withdraw(uint256,uint256,address)
PC address: 4850
Estimated Gas Usage: 1674 - 2475
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x67C1d2552a0cE8572AAfFD0c9664EeA7edbBCeF3.sol:1289

title.ownerOf(loan)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:03.210165
Transaction Length: 1
Severity: Low
Contract: Shelf
Function name: close(uint256)
PC address: 6219
Estimated Gas Usage: 1577 - 2378
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x67C1d2552a0cE8572AAfFD0c9664EeA7edbBCeF3.sol:1423

pile.debt(loan)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:12.357223
Transaction Length: 2
Severity: Low
Contract: Shelf
Function name: close(uint256)
PC address: 6219
Estimated Gas Usage: 1577 - 2378
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x67C1d2552a0cE8572AAfFD0c9664EeA7edbBCeF3.sol:1423

pile.debt(loan)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:36.755751
Transaction Length: 1
Severity: Low
Contract: Shelf
Function name: borrow(uint256,uint256)
PC address: 8042
Estimated Gas Usage: 1618 - 2419
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x67C1d2552a0cE8572AAfFD0c9664EeA7edbBCeF3.sol:1289

title.ownerOf(loan)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:17.730678
Transaction Length: 2
Severity: Low
Contract: Shelf
Function name: borrow(uint256,uint256)
PC address: 8042
Estimated Gas Usage: 1618 - 2419
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x67C1d2552a0cE8572AAfFD0c9664EeA7edbBCeF3.sol:1289

title.ownerOf(loan)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:38.303720
Transaction Length: 1
Severity: Low
Contract: Shelf
Function name: unlock(uint256)
PC address: 9574
Estimated Gas Usage: 1591 - 2392
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x67C1d2552a0cE8572AAfFD0c9664EeA7edbBCeF3.sol:1289

title.ownerOf(loan)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:24.023705
Transaction Length: 2
Severity: Low
Contract: Shelf
Function name: unlock(uint256)
PC address: 9574
Estimated Gas Usage: 1591 - 2392
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x67C1d2552a0cE8572AAfFD0c9664EeA7edbBCeF3.sol:1289

title.ownerOf(loan)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:39.663127
Transaction Length: 1
Severity: Low
Contract: Shelf
Function name: unlock(uint256)
PC address: 9832
Estimated Gas Usage: 3739 - 39432
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x67C1d2552a0cE8572AAfFD0c9664EeA7edbBCeF3.sol:1523

pile.debt(loan)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:31.073045
Transaction Length: 2
Severity: Low
Contract: Shelf
Function name: unlock(uint256)
PC address: 9832
Estimated Gas Usage: 3739 - 39432
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x67C1d2552a0cE8572AAfFD0c9664EeA7edbBCeF3.sol:1523

pile.debt(loan)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:42.250923
Transaction Length: 1
Severity: Low
Contract: Shelf
Function name: issue(address,uint256)
PC address: 12054
Estimated Gas Usage: 3994 - 40206
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x67C1d2552a0cE8572AAfFD0c9664EeA7edbBCeF3.sol:1414

title.issue(msg.sender)

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:43.358120
Transaction Length: 1
Severity: High
Contract: Shelf
Function name: safeSub(uint256,uint256)
PC address: 14144
Estimated Gas Usage: 399 - 494
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x67C1d2552a0cE8572AAfFD0c9664EeA7edbBCeF3.sol:545

x - y

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:45.603961
Transaction Length: 1
Severity: Low
Contract: Shelf
Function name: safeDiv(uint256,uint256)
PC address: 14283
Estimated Gas Usage: 325 - 420
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x67C1d2552a0cE8572AAfFD0c9664EeA7edbBCeF3.sol:553

x / y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.293532
Transaction Length: 1
Severity: High
Contract: Shelf
Function name: rdiv(uint256,uint256)
PC address: 14439
Estimated Gas Usage: 472 - 567
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x67C1d2552a0cE8572AAfFD0c9664EeA7edbBCeF3.sol:549

x * y

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:47.231477
Transaction Length: 1
Severity: Low
Contract: Shelf
Function name: repay(uint256,uint256)
PC address: 14748
Estimated Gas Usage: 1639 - 2440
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x67C1d2552a0cE8572AAfFD0c9664EeA7edbBCeF3.sol:1289

title.ownerOf(loan)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:37.672075
Transaction Length: 2
Severity: Low
Contract: Shelf
Function name: repay(uint256,uint256)
PC address: 14748
Estimated Gas Usage: 1639 - 2440
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x67C1d2552a0cE8572AAfFD0c9664EeA7edbBCeF3.sol:1289

title.ownerOf(loan)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:48.656239
Transaction Length: 1
Severity: Low
Contract: Shelf
Function name: lock(uint256)
PC address: 15479
Estimated Gas Usage: 1545 - 2346
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x67C1d2552a0cE8572AAfFD0c9664EeA7edbBCeF3.sol:1289

title.ownerOf(loan)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:43.551328
Transaction Length: 2
Severity: Low
Contract: Shelf
Function name: lock(uint256)
PC address: 15479
Estimated Gas Usage: 1545 - 2346
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x67C1d2552a0cE8572AAfFD0c9664EeA7edbBCeF3.sol:1289

title.ownerOf(loan)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:50.660025
Transaction Length: 1
Severity: Low
Contract: Shelf
Function name: lock(uint256)
PC address: 16139
Estimated Gas Usage: 4797 - 41390
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x67C1d2552a0cE8572AAfFD0c9664EeA7edbBCeF3.sol:1517

NFTLike_2(shelf[loan].registry).transferFrom(msg.sender, address(this), shelf[loan].tokenId)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:50.932217
Transaction Length: 2
Severity: Low
Contract: Shelf
Function name: lock(uint256)
PC address: 16139
Estimated Gas Usage: 4797 - 41390
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x67C1d2552a0cE8572AAfFD0c9664EeA7edbBCeF3.sol:1517

NFTLike_2(shelf[loan].registry).transferFrom(msg.sender, address(this), shelf[loan].tokenId)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:22.390453
Transaction Length: 1
Severity: High
Contract: Shelf
Function name: rdiv(uint256,uint256)
PC address: 16964
Estimated Gas Usage: 586 - 681
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x67C1d2552a0cE8572AAfFD0c9664EeA7edbBCeF3.sol:541

x + y

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x49c97ca4bc305fc0e9d3dcb3b1647e5551dc1159.sol
Total states:35650
173.313195
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.244181
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1004
Estimated Gas Usage: 417 - 512
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x49c97ca4bc305fc0e9d3dcb3b1647e5551dc1159.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.390132
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1006
Estimated Gas Usage: 417 - 512
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x49c97ca4bc305fc0e9d3dcb3b1647e5551dc1159.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.326238
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1089
Estimated Gas Usage: 593 - 688
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x49c97ca4bc305fc0e9d3dcb3b1647e5551dc1159.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:22.827223
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1091
Estimated Gas Usage: 593 - 688
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x49c97ca4bc305fc0e9d3dcb3b1647e5551dc1159.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.732308
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1149
Estimated Gas Usage: 440 - 535
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x49c97ca4bc305fc0e9d3dcb3b1647e5551dc1159.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.572312
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1151
Estimated Gas Usage: 440 - 535
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x49c97ca4bc305fc0e9d3dcb3b1647e5551dc1159.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.263273
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1234
Estimated Gas Usage: 616 - 711
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x49c97ca4bc305fc0e9d3dcb3b1647e5551dc1159.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:22.394570
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1236
Estimated Gas Usage: 616 - 711
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x49c97ca4bc305fc0e9d3dcb3b1647e5551dc1159.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.966731
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeBP(uint256)
PC address: 2585
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x49c97ca4bc305fc0e9d3dcb3b1647e5551dc1159.sol:784

uint[] public bonusRangeBP

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.388010
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3595
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x49c97ca4bc305fc0e9d3dcb3b1647e5551dc1159.sol:1226

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:04.170469
Transaction Length: 2
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3595
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x49c97ca4bc305fc0e9d3dcb3b1647e5551dc1159.sol:1226

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:38.479620
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeStart(uint256)
PC address: 6017
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x49c97ca4bc305fc0e9d3dcb3b1647e5551dc1159.sol:783

uint[] public bonusRangeStart

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:34.600842
Transaction Length: 1
Severity: Low
Contract: LidStaking
Function name: stakeHandlers(uint256)
PC address: 6118
Estimated Gas Usage: 790 - 885
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x49c97ca4bc305fc0e9d3dcb3b1647e5551dc1159.sol:961

IStakeHandler[] public stakeHandlers

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.696947
Transaction Length: 2
Severity: High
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6315
Estimated Gas Usage: 1699 - 2124
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x49c97ca4bc305fc0e9d3dcb3b1647e5551dc1159.sol:1111

stakeHandlers.length-1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:07.927138
Transaction Length: 2
Severity: Low
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6326
Estimated Gas Usage: 1709 - 2134
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x49c97ca4bc305fc0e9d3dcb3b1647e5551dc1159.sol:1111

stakeHandlers[stakeHandlers.length-1]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:34.708051
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: calculateRatePerEth(uint256,uint256,uint256)
PC address: 6866
Estimated Gas Usage: 955 - 1050
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x49c97ca4bc305fc0e9d3dcb3b1647e5551dc1159.sol:162

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.448451
Transaction Length: 1
Severity: High
Contract: LidStaking
Function name: findTaxAmount(uint256,uint256)
PC address: 13348
Estimated Gas Usage: 474 - 569
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x49c97ca4bc305fc0e9d3dcb3b1647e5551dc1159.sol:162

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:34.791296
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPoolBPs(uint256)
PC address: 15440
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x49c97ca4bc305fc0e9d3dcb3b1647e5551dc1159.sol:1227

uint[] public tokenPoolBPs

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x174ce5ccf640fe3958076cbeb88bc05c98e1727d2.sol
Total states:2352
5.337982
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.502187
Transaction Length: 1
Severity: High
Contract: Fund
Function name: Game(uint256)
PC address: 1956
Estimated Gas Usage: 1144 - 1569
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x174ce5ccf640fe3958076cbeb88bc05c98e1727d2.sol:83

_turns * priceAction

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x073ac467787c6a4ec93163dbe043b4a03bd60caf.sol
Total states:77
3.255088
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x46c468ff21a7c8402714aad00a979de608caac19.sol
Total states:3742
75.678176
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.956223
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: initialize(uint256,uint256,address[],uint256[],address)
PC address: 798
Estimated Gas Usage: 439 - 534
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x46c468ff21a7c8402714aad00a979de608caac19.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.237768
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: initialize(uint256,uint256,address[],uint256[],address)
PC address: 800
Estimated Gas Usage: 439 - 534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x46c468ff21a7c8402714aad00a979de608caac19.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.340135
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: initialize(uint256,uint256,address[],uint256[],address)
PC address: 883
Estimated Gas Usage: 615 - 710
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x46c468ff21a7c8402714aad00a979de608caac19.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:20.946230
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: initialize(uint256,uint256,address[],uint256[],address)
PC address: 885
Estimated Gas Usage: 615 - 710
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x46c468ff21a7c8402714aad00a979de608caac19.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:30.801994
Transaction Length: 1
Severity: Medium
Contract: LidTeamLock
Function name: startRelease()
PC address: 1036
Estimated Gas Usage: 20796 - 150675
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 4542
Offset: 4906
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop8/0x46c468ff21a7c8402714aad00a979de608caac19.sol:698

function startRelease() external {

        require(releaseStart == 0, "Has already started.");

        require(address(this).balance != 0, "Must have some ether deposited.");

        require(lidToken.balanceOf(address(this)) != 0, "Must have some lid deposited.");

        startingLid = lidToken.balanceOf(address(this));

        startingEth = address(this).balance;

        releaseStart = now.add(24 hours);

    }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:00.634859
Transaction Length: 2
Severity: Medium
Contract: LidTeamLock
Function name: startRelease()
PC address: 1036
Estimated Gas Usage: 20796 - 150675
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 4542
Offset: 4906
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop8/0x46c468ff21a7c8402714aad00a979de608caac19.sol:698

function startRelease() external {

        require(releaseStart == 0, "Has already started.");

        require(address(this).balance != 0, "Must have some ether deposited.");

        require(lidToken.balanceOf(address(this)) != 0, "Must have some lid deposited.");

        startingLid = lidToken.balanceOf(address(this));

        startingEth = address(this).balance;

        releaseStart = now.add(24 hours);

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:32.035153
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 1184
Estimated Gas Usage: 407 - 502
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x46c468ff21a7c8402714aad00a979de608caac19.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:34.833356
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 1186
Estimated Gas Usage: 407 - 502
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x46c468ff21a7c8402714aad00a979de608caac19.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:40.516943
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 1269
Estimated Gas Usage: 583 - 678
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x46c468ff21a7c8402714aad00a979de608caac19.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:53.107015
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 1271
Estimated Gas Usage: 583 - 678
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x46c468ff21a7c8402714aad00a979de608caac19.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.743530
Transaction Length: 1
Severity: Low
Contract: LidTeamLock
Function name: teamMemberBPs(uint256)
PC address: 1645
Estimated Gas Usage: 746 - 841
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x46c468ff21a7c8402714aad00a979de608caac19.sol:572

uint[] public teamMemberBPs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:11.729798
Transaction Length: 1
Severity: Low
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 5051
Estimated Gas Usage: 1070 - 1165
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x46c468ff21a7c8402714aad00a979de608caac19.sol:724

teamMemberAddresses[0]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:12.171247
Transaction Length: 1
Severity: Low
Contract: LidTeamLock
Function name: teamMemberAddresses(uint256)
PC address: 5622
Estimated Gas Usage: 678 - 773
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x46c468ff21a7c8402714aad00a979de608caac19.sol:570

address payable[] public teamMemberAddresses

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:29.786008
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: startRelease()
PC address: 6670
Estimated Gas Usage: 15736 - 125615
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x46c468ff21a7c8402714aad00a979de608caac19.sol:186

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x02708519CE8e710dB13F7C534DDF994cFa0B0Ca4.sol
Total states:475
5.953094
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x4a10ee6cb6508a3f38278153f846ec8f7885570d.sol
Total states:165
1239.130393
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:47.581901
Transaction Length: 1
Severity: High
Contract: Core
Function name: whitelistTokens(address[])
PC address: 1027
Estimated Gas Usage: 408 - 503
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x4a10ee6cb6508a3f38278153f846ec8f7885570d.sol:9

ma solidity 0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:51.297678
Transaction Length: 1
Severity: High
Contract: Core
Function name: whitelistTokens(address[])
PC address: 1029
Estimated Gas Usage: 408 - 503
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x4a10ee6cb6508a3f38278153f846ec8f7885570d.sol:3



*/



//pragma solidity 0.5.17;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:22.691759
Transaction Length: 1
Severity: High
Contract: Core
Function name: whitelistPeak(address,uint256[],bool)
PC address: 1236
Estimated Gas Usage: 418 - 513
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x4a10ee6cb6508a3f38278153f846ec8f7885570d.sol:9

ma solidity 0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:27.227605
Transaction Length: 1
Severity: High
Contract: Core
Function name: whitelistPeak(address,uint256[],bool)
PC address: 1238
Estimated Gas Usage: 418 - 513
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x4a10ee6cb6508a3f38278153f846ec8f7885570d.sol:3



*/



//pragma solidity 0.5.17;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.176959
Transaction Length: 1
Severity: High
Contract: Core
Function name: currentSystemState()
PC address: 2874
Estimated Gas Usage: 2273 - 37167
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x4a10ee6cb6508a3f38278153f846ec8f7885570d.sol:9

solidity 0.5.17

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.903776
Transaction Length: 1
Severity: High
Contract: Core
Function name: currentSystemState()
PC address: 2877
Estimated Gas Usage: 2322 - 37309
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x4a10ee6cb6508a3f38278153f846ec8f7885570d.sol:5

*/



//pragma solidity 0.5.17;
pragma soli

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.626242
Transaction Length: 1
Severity: High
Contract: Core
Function name: totalSystemAssets()
PC address: 2898
Estimated Gas Usage: 2322 - 37309
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x4a10ee6cb6508a3f38278153f846ec8f7885570d.sol:662

oracle.getPriceFeed()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.178709
Transaction Length: 1
Severity: High
Contract: Core
Function name: totalSystemAssets()
PC address: 2923
Estimated Gas Usage: 2322 - 37309
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x4a10ee6cb6508a3f38278153f846ec8f7885570d.sol:3

9

*/



//pragma sol

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.488741
Transaction Length: 1
Severity: High
Contract: Core
Function name: totalSystemAssets()
PC address: 2929
Estimated Gas Usage: 2322 - 37309
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x4a10ee6cb6508a3f38278153f846ec8f7885570d.sol:10

=0.5 <0.7.17;


--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.685391
Transaction Length: 1
Severity: High
Contract: Core
Function name: totalSystemAssets()
PC address: 2949
Estimated Gas Usage: 2380 - 37460
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x4a10ee6cb6508a3f38278153f846ec8f7885570d.sol:20

s the amount of token

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.832442
Transaction Length: 1
Severity: High
Contract: Core
Function name: totalSystemAssets()
PC address: 2951
Estimated Gas Usage: 2380 - 37460
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x4a10ee6cb6508a3f38278153f846ec8f7885570d.sol:19

/**
     * @dev Returns the amount of tokens

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:50.319085
Transaction Length: 1
Severity: High
Contract: Core
Function name: dusdToUsd(uint256,bool)
PC address: 14363
Estimated Gas Usage: 2389 - 37376
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x4a10ee6cb6508a3f38278153f846ec8f7885570d.sol:185

div(a, b, "SafeMath: division by zero")

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x41c6ff92688c283e3a9aaa2779ad25c571c0bd8d.sol
Total states:443
0.381916
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x9d21FDB292e69F3EF3d5De96D92248d314003fca.sol
Total states:5429
23.201078
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x038c12e33625736d28b55c137f974ef47315eacf2.sol
Total states:736
1.455852
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x22bed6e0df579e2c0adc6f325d9d898bc378a60f.sol
Total states:1076
14.935665
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0xDf625D21ab9aE7C74A1864265D6116EeaE9E94B2.sol
Total states:2203
46.093101
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.374059
Transaction Length: 1
Severity: High
Contract: EUSDReserves
Function name: migrateReserves(address,address[])
PC address: 305
Estimated Gas Usage: 352 - 447
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xDf625D21ab9aE7C74A1864265D6116EeaE9E94B2.sol:5

olidity 0.5.17;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.545861
Transaction Length: 1
Severity: High
Contract: EUSDReserves
Function name: migrateReserves(address,address[])
PC address: 307
Estimated Gas Usage: 352 - 447
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xDf625D21ab9aE7C74A1864265D6116EeaE9E94B2.sol:3

*/

//pragma solidity 0.5.17;
pragma

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x06d711011C81DF55ec4429F6C59F24BD4f89A6a0.sol
Total states:3053
25.170878
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.708412
Transaction Length: 1
Severity: High
Contract: MainnetIStableXToIStableXAssimilator
Function name: viewNumeraireAmountAndBalance(address,uint256)
PC address: 2164
Estimated Gas Usage: 3761 - 72885
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x06d711011C81DF55ec4429F6C59F24BD4f89A6a0.sol:936

_amount * precision

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:05.624855
Transaction Length: 1
Severity: Low
Contract: MainnetIStableXToIStableXAssimilator
Function name: outputRawAndGetBalance(address,uint256)
PC address: 2440
Estimated Gas Usage: 1179 - 1745
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x06d711011C81DF55ec4429F6C59F24BD4f89A6a0.sol:866

istablex.transfer(_dst, _amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:07.121016
Transaction Length: 1
Severity: Low
Contract: MainnetIStableXToIStableXAssimilator
Function name: intakeRawAndGetBalance(uint256)
PC address: 4216
Estimated Gas Usage: 1131 - 1792
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x06d711011C81DF55ec4429F6C59F24BD4f89A6a0.sol:826

istablex.transferFrom(msg.sender, address(this), _amount)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.452025
Transaction Length: 1
Severity: High
Contract: MainnetIStableXToIStableXAssimilator
Function name: intakeRawAndGetBalance(uint256)
PC address: 4795
Estimated Gas Usage: 5436 - 109312
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x06d711011C81DF55ec4429F6C59F24BD4f89A6a0.sol:834

_balance * _index

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.461005
Transaction Length: 1
Severity: High
Contract: MainnetIStableXToIStableXAssimilator
Function name: viewNumeraireBalance(address)
PC address: 5305
Estimated Gas Usage: 3721 - 72845
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x06d711011C81DF55ec4429F6C59F24BD4f89A6a0.sol:926

_balance * _index

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:13.524463
Transaction Length: 1
Severity: Low
Contract: MainnetIStableXToIStableXAssimilator
Function name: outputRaw(address,uint256)
PC address: 5527
Estimated Gas Usage: 1169 - 1735
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x06d711011C81DF55ec4429F6C59F24BD4f89A6a0.sol:882

istablex.transfer(_dst, _amount)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.850452
Transaction Length: 1
Severity: High
Contract: MainnetIStableXToIStableXAssimilator
Function name: outputRaw(address,uint256)
PC address: 5899
Estimated Gas Usage: 3816 - 73035
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x06d711011C81DF55ec4429F6C59F24BD4f89A6a0.sol:888

_amount * _index

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:17.029401
Transaction Length: 1
Severity: High
Contract: MainnetIStableXToIStableXAssimilator
Function name: viewNumeraireAmount(uint256)
PC address: 6131
Estimated Gas Usage: 2100 - 36662
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x06d711011C81DF55ec4429F6C59F24BD4f89A6a0.sol:916

_amount * _index

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:21.038672
Transaction Length: 1
Severity: Low
Contract: MainnetIStableXToIStableXAssimilator
Function name: intakeRaw(uint256)
PC address: 6404
Estimated Gas Usage: 1210 - 1871
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x06d711011C81DF55ec4429F6C59F24BD4f89A6a0.sol:842

istablex.transferFrom(msg.sender, address(this), _amount)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0xa0472ae3158c9ece329ce2324d0aa73db1d8639a.sol
Total states:52177
1031.864293
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.024432
Transaction Length: 1
Severity: High
Contract: Module
Function name: getModuleAddress(string)
PC address: 416
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xa0472ae3158c9ece329ce2324d0aa73db1d8639a.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.110434
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(string,string,uint8)
PC address: 1000
Estimated Gas Usage: 409 - 504
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xa0472ae3158c9ece329ce2324d0aa73db1d8639a.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.261990
Transaction Length: 1
Severity: High
Contract: PoolToken_CurveFi_renBTC
Function name: initialize(string,string,uint8)
PC address: 1000
Estimated Gas Usage: 409 - 504
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xa0472ae3158c9ece329ce2324d0aa73db1d8639a.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.599549
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(string,string,uint8)
PC address: 1151
Estimated Gas Usage: 751 - 3528
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xa0472ae3158c9ece329ce2324d0aa73db1d8639a.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.401101
Transaction Length: 1
Severity: High
Contract: PoolToken_CurveFi_renBTC
Function name: initialize(string,string,uint8)
PC address: 1151
Estimated Gas Usage: 751 - 3528
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xa0472ae3158c9ece329ce2324d0aa73db1d8639a.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.332824
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[],uint256)
PC address: 2226
Estimated Gas Usage: 429 - 524
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xa0472ae3158c9ece329ce2324d0aa73db1d8639a.sol:5

openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.921535
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[],uint256)
PC address: 2228
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xa0472ae3158c9ece329ce2324d0aa73db1d8639a.sol:3

*/

// File: @openzeppelin\upgrades\

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.123911
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[])
PC address: 2357
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xa0472ae3158c9ece329ce2324d0aa73db1d8639a.sol:5

openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:14.163107
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[])
PC address: 2359
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xa0472ae3158c9ece329ce2324d0aa73db1d8639a.sol:3

*/

// File: @openzeppelin\upgrades\

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:22.698774
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: getModuleAddress(string)
PC address: 2526
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xa0472ae3158c9ece329ce2324d0aa73db1d8639a.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:26.966121
Transaction Length: 1
Severity: High
Contract: PoolToken_CurveFi_renBTC
Function name: getModuleAddress(string)
PC address: 2526
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xa0472ae3158c9ece329ce2324d0aa73db1d8639a.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:20.009133
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(address,string,string)
PC address: 3179
Estimated Gas Usage: 485 - 580
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xa0472ae3158c9ece329ce2324d0aa73db1d8639a.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:22.878770
Transaction Length: 1
Severity: High
Contract: PoolToken_CurveFi_renBTC
Function name: initialize(address,string,string)
PC address: 3179
Estimated Gas Usage: 485 - 580
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xa0472ae3158c9ece329ce2324d0aa73db1d8639a.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.447416
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3249
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xa0472ae3158c9ece329ce2324d0aa73db1d8639a.sol:212

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:38.307860
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(address,string,string)
PC address: 3330
Estimated Gas Usage: 827 - 3604
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xa0472ae3158c9ece329ce2324d0aa73db1d8639a.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:44.252572
Transaction Length: 1
Severity: High
Contract: PoolToken_CurveFi_renBTC
Function name: initialize(address,string,string)
PC address: 3330
Estimated Gas Usage: 827 - 3604
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xa0472ae3158c9ece329ce2324d0aa73db1d8639a.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.336785
Transaction Length: 1
Severity: Low
Contract: DistributionToken
Function name: distributions(uint256)
PC address: 3405
Estimated Gas Usage: 724 - 819
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xa0472ae3158c9ece329ce2324d0aa73db1d8639a.sol:1000

Distribution[] public distributions

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.848658
Transaction Length: 2
Severity: High
Contract: ERC20Burnable
Function name: increaseAllowance(address,uint256)
PC address: 3429
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xa0472ae3158c9ece329ce2324d0aa73db1d8639a.sol:212

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.217323
Transaction Length: 2
Severity: High
Contract: ERC20Mintable
Function name: increaseAllowance(address,uint256)
PC address: 4214
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xa0472ae3158c9ece329ce2324d0aa73db1d8639a.sol:212

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:30.809230
Transaction Length: 1
Severity: Low
Contract: PoolToken
Function name: distributions(uint256)
PC address: 6392
Estimated Gas Usage: 768 - 863
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xa0472ae3158c9ece329ce2324d0aa73db1d8639a.sol:1000

Distribution[] public distributions

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:33.230515
Transaction Length: 1
Severity: Low
Contract: PoolToken_CurveFi_renBTC
Function name: distributions(uint256)
PC address: 6392
Estimated Gas Usage: 768 - 863
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xa0472ae3158c9ece329ce2324d0aa73db1d8639a.sol:1000

Distribution[] public distributions

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.918302
Transaction Length: 2
Severity: High
Contract: DistributionToken
Function name: increaseAllowance(address,uint256)
PC address: 6759
Estimated Gas Usage: 1104 - 1579
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xa0472ae3158c9ece329ce2324d0aa73db1d8639a.sol:212

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0xc1d86836920ad83617fb13de7da6ea66105580d9.sol
Total states:24490
93.251142
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.097238
Transaction Length: 0
Severity: High
Contract: LexAIR
Function name: constructor
PC address: 110
Estimated Gas Usage: 257 - 3030
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xc1d86836920ad83617fb13de7da6ea66105580d9.sol:10

█████╗

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.112468
Transaction Length: 0
Severity: High
Contract: LexAIR
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xc1d86836920ad83617fb13de7da6ea66105580d9.sol:9

█╔██╗ 
███████╗█

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.934191
Transaction Length: 1
Severity: High
Contract: LexAIR
Function name: updateMessage(string)
PC address: 275
Estimated Gas Usage: 319 - 414
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xc1d86836920ad83617fb13de7da6ea66105580d9.sol:3

*/

/*
██╗     ████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.181107
Transaction Length: 1
Severity: High
Contract: LexAIR
Function name: deregister(address[],bytes32)
PC address: 394
Estimated Gas Usage: 341 - 436
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xc1d86836920ad83617fb13de7da6ea66105580d9.sol:6

     ████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.249987
Transaction Length: 1
Severity: High
Contract: LexAIR
Function name: deregister(address[],bytes32)
PC address: 396
Estimated Gas Usage: 341 - 436
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xc1d86836920ad83617fb13de7da6ea66105580d9.sol:3

*/

/*
██╗     █████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:16.480439
Transaction Length: 1
Severity: High
Contract: LexAIR
Function name: register(address[],bytes32)
PC address: 735
Estimated Gas Usage: 318 - 413
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xc1d86836920ad83617fb13de7da6ea66105580d9.sol:6

     ████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:19.810131
Transaction Length: 1
Severity: High
Contract: LexAIR
Function name: register(address[],bytes32)
PC address: 737
Estimated Gas Usage: 318 - 413
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xc1d86836920ad83617fb13de7da6ea66105580d9.sol:3

*/

/*
██╗     █████

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0xd95d27f343b053af7776c3f388d8cc882682b0d7.sol
Total states:46134
123.605245
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.858902
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3244
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xd95d27f343b053af7776c3f388d8cc882682b0d7.sol:145

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.439284
Transaction Length: 1
Severity: Low
Contract: LockupContract
Function name: lockedAllocationData(address,uint256)
PC address: 3295
Estimated Gas Usage: 821 - 1106
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xd95d27f343b053af7776c3f388d8cc882682b0d7.sol:891

mapping(address => uint256[]) public lockedAllocationData

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.580978
Transaction Length: 1
Severity: Low
Contract: CLIContribution
Function name: contributions(uint256)
PC address: 3504
Estimated Gas Usage: 791 - 886
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xd95d27f343b053af7776c3f388d8cc882682b0d7.sol:1565

Contribution[] public contributions

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.282268
Transaction Length: 2
Severity: High
Contract: LockupContract
Function name: getUnlockedBalance(address,uint256,uint256)
PC address: 3578
Estimated Gas Usage: 2951 - 4089
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xd95d27f343b053af7776c3f388d8cc882682b0d7.sol:958

uint256[] memory  addressLockupData = lockedAllocationData[_address]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.808619
Transaction Length: 2
Severity: High
Contract: LockupContract
Function name: getUnlockedBalance(address,uint256,uint256)
PC address: 3603
Estimated Gas Usage: 2951 - 4089
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xd95d27f343b053af7776c3f388d8cc882682b0d7.sol:958

uint256[] memory  addressLockupData = lockedAllocationData[_address]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.431186
Transaction Length: 2
Severity: High
Contract: LockupContract
Function name: getUnlockedBalance(address,uint256,uint256)
PC address: 3605
Estimated Gas Usage: 2951 - 4089
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xd95d27f343b053af7776c3f388d8cc882682b0d7.sol:958

uint256[] memory  addressLockupData = lockedAllocationData[_address]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.961204
Transaction Length: 2
Severity: High
Contract: ERC20Mintable
Function name: increaseAllowance(address,uint256)
PC address: 3847
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xd95d27f343b053af7776c3f388d8cc882682b0d7.sol:145

a + b

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:01.784006
Transaction Length: 1
Severity: Low
Contract: CLIAllocator
Function name: unlockManuallyLockedBalances(address)
PC address: 4785
Estimated Gas Usage: 5545 - 76368
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0xd95d27f343b053af7776c3f388d8cc882682b0d7.sol:1318

lockupContract.setManuallyLockedForAddress(
            _holder,
            0
        )

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.218075
Transaction Length: 1
Severity: High
Contract: LockupContract
Function name: allocationLog(address,uint256,uint256,uint256,uint256,uint256)
PC address: 5243
Estimated Gas Usage: 13852 - 89787
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xd95d27f343b053af7776c3f388d8cc882682b0d7.sol:2

ification at Ether

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:04.714111
Transaction Length: 1
Severity: High
Contract: LockupContract
Function name: allocationLog(address,uint256,uint256,uint256,uint256,uint256)
PC address: 5255
Estimated Gas Usage: 24473 - 140693
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xd95d27f343b053af7776c3f388d8cc882682b0d7.sol:938

lockedAllocationData[_address].push(_amount)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.553914
Transaction Length: 1
Severity: High
Contract: LockupContract
Function name: allocationLog(address,uint256,uint256,uint256,uint256,uint256)
PC address: 5348
Estimated Gas Usage: 24473 - 140693
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xd95d27f343b053af7776c3f388d8cc882682b0d7.sol:2

ification at Ether

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:10.285252
Transaction Length: 1
Severity: High
Contract: LockupContract
Function name: allocationLog(address,uint256,uint256,uint256,uint256,uint256)
PC address: 5360
Estimated Gas Usage: 35094 - 191599
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xd95d27f343b053af7776c3f388d8cc882682b0d7.sol:939

lockedAllocationData[_address].push(_lockPeriodInSeconds)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.326587
Transaction Length: 1
Severity: High
Contract: LockupContract
Function name: allocationLog(address,uint256,uint256,uint256,uint256,uint256)
PC address: 5453
Estimated Gas Usage: 35094 - 191599
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xd95d27f343b053af7776c3f388d8cc882682b0d7.sol:2

ification at Ether

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.113981
Transaction Length: 2
Severity: High
Contract: CLIContribution
Function name: forward()
PC address: 6542
Estimated Gas Usage: 776 - 1249
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xd95d27f343b053af7776c3f388d8cc882682b0d7.sol:145

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0xb07eb3426d742cda9120931e7028d54f9df34a3e.sol
Total states:9587
803.291978
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.033770
Transaction Length: 1
Severity: High
Contract: DmmController
Function name: addMarket(address,string,string,uint8,uint256,uint256,uint256)
PC address: 2260
Estimated Gas Usage: 442 - 537
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xb07eb3426d742cda9120931e7028d54f9df34a3e.sol:3



*/



// File: @openzeppelin/cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:15.040095
Transaction Length: 1
Severity: High
Contract: DmmController
Function name: addMarket(address,string,string,uint8,uint256,uint256,uint256)
PC address: 2411
Estimated Gas Usage: 784 - 3561
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xb07eb3426d742cda9120931e7028d54f9df34a3e.sol:3



*/



// File: @openzeppelin/cont

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:08:17.677308
Transaction Length: 1
Severity: Low
Contract: DmmController
Function name: dmmTokenIds(uint256)
PC address: 19840
Estimated Gas Usage: 789 - 884
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xb07eb3426d742cda9120931e7028d54f9df34a3e.sol:3114

uint[] public dmmTokenIds

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x9403d608515f7346EC44B998984d7741Fd0D9bd4.sol
Total states:28040
191.74874
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:03.191847
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3645
Estimated Gas Usage: 1025 - 1500
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x9403d608515f7346EC44B998984d7741Fd0D9bd4.sol:60

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:47.186224
Transaction Length: 2
Severity: High
Contract: ERC20Burnable
Function name: increaseAllowance(address,uint256)
PC address: 3818
Estimated Gas Usage: 1025 - 1500
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x9403d608515f7346EC44B998984d7741Fd0D9bd4.sol:60

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:33.522862
Transaction Length: 2
Severity: High
Contract: ERC20Pausable
Function name: increaseAllowance(address,uint256)
PC address: 6145
Estimated Gas Usage: 1511 - 2316
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x9403d608515f7346EC44B998984d7741Fd0D9bd4.sol:60

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0xce3c68e8691e6bfd9065e824ec1b93335c5e055b.sol
Total states:2324
2.01955
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x41558a69571f1f5b48e6199b72d6c57d2009156a.sol
Total states:1218
1.998984
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.562638
Transaction Length: 1
Severity: Low
Contract: AgnosticPrivateSale
Function name: allUsers(uint256)
PC address: 2785
Estimated Gas Usage: 723 - 818
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x41558a69571f1f5b48e6199b72d6c57d2009156a.sol:160

address[] public allUsers

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.780595
Transaction Length: 1
Severity: High
Contract: AgnosticPrivateSale
Function name: contribute()
PC address: 4583
Estimated Gas Usage: 2864 - 38511
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x41558a69571f1f5b48e6199b72d6c57d2009156a.sol:32

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x5fac3cec29d29efea78850b01b1c69d268b76933.sol
Total states:17103
70.747033
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol
Total states:77467
1750.361999
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.981993
Transaction Length: 1
Severity: High
Contract: Module
Function name: getModuleAddress(string)
PC address: 416
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:3



*/



// File: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.157128
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(string,string,uint8)
PC address: 1000
Estimated Gas Usage: 409 - 504
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:3



*/



// File: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.680315
Transaction Length: 1
Severity: High
Contract: VaultPoolToken
Function name: initialize(string,string,uint8)
PC address: 1049
Estimated Gas Usage: 409 - 504
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:3



*/



// File: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.914069
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(string,string,uint8)
PC address: 1151
Estimated Gas Usage: 751 - 3528
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:3



*/



// File: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.008588
Transaction Length: 1
Severity: High
Contract: VaultPoolToken
Function name: initialize(string,string,uint8)
PC address: 1200
Estimated Gas Usage: 751 - 3528
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:3



*/



// File: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.910822
Transaction Length: 1
Severity: High
Contract: VaultProtocol
Function name: getModuleAddress(string)
PC address: 1909
Estimated Gas Usage: 407 - 502
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:3



*/



// File: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:20.210330
Transaction Length: 1
Severity: High
Contract: VaultProtocol
Function name: quickWithdraw(address,address[],uint256[])
PC address: 2190
Estimated Gas Usage: 462 - 557
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:9

e: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:26.328035
Transaction Length: 1
Severity: High
Contract: VaultProtocol
Function name: quickWithdraw(address,address[],uint256[])
PC address: 2192
Estimated Gas Usage: 462 - 557
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:3



*/



// File: @openzeppelin\contr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.655103
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[],uint256)
PC address: 2226
Estimated Gas Usage: 429 - 524
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:9

e: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.528450
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[],uint256)
PC address: 2228
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:3



*/



// File: @openzeppelin\contr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:41.760062
Transaction Length: 1
Severity: High
Contract: VaultProtocol
Function name: quickWithdraw(address,address[],uint256[])
PC address: 2338
Estimated Gas Usage: 795 - 3572
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:9

e: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:54.406198
Transaction Length: 1
Severity: High
Contract: VaultProtocol
Function name: quickWithdraw(address,address[],uint256[])
PC address: 2340
Estimated Gas Usage: 795 - 3572
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:3



*/



// File: @openzeppelin\contr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:14.872521
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[])
PC address: 2357
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:9

e: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:18.224037
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[])
PC address: 2359
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:3



*/



// File: @openzeppelin\contr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:29.330308
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: getModuleAddress(string)
PC address: 2526
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:3



*/



// File: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:18.355855
Transaction Length: 1
Severity: High
Contract: VaultProtocol
Function name: withdrawFromVault(address,address[],uint256[])
PC address: 2630
Estimated Gas Usage: 419 - 514
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:9

e: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:24.758519
Transaction Length: 1
Severity: High
Contract: VaultProtocol
Function name: withdrawFromVault(address,address[],uint256[])
PC address: 2632
Estimated Gas Usage: 419 - 514
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:3



*/



// File: @openzeppelin\contr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:02.351228
Transaction Length: 1
Severity: High
Contract: VaultPoolToken
Function name: getModuleAddress(string)
PC address: 2653
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:3



*/



// File: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:43.729717
Transaction Length: 1
Severity: High
Contract: VaultProtocol
Function name: withdrawFromVault(address,address[],uint256[])
PC address: 2778
Estimated Gas Usage: 752 - 3529
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:9

e: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:57.282871
Transaction Length: 1
Severity: High
Contract: VaultProtocol
Function name: withdrawFromVault(address,address[],uint256[])
PC address: 2780
Estimated Gas Usage: 752 - 3529
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:3



*/



// File: @openzeppelin\contr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:43.998109
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(address,string,string)
PC address: 3179
Estimated Gas Usage: 485 - 580
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:3



*/



// File: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.299117
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3249
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:225

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:50.857511
Transaction Length: 1
Severity: High
Contract: VaultProtocol
Function name: initialize(address,address[])
PC address: 3258
Estimated Gas Usage: 418 - 513
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:9

e: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:55.823866
Transaction Length: 1
Severity: High
Contract: VaultProtocol
Function name: initialize(address,address[])
PC address: 3260
Estimated Gas Usage: 418 - 513
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:3



*/



// File: @openzeppelin\contr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:03.732029
Transaction Length: 1
Severity: High
Contract: VaultPoolToken
Function name: initialize(address,string,string)
PC address: 3306
Estimated Gas Usage: 485 - 580
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:3



*/



// File: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:03.379872
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(address,string,string)
PC address: 3330
Estimated Gas Usage: 827 - 3604
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:3



*/



// File: @openzeppelin\cont

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.374801
Transaction Length: 1
Severity: Low
Contract: DistributionToken
Function name: distributions(uint256)
PC address: 3405
Estimated Gas Usage: 724 - 819
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:2410

Distribution[] public distributions

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:38.433246
Transaction Length: 2
Severity: Low
Contract: DistributionToken
Function name: distributions(uint256)
PC address: 3405
Estimated Gas Usage: 724 - 819
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:2410

Distribution[] public distributions

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.267287
Transaction Length: 2
Severity: High
Contract: ERC20Burnable
Function name: increaseAllowance(address,uint256)
PC address: 3429
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:225

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:23.236766
Transaction Length: 1
Severity: High
Contract: VaultPoolToken
Function name: initialize(address,string,string)
PC address: 3457
Estimated Gas Usage: 827 - 3604
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:3



*/



// File: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:15.709504
Transaction Length: 2
Severity: High
Contract: ERC20Mintable
Function name: increaseAllowance(address,uint256)
PC address: 4214
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:225

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:41.172786
Transaction Length: 1
Severity: Low
Contract: PoolToken
Function name: distributions(uint256)
PC address: 6392
Estimated Gas Usage: 768 - 863
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:2410

Distribution[] public distributions

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:32.531022
Transaction Length: 2
Severity: High
Contract: DistributionToken
Function name: increaseAllowance(address,uint256)
PC address: 6759
Estimated Gas Usage: 1104 - 1579
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:225

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:03:08.078603
Transaction Length: 1
Severity: Low
Contract: VaultPoolToken
Function name: distributions(uint256)
PC address: 7232
Estimated Gas Usage: 768 - 863
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:2410

Distribution[] public distributions

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.278285
Transaction Length: 1
Severity: Low
Contract: VaultProtocol
Function name: totalClaimableAmount(address)
PC address: 13517
Estimated Gas Usage: 1314 - 1409
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:4104

claimableTokens[indReg]

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0xa67bc34f4d8a6483864cac1a2b4fb22f7d7fcae1.sol
Total states:1308
1.050953
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x00df274ab9feb22e99131318d099c8adf42645c0.sol
Total states:4068
43.556155
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:08.023419
Transaction Length: 1
Severity: Low
Contract: TENSv1Router
Function name: fallback
PC address: 2275
Estimated Gas Usage: 7941 - 29735
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x00df274ab9feb22e99131318d099c8adf42645c0.sol:2246

_WETH.deposit.value(msg.value)()

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:08.902186
Transaction Length: 1
Severity: Low
Contract: TENSv1Router
Function name: refreshApproval()
PC address: 4601
Estimated Gas Usage: 1943 - 3169
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x00df274ab9feb22e99131318d099c8adf42645c0.sol:2227

IUniswapV2Pair(_tensWETHPair).approve(address(_tensVault), uint(-1))

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x3082f7838cd70ef3d2344499ff428eb42a5f5092.sol
Total states:5454
140.417051
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.395173
Transaction Length: 2
Severity: High
Contract: Instafinex_V1
Function name: depositEther()
PC address: 7357
Estimated Gas Usage: 1209 - 1684
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x3082f7838cd70ef3d2344499ff428eb42a5f5092.sol:143

balanceEthForAddress[msg.sender] + msg.value

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x9745c690b1e581349c4e694751d0ae38fe37e32b.sol
Total states:5739
10.93471
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0xaacc072e98a0b72b3b0613dd0e866dfd1d9257d9.sol
Total states:1880
94.748501
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.290182
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShip(address[])
PC address: 360
Estimated Gas Usage: 342 - 437
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xaacc072e98a0b72b3b0613dd0e866dfd1d9257d9.sol:5

penzeppelin-solidity/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.667028
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShip(address[])
PC address: 362
Estimated Gas Usage: 342 - 437
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xaacc072e98a0b72b3b0613dd0e866dfd1d9257d9.sol:3

*/

// File: openzeppelin-solidity/c

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:37.125111
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShipWithHowMany(address[],uint256)
PC address: 776
Estimated Gas Usage: 341 - 436
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xaacc072e98a0b72b3b0613dd0e866dfd1d9257d9.sol:5

penzeppelin-solidity/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:39.989871
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShipWithHowMany(address[],uint256)
PC address: 778
Estimated Gas Usage: 341 - 436
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xaacc072e98a0b72b3b0613dd0e866dfd1d9257d9.sol:3

*/

// File: openzeppelin-solidity/c

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:29.624497
Transaction Length: 1
Severity: Low
Contract: BeneficiaryOperations
Function name: allOperations(uint256)
PC address: 1715
Estimated Gas Usage: 701 - 796
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xaacc072e98a0b72b3b0613dd0e866dfd1d9257d9.sol:386

bytes32[] public allOperations

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:29.518985
Transaction Length: 1
Severity: Low
Contract: BeneficiaryOperations
Function name: beneficiaries(uint256)
PC address: 4636
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xaacc072e98a0b72b3b0613dd0e866dfd1d9257d9.sol:385

address[] public beneficiaries

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x2d916e99e53b31ae968991472b15b90e1355e7b9.sol
Total states:1556
3.944011
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x7b837cecbf1c8487d0ae1535837b9f17af5e59a7.sol
Total states:825
80.35606
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.405903
Transaction Length: 1
Severity: High
Contract: MultiMintRaffle
Function name: mint(address[],uint256[])
PC address: 405
Estimated Gas Usage: 384 - 479
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x7b837cecbf1c8487d0ae1535837b9f17af5e59a7.sol:5

olidity 0.5.11;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.347261
Transaction Length: 1
Severity: High
Contract: MultiMintRaffle
Function name: mint(address[],uint256[])
PC address: 407
Estimated Gas Usage: 384 - 479
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x7b837cecbf1c8487d0ae1535837b9f17af5e59a7.sol:3

*/

//pragma solidity 0.5.11;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:14.632376
Transaction Length: 1
Severity: High
Contract: MultiMintRaffle
Function name: mint(address[],uint256[])
PC address: 553
Estimated Gas Usage: 717 - 3494
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x7b837cecbf1c8487d0ae1535837b9f17af5e59a7.sol:5

olidity 0.5.11;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:29.426507
Transaction Length: 1
Severity: High
Contract: MultiMintRaffle
Function name: mint(address[],uint256[])
PC address: 555
Estimated Gas Usage: 717 - 3494
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x7b837cecbf1c8487d0ae1535837b9f17af5e59a7.sol:3

*/

//pragma solidity 0.5.11;
pragma

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol
Total states:18028
488.153713
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:07:49.962608
Transaction Length: 1
Severity: Low
Contract: MainnetDaiToDaiAssimilator
Function name: outputRawAndGetBalance(address,uint256)
PC address: 2058
Estimated Gas Usage: 1179 - 1745
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol:890

dai.transfer(_dst, _amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:07:51.438459
Transaction Length: 1
Severity: Low
Contract: MainnetDaiToDaiAssimilator
Function name: intakeRawAndGetBalance(uint256)
PC address: 3225
Estimated Gas Usage: 1131 - 1792
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol:852

dai.transferFrom(msg.sender, address(this), _amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:07:53.299806
Transaction Length: 1
Severity: Low
Contract: MainnetDaiToDaiAssimilator
Function name: outputRaw(address,uint256)
PC address: 4162
Estimated Gas Usage: 1169 - 1735
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol:905

dai.transfer(_dst, _amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:08:04.227445
Transaction Length: 1
Severity: Low
Contract: MainnetDaiToDaiAssimilator
Function name: intakeRaw(uint256)
PC address: 4650
Estimated Gas Usage: 1210 - 1871
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol:867

dai.transferFrom(msg.sender, address(this), _amount)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x65dca332673a212e45df020c1bd55a1b9eee8b70.sol
Total states:149
2.712745
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol
Total states:1134
8.294529
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.412392
Transaction Length: 1
Severity: Low
Contract: LoihiStorage
Function name: reserves(uint256)
PC address: 1334
Estimated Gas Usage: 767 - 862
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol:181

address[] public reserves

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.824856
Transaction Length: 1
Severity: Low
Contract: LoihiStorage
Function name: numeraires(uint256)
PC address: 1491
Estimated Gas Usage: 700 - 795
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol:180

address[] public numeraires

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.295503
Transaction Length: 1
Severity: Low
Contract: LoihiStorage
Function name: derivatives(uint256)
PC address: 1596
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol:179

address[] public derivatives

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0xBA940b56CF4D6fd48DB5C574145618F111647039.sol
Total states:1387
1.660885
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.790495
Transaction Length: 1
Severity: Low
Contract: KYFToken
Function name: kyfInstancesArray(uint256)
PC address: 1788
Estimated Gas Usage: 723 - 818
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xBA940b56CF4D6fd48DB5C574145618F111647039.sol:78

address[] public kyfInstancesArray

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x6d97f6e0fe7f9afa29666c991a7a560b2703910a.sol
Total states:11840
12.683414
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.221176
Transaction Length: 1
Severity: Low
Contract: WBTCexPro
Function name: userLotteryTicker(address,uint256)
PC address: 8334
Estimated Gas Usage: 886 - 1171
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x6d97f6e0fe7f9afa29666c991a7a560b2703910a.sol:1082

mapping(address => uint256[]) public userLotteryTicker

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:02.216162
Transaction Length: 1
Severity: Low
Contract: WBTCexPro
Function name: lotteryPool(uint256)
PC address: 9271
Estimated Gas Usage: 746 - 841
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x6d97f6e0fe7f9afa29666c991a7a560b2703910a.sol:1084

LotteryTicket[] public  lotteryPool

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:03.143963
Transaction Length: 1
Severity: Low
Contract: WBTCexPro
Function name: getUserDepositInfo(address,uint256)
PC address: 12807
Estimated Gas Usage: 894 - 1179
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x6d97f6e0fe7f9afa29666c991a7a560b2703910a.sol:1796

user.deposits[index]

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0xabb81635e0ccc014c4c73cb0e90696b1785844b4.sol
Total states:15108
535.749797
==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:02:02.833833
Transaction Length: 1
Severity: Medium
Contract: etherATM
Function name: fallback()
PC address: 125
Estimated Gas Usage: 27331 - 176743
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 468
Offset: 905
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop8/0xabb81635e0ccc014c4c73cb0e90696b1785844b4.sol:14

contract etherATM {

    struct Person {

        address payable etherAddress;

        uint256 amount;

    }



    Person[] public persons;



    uint256 public payoutIdx = 0;

    uint256 public collectedFees;

    uint256 public balance = 0;



    address payable owner;



    modifier onlyowner {

        if (msg.sender == owner) _;

    }



    constructor() public {

        owner = 0xF51a48488be6AbEFFb56d4B1B666C19F2F66Cf1e;

    }



    function enter() public payable {

        

        uint256 amount;

        if (msg.value > 0.05 ether) {

            amount = msg.value;

        }

        else{

            msg.sender.transfer(msg.value);

        }



        uint256 idx = persons.length;

        persons.length += 1;

        persons[idx].etherAddress = msg.sender;

        persons[idx].amount = amount;



        if (idx != 0) {

            collectedFees += 0;

            owner.transfer(collectedFees + amount);

            collectedFees = 0;

            balance += amount;

        } else {

            owner.transfer(amount);

            balance += amount;

        }



        while (balance > (persons[payoutIdx].amount / 100) * 180) {

            uint256 transactionAmount = (persons[payoutIdx].amount / 100) * 180;

            persons[payoutIdx].etherAddress.transfer(transactionAmount);

            balance -= transactionAmount;

            payoutIdx += 1;

        }

    }



    function() external {

        enter();

    }



    function setOwner(address payable _owner) internal onlyowner {

        owner = _owner;

    }

}

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:06:45.686816
Transaction Length: 2
Severity: Medium
Contract: etherATM
Function name: fallback()
PC address: 125
Estimated Gas Usage: 38067 - 227479
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 468
Offset: 771
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop8/0xabb81635e0ccc014c4c73cb0e90696b1785844b4.sol:14

contract etherATM {

    struct Person {

        address payable etherAddress;

        uint256 amount;

    }



    Person[] public persons;



    uint256 public payoutIdx = 0;

    uint256 public collectedFees;

    uint256 public balance = 0;



    address payable owner;



    modifier onlyowner {

        if (msg.sender == owner) _;

    }



    constructor() public {

        owner = 0xF51a48488be6AbEFFb56d4B1B666C19F2F66Cf1e;

    }



    function enter() public payable {

        

        uint256 amount;

        if (msg.value > 0.05 ether) {

            amount = msg.value;

        }

        else{

            msg.sender.transfer(msg.value);

        }



        uint256 idx = persons.length;

        persons.length += 1;

        persons[idx].etherAddress = msg.sender;

        persons[idx].amount = amount;



        if (idx != 0) {

            collectedFees += 0;

            owner.transfer(collectedFees + amount);

            collectedFees = 0;

            balance += amount;

        } else {

            owner.transfer(amount);

            balance += amount;

        }



        while (balance > (persons[payoutIdx].amount / 100) * 180) {

            uint256 transactionAmount = (persons[payoutIdx].amount / 100) * 180;

            persons[payoutIdx].etherAddress.transfer(transactionAmount);

            balance -= transactionAmount;

            payoutIdx += 1;

        }

    }



    function() external {

        enter();

    }



    function setOwner(address payable _owner) internal onlyowner {

        owner = _owner;

    }

}

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:14.289893
Transaction Length: 1
Severity: Medium
Contract: etherATM
Function name: enter()
PC address: 394
Estimated Gas Usage: 27307 - 176719
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 468
Offset: 905
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop8/0xabb81635e0ccc014c4c73cb0e90696b1785844b4.sol:58

function enter() public payable {

        

        uint256 amount;

        if (msg.value > 0.05 ether) {

            amount = msg.value;

        }

        else{

            msg.sender.transfer(msg.value);

        }



        uint256 idx = persons.length;

        persons.length += 1;

        persons[idx].etherAddress = msg.sender;

        persons[idx].amount = amount;



        if (idx != 0) {

            collectedFees += 0;

            owner.transfer(collectedFees + amount);

            collectedFees = 0;

            balance += amount;

        } else {

            owner.transfer(amount);

            balance += amount;

        }



        while (balance > (persons[payoutIdx].amount / 100) * 180) {

            uint256 transactionAmount = (persons[payoutIdx].amount / 100) * 180;

            persons[payoutIdx].etherAddress.transfer(transactionAmount);

            balance -= transactionAmount;

            payoutIdx += 1;

        }

    }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:06:46.829715
Transaction Length: 2
Severity: Medium
Contract: etherATM
Function name: enter()
PC address: 394
Estimated Gas Usage: 38170 - 227582
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 468
Offset: 771
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop8/0xabb81635e0ccc014c4c73cb0e90696b1785844b4.sol:58

function enter() public payable {

        

        uint256 amount;

        if (msg.value > 0.05 ether) {

            amount = msg.value;

        }

        else{

            msg.sender.transfer(msg.value);

        }



        uint256 idx = persons.length;

        persons.length += 1;

        persons[idx].etherAddress = msg.sender;

        persons[idx].amount = amount;



        if (idx != 0) {

            collectedFees += 0;

            owner.transfer(collectedFees + amount);

            collectedFees = 0;

            balance += amount;

        } else {

            owner.transfer(amount);

            balance += amount;

        }



        while (balance > (persons[payoutIdx].amount / 100) * 180) {

            uint256 transactionAmount = (persons[payoutIdx].amount / 100) * 180;

            persons[payoutIdx].etherAddress.transfer(transactionAmount);

            balance -= transactionAmount;

            payoutIdx += 1;

        }

    }

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:13.827658
Transaction Length: 1
Severity: Low
Contract: etherATM
Function name: persons(uint256)
PC address: 1258
Estimated Gas Usage: 656 - 751
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xabb81635e0ccc014c4c73cb0e90696b1785844b4.sol:26

Person[] public persons

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0xa3062fcbcde2540a9f24b04c76220a5a0db851e4.sol
Total states:2673
114.500877
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.195955
Transaction Length: 1
Severity: High
Contract: PaymentMaster
Function name: multiHandlerSweep(address[],address)
PC address: 295
Estimated Gas Usage: 319 - 414
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xa3062fcbcde2540a9f24b04c76220a5a0db851e4.sol:9

e: openzeppelin-solid

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.213302
Transaction Length: 1
Severity: High
Contract: PaymentMaster
Function name: multiHandlerSweep(address[],address)
PC address: 297
Estimated Gas Usage: 319 - 414
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xa3062fcbcde2540a9f24b04c76220a5a0db851e4.sol:3



*/



// File: openzeppelin-solidi

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:05.673395
Transaction Length: 1
Severity: Low
Contract: PaymentHandler
Function name: fallback()
PC address: 597
Estimated Gas Usage: 4310 - 74284
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0xa3062fcbcde2540a9f24b04c76220a5a0db851e4.sol:296

master.firePaymentReceivedEvent(address(this), msg.sender, msg.value)

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:05.678132
Transaction Length: 1
Severity: Medium
Contract: PaymentHandler
Function name: fallback()
PC address: 620
Estimated Gas Usage: 5043 - 109017
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 217
Offset: 597
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop8/0xa3062fcbcde2540a9f24b04c76220a5a0db851e4.sol:236

contract PaymentHandler {



	// Keep track of the parent master contract - cannot be changed once set

	PaymentMaster public master;



	/**

	 * General constructor called by the master

	 */

	constructor(PaymentMaster _master) public {

		master = _master;

	}



	/**

	 * Helper function to return the parent master's address

	 */

	function getMasterAddress() public view returns (address) {

		return address(master);

	}



	/**

	 * Default payable function - forwards to the owner and triggers event

	 */

	function() external payable {

		// Get the parent master's owner address - explicity convert to payable

		address payable ownerAddress = address(uint160(master.owner()));



		// Forward the funds to the owner

		ownerAddress.transfer(msg.value);



		// Trigger the event notification in the parent master

		master.firePaymentReceivedEvent(address(this), msg.sender, msg.value);

	}



	/**

	 * Sweep any tokens to the owner of the master

	 */

	function sweepTokens(IERC20 token) public {

		// Get the owner address

		address ownerAddress = master.owner();



		// Get the current balance

		uint balance = token.balanceOf(address(this));



		// Transfer to the owner

		token.transfer(ownerAddress, balance);

	}



}

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:03.913553
Transaction Length: 1
Severity: Medium
Contract: PaymentHandler
Function name: sweepTokens(address)
PC address: 875
Estimated Gas Usage: 5654 - 109765
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 1090
Offset: 1306
Offset: 1530
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop8/0xa3062fcbcde2540a9f24b04c76220a5a0db851e4.sol:308

function sweepTokens(IERC20 token) public {

		// Get the owner address

		address ownerAddress = master.owner();



		// Get the current balance

		uint balance = token.balanceOf(address(this));



		// Transfer to the owner

		token.transfer(ownerAddress, balance);

	}

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:43.177970
Transaction Length: 1
Severity: High
Contract: PaymentMaster
Function name: getHandlerList()
PC address: 932
Estimated Gas Usage: 1227 - 2074
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xa3062fcbcde2540a9f24b04c76220a5a0db851e4.sol:423

function getHandlerList() public view returns (address[] memory) {

			// Return the entire list

      return handlerList;

  }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:52.088137
Transaction Length: 1
Severity: High
Contract: PaymentMaster
Function name: getHandlerList()
PC address: 972
Estimated Gas Usage: 1377 - 2600
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xa3062fcbcde2540a9f24b04c76220a5a0db851e4.sol:423

function getHandlerList() public view returns (address[] memory) {

			// Return the entire list

      return handlerList;

  }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:01:48.258863
Transaction Length: 1
Severity: Medium
Contract: PaymentMaster
Function name: sweepTokens(address)
PC address: 1130
Estimated Gas Usage: 5292 - 109073
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 2955
Offset: 3142
Offset: 3335
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop8/0xa3062fcbcde2540a9f24b04c76220a5a0db851e4.sol:503

function sweepTokens(IERC20 token) public {

		// Get the current balance

		uint balance = token.balanceOf(address(this));



		// Transfer to the owner

		token.transfer(this.owner(), balance);

	}

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:00:03.802985
Transaction Length: 1
Severity: Medium
Contract: PaymentHandler
Function name: sweepTokens(address)
PC address: 1530
Estimated Gas Usage: 4827 - 74752
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../contracts/m_loop/loop8/0xa3062fcbcde2540a9f24b04c76220a5a0db851e4.sol:324

token.transfer(ownerAddress, balance)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:27.493953
Transaction Length: 1
Severity: Low
Contract: PaymentMaster
Function name: handlerList(uint256)
PC address: 1950
Estimated Gas Usage: 656 - 751
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xa3062fcbcde2540a9f24b04c76220a5a0db851e4.sol:367

address[] public handlerList

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:01:43.983313
Transaction Length: 1
Severity: Medium
Contract: PaymentMaster
Function name: sweepTokens(address)
PC address: 3335
Estimated Gas Usage: 4467 - 74062
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../contracts/m_loop/loop8/0xa3062fcbcde2540a9f24b04c76220a5a0db851e4.sol:513

token.transfer(this.owner(), balance)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0xD85e2772912213e0c584d80B2694c79D6a09E39A2.sol
Total states:1634
1.359534
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.566788
Transaction Length: 1
Severity: Low
Contract: KYFToken
Function name: kyfInstancesArray(uint256)
PC address: 1854
Estimated Gas Usage: 701 - 796
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xD85e2772912213e0c584d80B2694c79D6a09E39A2.sol:182

address[] public kyfInstancesArray

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0xedd190d250c752BAf6c96D77E2A678b1b0C2B42E.sol
Total states:21331
236.612015
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.045646
Transaction Length: 0
Severity: High
Contract: ERC721Full
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xedd190d250c752BAf6c96D77E2A678b1b0C2B42E.sol:12

ecific functions.
 *
 * This module is used

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.034405
Transaction Length: 0
Severity: High
Contract: ERC721Metadata
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xedd190d250c752BAf6c96D77E2A678b1b0C2B42E.sol:12

ecific functions.
 *
 * This module is used

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.084524
Transaction Length: 0
Severity: High
Contract: GenesisKingdomToken
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xedd190d250c752BAf6c96D77E2A678b1b0C2B42E.sol:12

ecific functions.
 *
 * This module is used

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.928069
Transaction Length: 1
Severity: High
Contract: ERC721
Function name: safeTransferFrom(address,address,uint256,bytes)
PC address: 1136
Estimated Gas Usage: 477 - 572
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xedd190d250c752BAf6c96D77E2A678b1b0C2B42E.sol:3

*/

//pragma solidity^0.7;
pragma s

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.064013
Transaction Length: 1
Severity: High
Contract: ERC721Enumerable
Function name: safeTransferFrom(address,address,uint256,bytes)
PC address: 1177
Estimated Gas Usage: 499 - 594
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xedd190d250c752BAf6c96D77E2A678b1b0C2B42E.sol:3

*/

//pragma solidity^0.7;
pragma s

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.096871
Transaction Length: 1
Severity: High
Contract: ERC721Pausable
Function name: safeTransferFrom(address,address,uint256,bytes)
PC address: 1417
Estimated Gas Usage: 477 - 572
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xedd190d250c752BAf6c96D77E2A678b1b0C2B42E.sol:3

*/

//pragma solidity^0.7;
pragma s

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.378294
Transaction Length: 1
Severity: High
Contract: ERC721Whitelist
Function name: safeTransferFrom(address,address,uint256,bytes)
PC address: 1452
Estimated Gas Usage: 433 - 528
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xedd190d250c752BAf6c96D77E2A678b1b0C2B42E.sol:3

*/

//pragma solidity^0.7;
pragma s

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x8e1d3ab094c1ee517b34cb2defd0ee9fe7658cea.sol
Total states:3260
17.54063
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x9A280F81B0C6959061715370Ec0eb7720Ce1F002.sol
Total states:17674
721.270966
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.410034
Transaction Length: 1
Severity: High
Contract: Module
Function name: getModuleAddress(string)
PC address: 416
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x9A280F81B0C6959061715370Ec0eb7720Ce1F002.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.274018
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 511
Estimated Gas Usage: 364 - 459
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x9A280F81B0C6959061715370Ec0eb7720Ce1F002.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.305819
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 513
Estimated Gas Usage: 364 - 459
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x9A280F81B0C6959061715370Ec0eb7720Ce1F002.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.902995
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 596
Estimated Gas Usage: 540 - 635
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x9A280F81B0C6959061715370Ec0eb7720Ce1F002.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:23.552617
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 598
Estimated Gas Usage: 540 - 635
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x9A280F81B0C6959061715370Ec0eb7720Ce1F002.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:37.811765
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 681
Estimated Gas Usage: 716 - 811
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x9A280F81B0C6959061715370Ec0eb7720Ce1F002.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:00.536674
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 683
Estimated Gas Usage: 716 - 811
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x9A280F81B0C6959061715370Ec0eb7720Ce1F002.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:20.972739
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 766
Estimated Gas Usage: 892 - 987
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x9A280F81B0C6959061715370Ec0eb7720Ce1F002.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:55.098607
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 768
Estimated Gas Usage: 892 - 987
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x9A280F81B0C6959061715370Ec0eb7720Ce1F002.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:29.169311
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: getModuleAddress(string)
PC address: 1453
Estimated Gas Usage: 451 - 546
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x9A280F81B0C6959061715370Ec0eb7720Ce1F002.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.181089
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SUSD
Function name: handleDeposit(address[],uint256[])
PC address: 1722
Estimated Gas Usage: 452 - 547
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x9A280F81B0C6959061715370Ec0eb7720Ce1F002.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.944459
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SUSD
Function name: handleDeposit(address[],uint256[])
PC address: 1724
Estimated Gas Usage: 452 - 547
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x9A280F81B0C6959061715370Ec0eb7720Ce1F002.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:15.413617
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SUSD
Function name: handleDeposit(address[],uint256[])
PC address: 1870
Estimated Gas Usage: 785 - 3562
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x9A280F81B0C6959061715370Ec0eb7720Ce1F002.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:30.555828
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SUSD
Function name: handleDeposit(address[],uint256[])
PC address: 1872
Estimated Gas Usage: 785 - 3562
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x9A280F81B0C6959061715370Ec0eb7720Ce1F002.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:39.467759
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SUSD
Function name: getModuleAddress(string)
PC address: 2154
Estimated Gas Usage: 407 - 502
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x9A280F81B0C6959061715370Ec0eb7720Ce1F002.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:15.366737
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SUSD
Function name: withdraw(address,uint256[])
PC address: 2519
Estimated Gas Usage: 397 - 492
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x9A280F81B0C6959061715370Ec0eb7720Ce1F002.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:19.804129
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SUSD
Function name: withdraw(address,uint256[])
PC address: 2521
Estimated Gas Usage: 397 - 492
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x9A280F81B0C6959061715370Ec0eb7720Ce1F002.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:51.687709
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SUSD
Function name: supportedTokens()
PC address: 3026
Estimated Gas Usage: 1250 - 2097
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x9A280F81B0C6959061715370Ec0eb7720Ce1F002.sol:1597

function supportedTokens() public view returns(address[] memory){
        return _registeredTokens;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:26.017090
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SUSD
Function name: supportedTokens()
PC address: 3066
Estimated Gas Usage: 1400 - 2623
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x9A280F81B0C6959061715370Ec0eb7720Ce1F002.sol:1597

function supportedTokens() public view returns(address[] memory){
        return _registeredTokens;
    }

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0xcd31795D0b132f3B796f794500386250d53FD967.sol
Total states:18665
154.101801
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.026046
Transaction Length: 1
Severity: High
Contract: AdamantX
Function name: bulkTransfer(address[],uint256[])
PC address: 757
Estimated Gas Usage: 408 - 503
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xcd31795D0b132f3B796f794500386250d53FD967.sol:5

olidity ^0.5.13;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.933515
Transaction Length: 1
Severity: High
Contract: AdamantX
Function name: bulkTransfer(address[],uint256[])
PC address: 759
Estimated Gas Usage: 408 - 503
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xcd31795D0b132f3B796f794500386250d53FD967.sol:3

*/

//pragma solidity ^0.5.13;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.219439
Transaction Length: 1
Severity: High
Contract: AdamantX
Function name: bulkTransfer(address[],uint256[])
PC address: 842
Estimated Gas Usage: 584 - 679
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xcd31795D0b132f3B796f794500386250d53FD967.sol:5

olidity ^0.5.13;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:27.859226
Transaction Length: 1
Severity: High
Contract: AdamantX
Function name: bulkTransfer(address[],uint256[])
PC address: 844
Estimated Gas Usage: 584 - 679
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xcd31795D0b132f3B796f794500386250d53FD967.sol:3

*/

//pragma solidity ^0.5.13;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:44.112859
Transaction Length: 1
Severity: High
Contract: AdamantX
Function name: transferAndCall(address,uint256,bytes)
PC address: 1417
Estimated Gas Usage: 511 - 606
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xcd31795D0b132f3B796f794500386250d53FD967.sol:3

*/

//pragma solidity ^0.5.13;
prag

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:52.554392
Transaction Length: 1
Severity: Low
Contract: AdamantX
Function name: unfreeze(uint256)
PC address: 6430
Estimated Gas Usage: 1375 - 1660
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xcd31795D0b132f3B796f794500386250d53FD967.sol:212

_burnedAmount * FLOAT_SCALAR / info.totalFrozen

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:27.714168
Transaction Length: 2
Severity: Low
Contract: AdamantX
Function name: unfreeze(uint256)
PC address: 6430
Estimated Gas Usage: 1375 - 1660
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xcd31795D0b132f3B796f794500386250d53FD967.sol:212

_burnedAmount * FLOAT_SCALAR / info.totalFrozen

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol
Total states:36163
250.47796
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.213328
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1004
Estimated Gas Usage: 417 - 512
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.230221
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1006
Estimated Gas Usage: 417 - 512
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.996123
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1089
Estimated Gas Usage: 593 - 688
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:22.681852
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1091
Estimated Gas Usage: 593 - 688
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.130023
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1261
Estimated Gas Usage: 462 - 557
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.232716
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1263
Estimated Gas Usage: 462 - 557
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.798049
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1346
Estimated Gas Usage: 638 - 733
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:19.639908
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1348
Estimated Gas Usage: 638 - 733
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:15.558415
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleAccess
Function name: interpolate(uint256,uint256,uint256,uint256,uint256)
PC address: 2313
Estimated Gas Usage: 997 - 1848
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol:162

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.797362
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeBP(uint256)
PC address: 2585
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol:784

uint[] public bonusRangeBP

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.577288
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3691
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol:1266

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:04.351837
Transaction Length: 2
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3691
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol:1266

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:36.343145
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeStart(uint256)
PC address: 6017
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol:783

uint[] public bonusRangeStart

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:57.539895
Transaction Length: 1
Severity: Low
Contract: LidStaking
Function name: stakeHandlers(uint256)
PC address: 6118
Estimated Gas Usage: 790 - 885
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol:962

IStakeHandler[] public stakeHandlers

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.678018
Transaction Length: 2
Severity: High
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6315
Estimated Gas Usage: 1699 - 2124
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol:1112

stakeHandlers.length-1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:08.258907
Transaction Length: 2
Severity: Low
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6326
Estimated Gas Usage: 1709 - 2134
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol:1112

stakeHandlers[stakeHandlers.length-1]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:32.351609
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: calculateRatePerEth(uint256,uint256,uint256)
PC address: 6866
Estimated Gas Usage: 955 - 1050
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol:162

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:23.494420
Transaction Length: 1
Severity: High
Contract: LidStaking
Function name: findTaxAmount(uint256,uint256)
PC address: 13348
Estimated Gas Usage: 474 - 569
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol:162

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:32.345560
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPoolBPs(uint256)
PC address: 15346
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol:1267

uint[] public tokenPoolBPs

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0xba2aba582f22bbccd7dd49f65e904a17cd5d1cd5.sol
Total states:18680
149.523549
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.743714
Transaction Length: 1
Severity: High
Contract: DEFICOMMUNITY2
Function name: bulkTransfer(address[],uint256[])
PC address: 757
Estimated Gas Usage: 408 - 503
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xba2aba582f22bbccd7dd49f65e904a17cd5d1cd5.sol:5

olidity ^0.5.13;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.685383
Transaction Length: 1
Severity: High
Contract: DEFICOMMUNITY2
Function name: bulkTransfer(address[],uint256[])
PC address: 759
Estimated Gas Usage: 408 - 503
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xba2aba582f22bbccd7dd49f65e904a17cd5d1cd5.sol:3

*/

//pragma solidity ^0.5.13;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.422252
Transaction Length: 1
Severity: High
Contract: DEFICOMMUNITY2
Function name: bulkTransfer(address[],uint256[])
PC address: 842
Estimated Gas Usage: 584 - 679
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xba2aba582f22bbccd7dd49f65e904a17cd5d1cd5.sol:5

olidity ^0.5.13;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:26.560684
Transaction Length: 1
Severity: High
Contract: DEFICOMMUNITY2
Function name: bulkTransfer(address[],uint256[])
PC address: 844
Estimated Gas Usage: 584 - 679
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xba2aba582f22bbccd7dd49f65e904a17cd5d1cd5.sol:3

*/

//pragma solidity ^0.5.13;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:45.601946
Transaction Length: 1
Severity: High
Contract: DEFICOMMUNITY2
Function name: transferAndCall(address,uint256,bytes)
PC address: 1417
Estimated Gas Usage: 511 - 606
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xba2aba582f22bbccd7dd49f65e904a17cd5d1cd5.sol:3

*/

//pragma solidity ^0.5.13;
prag

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:52.203780
Transaction Length: 1
Severity: Low
Contract: DEFICOMMUNITY2
Function name: unfreeze(uint256)
PC address: 6429
Estimated Gas Usage: 1375 - 1660
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xba2aba582f22bbccd7dd49f65e904a17cd5d1cd5.sol:212

_burnedAmount * FLOAT_SCALAR / info.totalFrozen

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:23.600753
Transaction Length: 2
Severity: Low
Contract: DEFICOMMUNITY2
Function name: unfreeze(uint256)
PC address: 6429
Estimated Gas Usage: 1375 - 1660
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xba2aba582f22bbccd7dd49f65e904a17cd5d1cd5.sol:212

_burnedAmount * FLOAT_SCALAR / info.totalFrozen

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x92c780cc0c885320cc4582f7eef3618f4b2756d2.sol
Total states:6045
19.189996
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.841541
Transaction Length: 1
Severity: High
Contract: Ethertime
Function name: createLottery(string,uint256,uint256,uint256,uint8,bool)
PC address: 2893
Estimated Gas Usage: 406 - 501
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x92c780cc0c885320cc4582f7eef3618f4b2756d2.sol:3



*/



//pragma solidity >=0.5.0 <

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x91aa1d4294fd16629fe64c570574a550827b832f.sol
Total states:198
565.672994
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.342880
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: convertOddToCvpAndSendToPayout(address[])
PC address: 726
Estimated Gas Usage: 386 - 481
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x91aa1d4294fd16629fe64c570574a550827b832f.sol:6

/powerpool.finance/



--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.711643
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: convertOddToCvpAndSendToPayout(address[])
PC address: 728
Estimated Gas Usage: 386 - 481
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x91aa1d4294fd16629fe64c570574a550827b832f.sol:3

*/

/*
https://powerpool.finance/

 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:52.686536
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: getFeeAmounts()
PC address: 1057
Estimated Gas Usage: 1317 - 2164
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x91aa1d4294fd16629fe64c570574a550827b832f.sol:1125

function getFeeAmounts() public view returns(uint256[] memory) {
        return feeAmounts;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:04.088537
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: getFeeAmounts()
PC address: 1097
Estimated Gas Usage: 1467 - 2690
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x91aa1d4294fd16629fe64c570574a550827b832f.sol:1125

function getFeeAmounts() public view returns(uint256[] memory) {
        return feeAmounts;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:32.414646
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: setTokensSettings(address[],address[],bool[])
PC address: 1437
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x91aa1d4294fd16629fe64c570574a550827b832f.sol:6

/powerpool.finance/



--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:35.403253
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: setTokensSettings(address[],address[],bool[])
PC address: 1439
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x91aa1d4294fd16629fe64c570574a550827b832f.sol:3

*/

/*
https://powerpool.finance/

 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:41.498386
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: setTokensSettings(address[],address[],bool[])
PC address: 1522
Estimated Gas Usage: 539 - 634
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x91aa1d4294fd16629fe64c570574a550827b832f.sol:6

/powerpool.finance/



--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:52.513760
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: setTokensSettings(address[],address[],bool[])
PC address: 1524
Estimated Gas Usage: 539 - 634
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x91aa1d4294fd16629fe64c570574a550827b832f.sol:3

*/

/*
https://powerpool.finance/

 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:06.252740
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: setTokensSettings(address[],address[],bool[])
PC address: 1607
Estimated Gas Usage: 715 - 810
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x91aa1d4294fd16629fe64c570574a550827b832f.sol:6

/powerpool.finance/



--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:28.852018
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: setTokensSettings(address[],address[],bool[])
PC address: 1609
Estimated Gas Usage: 715 - 810
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x91aa1d4294fd16629fe64c570574a550827b832f.sol:3

*/

/*
https://powerpool.finance/

 

--------------------

==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:12.070421
Transaction Length: 1
Severity: Medium
Contract: EthPiptSwap
Function name: convertOddToCvpAndSendToPayout(address[])
PC address: 3682
Estimated Gas Usage: 596 - 3373
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../contracts/m_loop/loop8/0x91aa1d4294fd16629fe64c570574a550827b832f.sol:968

tx.origin

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:33.400692
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: getFeeAmounts()
PC address: 6820
Estimated Gas Usage: 3172 - 38537
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x91aa1d4294fd16629fe64c570574a550827b832f.sol:1126

return feeAmounts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:18.354602
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: swapEthToPipt(uint256)
PC address: 8415
Estimated Gas Usage: 3079 - 38351
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x91aa1d4294fd16629fe64c570574a550827b832f.sol:6

werpool.finance

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:45.159695
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: swapEthToPipt(uint256)
PC address: 8418
Estimated Gas Usage: 3172 - 38537
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x91aa1d4294fd16629fe64c570574a550827b832f.sol:3



/*
https://powerpool.finance/

          

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:51.426611
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: swapEthToPipt(uint256)
PC address: 8439
Estimated Gas Usage: 3172 - 38537
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x91aa1d4294fd16629fe64c570574a550827b832f.sol:863

pipt.getCurrentTokens()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:24.873846
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: swapEthToPipt(uint256)
PC address: 8464
Estimated Gas Usage: 3172 - 38537
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x91aa1d4294fd16629fe64c570574a550827b832f.sol:2


*/

/*
https://power

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:57.858910
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: swapEthToPipt(uint256)
PC address: 8470
Estimated Gas Usage: 3172 - 38537
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x91aa1d4294fd16629fe64c570574a550827b832f.sol:8

r wrr
        

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:08:39.080563
Transaction Length: 1
Severity: Low
Contract: EthPiptSwap
Function name: feeLevels(uint256)
PC address: 8962
Estimated Gas Usage: 679 - 774
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x91aa1d4294fd16629fe64c570574a550827b832f.sol:810

uint256[] public feeLevels

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:09:05.389801
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: swapPiptToEth(uint256)
PC address: 9157
Estimated Gas Usage: 2307 - 37201
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x91aa1d4294fd16629fe64c570574a550827b832f.sol:6

werpool.finance

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:30.927441
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: calcEthFee(uint256)
PC address: 22976
Estimated Gas Usage: 3172 - 38537
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x91aa1d4294fd16629fe64c570574a550827b832f.sol:359

sub(a, b, "SafeMath: subtraction overflow")

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x3a0d9acb7405f7f28d34edf26411d6f2fe36d4c9.sol
Total states:861
0.627538
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol
Total states:4294
340.467816
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.522187
Transaction Length: 1
Severity: High
Contract: Median
Function name: kiss(address[])
PC address: 492
Estimated Gas Usage: 364 - 459
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol:5

.sol

// Copyright (C

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.460374
Transaction Length: 1
Severity: High
Contract: MedianUSDTUSD
Function name: kiss(address[])
PC address: 492
Estimated Gas Usage: 364 - 459
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol:5

.sol

// Copyright (C

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.188954
Transaction Length: 1
Severity: High
Contract: Median
Function name: kiss(address[])
PC address: 494
Estimated Gas Usage: 364 - 459
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol:3

*/

/// median.sol

// Copyright (C)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.279175
Transaction Length: 1
Severity: High
Contract: MedianUSDTUSD
Function name: kiss(address[])
PC address: 494
Estimated Gas Usage: 364 - 459
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol:3

*/

/// median.sol

// Copyright (C)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.135075
Transaction Length: 1
Severity: High
Contract: Median
Function name: diss(address[])
PC address: 701
Estimated Gas Usage: 341 - 436
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol:5

.sol

// Copyright (C

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.030688
Transaction Length: 1
Severity: High
Contract: MedianUSDTUSD
Function name: diss(address[])
PC address: 701
Estimated Gas Usage: 341 - 436
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol:5

.sol

// Copyright (C

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.750733
Transaction Length: 1
Severity: High
Contract: Median
Function name: diss(address[])
PC address: 703
Estimated Gas Usage: 341 - 436
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol:3

*/

/// median.sol

// Copyright (C)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.748388
Transaction Length: 1
Severity: High
Contract: MedianUSDTUSD
Function name: diss(address[])
PC address: 703
Estimated Gas Usage: 341 - 436
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol:3

*/

/// median.sol

// Copyright (C)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:17.221761
Transaction Length: 1
Severity: High
Contract: Median
Function name: poke(uint256[],uint256[],uint8[],bytes32[],bytes32[])
PC address: 1147
Estimated Gas Usage: 385 - 480
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol:5

.sol

// Copyright (C

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:18.732618
Transaction Length: 1
Severity: High
Contract: MedianUSDTUSD
Function name: poke(uint256[],uint256[],uint8[],bytes32[],bytes32[])
PC address: 1147
Estimated Gas Usage: 385 - 480
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol:5

.sol

// Copyright (C

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:20.144838
Transaction Length: 1
Severity: High
Contract: Median
Function name: poke(uint256[],uint256[],uint8[],bytes32[],bytes32[])
PC address: 1149
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol:3

*/

/// median.sol

// Copyright (C)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:21.588064
Transaction Length: 1
Severity: High
Contract: MedianUSDTUSD
Function name: poke(uint256[],uint256[],uint8[],bytes32[],bytes32[])
PC address: 1149
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol:3

*/

/// median.sol

// Copyright (C)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:25.733780
Transaction Length: 1
Severity: High
Contract: Median
Function name: poke(uint256[],uint256[],uint8[],bytes32[],bytes32[])
PC address: 1232
Estimated Gas Usage: 561 - 656
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol:5

.sol

// Copyright (C

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:26.955933
Transaction Length: 1
Severity: High
Contract: MedianUSDTUSD
Function name: poke(uint256[],uint256[],uint8[],bytes32[],bytes32[])
PC address: 1232
Estimated Gas Usage: 561 - 656
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol:5

.sol

// Copyright (C

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:35.216056
Transaction Length: 1
Severity: High
Contract: Median
Function name: poke(uint256[],uint256[],uint8[],bytes32[],bytes32[])
PC address: 1234
Estimated Gas Usage: 561 - 656
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol:3

*/

/// median.sol

// Copyright (C)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:38.204375
Transaction Length: 1
Severity: High
Contract: MedianUSDTUSD
Function name: poke(uint256[],uint256[],uint8[],bytes32[],bytes32[])
PC address: 1234
Estimated Gas Usage: 561 - 656
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol:3

*/

/// median.sol

// Copyright (C)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:49.904886
Transaction Length: 1
Severity: High
Contract: Median
Function name: poke(uint256[],uint256[],uint8[],bytes32[],bytes32[])
PC address: 1317
Estimated Gas Usage: 737 - 832
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol:5

.sol

// Copyright (C

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:51.737484
Transaction Length: 1
Severity: High
Contract: MedianUSDTUSD
Function name: poke(uint256[],uint256[],uint8[],bytes32[],bytes32[])
PC address: 1317
Estimated Gas Usage: 737 - 832
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol:5

.sol

// Copyright (C

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:12.903851
Transaction Length: 1
Severity: High
Contract: Median
Function name: poke(uint256[],uint256[],uint8[],bytes32[],bytes32[])
PC address: 1319
Estimated Gas Usage: 737 - 832
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol:3

*/

/// median.sol

// Copyright (C)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:11.097150
Transaction Length: 1
Severity: High
Contract: MedianUSDTUSD
Function name: poke(uint256[],uint256[],uint8[],bytes32[],bytes32[])
PC address: 1319
Estimated Gas Usage: 737 - 832
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol:3

*/

/// median.sol

// Copyright (C)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:34.049088
Transaction Length: 1
Severity: High
Contract: Median
Function name: poke(uint256[],uint256[],uint8[],bytes32[],bytes32[])
PC address: 1402
Estimated Gas Usage: 913 - 1008
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol:5

.sol

// Copyright (C

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:34.977992
Transaction Length: 1
Severity: High
Contract: MedianUSDTUSD
Function name: poke(uint256[],uint256[],uint8[],bytes32[],bytes32[])
PC address: 1402
Estimated Gas Usage: 913 - 1008
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol:5

.sol

// Copyright (C

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:00.525379
Transaction Length: 1
Severity: High
Contract: Median
Function name: poke(uint256[],uint256[],uint8[],bytes32[],bytes32[])
PC address: 1404
Estimated Gas Usage: 913 - 1008
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol:3

*/

/// median.sol

// Copyright (C)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:03.612811
Transaction Length: 1
Severity: High
Contract: MedianUSDTUSD
Function name: poke(uint256[],uint256[],uint8[],bytes32[],bytes32[])
PC address: 1404
Estimated Gas Usage: 913 - 1008
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol:3

*/

/// median.sol

// Copyright (C)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:34.182412
Transaction Length: 1
Severity: High
Contract: Median
Function name: drop(address[])
PC address: 1721
Estimated Gas Usage: 429 - 524
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol:5

.sol

// Copyright (C

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:34.042229
Transaction Length: 1
Severity: High
Contract: MedianUSDTUSD
Function name: drop(address[])
PC address: 1721
Estimated Gas Usage: 429 - 524
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol:5

.sol

// Copyright (C

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:38.071851
Transaction Length: 1
Severity: High
Contract: Median
Function name: drop(address[])
PC address: 1723
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol:3

*/

/// median.sol

// Copyright (C)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:37.745161
Transaction Length: 1
Severity: High
Contract: MedianUSDTUSD
Function name: drop(address[])
PC address: 1723
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol:3

*/

/// median.sol

// Copyright (C)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:42.389508
Transaction Length: 1
Severity: High
Contract: Median
Function name: lift(address[])
PC address: 1842
Estimated Gas Usage: 340 - 435
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol:5

.sol

// Copyright (C

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:42.938406
Transaction Length: 1
Severity: High
Contract: MedianUSDTUSD
Function name: lift(address[])
PC address: 1842
Estimated Gas Usage: 340 - 435
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol:5

.sol

// Copyright (C

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:46.152905
Transaction Length: 1
Severity: High
Contract: Median
Function name: lift(address[])
PC address: 1844
Estimated Gas Usage: 340 - 435
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol:3

*/

/// median.sol

// Copyright (C)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:46.310059
Transaction Length: 1
Severity: High
Contract: MedianUSDTUSD
Function name: lift(address[])
PC address: 1844
Estimated Gas Usage: 340 - 435
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol:3

*/

/// median.sol

// Copyright (C)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0xf251cb9129fdb7e9ca5cad097de3ea70cab9d8f9.sol
Total states:24375
548.6436
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.833007
Transaction Length: 1
Severity: High
Contract: OUSD
Function name: initialize(string,string,address)
PC address: 559
Estimated Gas Usage: 364 - 459
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xf251cb9129fdb7e9ca5cad097de3ea70cab9d8f9.sol:3

*/

//pragma solidity 0.5.11;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.254250
Transaction Length: 1
Severity: High
Contract: OUSD
Function name: initialize(string,string,address)
PC address: 644
Estimated Gas Usage: 540 - 635
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xf251cb9129fdb7e9ca5cad097de3ea70cab9d8f9.sol:3

*/

//pragma solidity 0.5.11;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.283028
Transaction Length: 1
Severity: High
Contract: Vault
Function name: mintMultiple(address[],uint256[])
PC address: 776
Estimated Gas Usage: 409 - 504
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xf251cb9129fdb7e9ca5cad097de3ea70cab9d8f9.sol:5

olidity 0.5.11;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.249796
Transaction Length: 1
Severity: High
Contract: Vault
Function name: mintMultiple(address[],uint256[])
PC address: 778
Estimated Gas Usage: 409 - 504
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xf251cb9129fdb7e9ca5cad097de3ea70cab9d8f9.sol:3

*/

//pragma solidity 0.5.11;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.554821
Transaction Length: 1
Severity: High
Contract: Vault
Function name: mintMultiple(address[],uint256[])
PC address: 861
Estimated Gas Usage: 585 - 680
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xf251cb9129fdb7e9ca5cad097de3ea70cab9d8f9.sol:5

olidity 0.5.11;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:26.960665
Transaction Length: 1
Severity: High
Contract: Vault
Function name: mintMultiple(address[],uint256[])
PC address: 863
Estimated Gas Usage: 585 - 680
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xf251cb9129fdb7e9ca5cad097de3ea70cab9d8f9.sol:3

*/

//pragma solidity 0.5.11;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:42.957439
Transaction Length: 1
Severity: High
Contract: Vault
Function name: priceUSDRedeem(string)
PC address: 1274
Estimated Gas Usage: 452 - 547
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xf251cb9129fdb7e9ca5cad097de3ea70cab9d8f9.sol:3

*/

//pragma solidity 0.5.11;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:42.666996
Transaction Length: 1
Severity: High
Contract: Vault
Function name: getAllAssets()
PC address: 1374
Estimated Gas Usage: 1229 - 2076
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xf251cb9129fdb7e9ca5cad097de3ea70cab9d8f9.sol:2112

function getAllAssets() external view returns (address[] memory) {
        return allAssets;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:54.427570
Transaction Length: 1
Severity: High
Contract: Vault
Function name: getAllAssets()
PC address: 1414
Estimated Gas Usage: 1379 - 2602
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xf251cb9129fdb7e9ca5cad097de3ea70cab9d8f9.sol:2112

function getAllAssets() external view returns (address[] memory) {
        return allAssets;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:18.615625
Transaction Length: 1
Severity: High
Contract: Vault
Function name: setStrategyWeights(address[],uint256[])
PC address: 1762
Estimated Gas Usage: 385 - 480
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xf251cb9129fdb7e9ca5cad097de3ea70cab9d8f9.sol:5

olidity 0.5.11;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:21.851328
Transaction Length: 1
Severity: High
Contract: Vault
Function name: setStrategyWeights(address[],uint256[])
PC address: 1764
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xf251cb9129fdb7e9ca5cad097de3ea70cab9d8f9.sol:3

*/

//pragma solidity 0.5.11;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:27.042754
Transaction Length: 1
Severity: High
Contract: Vault
Function name: setStrategyWeights(address[],uint256[])
PC address: 1847
Estimated Gas Usage: 561 - 656
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xf251cb9129fdb7e9ca5cad097de3ea70cab9d8f9.sol:5

olidity 0.5.11;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:41.662726
Transaction Length: 1
Severity: High
Contract: Vault
Function name: setStrategyWeights(address[],uint256[])
PC address: 1849
Estimated Gas Usage: 561 - 656
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xf251cb9129fdb7e9ca5cad097de3ea70cab9d8f9.sol:3

*/

//pragma solidity 0.5.11;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:56.205080
Transaction Length: 1
Severity: High
Contract: Vault
Function name: priceUSDMint(string)
PC address: 2283
Estimated Gas Usage: 430 - 525
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xf251cb9129fdb7e9ca5cad097de3ea70cab9d8f9.sol:3

*/

//pragma solidity 0.5.11;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.133002
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3244
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xf251cb9129fdb7e9ca5cad097de3ea70cab9d8f9.sol:44

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.721627
Transaction Length: 2
Severity: High
Contract: InitializableToken
Function name: increaseAllowance(address,uint256)
PC address: 3922
Estimated Gas Usage: 992 - 1467
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xf251cb9129fdb7e9ca5cad097de3ea70cab9d8f9.sol:44

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.950814
Transaction Length: 2
Severity: High
Contract: OUSD
Function name: increaseAllowance(address,uint256)
PC address: 7848
Estimated Gas Usage: 981 - 1456
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xf251cb9129fdb7e9ca5cad097de3ea70cab9d8f9.sol:44

a + b

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:01:28.557600
Transaction Length: 1
Severity: Low
Contract: Vault
Function name: priceUSDRedeem(string)
PC address: 16328
Estimated Gas Usage: 2266 - 6736
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0xf251cb9129fdb7e9ca5cad097de3ea70cab9d8f9.sol:2209

IMinMaxOracle(priceProvider).priceMax(symbol)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:06:12.611267
Transaction Length: 1
Severity: Low
Contract: Vault
Function name: priceUSDMint(string)
PC address: 20534
Estimated Gas Usage: 2244 - 6714
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0xf251cb9129fdb7e9ca5cad097de3ea70cab9d8f9.sol:2187

IMinMaxOracle(priceProvider).priceMin(symbol)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0xA768ACDe6B95720ba926E4a615ACA733e51F6FD1.sol
Total states:3409
250.719445
==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:32.115233
Transaction Length: 1
Severity: High
Contract: Math
Function name: safeSub(uint256,uint256)
PC address: 820
Estimated Gas Usage: 309 - 404
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xA768ACDe6B95720ba926E4a615ACA733e51F6FD1.sol:109

x - y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:30.584550
Transaction Length: 1
Severity: High
Contract: Memberlist
Function name: updateMembers(address[],uint256)
PC address: 827
Estimated Gas Usage: 407 - 502
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xA768ACDe6B95720ba926E4a615ACA733e51F6FD1.sol:5

d using https://dapp.

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:33.429139
Transaction Length: 1
Severity: High
Contract: Memberlist
Function name: updateMembers(address[],uint256)
PC address: 829
Estimated Gas Usage: 407 - 502
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xA768ACDe6B95720ba926E4a615ACA733e51F6FD1.sol:3

*/

// Verified using https://dapp.t

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:34.183096
Transaction Length: 1
Severity: Low
Contract: Math
Function name: safeDiv(uint256,uint256)
PC address: 959
Estimated Gas Usage: 324 - 419
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xA768ACDe6B95720ba926E4a615ACA733e51F6FD1.sol:117

x / y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.127568
Transaction Length: 1
Severity: High
Contract: Math
Function name: rdiv(uint256,uint256)
PC address: 985
Estimated Gas Usage: 382 - 477
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xA768ACDe6B95720ba926E4a615ACA733e51F6FD1.sol:113

x * y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:21.738200
Transaction Length: 1
Severity: High
Contract: Math
Function name: rdiv(uint256,uint256)
PC address: 1128
Estimated Gas Usage: 496 - 591
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xA768ACDe6B95720ba926E4a615ACA733e51F6FD1.sol:105

x + y

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:40.133438
Transaction Length: 1
Severity: High
Contract: Memberlist
Function name: safeSub(uint256,uint256)
PC address: 2809
Estimated Gas Usage: 332 - 427
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xA768ACDe6B95720ba926E4a615ACA733e51F6FD1.sol:109

x - y

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:54.064484
Transaction Length: 1
Severity: Low
Contract: Memberlist
Function name: safeDiv(uint256,uint256)
PC address: 2948
Estimated Gas Usage: 347 - 442
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xA768ACDe6B95720ba926E4a615ACA733e51F6FD1.sol:117

x / y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.275460
Transaction Length: 1
Severity: High
Contract: Memberlist
Function name: rdiv(uint256,uint256)
PC address: 2998
Estimated Gas Usage: 450 - 545
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xA768ACDe6B95720ba926E4a615ACA733e51F6FD1.sol:113

x * y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.962400
Transaction Length: 1
Severity: High
Contract: Memberlist
Function name: rdiv(uint256,uint256)
PC address: 3141
Estimated Gas Usage: 564 - 659
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xA768ACDe6B95720ba926E4a615ACA733e51F6FD1.sol:105

x + y

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x1905ad9f818cabf6e0ca2a22c8bbcb8b2f12fb85.sol
Total states:4628
11.412133
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:02.354775
Transaction Length: 1
Severity: Low
Contract: HypeStake
Function name: ADDFUNDS(uint256)
PC address: 6904
Estimated Gas Usage: 1663 - 2654
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x1905ad9f818cabf6e0ca2a22c8bbcb8b2f12fb85.sol:756

IERC20(Hype).transferFromStake(msg.sender, address(this), tokens)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:05.885296
Transaction Length: 1
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 7447
Estimated Gas Usage: 2451 - 3442
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x1905ad9f818cabf6e0ca2a22c8bbcb8b2f12fb85.sol:660

IERC20(Hype).transferFromStake(msg.sender, address(this), tokens)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:02.463051
Transaction Length: 2
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 7447
Estimated Gas Usage: 2472 - 3463
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x1905ad9f818cabf6e0ca2a22c8bbcb8b2f12fb85.sol:660

IERC20(Hype).transferFromStake(msg.sender, address(this), tokens)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.994863
Transaction Length: 1
Severity: High
Contract: HypeStake
Function name: ADDFUNDS(uint256)
PC address: 9273
Estimated Gas Usage: 3425 - 38602
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x1905ad9f818cabf6e0ca2a22c8bbcb8b2f12fb85.sol:220

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0xed2ACF1E3776585b3568Cd88Da08f5be3d894a88.sol
Total states:1503
10.998886
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.095126
Transaction Length: 0
Severity: High
Contract: ERC20
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xed2ACF1E3776585b3568Cd88Da08f5be3d894a88.sol:15

/**
    * 可选方法
    */
    function 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.171072
Transaction Length: 0
Severity: High
Contract: BtswapToken
Function name: constructor
PC address: 1203
Estimated Gas Usage: 1750 - 36312
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xed2ACF1E3776585b3568Cd88Da08f5be3d894a88.sol:86

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0xef7920e4808e92724f438c572a38bc459463e09d.sol
Total states:3219
57.962018
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.368816
Transaction Length: 1
Severity: High
Contract: MerkleRedeem
Function name: merkleRoots(uint256,uint256)
PC address: 1293
Estimated Gas Usage: 601 - 979
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xef7920e4808e92724f438c572a38bc459463e09d.sol:338

1 + _end

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:02.705212
Transaction Length: 1
Severity: High
Contract: MerkleRedeem
Function name: merkleRoots(uint256,uint256)
PC address: 1294
Estimated Gas Usage: 601 - 979
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xef7920e4808e92724f438c572a38bc459463e09d.sol:338

1 + _end - _begin

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.190685
Transaction Length: 1
Severity: High
Contract: MerkleRedeem
Function name: merkleRoots(uint256,uint256)
PC address: 1332
Estimated Gas Usage: 697 - 3379
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xef7920e4808e92724f438c572a38bc459463e09d.sol:2

or verification

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:09.085795
Transaction Length: 1
Severity: Low
Contract: MerkleRedeem
Function name: _verifiedTokens(uint256)
PC address: 1830
Estimated Gas Usage: 872 - 967
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xef7920e4808e92724f438c572a38bc459463e09d.sol:124

address[] public _verifiedTokens

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x3032Ab3Fa8C01d786D29dAdE018d7f2017918e12.sol
Total states:4414
5.854566
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x51DB1Da6635578B9186B26871038F18351CDD527.sol
Total states:8668
150.654479
==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:01.674157
Transaction Length: 1
Severity: Medium
Contract: RewardDecayAggregator
Function name: claimReward()
PC address: 108
Estimated Gas Usage: 4540 - 74419
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 470
Offset: 470
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop8/0x51DB1Da6635578B9186B26871038F18351CDD527.sol:1455

function claimReward() public {
        for (uint256 i = 0; i < rewarders.length; i++) {
            rewarders[i].getRewardEx(msg.sender);
        }
    }

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:01.612955
Transaction Length: 1
Severity: Low
Contract: RewardDecayAggregator
Function name: claimReward()
PC address: 470
Estimated Gas Usage: 3660 - 39353
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x51DB1Da6635578B9186B26871038F18351CDD527.sol:1457

rewarders[i].getRewardEx(msg.sender)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:02.722744
Transaction Length: 1
Severity: Low
Contract: RewardDecayAggregator
Function name: rewarders(uint256)
PC address: 870
Estimated Gas Usage: 278 - 373
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x51DB1Da6635578B9186B26871038F18351CDD527.sol:1448

StakingRewardsDecay[2] public rewarders

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:01.472151
Transaction Length: 1
Severity: Low
Contract: StakingRewardsDecayHolder
Function name: withdraw(uint256,address)
PC address: 1090
Estimated Gas Usage: 1894 - 4952
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x51DB1Da6635578B9186B26871038F18351CDD527.sol:938

address(rewarder).call(
                abi.encodeWithSelector(rewarder.withdraw.selector, msg.sender, amount, gem)
            )

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.156245
Transaction Length: 1
Severity: High
Contract: StakingRewardsDecay
Function name: initAllEpochs(uint256[],uint256,uint256)
PC address: 1382
Estimated Gas Usage: 452 - 547
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x51DB1Da6635578B9186B26871038F18351CDD527.sol:5

lattened sources of s

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.122680
Transaction Length: 1
Severity: High
Contract: StakingRewardsDecay
Function name: initAllEpochs(uint256[],uint256,uint256)
PC address: 1384
Estimated Gas Usage: 452 - 547
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x51DB1Da6635578B9186B26871038F18351CDD527.sol:3

*/

// hevm: flattened sources of sr

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:15.676346
Transaction Length: 1
Severity: Low
Contract: StakingRewardsDecayHolder
Function name: stake(uint256,address)
PC address: 1969
Estimated Gas Usage: 1615 - 2606
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x51DB1Da6635578B9186B26871038F18351CDD527.sol:928

rewarder.stake(msg.sender, amount, gem)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:36.104648
Transaction Length: 1
Severity: Low
Contract: StakingRewardsDecay
Function name: getEpochRewardRate(uint256)
PC address: 10020
Estimated Gas Usage: 814 - 909
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x51DB1Da6635578B9186B26871038F18351CDD527.sol:1128

epochs[epochIdx]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:36.538462
Transaction Length: 1
Severity: Low
Contract: StakingRewardsDecay
Function name: getEpochStartTime(uint256)
PC address: 10062
Estimated Gas Usage: 705 - 800
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x51DB1Da6635578B9186B26871038F18351CDD527.sol:1132

epochs[epochIdx]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:04.940225
Transaction Length: 1
Severity: Low
Contract: StakingRewardsDecay
Function name: getEpochFinishTime(uint256)
PC address: 11918
Estimated Gas Usage: 748 - 843
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x51DB1Da6635578B9186B26871038F18351CDD527.sol:1136

epochs[epochIdx]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:18.662790
Transaction Length: 1
Severity: Low
Contract: StakingRewardsDecay
Function name: epochs(uint256)
PC address: 12771
Estimated Gas Usage: 723 - 818
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x51DB1Da6635578B9186B26871038F18351CDD527.sol:1007

EpochData[] public epochs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:18.875957
Transaction Length: 1
Severity: Low
Contract: StakingRewardsDecay
Function name: getStartTime()
PC address: 12880
Estimated Gas Usage: 666 - 761
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x51DB1Da6635578B9186B26871038F18351CDD527.sol:1054

epochs[0]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:30.999924
Transaction Length: 1
Severity: Low
Contract: StakingRewardsDecay
Function name: getRewardPerHour()
PC address: 15597
Estimated Gas Usage: 1563 - 1658
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x51DB1Da6635578B9186B26871038F18351CDD527.sol:1279

epochs[calcCurrentEpoch()]

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol
Total states:48552
310.708675
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.513371
Transaction Length: 1
Severity: Low
Contract: Getters
Function name: expiringCouponsAtIndex(uint256,uint256)
PC address: 2821
Estimated Gas Usage: 1090 - 1375
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:1167

_state.epochs[epoch].coupons.expiring[i]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.931352
Transaction Length: 1
Severity: High
Contract: Getters
Function name: totalNet()
PC address: 4239
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:9

solidity ^0.5.1

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.788254
Transaction Length: 1
Severity: High
Contract: Getters
Function name: totalNet()
PC address: 4242
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:5

*/



//pragma solidity ^0.5.17;	
pragma so

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.374301
Transaction Length: 1
Severity: High
Contract: Getters
Function name: totalNet()
PC address: 4254
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:1079

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.342369
Transaction Length: 1
Severity: High
Contract: Comptroller
Function name: totalNet()
PC address: 4439
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:9

solidity ^0.5.1

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.079266
Transaction Length: 1
Severity: High
Contract: Permission
Function name: totalNet()
PC address: 4439
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:9

solidity ^0.5.1

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.595773
Transaction Length: 1
Severity: High
Contract: Regulator
Function name: totalNet()
PC address: 4439
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:9

solidity ^0.5.1

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.688249
Transaction Length: 1
Severity: High
Contract: Setters
Function name: totalNet()
PC address: 4439
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:9

solidity ^0.5.1

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.208225
Transaction Length: 1
Severity: High
Contract: Comptroller
Function name: totalNet()
PC address: 4442
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:5

*/



//pragma solidity ^0.5.17;	
pragma so

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.947474
Transaction Length: 1
Severity: High
Contract: Permission
Function name: totalNet()
PC address: 4442
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:5

*/



//pragma solidity ^0.5.17;	
pragma so

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.466867
Transaction Length: 1
Severity: High
Contract: Regulator
Function name: totalNet()
PC address: 4442
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:5

*/



//pragma solidity ^0.5.17;	
pragma so

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.555254
Transaction Length: 1
Severity: High
Contract: Setters
Function name: totalNet()
PC address: 4442
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:5

*/



//pragma solidity ^0.5.17;	
pragma so

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.793909
Transaction Length: 1
Severity: High
Contract: Comptroller
Function name: totalNet()
PC address: 4454
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:1079

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.522402
Transaction Length: 1
Severity: High
Contract: Permission
Function name: totalNet()
PC address: 4454
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:1079

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.042374
Transaction Length: 1
Severity: High
Contract: Regulator
Function name: totalNet()
PC address: 4454
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:1079

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.130146
Transaction Length: 1
Severity: High
Contract: Setters
Function name: totalNet()
PC address: 4454
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:1079

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.011715
Transaction Length: 1
Severity: High
Contract: Market
Function name: totalNet()
PC address: 5431
Estimated Gas Usage: 2863 - 37757
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:9

solidity ^0.5.1

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.870969
Transaction Length: 1
Severity: High
Contract: Market
Function name: totalNet()
PC address: 5434
Estimated Gas Usage: 2863 - 37757
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:5

*/



//pragma solidity ^0.5.17;	
pragma so

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.463260
Transaction Length: 1
Severity: High
Contract: Market
Function name: totalNet()
PC address: 5446
Estimated Gas Usage: 2863 - 37757
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:1079

dollar().totalSupply()

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.485987
Transaction Length: 1
Severity: High
Contract: Getters
Function name: totalNet()
PC address: 5728
Estimated Gas Usage: 2775 - 37669
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:60

unterpart to Solidity's

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.705124
Transaction Length: 1
Severity: High
Contract: Bonding
Function name: totalNet()
PC address: 5823
Estimated Gas Usage: 2753 - 37647
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:9

solidity ^0.5.1

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.589920
Transaction Length: 1
Severity: High
Contract: Bonding
Function name: totalNet()
PC address: 5826
Estimated Gas Usage: 2753 - 37647
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:5

*/



//pragma solidity ^0.5.17;	
pragma so

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.166600
Transaction Length: 1
Severity: High
Contract: Bonding
Function name: totalNet()
PC address: 5838
Estimated Gas Usage: 2753 - 37647
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:1079

dollar().totalSupply()

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.889232
Transaction Length: 1
Severity: High
Contract: Comptroller
Function name: totalNet()
PC address: 6018
Estimated Gas Usage: 2775 - 37669
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:78

or.
     *
     * Requi

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.633699
Transaction Length: 1
Severity: High
Contract: Permission
Function name: totalNet()
PC address: 6018
Estimated Gas Usage: 2775 - 37669
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:78

or.
     *
     * Requi

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:06.143847
Transaction Length: 1
Severity: High
Contract: Regulator
Function name: totalNet()
PC address: 6018
Estimated Gas Usage: 2775 - 37669
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:78

or.
     *
     * Requi

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.244119
Transaction Length: 1
Severity: High
Contract: Setters
Function name: totalNet()
PC address: 6018
Estimated Gas Usage: 2775 - 37669
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:78

or.
     *
     * Requi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.144990
Transaction Length: 1
Severity: High
Contract: Market
Function name: couponPremium(uint256)
PC address: 6118
Estimated Gas Usage: 2510 - 37404
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:9

solidity ^0.5.1

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.779034
Transaction Length: 1
Severity: High
Contract: Market
Function name: couponPremium(uint256)
PC address: 6121
Estimated Gas Usage: 2510 - 37404
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:5

*/



//pragma solidity ^0.5.17;	
pragma so

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.031313
Transaction Length: 1
Severity: High
Contract: Market
Function name: couponPremium(uint256)
PC address: 6133
Estimated Gas Usage: 2510 - 37404
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:2026

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.537909
Transaction Length: 1
Severity: High
Contract: Implementation
Function name: totalNet()
PC address: 8520
Estimated Gas Usage: 2819 - 37713
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:9

solidity ^0.5.1

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.402162
Transaction Length: 1
Severity: High
Contract: Implementation
Function name: totalNet()
PC address: 8523
Estimated Gas Usage: 2819 - 37713
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:5

*/



//pragma solidity ^0.5.17;	
pragma so

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.979963
Transaction Length: 1
Severity: High
Contract: Implementation
Function name: totalNet()
PC address: 8535
Estimated Gas Usage: 2819 - 37713
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:1079

dollar().totalSupply()

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.237779
Transaction Length: 1
Severity: High
Contract: Bonding
Function name: totalNet()
PC address: 10194
Estimated Gas Usage: 2753 - 37647
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:87

= 0) {
            retu

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:14.679813
Transaction Length: 1
Severity: Low
Contract: Market
Function name: purchaseCoupons(uint256)
PC address: 10433
Estimated Gas Usage: 703 - 1362
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:1678

result[i]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.304134
Transaction Length: 1
Severity: High
Contract: Implementation
Function name: couponPremium(uint256)
PC address: 10604
Estimated Gas Usage: 2533 - 37427
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:9

solidity ^0.5.1

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.566944
Transaction Length: 1
Severity: High
Contract: Implementation
Function name: couponPremium(uint256)
PC address: 10607
Estimated Gas Usage: 2533 - 37427
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:5

*/



//pragma solidity ^0.5.17;	
pragma so

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.909244
Transaction Length: 1
Severity: High
Contract: Implementation
Function name: couponPremium(uint256)
PC address: 10619
Estimated Gas Usage: 2533 - 37427
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:2026

dollar().totalSupply()

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.559267
Transaction Length: 1
Severity: High
Contract: Market
Function name: totalNet()
PC address: 12218
Estimated Gas Usage: 2863 - 37757
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:108

(uint256 a, uint256 b) 

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:06.083879
Transaction Length: 1
Severity: High
Contract: Implementation
Function name: totalNet()
PC address: 24849
Estimated Gas Usage: 2819 - 37713
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:142

* Requirements:
     * 

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x4277803927cfF19dE354757B7364ffBC2533caC0.sol
Total states:5461
8.665481
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.044322
Transaction Length: 0
Severity: High
Contract: Oracle
Function name: constructor
PC address: 104
Estimated Gas Usage: 257 - 3030
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x4277803927cfF19dE354757B7364ffBC2533caC0.sol:12

rnal view returns (ui

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.055249
Transaction Length: 0
Severity: High
Contract: Oracle
Function name: constructor
PC address: 106
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x4277803927cfF19dE354757B7364ffBC2533caC0.sol:12

ion latestRound() external view returns (uin

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:06.090781
Transaction Length: 1
Severity: Low
Contract: Oracle
Function name: refs(uint256)
PC address: 1299
Estimated Gas Usage: 723 - 818
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x4277803927cfF19dE354757B7364ffBC2533caC0.sol:256

AggregatorInterface[] public refs

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x7b4a7fd41c688a7cb116534e341e44126ef5a0fd.sol
Total states:131
15.682203
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x02Fc38369890Aff2EC94B28863AE0DacdB2Dbae3.sol
Total states:381
0.499688
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0xcb46298767fb5d44c18313976c30d3eeb5071862.sol
Total states:77
3.343577
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x689744e7ebd5155ab5a945e1c863ce413c7a8013.sol
Total states:1308
1.114344
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0xbfe2be7731b7bc4e6efc32e57143e1ee95f6e92a.sol
Total states:15386
128.24922
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:03.342342
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3645
Estimated Gas Usage: 1025 - 1500
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xbfe2be7731b7bc4e6efc32e57143e1ee95f6e92a.sol:56

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:36.706951
Transaction Length: 2
Severity: High
Contract: ERC20Pausable
Function name: increaseAllowance(address,uint256)
PC address: 5504
Estimated Gas Usage: 1070 - 1545
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xbfe2be7731b7bc4e6efc32e57143e1ee95f6e92a.sol:56

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x1E79a835bfb3f015201792871B2D01E8C03ed8Ef.sol
Total states:13276
736.376772
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.150276
Transaction Length: 1
Severity: High
Contract: AriaCoin
Function name: dropToken(address[],uint256[])
PC address: 2006
Estimated Gas Usage: 385 - 480
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x1E79a835bfb3f015201792871B2D01E8C03ed8Ef.sol:5

olidity ^0.5.0;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.265504
Transaction Length: 1
Severity: High
Contract: AriaCoin
Function name: dropToken(address[],uint256[])
PC address: 2008
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x1E79a835bfb3f015201792871B2D01E8C03ed8Ef.sol:3

*/

//pragma solidity ^0.5.0;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:19.286457
Transaction Length: 1
Severity: High
Contract: AriaCoin
Function name: dropToken(address[],uint256[])
PC address: 2154
Estimated Gas Usage: 718 - 3495
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x1E79a835bfb3f015201792871B2D01E8C03ed8Ef.sol:5

olidity ^0.5.0;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:31.696991
Transaction Length: 1
Severity: High
Contract: AriaCoin
Function name: dropToken(address[],uint256[])
PC address: 2156
Estimated Gas Usage: 718 - 3495
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x1E79a835bfb3f015201792871B2D01E8C03ed8Ef.sol:3

*/

//pragma solidity ^0.5.0;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:54.988488
Transaction Length: 1
Severity: High
Contract: AriaCoin
Function name: approveAndCall(address,uint256,bytes)
PC address: 2382
Estimated Gas Usage: 467 - 562
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x1E79a835bfb3f015201792871B2D01E8C03ed8Ef.sol:3

*/

//pragma solidity ^0.5.0;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:39.772603
Transaction Length: 1
Severity: High
Contract: AriaCoin
Function name: approveAndCall(address,uint256,bytes)
PC address: 9900
Estimated Gas Usage: 1597 - 7903
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x1E79a835bfb3f015201792871B2D01E8C03ed8Ef.sol:30

require(b <= a, errorMessage)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0xD239FAF120B6015971Fc92f288560262A96b4789.sol
Total states:13229
46.50404
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:00.027178
Transaction Length: 0
Severity: Low
Contract: UrnHandler
Function name: constructor
PC address: 223
Estimated Gas Usage: 1003 - 4059
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0xD239FAF120B6015971Fc92f288560262A96b4789.sol:82

VatLike(vat).hope(msg.sender)

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:08.590840
Transaction Length: 1
Severity: Medium
Contract: GetCdps
Function name: getCdpsAsc(address,address)
PC address: 416
Estimated Gas Usage: 4549 - 83031
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 909
Offset: 1280
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop8/0xD239FAF120B6015971Fc92f288560262A96b4789.sol:348

function getCdpsAsc(address manager, address guy) external view returns (uint[] memory ids, address[] memory urns, bytes32[] memory ilks) {
        uint count = DssCdpManager(manager).count(guy);
        ids = new uint[](count);
        urns = new address[](count);
        ilks = new bytes32[](count);
        uint i = 0;
        uint id = DssCdpManager(manager).first(guy);

        while (id > 0) {
            ids[i] = id;
            urns[i] = DssCdpManager(manager).urns(id);
            ilks[i] = DssCdpManager(manager).ilks(id);
            (,id) = DssCdpManager(manager).list(id);
            i++;
        }
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:36.541536
Transaction Length: 1
Severity: High
Contract: GetCdps
Function name: getCdpsDesc(address,address)
PC address: 623
Estimated Gas Usage: 4144 - 75057
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xD239FAF120B6015971Fc92f288560262A96b4789.sol:365

function getCdpsDesc(address manager, address guy) external view returns (uint[] memory ids, address[] memory urns, bytes32[] memory ilks) {
        uint count = DssCdpManager(manager).count(guy);
        ids = new uint[](count);
        urns = new address[](count);
        ilks = new bytes32[](count);
        uint i = 0;
        uint id = DssCdpManager(manager).last(guy);

        while (id > 0) {
            ids[i] = id;
            urns[i] = DssCdpManager(manager).urns(id);
            ilks[i] = DssCdpManager(manager).ilks(id);
            (id,) = DssCdpManager(manager).list(id);
            i++;
        }
    }

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:14.337048
Transaction Length: 1
Severity: Low
Contract: GetCdps
Function name: getCdpsAsc(address,address)
PC address: 1558
Estimated Gas Usage: 5749 - 117572
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xD239FAF120B6015971Fc92f288560262A96b4789.sol:358

urns[i]

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0xe167b66d5F8692f6fF9de36137B9155345384c3C.sol
Total states:21448
41.841434
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x05977619e19fbc2f94bde352a78353b54dd918df.sol
Total states:3816
24.424589
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.822600
Transaction Length: 1
Severity: High
Contract: Core
Function name: whitelistTokens(address[])
PC address: 826
Estimated Gas Usage: 386 - 481
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x05977619e19fbc2f94bde352a78353b54dd918df.sol:9

ma solidity 0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.821366
Transaction Length: 1
Severity: High
Contract: Core
Function name: whitelistTokens(address[])
PC address: 828
Estimated Gas Usage: 386 - 481
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x05977619e19fbc2f94bde352a78353b54dd918df.sol:3



*/



//pragma solidity 0.5.17;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.107164
Transaction Length: 1
Severity: High
Contract: Core
Function name: whitelistPeak(address,uint256[],uint256,bool)
PC address: 1109
Estimated Gas Usage: 418 - 513
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x05977619e19fbc2f94bde352a78353b54dd918df.sol:9

ma solidity 0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.164443
Transaction Length: 1
Severity: High
Contract: Core
Function name: whitelistPeak(address,uint256[],uint256,bool)
PC address: 1111
Estimated Gas Usage: 418 - 513
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x05977619e19fbc2f94bde352a78353b54dd918df.sol:3



*/



//pragma solidity 0.5.17;
pr

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:19.248669
Transaction Length: 1
Severity: Low
Contract: Core
Function name: systemCoins(uint256)
PC address: 6871
Estimated Gas Usage: 723 - 818
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x05977619e19fbc2f94bde352a78353b54dd918df.sol:504

address[] public systemCoins

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:19.646931
Transaction Length: 1
Severity: Low
Contract: Core
Function name: peaksAddresses(uint256)
PC address: 6933
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x05977619e19fbc2f94bde352a78353b54dd918df.sol:522

address[] public peaksAddresses

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:20.480132
Transaction Length: 1
Severity: Low
Contract: Core
Function name: feed(uint256)
PC address: 8445
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x05977619e19fbc2f94bde352a78353b54dd918df.sol:505

uint[] public feed

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0xfd64dad84bdd0c735dec910936f301c74fc4bcdd.sol
Total states:13416
31.679703
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:06.925135
Transaction Length: 1
Severity: Low
Contract: AEther
Function name: seize(address,address,uint256)
PC address: 11731
Estimated Gas Usage: 7680 - 28861
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0xfd64dad84bdd0c735dec910936f301c74fc4bcdd.sol:1820

controller.seizeAllowed(address(this), msg.sender, liquidator, borrower, seizeTokens)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:05.178350
Transaction Length: 1
Severity: Low
Contract: AEther
Function name: transfer(address,uint256)
PC address: 18184
Estimated Gas Usage: 7688 - 28774
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0xfd64dad84bdd0c735dec910936f301c74fc4bcdd.sol:813

controller.transferAllowed(address(this), src, dst, tokens)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:06.335099
Transaction Length: 2
Severity: Low
Contract: AEther
Function name: transfer(address,uint256)
PC address: 18184
Estimated Gas Usage: 7685 - 28771
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0xfd64dad84bdd0c735dec910936f301c74fc4bcdd.sol:813

controller.transferAllowed(address(this), src, dst, tokens)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x26c1869825d4d31e19d653026c85ed44b626c2bb.sol
Total states:1734
5.420073
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x0fe5fb1e6bc1c5103bf411abee17dc88e1781688.sol
Total states:6382
42.358206
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.354533
Transaction Length: 1
Severity: High
Contract: SmartChain
Function name: drawPool(address[],uint256[])
PC address: 2587
Estimated Gas Usage: 384 - 479
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x0fe5fb1e6bc1c5103bf411abee17dc88e1781688.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.156806
Transaction Length: 1
Severity: High
Contract: SmartChain
Function name: drawPool(address[],uint256[])
PC address: 2589
Estimated Gas Usage: 384 - 479
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x0fe5fb1e6bc1c5103bf411abee17dc88e1781688.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:14.738330
Transaction Length: 1
Severity: High
Contract: SmartChain
Function name: drawPool(address[],uint256[])
PC address: 2672
Estimated Gas Usage: 560 - 655
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x0fe5fb1e6bc1c5103bf411abee17dc88e1781688.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:27.896810
Transaction Length: 1
Severity: High
Contract: SmartChain
Function name: drawPool(address[],uint256[])
PC address: 2674
Estimated Gas Usage: 560 - 655
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x0fe5fb1e6bc1c5103bf411abee17dc88e1781688.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:05.117921
Transaction Length: 1
Severity: Low
Contract: SmartChain
Function name: ref_bonuses(uint256)
PC address: 11790
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x0fe5fb1e6bc1c5103bf411abee17dc88e1781688.sol:227

uint8[] public ref_bonuses

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0xa78aa407b45183fd7ca8598311dfa57181b38a4a.sol
Total states:2324
2.168306
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0xFFC8A0D94D51a0477723bAeCCfC2026102bF3Ad1.sol
Total states:18680
146.86074
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.809810
Transaction Length: 1
Severity: High
Contract: unichat
Function name: bulkTransfer(address[],uint256[])
PC address: 757
Estimated Gas Usage: 408 - 503
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xFFC8A0D94D51a0477723bAeCCfC2026102bF3Ad1.sol:5

olidity ^0.5.13;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.685201
Transaction Length: 1
Severity: High
Contract: unichat
Function name: bulkTransfer(address[],uint256[])
PC address: 759
Estimated Gas Usage: 408 - 503
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xFFC8A0D94D51a0477723bAeCCfC2026102bF3Ad1.sol:3

*/

//pragma solidity ^0.5.13;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.288365
Transaction Length: 1
Severity: High
Contract: unichat
Function name: bulkTransfer(address[],uint256[])
PC address: 842
Estimated Gas Usage: 584 - 679
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xFFC8A0D94D51a0477723bAeCCfC2026102bF3Ad1.sol:5

olidity ^0.5.13;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:26.165459
Transaction Length: 1
Severity: High
Contract: unichat
Function name: bulkTransfer(address[],uint256[])
PC address: 844
Estimated Gas Usage: 584 - 679
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xFFC8A0D94D51a0477723bAeCCfC2026102bF3Ad1.sol:3

*/

//pragma solidity ^0.5.13;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:40.391093
Transaction Length: 1
Severity: High
Contract: unichat
Function name: transferAndCall(address,uint256,bytes)
PC address: 1417
Estimated Gas Usage: 511 - 606
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xFFC8A0D94D51a0477723bAeCCfC2026102bF3Ad1.sol:3

*/

//pragma solidity ^0.5.13;
prag

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:49.086535
Transaction Length: 1
Severity: Low
Contract: unichat
Function name: unfreeze(uint256)
PC address: 6428
Estimated Gas Usage: 1375 - 1660
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xFFC8A0D94D51a0477723bAeCCfC2026102bF3Ad1.sol:212

_burnedAmount * FLOAT_SCALAR / info.totalFrozen

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:24.022760
Transaction Length: 2
Severity: Low
Contract: unichat
Function name: unfreeze(uint256)
PC address: 6428
Estimated Gas Usage: 1375 - 1660
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xFFC8A0D94D51a0477723bAeCCfC2026102bF3Ad1.sol:212

_burnedAmount * FLOAT_SCALAR / info.totalFrozen

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x8baf22bf5788be6bc099deffc0ae6c5206631dd6.sol
Total states:149
2.657043
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x1c254696bc3e231fddbc4970bce2f8c6cd5f78f0.sol
Total states:265
1.757055
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.130066
Transaction Length: 0
Severity: High
Contract: MultisigVaultERC20
Function name: constructor
PC address: 120
Estimated Gas Usage: 287 - 3153
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x1c254696bc3e231fddbc4970bce2f8c6cd5f78f0.sol:12

ess them see `ERC20De

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0xf03abaada6f3069aaf3a923769b8d931154c2dd4.sol
Total states:6637
122.242015
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.122899
Transaction Length: 1
Severity: High
Contract: yNFTETHPool
Function name: stakeMultiple(uint256[])
PC address: 1950
Estimated Gas Usage: 429 - 524
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xf03abaada6f3069aaf3a923769b8d931154c2dd4.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.785493
Transaction Length: 1
Severity: High
Contract: yNFTETHPool
Function name: stakeMultiple(uint256[])
PC address: 1952
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xf03abaada6f3069aaf3a923769b8d931154c2dd4.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:06.751974
Transaction Length: 1
Severity: High
Contract: yNFTETHPool
Function name: withdrawMultiple(uint256[])
PC address: 2419
Estimated Gas Usage: 429 - 524
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xf03abaada6f3069aaf3a923769b8d931154c2dd4.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:10.284367
Transaction Length: 1
Severity: High
Contract: yNFTETHPool
Function name: withdrawMultiple(uint256[])
PC address: 2421
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xf03abaada6f3069aaf3a923769b8d931154c2dd4.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.890766
Transaction Length: 1
Severity: High
Contract: LPTokenWrapper
Function name: calculateCoverValue(uint256,uint256,uint256)
PC address: 6226
Estimated Gas Usage: 414 - 509
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xf03abaada6f3069aaf3a923769b8d931154c2dd4.sol:160

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.677260
Transaction Length: 1
Severity: High
Contract: yNFTETHPool
Function name: calculateCoverValue(uint256,uint256,uint256)
PC address: 12448
Estimated Gas Usage: 438 - 533
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xf03abaada6f3069aaf3a923769b8d931154c2dd4.sol:160

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0xfebfd5c75c32a23739eb1935c80248436248e296.sol
Total states:52525
1007.154629
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.914953
Transaction Length: 1
Severity: High
Contract: AccessChecker
Function name: getModuleAddress(string)
PC address: 416
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xfebfd5c75c32a23739eb1935c80248436248e296.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.965615
Transaction Length: 1
Severity: High
Contract: Module
Function name: getModuleAddress(string)
PC address: 416
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xfebfd5c75c32a23739eb1935c80248436248e296.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.047025
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(string,string,uint8)
PC address: 1000
Estimated Gas Usage: 409 - 504
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xfebfd5c75c32a23739eb1935c80248436248e296.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.769066
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(string,string,uint8)
PC address: 1151
Estimated Gas Usage: 751 - 3528
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xfebfd5c75c32a23739eb1935c80248436248e296.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.695753
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[],uint256)
PC address: 2226
Estimated Gas Usage: 429 - 524
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xfebfd5c75c32a23739eb1935c80248436248e296.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.420373
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[],uint256)
PC address: 2228
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xfebfd5c75c32a23739eb1935c80248436248e296.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.194019
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[])
PC address: 2357
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xfebfd5c75c32a23739eb1935c80248436248e296.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:15.543483
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[])
PC address: 2359
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xfebfd5c75c32a23739eb1935c80248436248e296.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.881482
Transaction Length: 1
Severity: High
Contract: SavingsModule
Function name: deposit(address,address[],uint256[])
PC address: 2437
Estimated Gas Usage: 507 - 602
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xfebfd5c75c32a23739eb1935c80248436248e296.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.530796
Transaction Length: 1
Severity: High
Contract: SavingsModule
Function name: deposit(address,address[],uint256[])
PC address: 2439
Estimated Gas Usage: 507 - 602
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xfebfd5c75c32a23739eb1935c80248436248e296.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:38.595995
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: getModuleAddress(string)
PC address: 2526
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xfebfd5c75c32a23739eb1935c80248436248e296.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:19.237426
Transaction Length: 1
Severity: High
Contract: SavingsModule
Function name: deposit(address,address[],uint256[])
PC address: 2585
Estimated Gas Usage: 840 - 3617
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xfebfd5c75c32a23739eb1935c80248436248e296.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:31.780341
Transaction Length: 1
Severity: High
Contract: SavingsModule
Function name: deposit(address,address[],uint256[])
PC address: 2587
Estimated Gas Usage: 840 - 3617
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xfebfd5c75c32a23739eb1935c80248436248e296.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:28.277868
Transaction Length: 1
Severity: High
Contract: SavingsModule
Function name: getModuleAddress(string)
PC address: 2950
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xfebfd5c75c32a23739eb1935c80248436248e296.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:24.303430
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(address,string,string)
PC address: 3179
Estimated Gas Usage: 485 - 580
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xfebfd5c75c32a23739eb1935c80248436248e296.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.102109
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3249
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xfebfd5c75c32a23739eb1935c80248436248e296.sol:34

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:45.669941
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(address,string,string)
PC address: 3330
Estimated Gas Usage: 827 - 3604
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xfebfd5c75c32a23739eb1935c80248436248e296.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.355327
Transaction Length: 1
Severity: Low
Contract: DistributionToken
Function name: distributions(uint256)
PC address: 3405
Estimated Gas Usage: 724 - 819
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xfebfd5c75c32a23739eb1935c80248436248e296.sol:1314

Distribution[] public distributions

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.346551
Transaction Length: 2
Severity: High
Contract: ERC20Burnable
Function name: increaseAllowance(address,uint256)
PC address: 3429
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xfebfd5c75c32a23739eb1935c80248436248e296.sol:34

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.243574
Transaction Length: 2
Severity: High
Contract: ERC20Mintable
Function name: increaseAllowance(address,uint256)
PC address: 4214
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xfebfd5c75c32a23739eb1935c80248436248e296.sol:34

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:42.157254
Transaction Length: 1
Severity: Low
Contract: PoolToken
Function name: distributions(uint256)
PC address: 6392
Estimated Gas Usage: 768 - 863
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xfebfd5c75c32a23739eb1935c80248436248e296.sol:1314

Distribution[] public distributions

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.962419
Transaction Length: 2
Severity: High
Contract: DistributionToken
Function name: increaseAllowance(address,uint256)
PC address: 6759
Estimated Gas Usage: 1104 - 1579
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xfebfd5c75c32a23739eb1935c80248436248e296.sol:34

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:58.713024
Transaction Length: 1
Severity: Low
Contract: SavingsModule
Function name: registeredPoolTokens()
PC address: 14663
Estimated Gas Usage: 1220 - 1691
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xfebfd5c75c32a23739eb1935c80248436248e296.sol:2230

registeredProtocols[i]

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x4febc44f05f6ce0dae0ba90c0c700ed18178063b.sol
Total states:28391
190.26409
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:01.287996
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3645
Estimated Gas Usage: 1025 - 1500
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x4febc44f05f6ce0dae0ba90c0c700ed18178063b.sol:52

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:46.378600
Transaction Length: 2
Severity: High
Contract: ERC20Burnable
Function name: increaseAllowance(address,uint256)
PC address: 3818
Estimated Gas Usage: 1025 - 1500
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x4febc44f05f6ce0dae0ba90c0c700ed18178063b.sol:52

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:36.317957
Transaction Length: 2
Severity: High
Contract: ERC20Pausable
Function name: increaseAllowance(address,uint256)
PC address: 6493
Estimated Gas Usage: 1556 - 2361
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x4febc44f05f6ce0dae0ba90c0c700ed18178063b.sol:52

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0xf10ed760794d40fd7142daaa66ec4c4676301296.sol
Total states:25097
72.664461
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x6393445CfF2Cfe22a44c72243d26B3e1175D594F.sol
Total states:1567
62.218903
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.405361
Transaction Length: 1
Severity: High
Contract: CsmClaim
Function name: addPendingClaims(address[])
PC address: 491
Estimated Gas Usage: 386 - 481
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x6393445CfF2Cfe22a44c72243d26B3e1175D594F.sol:5

olidity >=0.5.0 <0.7.

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.760068
Transaction Length: 1
Severity: High
Contract: CsmClaim
Function name: addPendingClaims(address[])
PC address: 493
Estimated Gas Usage: 386 - 481
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x6393445CfF2Cfe22a44c72243d26B3e1175D594F.sol:3

*/

//pragma solidity >=0.5.0 <0.7.0

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x067e398605E84F2D0aEEC1806e62768C5110DCc6.sol
Total states:1499
22.750381
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x5cf9242493be1411b93d064ca2e468961bbb5924.sol
Total states:3260
15.756663
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x07e79aefdc3a44603a1ccc3e89310a0806fb278b.sol
Total states:475
6.562682
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x9e1d0964d519CCb470151Dd85E78fc798C75dEB7.sol
Total states:3620
5.910636
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x5eda5792125e4ad108454e6d607db156f10f7ec3.sol
Total states:77
3.292688
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x9f18363ff3ab60fdf7dcaca8564a48ea0790b9b3.sol
Total states:9900
17.866009
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x8b8e3c7b02c08bd00739ef67f458bb6089cc0f50.sol
Total states:426
0.766902
The analysis was completed successfully. No issues were detected.
---------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x9f49a6d5e83ec8bccc1cb14a2b0401cce0cd8790.sol
Total states:425
1.664964
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x5e17e1c81dd8906485cf44d7abb51ad2c9fe11a9.sol
Total states:180
8.085444
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xDAF819c2437a82f9e01f6586207ebF961a7f0970.sol
Total states:8980
124.789904
==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:00.467107
Transaction Length: 1
Severity: Medium
Contract: FeeTo
Function name: claim(address)
PC address: 347
Estimated Gas Usage: 4387 - 74597
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 1668
Offset: 1891
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../new/0xDAF819c2437a82f9e01f6586207ebF961a7f0970.sol:98

function claim(address pair) public returns (uint value) {
        PairAllowState storage pairAllowState = pairAllowStates[pair];
        TokenAllowState storage token0AllowState = tokenAllowStates[IUniswapV2Pair(pair).token0()];
        TokenAllowState storage token1AllowState = tokenAllowStates[IUniswapV2Pair(pair).token1()];

        // we may claim only if each of the following five conditions are true:
        // 1) token0 is currently allowed
        // 2) token1 is currently allowed
        // 3) renounce was not called since the last time token0 was disallowed
        // 4) renounce was not called since the last time token1 was disallowed
        // 5) feeHandler is not the 0 address
        if (
            token0AllowState.allowed &&
            token1AllowState.allowed &&
            token0AllowState.disallowCount == pairAllowState.token0DisallowCount &&
            token1AllowState.disallowCount == pairAllowState.token1DisallowCount &&
            feeRecipient != address(0)
        ) {
            value = IUniswapV2Pair(pair).balanceOf(address(this));
            if (value > 0) {
                // transfer tokens to the handler (assert because transfer cannot fail with value as balanceOf)
                assert(IUniswapV2Pair(pair).transfer(feeRecipient, value));
            }
        }
    }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:22.193982
Transaction Length: 2
Severity: Medium
Contract: FeeTo
Function name: claim(address)
PC address: 347
Estimated Gas Usage: 5747 - 76947
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 1668
Offset: 1891
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../new/0xDAF819c2437a82f9e01f6586207ebF961a7f0970.sol:98

function claim(address pair) public returns (uint value) {
        PairAllowState storage pairAllowState = pairAllowStates[pair];
        TokenAllowState storage token0AllowState = tokenAllowStates[IUniswapV2Pair(pair).token0()];
        TokenAllowState storage token1AllowState = tokenAllowStates[IUniswapV2Pair(pair).token1()];

        // we may claim only if each of the following five conditions are true:
        // 1) token0 is currently allowed
        // 2) token1 is currently allowed
        // 3) renounce was not called since the last time token0 was disallowed
        // 4) renounce was not called since the last time token1 was disallowed
        // 5) feeHandler is not the 0 address
        if (
            token0AllowState.allowed &&
            token1AllowState.allowed &&
            token0AllowState.disallowCount == pairAllowState.token0DisallowCount &&
            token1AllowState.disallowCount == pairAllowState.token1DisallowCount &&
            feeRecipient != address(0)
        ) {
            value = IUniswapV2Pair(pair).balanceOf(address(this));
            if (value > 0) {
                // transfer tokens to the handler (assert because transfer cannot fail with value as balanceOf)
                assert(IUniswapV2Pair(pair).transfer(feeRecipient, value));
            }
        }
    }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:24.413861
Transaction Length: 2
Severity: Medium
Contract: FeeTo
Function name: renounce(address)
PC address: 435
Estimated Gas Usage: 4863 - 75403
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 3041
Offset: 3264
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../new/0xDAF819c2437a82f9e01f6586207ebF961a7f0970.sol:63

function renounce(address pair) public returns (uint value) {
        PairAllowState storage pairAllowState = pairAllowStates[pair];
        TokenAllowState storage token0AllowState = tokenAllowStates[IUniswapV2Pair(pair).token0()];
        TokenAllowState storage token1AllowState = tokenAllowStates[IUniswapV2Pair(pair).token1()];

        // we must renounce if any of the following four conditions are true:
        // 1) token0 is currently disallowed
        // 2) token1 is currently disallowed
        // 3) token0 was disallowed at least once since the last time renounce was called
        // 4) token1 was disallowed at least once since the last time renounce was called
        if (
            token0AllowState.allowed == false ||
            token1AllowState.allowed == false ||
            token0AllowState.disallowCount > pairAllowState.token0DisallowCount ||
            token1AllowState.disallowCount > pairAllowState.token1DisallowCount
        ) {
            value = IUniswapV2Pair(pair).balanceOf(address(this));
            if (value > 0) {
                // burn balance into the pair, effectively redistributing underlying tokens pro-rata back to LPs
                // (assert because transfer cannot fail with value as balanceOf)
                assert(IUniswapV2Pair(pair).transfer(pair, value));
                IUniswapV2Pair(pair).burn(pair);
            }

            // if token0 is allowed, we can now update the pair's disallow count to match the token's
            if (token0AllowState.allowed) {
                pairAllowState.token0DisallowCount = token0AllowState.disallowCount;
            }
            // if token1 is allowed, we can now update the pair's disallow count to match the token's
            if (token1AllowState.allowed) {
                pairAllowState.token1DisallowCount = token1AllowState.disallowCount;
            }
        }
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.296154
Transaction Length: 1
Severity: High
Contract: FeeTo
Function name: updateTokenAllowStates(address[],bool)
PC address: 726
Estimated Gas Usage: 318 - 413
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xDAF819c2437a82f9e01f6586207ebF961a7f0970.sol:5

olidity ^0.5.16;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.654089
Transaction Length: 1
Severity: High
Contract: FeeTo
Function name: updateTokenAllowStates(address[],bool)
PC address: 728
Estimated Gas Usage: 318 - 413
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xDAF819c2437a82f9e01f6586207ebF961a7f0970.sol:3

*/

//pragma solidity ^0.5.16;
pragm

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xf0cbba291d9809569d0a74ea56cd20253a421f8d.sol
Total states:77
3.226162
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xe32f474bd16fcde5a303e3dafdfdba0f98279a40.sol
Total states:5004
25.512131
==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:12.534751
Transaction Length: 1
Severity: Medium
Contract: KOREv2Router
Function name: refreshApproval()
PC address: 1203
Estimated Gas Usage: 7875 - 113921
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 5671
Offset: 5994
Offset: 6317
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../new/0xe32f474bd16fcde5a303e3dafdfdba0f98279a40.sol:840

function refreshApproval() public {
        IUniswapV2Pair(_koreWETHPair).approve(address(_koreVault), uint(-1));
        IERC20(_koreToken).approve(_wKoreToken, uint(-1));
        IERC20(_wKoreToken).approve(address(_koreVault), uint(-1));
    }

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:08.492761
Transaction Length: 1
Severity: Low
Contract: KOREv2Router
Function name: fallback
PC address: 2301
Estimated Gas Usage: 7975 - 29769
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0xe32f474bd16fcde5a303e3dafdfdba0f98279a40.sol:878

_WETH.deposit.value(msg.value)()

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:09.538014
Transaction Length: 1
Severity: Low
Contract: KOREv2Router
Function name: refreshApproval()
PC address: 5671
Estimated Gas Usage: 1958 - 3184
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0xe32f474bd16fcde5a303e3dafdfdba0f98279a40.sol:841

IUniswapV2Pair(_koreWETHPair).approve(address(_koreVault), uint(-1))

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:10.732231
Transaction Length: 1
Severity: Low
Contract: KOREv2Router
Function name: refreshApproval()
PC address: 5994
Estimated Gas Usage: 4506 - 41049
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0xe32f474bd16fcde5a303e3dafdfdba0f98279a40.sol:842

IERC20(_koreToken).approve(_wKoreToken, uint(-1))

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:12.370519
Transaction Length: 1
Severity: Low
Contract: KOREv2Router
Function name: refreshApproval()
PC address: 6317
Estimated Gas Usage: 7054 - 78914
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0xe32f474bd16fcde5a303e3dafdfdba0f98279a40.sol:843

IERC20(_wKoreToken).approve(address(_koreVault), uint(-1))

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xb791B258c49451fFD3A5Eab293ab71cBb99FfCa1.sol
Total states:6948
19.116964
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.040970
Transaction Length: 0
Severity: High
Contract: Token
Function name: constructor
PC address: 215
Estimated Gas Usage: 11082 - 52027
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xb791B258c49451fFD3A5Eab293ab71cBb99FfCa1.sol:111

now + 30 minutes

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xf389039010dc743c0461ce0d0f436d7a125c5102.sol
Total states:1308
1.053983
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x5bcd68ed6d3f307f7f595a05bdf47faa18d0ece0.sol
Total states:1007
5.572546
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xea5D932C80A45948d07bD2298e79E17b2910d6A4.sol
Total states:4368
599.703346
==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.005633
Transaction Length: 0
Severity: Medium
Contract: Governance
Function name: constructor
PC address: 18
Estimated Gas Usage: 42 - 137
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../new/0xea5D932C80A45948d07bD2298e79E17b2910d6A4.sol:639

tx.origin

--------------------

==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.030511
Transaction Length: 0
Severity: Medium
Contract: LPTokenWrapper
Function name: constructor
PC address: 241
Estimated Gas Usage: 16419 - 77504
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../new/0xea5D932C80A45948d07bD2298e79E17b2910d6A4.sol:639

tx.origin

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.311325
Transaction Length: 0
Severity: High
Contract: UniswapReward
Function name: constructor
PC address: 516
Estimated Gas Usage: 37837 - 179912
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xea5D932C80A45948d07bD2298e79E17b2910d6A4.sol:796

now + 365 days

--------------------

==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.987105
Transaction Length: 0
Severity: Medium
Contract: UniswapReward
Function name: constructor
PC address: 580
Estimated Gas Usage: 78340 - 380745
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../new/0xea5D932C80A45948d07bD2298e79E17b2910d6A4.sol:639

tx.origin

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.792641
Transaction Length: 1
Severity: High
Contract: LPTokenWrapper
Function name: stake(uint256,string)
PC address: 873
Estimated Gas Usage: 411 - 506
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xea5D932C80A45948d07bD2298e79E17b2910d6A4.sol:3

*/

/***
 *    ██████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.202427
Transaction Length: 1
Severity: High
Contract: UniswapReward
Function name: stake(uint256,string)
PC address: 2435
Estimated Gas Usage: 456 - 551
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xea5D932C80A45948d07bD2298e79E17b2910d6A4.sol:3

*/

/***
 *    ██████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:56.326937
Transaction Length: 1
Severity: High
Contract: UniswapReward
Function name: seize(address,uint256)
PC address: 13914
Estimated Gas Usage: 2651 - 5713
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xea5D932C80A45948d07bD2298e79E17b2910d6A4.sol:544

address(token).call(abi.encodeWithSelector(SELECTOR, to, value))

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:06:59.801050
Transaction Length: 1
Severity: Medium
Contract: UniswapReward
Function name: seize(address,uint256)
PC address: 13931
Estimated Gas Usage: 2976 - 7118
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../new/0xea5D932C80A45948d07bD2298e79E17b2910d6A4.sol:544

address(token).call(abi.encodeWithSelector(SELECTOR, to, value))

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol
Total states:35277
197.236824
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.152217
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1004
Estimated Gas Usage: 417 - 512
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.353567
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1006
Estimated Gas Usage: 417 - 512
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.056678
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1089
Estimated Gas Usage: 593 - 688
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:22.880820
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1091
Estimated Gas Usage: 593 - 688
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.926083
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1184
Estimated Gas Usage: 484 - 579
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.347002
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1186
Estimated Gas Usage: 484 - 579
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.774591
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1269
Estimated Gas Usage: 660 - 755
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:20.036307
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1271
Estimated Gas Usage: 660 - 755
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.711450
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleAccess
Function name: interpolate(uint256,uint256,uint256,uint256,uint256)
PC address: 2313
Estimated Gas Usage: 997 - 1848
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:162

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.815908
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeBP(uint256)
PC address: 2585
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:784

uint[] public bonusRangeBP

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.395010
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3192
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:1266

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:03.835312
Transaction Length: 2
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3192
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:1266

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:37.717896
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeStart(uint256)
PC address: 6017
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:783

uint[] public bonusRangeStart

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:21.334374
Transaction Length: 1
Severity: Low
Contract: LidStaking
Function name: stakeHandlers(uint256)
PC address: 6118
Estimated Gas Usage: 790 - 885
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:962

IStakeHandler[] public stakeHandlers

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.685508
Transaction Length: 2
Severity: High
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6315
Estimated Gas Usage: 1699 - 2124
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:1112

stakeHandlers.length-1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:07.872537
Transaction Length: 2
Severity: Low
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6326
Estimated Gas Usage: 1709 - 2134
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:1112

stakeHandlers[stakeHandlers.length-1]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:33.821740
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: calculateRatePerEth(uint256,uint256,uint256)
PC address: 6866
Estimated Gas Usage: 955 - 1050
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:162

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:31.247283
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPoolBPs(uint256)
PC address: 13062
Estimated Gas Usage: 722 - 817
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:1267

uint[] public tokenPoolBPs

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.405717
Transaction Length: 1
Severity: High
Contract: LidStaking
Function name: findTaxAmount(uint256,uint256)
PC address: 13348
Estimated Gas Usage: 474 - 569
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:162

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x974aa2a41cbd088acde4ee67721e3809cd8b665c.sol
Total states:2324
1.827397
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x18C480a97c5F36d6bB185741ad5df9ab9361050A.sol
Total states:5938
21.711918
==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:03.641629
Transaction Length: 1
Severity: Medium
Contract: RewardProxyActions
Function name: claimReward(address)
PC address: 144
Estimated Gas Usage: 5139 - 108825
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 250
Offset: 409
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../new/0x18C480a97c5F36d6bB185741ad5df9ab9361050A.sol:1271

function claimReward(address rewarder) public {
        uint256 reward = StakingRewards(rewarder).getReward();
        IERC20(StakingRewards(rewarder).gov()).transfer(msg.sender, reward);
    }

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:00:01.602824
Transaction Length: 1
Severity: Medium
Contract: RewardProxyActions
Function name: claimReward(address)
PC address: 250
Estimated Gas Usage: 1019 - 1395
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../new/0x18C480a97c5F36d6bB185741ad5df9ab9361050A.sol:1272

StakingRewards(rewarder).getReward()

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:03.541675
Transaction Length: 1
Severity: Low
Contract: RewardProxyActions
Function name: claimReward(address)
PC address: 630
Estimated Gas Usage: 4314 - 73814
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0x18C480a97c5F36d6bB185741ad5df9ab9361050A.sol:1273

IERC20(StakingRewards(rewarder).gov()).transfer(msg.sender, reward)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xcb13fe86e4f8139d56f694c9a452d03e00f708ef2.sol
Total states:976
23.502515
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.669181
Transaction Length: 1
Severity: High
Contract: UniswapV2
Function name: allPairsLength()
PC address: 398
Estimated Gas Usage: 2192 - 37086
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcb13fe86e4f8139d56f694c9a452d03e00f708ef2.sol:5

racts/lib/IERC2

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.318933
Transaction Length: 1
Severity: High
Contract: UniswapV2
Function name: allPairsLength()
PC address: 401
Estimated Gas Usage: 2192 - 37086
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcb13fe86e4f8139d56f694c9a452d03e00f708ef2.sol:3



// File: contracts/lib/IERC20.sol

//prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.142220
Transaction Length: 1
Severity: High
Contract: UniswapV2
Function name: allPairsLength()
PC address: 413
Estimated Gas Usage: 2192 - 37086
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcb13fe86e4f8139d56f694c9a452d03e00f708ef2.sol:154

factory.allPairsLength()

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:06.387298
Transaction Length: 1
Severity: High
Contract: UniswapV2
Function name: getPairs(uint256,uint256)
PC address: 2557
Estimated Gas Usage: 560 - 938
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0xcb13fe86e4f8139d56f694c9a452d03e00f708ef2.sol:158

toIndex - fromIndex

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:02.198523
Transaction Length: 1
Severity: High
Contract: UniswapV2
Function name: allPairsLength()
PC address: 3659
Estimated Gas Usage: 2192 - 37086
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0xcb13fe86e4f8139d56f694c9a452d03e00f708ef2.sol:44

e number of decimals us

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x8b60794127b20c2f4dc58db2da7e6f68ed4fafdf.sol
Total states:23598
65.287304
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.548820
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3244
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x8b60794127b20c2f4dc58db2da7e6f68ed4fafdf.sol:121

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.869821
Transaction Length: 1
Severity: High
Contract: DynamicSwap
Function name: swapExactAmountOut(address,address,uint256,uint256,uint256)
PC address: 11813
Estimated Gas Usage: 2280 - 37172
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x8b60794127b20c2f4dc58db2da7e6f68ed4fafdf.sol:140

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.826515
Transaction Length: 2
Severity: High
Contract: DynamicSwap
Function name: increaseAllowance(address,uint256)
PC address: 12742
Estimated Gas Usage: 1037 - 1512
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x8b60794127b20c2f4dc58db2da7e6f68ed4fafdf.sol:121

a + b

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:09.817615
Transaction Length: 1
Severity: High
Contract: DynamicSwap
Function name: getInExactOut(address,int256,int256,int256)
PC address: 14595
Estimated Gas Usage: 538 - 633
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0x8b60794127b20c2f4dc58db2da7e6f68ed4fafdf.sol:229

a - b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:20.816586
Transaction Length: 1
Severity: High
Contract: DynamicSwap
Function name: getOutExactIn(address,int256,int256,int256)
PC address: 15815
Estimated Gas Usage: 583 - 678
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x8b60794127b20c2f4dc58db2da7e6f68ed4fafdf.sol:235

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.537652
Transaction Length: 1
Severity: High
Contract: DynamicSwap
Function name: getInExactOut(address,int256,int256,int256)
PC address: 16940
Estimated Gas Usage: 788 - 883
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x8b60794127b20c2f4dc58db2da7e6f68ed4fafdf.sol:215

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x8d4192005ed871056f53df7840c3b6d5866e3339.sol
Total states:49731
147.498457
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.068092
Transaction Length: 0
Severity: High
Contract: ManagerUpgradeable
Function name: constructor
PC address: 104
Estimated Gas Usage: 257 - 3030
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x8d4192005ed871056f53df7840c3b6d5866e3339.sol:14

sert(c / a == b);
   

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.083758
Transaction Length: 0
Severity: High
Contract: ManagerUpgradeable
Function name: constructor
PC address: 106
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x8d4192005ed871056f53df7840c3b6d5866e3339.sol:13

 c = a * b;
        assert(c / a == b);
    

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.076502
Transaction Length: 0
Severity: High
Contract: DFKProxy
Function name: constructor
PC address: 110
Estimated Gas Usage: 257 - 3030
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x8d4192005ed871056f53df7840c3b6d5866e3339.sol:14

sert(c / a == b);
   

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.091831
Transaction Length: 0
Severity: High
Contract: DFKProxy
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x8d4192005ed871056f53df7840c3b6d5866e3339.sol:13

 c = a * b;
        assert(c / a == b);
    

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.149937
Transaction Length: 0
Severity: High
Contract: DFKImplement
Function name: constructor
PC address: 130
Estimated Gas Usage: 317 - 3276
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x8d4192005ed871056f53df7840c3b6d5866e3339.sol:14

sert(c / a == b);
   

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:42.279651
Transaction Length: 1
Severity: Low
Contract: DFKProxy
Function name: withdrawProfit(address)
PC address: 2525
Estimated Gas Usage: 1560 - 2361
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0x8d4192005ed871056f53df7840c3b6d5866e3339.sol:370

impl.withdrawProfit(to)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:44.619989
Transaction Length: 1
Severity: Low
Contract: DFKProxy
Function name: stakingDeposit(uint256)
PC address: 3290
Estimated Gas Usage: 1514 - 2315
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0x8d4192005ed871056f53df7840c3b6d5866e3339.sol:359

impl.stakingDeposit(value)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:45.728801
Transaction Length: 1
Severity: Low
Contract: DFKProxy
Function name: resumeStaking()
PC address: 3592
Estimated Gas Usage: 1472 - 2178
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0x8d4192005ed871056f53df7840c3b6d5866e3339.sol:431

impl.resumeStaking()

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:47.872526
Transaction Length: 1
Severity: Low
Contract: DFKProxy
Function name: withdrawStaking(address,uint256)
PC address: 4544
Estimated Gas Usage: 1628 - 2524
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0x8d4192005ed871056f53df7840c3b6d5866e3339.sol:375

impl.withdrawStaking(to,value)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.759549
Transaction Length: 2
Severity: High
Contract: DFKToken
Function name: increaseApproval(address,uint256)
PC address: 4989
Estimated Gas Usage: 1002 - 1477
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x8d4192005ed871056f53df7840c3b6d5866e3339.sol:31

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.045947
Transaction Length: 2
Severity: High
Contract: StandardToken
Function name: increaseApproval(address,uint256)
PC address: 4989
Estimated Gas Usage: 1002 - 1477
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x8d4192005ed871056f53df7840c3b6d5866e3339.sol:31

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:29.886226
Transaction Length: 2
Severity: Low
Contract: DFKToken
Function name: increaseApproval(address,uint256)
PC address: 5002
Estimated Gas Usage: 1012 - 1487
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x8d4192005ed871056f53df7840c3b6d5866e3339.sol:32

assert(c >= a)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:29.653811
Transaction Length: 2
Severity: Low
Contract: StandardToken
Function name: increaseApproval(address,uint256)
PC address: 5002
Estimated Gas Usage: 1012 - 1487
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x8d4192005ed871056f53df7840c3b6d5866e3339.sol:32

assert(c >= a)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:49.507760
Transaction Length: 1
Severity: Low
Contract: DFKProxy
Function name: profit2Staking(uint256)
PC address: 7128
Estimated Gas Usage: 1537 - 2338
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0x8d4192005ed871056f53df7840c3b6d5866e3339.sol:365

impl.profit2Staking(value)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:50.513270
Transaction Length: 1
Severity: Low
Contract: DFKProxy
Function name: pauseStaking()
PC address: 7905
Estimated Gas Usage: 1471 - 2177
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0x8d4192005ed871056f53df7840c3b6d5866e3339.sol:425

impl.pauseStaking()

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:51.947476
Transaction Length: 1
Severity: Low
Contract: DFKProxy
Function name: withdrawAll(address)
PC address: 8160
Estimated Gas Usage: 1621 - 2422
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0x8d4192005ed871056f53df7840c3b6d5866e3339.sol:380

impl.withdrawAll(to)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x1e54c640eacb49ff1aa2d9c478246540a468e86c.sol
Total states:5682
260.526008
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.486724
Transaction Length: 1
Severity: High
Contract: Staker
Function name: stake()
PC address: 2691
Estimated Gas Usage: 598 - 693
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x1e54c640eacb49ff1aa2d9c478246540a468e86c.sol:174

creationTime + 2 hours

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.127687
Transaction Length: 1
Severity: High
Contract: Staker
Function name: stake()
PC address: 15322
Estimated Gas Usage: 7881 - 113077
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x1e54c640eacb49ff1aa2d9c478246540a468e86c.sol:27

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xd573051e50f97fd8fb7eec96e96f872996a36fa8.sol
Total states:34465
233.450156
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x096835f967D22EC35b78F887c3e9b936b84A3aF7.sol
Total states:359
0.710184
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.464378
Transaction Length: 1
Severity: Low
Contract: GemForRewardChecker
Function name: checkers(uint256)
PC address: 468
Estimated Gas Usage: 634 - 729
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x096835f967D22EC35b78F887c3e9b936b84A3aF7.sol:13

address[] public checkers

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xd848f9b61affaaa2e5a7402e87d27eaa0cc27b6f.sol
Total states:9842
835.612046
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.678767
Transaction Length: 1
Severity: High
Contract: VAPE
Function name: multiTransfer(address[],uint256[])
PC address: 623
Estimated Gas Usage: 341 - 436
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xd848f9b61affaaa2e5a7402e87d27eaa0cc27b6f.sol:5

olidity ^0.5.0;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.597729
Transaction Length: 1
Severity: High
Contract: VAPE
Function name: multiTransfer(address[],uint256[])
PC address: 625
Estimated Gas Usage: 341 - 436
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xd848f9b61affaaa2e5a7402e87d27eaa0cc27b6f.sol:3

*/

//pragma solidity ^0.5.0;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:15.813944
Transaction Length: 1
Severity: High
Contract: VAPE
Function name: multiTransfer(address[],uint256[])
PC address: 771
Estimated Gas Usage: 674 - 3451
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xd848f9b61affaaa2e5a7402e87d27eaa0cc27b6f.sol:5

olidity ^0.5.0;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:32.406617
Transaction Length: 1
Severity: High
Contract: VAPE
Function name: multiTransfer(address[],uint256[])
PC address: 773
Estimated Gas Usage: 674 - 3451
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xd848f9b61affaaa2e5a7402e87d27eaa0cc27b6f.sol:3

*/

//pragma solidity ^0.5.0;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:25.468907
Transaction Length: 1
Severity: High
Contract: VAPE
Function name: symbol()
PC address: 1411
Estimated Gas Usage: 528 - 1658
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xd848f9b61affaaa2e5a7402e87d27eaa0cc27b6f.sol:103

string public constant symbol = "VAPE"

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:23.446286
Transaction Length: 1
Severity: High
Contract: VAPE
Function name: approveAndCall(address,uint256,bytes)
PC address: 1756
Estimated Gas Usage: 444 - 539
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xd848f9b61affaaa2e5a7402e87d27eaa0cc27b6f.sol:3

*/

//pragma solidity ^0.5.0;
pragm

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:16.297563
Transaction Length: 1
Severity: Low
Contract: VAPE
Function name: multiTransfer(address[],uint256[])
PC address: 2361
Estimated Gas Usage: 1028 - 6859
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xd848f9b61affaaa2e5a7402e87d27eaa0cc27b6f.sol:140

amounts[i]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:03:46.906542
Transaction Length: 2
Severity: Low
Contract: VAPE
Function name: multiTransfer(address[],uint256[])
PC address: 2361
Estimated Gas Usage: 1040 - 6871
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xd848f9b61affaaa2e5a7402e87d27eaa0cc27b6f.sol:140

amounts[i]

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:08:13.708062
Transaction Length: 1
Severity: Medium
Contract: VAPE
Function name: approveAndCall(address,uint256,bytes)
PC address: 5473
Estimated Gas Usage: 8291 - 32458
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../new/0xd848f9b61affaaa2e5a7402e87d27eaa0cc27b6f.sol:154

ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xd7E6cf7a09DFC8c820f606119e9E5e58e2E34C66.sol
Total states:3193
9.971941
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.864989
Transaction Length: 2
Severity: High
Contract: LPTokenWrapperWithSlash
Function name: stake(uint256)
PC address: 963
Estimated Gas Usage: 765 - 860
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xd7E6cf7a09DFC8c820f606119e9E5e58e2E34C66.sol:78

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x22dfed2edd99a1f1e6a7475f58e6435e0b6126eb.sol
Total states:2441
15587.499198
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.361301
Transaction Length: 1
Severity: High
Contract: MysticMolochSummoner
Function name: summonMoloch(address,address,address[],uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256)
PC address: 234
Estimated Gas Usage: 362 - 457
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x22dfed2edd99a1f1e6a7475f58e6435e0b6126eb.sol:9

ma solidity 0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.874077
Transaction Length: 1
Severity: High
Contract: MysticMolochSummoner
Function name: summonMoloch(address,address,address[],uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256)
PC address: 236
Estimated Gas Usage: 362 - 457
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x22dfed2edd99a1f1e6a7475f58e6435e0b6126eb.sol:3



*/



//pragma solidity 0.5.17;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:20.020177
Transaction Length: 1
Severity: High
Contract: MysticMolochSummoner
Function name: summonMoloch(address,address,address[],uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256)
PC address: 382
Estimated Gas Usage: 704 - 3481
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x22dfed2edd99a1f1e6a7475f58e6435e0b6126eb.sol:9

ma solidity 0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:32.861446
Transaction Length: 1
Severity: High
Contract: MysticMolochSummoner
Function name: summonMoloch(address,address,address[],uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256)
PC address: 384
Estimated Gas Usage: 704 - 3481
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x22dfed2edd99a1f1e6a7475f58e6435e0b6126eb.sol:3



*/



//pragma solidity 0.5.17;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:11.082234
Transaction Length: 1
Severity: High
Contract: MysticMolochSummoner
Function name: summonMoloch(address,address,address[],uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256)
PC address: 1068
Estimated Gas Usage: 34153 - 42115
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x22dfed2edd99a1f1e6a7475f58e6435e0b6126eb.sol:2112

baal.init(

            _depositToken,

            _stakeToken,

            _summoner,

            _summonerShares,

            _summonerDeposit,

            _proposalDeposit,

            _processingReward,

            _periodDuration,

            _votingPeriodLength,

            _gracePeriodLength,

            _dilutionBound

        )

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:05:24.659512
Transaction Length: 1
Severity: Low
Contract: MysticMolochSummoner
Function name: summonMoloch(address,address,address[],uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256)
PC address: 1152
Estimated Gas Usage: 35124 - 43555
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0x22dfed2edd99a1f1e6a7475f58e6435e0b6126eb.sol:2112

baal.init(

            _depositToken,

            _stakeToken,

            _summoner,

            _summonerShares,

            _summonerDeposit,

            _proposalDeposit,

            _processingReward,

            _periodDuration,

            _votingPeriodLength,

            _gracePeriodLength,

            _dilutionBound

        )

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:04:32.902811
Transaction Length: 1
Severity: Medium
Contract: MysticMolochSummoner
Function name: summonMoloch(address,address,address[],uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256)
PC address: 1391
Estimated Gas Usage: 36672 - 79481
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../new/0x22dfed2edd99a1f1e6a7475f58e6435e0b6126eb.sol:2140

IERC20(_depositToken).transferFrom(msg.sender, address(baal), _summonerDeposit)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.168799
Transaction Length: 1
Severity: High
Contract: MysticMoloch
Function name: withdrawBalances(address[],uint256[],bool)
PC address: 3302
Estimated Gas Usage: 408 - 503
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x22dfed2edd99a1f1e6a7475f58e6435e0b6126eb.sol:9

ma solidity 0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.808311
Transaction Length: 1
Severity: High
Contract: MysticMoloch
Function name: withdrawBalances(address[],uint256[],bool)
PC address: 3304
Estimated Gas Usage: 408 - 503
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x22dfed2edd99a1f1e6a7475f58e6435e0b6126eb.sol:3



*/



//pragma solidity 0.5.17;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:14.446258
Transaction Length: 1
Severity: High
Contract: MysticMoloch
Function name: withdrawBalances(address[],uint256[],bool)
PC address: 3387
Estimated Gas Usage: 584 - 679
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x22dfed2edd99a1f1e6a7475f58e6435e0b6126eb.sol:9

ma solidity 0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:25.233290
Transaction Length: 1
Severity: High
Contract: MysticMoloch
Function name: withdrawBalances(address[],uint256[],bool)
PC address: 3389
Estimated Gas Usage: 584 - 679
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x22dfed2edd99a1f1e6a7475f58e6435e0b6126eb.sol:3



*/



//pragma solidity 0.5.17;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:37.362284
Transaction Length: 1
Severity: High
Contract: MysticMoloch
Function name: submitActionProposal(address,address,uint256,uint256,bytes,bytes32)
PC address: 5178
Estimated Gas Usage: 550 - 645
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x22dfed2edd99a1f1e6a7475f58e6435e0b6126eb.sol:3



*/



//pragma solidity 0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:09.170808
Transaction Length: 1
Severity: High
Contract: MysticMoloch
Function name: init(address,address,address[],uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256)
PC address: 5488
Estimated Gas Usage: 451 - 546
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x22dfed2edd99a1f1e6a7475f58e6435e0b6126eb.sol:9

ma solidity 0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:14.518563
Transaction Length: 1
Severity: High
Contract: MysticMoloch
Function name: init(address,address,address[],uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256)
PC address: 5490
Estimated Gas Usage: 451 - 546
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x22dfed2edd99a1f1e6a7475f58e6435e0b6126eb.sol:3



*/



//pragma solidity 0.5.17;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:20.671418
Transaction Length: 1
Severity: High
Contract: MysticMoloch
Function name: init(address,address,address[],uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256)
PC address: 5573
Estimated Gas Usage: 627 - 722
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x22dfed2edd99a1f1e6a7475f58e6435e0b6126eb.sol:9

ma solidity 0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:28.041273
Transaction Length: 1
Severity: High
Contract: MysticMoloch
Function name: init(address,address,address[],uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256)
PC address: 5575
Estimated Gas Usage: 627 - 722
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x22dfed2edd99a1f1e6a7475f58e6435e0b6126eb.sol:3



*/



//pragma solidity 0.5.17;
pr

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:02.492699
Transaction Length: 1
Severity: Low
Contract: MysticMoloch
Function name: approvedTokens(uint256)
PC address: 9271
Estimated Gas Usage: 791 - 886
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x22dfed2edd99a1f1e6a7475f58e6435e0b6126eb.sol:346

address[] public approvedTokens

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:04.725823
Transaction Length: 1
Severity: Low
Contract: MysticMoloch
Function name: proposalQueue(uint256)
PC address: 12856
Estimated Gas Usage: 769 - 864
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x22dfed2edd99a1f1e6a7475f58e6435e0b6126eb.sol:366

uint256[] public proposalQueue

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:38.949513
Transaction Length: 1
Severity: High
Contract: MysticMoloch
Function name: submitWhitelistProposal(address,bytes32)
PC address: 24290
Estimated Gas Usage: 1106 - 4496
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x22dfed2edd99a1f1e6a7475f58e6435e0b6126eb.sol:618

_submitProposal(address(0), 0, 0, 0, tokenToWhitelist, 0, address(0), details, flags, "")

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 2:08:28.121175
Transaction Length: 1
Severity: High
Contract: MysticMoloch
Function name: getProposalFlags(uint256)
PC address: 25274
Estimated Gas Usage: 1106 - 4496
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x22dfed2edd99a1f1e6a7475f58e6435e0b6126eb.sol:1628

return proposals[proposalId].flags

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 2:08:35.945662
Transaction Length: 1
Severity: High
Contract: MysticMoloch
Function name: getProposalFlags(uint256)
PC address: 25295
Estimated Gas Usage: 1106 - 4496
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x22dfed2edd99a1f1e6a7475f58e6435e0b6126eb.sol:1628

return proposals[proposalId].flags

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 2:08:43.434991
Transaction Length: 1
Severity: High
Contract: MysticMoloch
Function name: getProposalFlags(uint256)
PC address: 25322
Estimated Gas Usage: 1106 - 4496
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x22dfed2edd99a1f1e6a7475f58e6435e0b6126eb.sol:1628

return proposals[proposalId].flags

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:33.854712
Transaction Length: 1
Severity: High
Contract: MysticMoloch
Function name: submitWhitelistProposal(address,bytes32)
PC address: 44536
Estimated Gas Usage: 1106 - 4496
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x22dfed2edd99a1f1e6a7475f58e6435e0b6126eb.sol:146

contract MysticMoloch is ReentrancyGuard { 

    using SafeMath for uint256;



    /***************

    GLOBAL CONSTANTS

    ***************/

    address public depositToken; // deposit token contract reference - default = wETH

    address public stakeToken; // stake token contract reference for guild voting shares 

    address public constant wETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; // canonical ether token wrapper contract reference for proposals

    

    uint256 public proposalDeposit; // default = 10 deposit token 

    uint256 public processingReward; // default = 0.1 - amount of deposit token to give to whoever processes a proposal

    uint256 public periodDuration; // default = 17280 = 4.8 hours in seconds (5 periods per day)

    uint256 public votingPeriodLength; // default = 35 periods (7 days)

    uint256 public gracePeriodLength; // default = 35 periods (7 days)

    uint256 public dilutionBound; // default = 3 - maximum multiplier a YES voter will be obligated to pay in case of mass ragequit

    uint256 public summoningTime; // needed to determine the current period

    

    // HARD-CODED LIMITS

    // These numbers are quite arbitrary; they are small enough to avoid overflows when doing calculations

    // with periods or shares, yet big enough to not limit reasonable use cases.

    uint256 constant MAX_GUILD_BOUND = 10**36; // maximum bound for guild accounting

    uint256 constant MAX_TOKEN_WHITELIST_COUNT = 400; // maximum number of whitelisted tokens

    uint256 constant MAX_TOKEN_GUILDBANK_COUNT = 200; // maximum number of tokens with non-zero balance in guildbank



    // BANK TOKEN DETAILS

    string public constant name = "Moloch DAO v2x Bank";

    string public constant symbol = "MOL-V2X";

    uint8 public constant decimals = 18;



    // **************

    // EVENT TRACKING

    // **************

    event SubmitProposal(address indexed applicant, uint256 sharesRequested, uint256 lootRequested, uint256 tributeOffered, address tributeToken, uint256 paymentRequested, address paymentToken, bytes32 details, uint8[7] flags, bytes data, uint256 proposalId, address indexed delegateKey, address indexed memberAddress);

    event CancelProposal(uint256 indexed proposalId, address applicantAddress);

    event SponsorProposal(address indexed delegateKey, address indexed memberAddress, uint256 proposalId, uint256 proposalIndex, uint256 startingPeriod);

    event SubmitVote(uint256 proposalId, uint256 indexed proposalIndex, address indexed delegateKey, address indexed memberAddress, uint8 uintVote);

    event ProcessProposal(uint256 indexed proposalIndex, uint256 indexed proposalId, bool didPass);

    event ProcessActionProposal(uint256 indexed proposalIndex, uint256 indexed proposalId, bool didPass);

    event ProcessWhitelistProposal(uint256 indexed proposalIndex, uint256 indexed proposalId, bool didPass);

    event ProcessGuildKickProposal(uint256 indexed proposalIndex, uint256 indexed proposalId, bool didPass);

    event UpdateDelegateKey(address indexed memberAddress, address newDelegateKey);

    event Approval(address indexed owner, address indexed spender, uint256 amount); // guild token (loot) allowance tracking

    event Transfer(address indexed from, address indexed to, uint256 amount); // guild token mint, burn & (loot) transfer tracking

    event Ragequit(address indexed memberAddress, uint256 sharesToBurn, uint256 lootToBurn);

    event TokensCollected(address indexed token, uint256 amountToCollect);

    event Withdraw(address indexed memberAddress, address token, uint256 amount);

    

    // *******************

    // INTERNAL ACCOUNTING

    // *******************

    address public constant GUILD = address(0xdead);

    address public constant ESCROW = address(0xdeaf);

    address public constant TOTAL = address(0xdeed);

    

    uint256 public proposalCount; // total proposals submitted

    uint256 public totalShares; // total shares across all members

    uint256 public totalLoot; // total loot across all members

    uint256 public totalGuildBankTokens; // total tokens with non-zero balance in guild bank



    mapping(uint256 => bytes) public actions; // proposalId => action data

    mapping(address => uint256) private balances; // guild token balances

    mapping(address => mapping(address => uint256)) private allowances; // guild token (loot) allowances

    mapping(address => mapping(address => uint256)) private userTokenBalances; // userTokenBalances[userAddress][tokenAddress]



    enum Vote {

        Null, // default value, counted as abstention

        Yes,

        No

    }

    

    struct Member {

        address delegateKey; // the key responsible for submitting proposals & voting - defaults to member address unless updated

        uint8 exists; // always true (1) once a member has been created

        uint256 shares; // the # of voting shares assigned to this member

        uint256 loot; // the loot amount available to this member (combined with shares on ragekick) - transferable by guild token

        uint256 highestIndexYesVote; // highest proposal index # on which the member voted YES

        uint256 jailed; // set to proposalIndex of a passing guild kick proposal for this member, prevents voting on & sponsoring proposals

    }

    

    struct Proposal {

        address applicant; // the applicant who wishes to become a member - this key will be used for withdrawals (doubles as target for alt. proposals)

        address proposer; // the account that submitted the proposal (can be non-member)

        address sponsor; // the member that sponsored the proposal (moving it into the queue)

        address tributeToken; // tribute token contract reference

        address paymentToken; // payment token contract reference

        uint8[7] flags; // [sponsored, processed, didPass, cancelled, whitelist, guildkick, action]

        uint256 sharesRequested; // the # of shares the applicant is requesting

        uint256 lootRequested; // the amount of loot the applicant is requesting

        uint256 paymentRequested; // amount of tokens requested as payment

        uint256 tributeOffered; // amount of tokens offered as tribute

        uint256 startingPeriod; // the period in which voting can start for this proposal

        uint256 yesVotes; // the total number of YES votes for this proposal

        uint256 noVotes; // the total number of NO votes for this proposal

        uint256 maxTotalSharesAndLootAtYesVote; // the maximum # of total shares encountered at a yes vote on this proposal

        bytes32 details; // proposal details to add context for members 

        mapping(address => Vote) votesByMember; // the votes on this proposal by each member

    }



    mapping(address => bool) public tokenWhitelist;

    address[] public approvedTokens;



    mapping(address => bool) public proposedToWhitelist;

    mapping(address => bool) public proposedToKick;

    

    mapping(address => Member) public members;

    mapping(address => address) public memberAddressByDelegateKey;

    

    mapping(uint256 => Proposal) public proposals;



    uint256[] public proposalQueue;

    

    bool public initialized;



    modifier onlyDelegate {

        require(members[memberAddressByDelegateKey[msg.sender]].shares > 0, "!delegate");

        _;

    }



    function init(

        address _depositToken,

        address _stakeToken,

        address[] calldata _summoner,

        uint256[] calldata _summonerShares,

        uint256 _summonerDeposit,

        uint256 _proposalDeposit,

        uint256 _processingReward,

        uint256 _periodDuration,

        uint256 _votingPeriodLength,

        uint256 _gracePeriodLength,

        uint256 _dilutionBound

    ) external {

        require(!initialized, "initialized");

        require(_depositToken != _stakeToken, "depositToken == stakeToken");

        require(_summoner.length == _summonerShares.length, "summoner != summonerShares");

        require(_proposalDeposit >= _processingReward, "_processingReward > _proposalDeposit");

        

        for (uint256 i = 0; i < _summoner.length; i++) {

            registerMember(_summoner[i], _summonerShares[i]);

            mintGuildToken(_summoner[i], _summonerShares[i]);

            totalShares = totalShares.add(_summonerShares[i]);

        }

        

        require(totalShares <= MAX_GUILD_BOUND, "guild maxed");

        

        tokenWhitelist[_depositToken] = true;

        approvedTokens.push(_depositToken);

        

        if (_summonerDeposit > 0) {

            totalGuildBankTokens += 1;

            unsafeAddToBalance(GUILD, _depositToken, _summonerDeposit);

        }

        

        depositToken = _depositToken;

        stakeToken = _stakeToken;

        proposalDeposit = _proposalDeposit;

        processingReward = _processingReward;

        periodDuration = _periodDuration;

        votingPeriodLength = _votingPeriodLength;

        gracePeriodLength = _gracePeriodLength;

        dilutionBound = _dilutionBound;

        summoningTime = now;

        initialized = true;

        

        _initReentrancyGuard();

    }

    

    /*****************

    PROPOSAL FUNCTIONS

    *****************/

    function submitProposal(

        address applicant,

        uint256 sharesRequested,

        uint256 lootRequested,

        uint256 tributeOffered,

        address tributeToken,

        uint256 paymentRequested,

        address paymentToken,

        bytes32 details

    ) payable external nonReentrant returns (uint256 proposalId) {

        require(sharesRequested.add(lootRequested) <= MAX_GUILD_BOUND, "guild maxed");

        require(tokenWhitelist[tributeToken], "tributeToken != whitelist");

        require(tokenWhitelist[paymentToken], "paymentToken != whitelist");

        require(applicant != GUILD && applicant != ESCROW && applicant != TOTAL, "applicant unreservable");

        require(members[applicant].jailed == 0, "applicant jailed");



        if (tributeOffered > 0 && userTokenBalances[GUILD][tributeToken] == 0) {

            require(totalGuildBankTokens < MAX_TOKEN_GUILDBANK_COUNT, "guildbank maxed");

        }

        

        // collect tribute from proposer & store it in the Moloch until the proposal is processed - if ether, wrap into wETH

        if (tributeToken == wETH && msg.value > 0) {

            require(msg.value == tributeOffered, "!ETH");

            IWETH(wETH).deposit();

            (bool success, ) = wETH.call.value(msg.value)("");

            require(success, "!transfer");

            IWETH(wETH).transfer(address(this), msg.value);

        } else {

            require(IERC20(tributeToken).transferFrom(msg.sender, address(this), tributeOffered), "!transfer");

        }

        

        unsafeAddToBalance(ESCROW, tributeToken, tributeOffered);



        uint8[7] memory flags; // [sponsored, processed, didPass, cancelled, whitelist, guildkick, action]



        _submitProposal(applicant, sharesRequested, lootRequested, tributeOffered, tributeToken, paymentRequested, paymentToken, details, flags, "");

        

        return proposalCount - 1; // return proposalId - contracts calling submit might want it

    }

    

    function submitActionProposal( // stages arbitrary function calls for member vote - based on Raid Guild 'Minion'

        address actionTo,

        address actionToken,

        uint256 actionTokenAmount,

        uint256 actionValue,

        bytes calldata data,

        bytes32 details

    ) external returns (uint256 proposalId) {

        

        uint8[7] memory flags; // [sponsored, processed, didPass, cancelled, whitelist, guildkick, action]

        flags[6] = 1; // guild action

        

        _submitProposal(actionTo, 0, 0, actionValue, address(0), actionTokenAmount, actionToken, details, flags, data);

        

        return proposalCount - 1;

    }

    

    function submitWhitelistProposal(address tokenToWhitelist, bytes32 details) external returns (uint256 proposalId) {

        require(tokenToWhitelist != address(0), "!token");

        require(tokenToWhitelist != stakeToken, "tokenToWhitelist == stakeToken");

        require(!tokenWhitelist[tokenToWhitelist], "whitelisted");

        require(approvedTokens.length < MAX_TOKEN_WHITELIST_COUNT, "whitelist maxed");



        uint8[7] memory flags; // [sponsored, processed, didPass, cancelled, whitelist, guildkick, action]

        flags[4] = 1; // whitelist



        _submitProposal(address(0), 0, 0, 0, tokenToWhitelist, 0, address(0), details, flags, "");

        

        return proposalCount - 1;

    }

    

    function submitGuildKickProposal(address memberToKick, bytes32 details) external returns (uint256 proposalId) {

        Member memory member = members[memberToKick];



        require(member.shares > 0 || member.loot > 0, "!share||loot");

        require(members[memberToKick].jailed == 0, "jailed");



        uint8[7] memory flags; // [sponsored, processed, didPass, cancelled, whitelist, guildkick, action]

        flags[5] = 1; // guild kick



        _submitProposal(memberToKick, 0, 0, 0, address(0), 0, address(0), details, flags, "");

        

        return proposalCount - 1;

    }

    

    function _submitProposal(

        address applicant,

        uint256 sharesRequested,

        uint256 lootRequested,

        uint256 tributeOffered,

        address tributeToken,

        uint256 paymentRequested,

        address paymentToken,

        bytes32 details,

        uint8[7] memory flags,

        bytes memory data

    ) internal {

        Proposal memory proposal = Proposal({

            applicant : applicant,

            proposer : msg.sender,

            sponsor : address(0),

            tributeToken : tributeToken,

            paymentToken : paymentToken,

            flags : flags,

            sharesRequested : sharesRequested,

            lootRequested : lootRequested,

            paymentRequested : paymentRequested,

            tributeOffered : tributeOffered,

            startingPeriod : 0,

            yesVotes : 0,

            noVotes : 0,

            maxTotalSharesAndLootAtYesVote : 0,

            details : details

        });

        

        if (proposal.flags[6] == 1) {

            actions[proposalCount] = data;

        }

        

        proposals[proposalCount] = proposal;

        address memberAddress = memberAddressByDelegateKey[msg.sender];

        // NOTE: argument order matters, avoid stack too deep

        emit SubmitProposal(applicant, sharesRequested, lootRequested, tributeOffered, tributeToken, paymentRequested, paymentToken, details, flags, data, proposalCount, msg.sender, memberAddress);

        

        proposalCount += 1;

    }



    function sponsorProposal(uint256 proposalId) external nonReentrant onlyDelegate {

        // collect proposal deposit from sponsor & store it in the Moloch until the proposal is processed

        require(IERC20(depositToken).transferFrom(msg.sender, address(this), proposalDeposit), "!transfer");

        unsafeAddToBalance(ESCROW, depositToken, proposalDeposit);



        Proposal storage proposal = proposals[proposalId];



        require(proposal.proposer != address(0), "!proposed");

        require(proposal.flags[0] == 0, "sponsored");

        require(proposal.flags[3] == 0, "cancelled");

        require(members[proposal.applicant].jailed == 0, "applicant jailed");



        if (proposal.tributeOffered > 0 && userTokenBalances[GUILD][proposal.tributeToken] == 0) {

            require(totalGuildBankTokens < MAX_TOKEN_GUILDBANK_COUNT, "guildbank maxed");

        }



        // whitelist proposal

        if (proposal.flags[4] == 1) {

            require(!tokenWhitelist[address(proposal.tributeToken)], "whitelisted");

            require(!proposedToWhitelist[address(proposal.tributeToken)], "whitelist proposed");

            require(approvedTokens.length < MAX_TOKEN_WHITELIST_COUNT, "whitelist maxed");

            proposedToWhitelist[address(proposal.tributeToken)] = true;



        // guild kick proposal

        } else if (proposal.flags[5] == 1) {

            require(!proposedToKick[proposal.applicant], "kick proposed");

            proposedToKick[proposal.applicant] = true;

        }



        // compute startingPeriod for proposal

        uint256 startingPeriod = max(

            getCurrentPeriod(),

            proposalQueue.length == 0 ? 0 : proposals[proposalQueue[proposalQueue.length - 1]].startingPeriod

        ) + 1;



        proposal.startingPeriod = startingPeriod;



        address memberAddress = memberAddressByDelegateKey[msg.sender];

        proposal.sponsor = memberAddress;



        proposal.flags[0] = 1; // sponsored



        // append proposal to the queue

        proposalQueue.push(proposalId);

        

        emit SponsorProposal(msg.sender, memberAddress, proposalId, proposalQueue.length - 1, startingPeriod);

    }



    // NOTE: In MolochV2 proposalIndex != proposalId

    function submitVote(uint256 proposalIndex, uint8 uintVote) external onlyDelegate {

        address memberAddress = memberAddressByDelegateKey[msg.sender];

        Member storage member = members[memberAddress];



        require(proposalIndex < proposalQueue.length, "!proposed");

        Proposal storage proposal = proposals[proposalQueue[proposalIndex]];



        require(uintVote < 3, "!<3");

        Vote vote = Vote(uintVote);



        require(getCurrentPeriod() >= proposal.startingPeriod, "pending");

        require(!hasVotingPeriodExpired(proposal.startingPeriod), "expired");

        require(proposal.votesByMember[memberAddress] == Vote.Null, "voted");

        require(vote == Vote.Yes || vote == Vote.No, "!Yes||No");



        proposal.votesByMember[memberAddress] = vote;



        if (vote == Vote.Yes) {

            proposal.yesVotes += member.shares;



            // set highest index (latest) yes vote - must be processed for member to ragequit

            if (proposalIndex > member.highestIndexYesVote) {

                member.highestIndexYesVote = proposalIndex;

            }



            // set maximum of total shares encountered at a yes vote - used to bound dilution for yes voters

            if (totalSupply() > proposal.maxTotalSharesAndLootAtYesVote) {

                proposal.maxTotalSharesAndLootAtYesVote = totalSupply();

            }



        } else if (vote == Vote.No) {

            proposal.noVotes += member.shares;

        }

     

        // NOTE: subgraph indexes by proposalId not proposalIndex since proposalIndex isn't set until it's been sponsored but proposal is created on submission

        emit SubmitVote(proposalQueue[proposalIndex], proposalIndex, msg.sender, memberAddress, uintVote);

    }



    function processProposal(uint256 proposalIndex) external {

        _validateProposalForProcessing(proposalIndex);



        uint256 proposalId = proposalQueue[proposalIndex];

        Proposal storage proposal = proposals[proposalId];



        require(proposal.flags[4] == 0 && proposal.flags[5] == 0 && proposal.flags[6] == 0, "!standard");



        proposal.flags[1] = 1; // processed



        bool didPass = _didPass(proposalIndex);



        // Make the proposal fail if the new total number of shares & loot exceeds the limit

        if (totalSupply().add(proposal.sharesRequested).add(proposal.lootRequested) > MAX_GUILD_BOUND) {

            didPass = false;

        }



        // Make the proposal fail if it is requesting more tokens as payment than the available guild bank balance

        if (proposal.paymentRequested > userTokenBalances[GUILD][proposal.paymentToken]) {

            didPass = false;

        }



        // Make the proposal fail if it would result in too many tokens with non-zero balance in guild bank

        if (proposal.tributeOffered > 0 && userTokenBalances[GUILD][proposal.tributeToken] == 0 && totalGuildBankTokens >= MAX_TOKEN_GUILDBANK_COUNT) {

            didPass = false;

        }



        // PROPOSAL PASSED

        if (didPass == true) {

            proposal.flags[2] = 1; // didPass



            // if the applicant is already a member, add to their existing shares & loot

            if (members[proposal.applicant].exists == 1) {

                members[proposal.applicant].shares = members[proposal.applicant].shares.add(proposal.sharesRequested);

                members[proposal.applicant].loot = members[proposal.applicant].loot.add(proposal.lootRequested);



            // if the applicant is a new member, create a new record for them

            } else {

                registerMember(proposal.applicant, proposal.sharesRequested);

            }



            // mint new guild token, shares & loot 

            mintGuildToken(proposal.applicant, proposal.sharesRequested.add(proposal.lootRequested));

            totalShares = totalShares.add(proposal.sharesRequested);

            totalLoot = totalLoot.add(proposal.lootRequested);



            // if the proposal tribute is the first token of its kind to make it into the guild bank, increment total guild bank tokens

            if (userTokenBalances[GUILD][proposal.tributeToken] == 0 && proposal.tributeOffered > 0) {

                totalGuildBankTokens += 1;

            }



            unsafeInternalTransfer(ESCROW, GUILD, proposal.tributeToken, proposal.tributeOffered);

            unsafeInternalTransfer(GUILD, proposal.applicant, proposal.paymentToken, proposal.paymentRequested);



            // if the proposal spends 100% of guild bank balance for a token, decrement total guild bank tokens

            if (userTokenBalances[GUILD][proposal.paymentToken] == 0 && proposal.paymentRequested > 0) {

                totalGuildBankTokens -= 1;

            }



        // PROPOSAL FAILED

        } else {

            // return all tokens to the proposer (not the applicant, because funds come from proposer)

            unsafeInternalTransfer(ESCROW, proposal.proposer, proposal.tributeToken, proposal.tributeOffered);

        }



        _returnDeposit(proposal.sponsor);

        

        emit ProcessProposal(proposalIndex, proposalId, didPass);

    }

    

    function processActionProposal(uint256 proposalIndex) external nonReentrant returns (bool, bytes memory) {

        _validateProposalForProcessing(proposalIndex);

        

        uint256 proposalId = proposalQueue[proposalIndex];

        bytes memory action = actions[proposalId];

        Proposal storage proposal = proposals[proposalId];

        

        require(proposal.flags[6] == 1, "!action");



        proposal.flags[1] = 1; // processed



        bool didPass = _didPass(proposalIndex);

        

        // Make the proposal fail if it is requesting more ether than the available local balance

        if (proposal.paymentToken == address(0) && proposal.tributeOffered > address(this).balance) {

            didPass = false;

        }

        

        // Make the proposal fail if it is requesting more stake token than the available local balance

        if (proposal.paymentToken == stakeToken && proposal.paymentRequested > IERC20(stakeToken).balanceOf(address(this))) {

            didPass = false;

        }

        

        // Make the proposal fail if it is requesting more tokens than the available guild bank balance

        if (proposal.paymentToken != address(0) && proposal.paymentToken != stakeToken && proposal.paymentRequested > userTokenBalances[GUILD][proposal.paymentToken]) {

            didPass = false;

        }



        if (didPass == true) {

            proposal.flags[2] = 1; // didPass

            (bool success, bytes memory retData) = proposal.applicant.call.value(proposal.tributeOffered)(action);

            if (proposal.paymentToken != address(0) && proposal.paymentToken != stakeToken) {

                unsafeSubtractFromBalance(GUILD, proposal.paymentToken, proposal.paymentRequested);

                // if the action proposal spends 100% of guild bank balance for a token, decrement total guild bank tokens

                if (userTokenBalances[GUILD][proposal.paymentToken] == 0 && proposal.paymentRequested > 0) {totalGuildBankTokens -= 1;}

            }

            return (success, retData);

        }

        

        emit ProcessActionProposal(proposalIndex, proposalId, didPass);

    }



    function processWhitelistProposal(uint256 proposalIndex) external {

        _validateProposalForProcessing(proposalIndex);



        uint256 proposalId = proposalQueue[proposalIndex];

        Proposal storage proposal = proposals[proposalId];



        require(proposal.flags[4] == 1, "!whitelist");



        proposal.flags[1] = 1; // processed



        bool didPass = _didPass(proposalIndex);



        if (approvedTokens.length >= MAX_TOKEN_WHITELIST_COUNT) {

            didPass = false;

        }



        if (didPass == true) {

            proposal.flags[2] = 1; // didPass



            tokenWhitelist[address(proposal.tributeToken)] = true;

            approvedTokens.push(proposal.tributeToken);

        }



        proposedToWhitelist[address(proposal.tributeToken)] = false;



        _returnDeposit(proposal.sponsor);

        

        emit ProcessWhitelistProposal(proposalIndex, proposalId, didPass);

    }



    function processGuildKickProposal(uint256 proposalIndex) external {

        _validateProposalForProcessing(proposalIndex);



        uint256 proposalId = proposalQueue[proposalIndex];

        Proposal storage proposal = proposals[proposalId];



        require(proposal.flags[5] == 1, "!kick");



        proposal.flags[1] = 1; // processed



        bool didPass = _didPass(proposalIndex);



        if (didPass == true) {

            proposal.flags[2] = 1; // didPass

            Member storage member = members[proposal.applicant];

            member.jailed = proposalIndex;



            // transfer shares to loot

            member.loot = member.loot.add(member.shares);

            totalShares = totalShares.sub(member.shares);

            totalLoot = totalLoot.add(member.shares);

            member.shares = 0; // revoke all shares

        }



        proposedToKick[proposal.applicant] = false;



        _returnDeposit(proposal.sponsor);

        

        emit ProcessGuildKickProposal(proposalIndex, proposalId, didPass);

    }



    function _didPass(uint256 proposalIndex) internal view returns (bool didPass) {

        Proposal memory proposal = proposals[proposalQueue[proposalIndex]];

        

        if (proposal.yesVotes > proposal.noVotes) {

            didPass = true;

        }

        

        // Make the proposal fail if the dilutionBound is exceeded

        if ((totalSupply().mul(dilutionBound)) < proposal.maxTotalSharesAndLootAtYesVote) {

            didPass = false;

        }



        // Make the proposal fail if the applicant is jailed

        // - for standard proposals, we don't want the applicant to get any shares/loot/payment

        // - for guild kick proposals, we should never be able to propose to kick a jailed member (or have two kick proposals active), so it doesn't matter

        if (members[proposal.applicant].jailed != 0) {

            didPass = false;

        }



        return didPass;

    }



    function _validateProposalForProcessing(uint256 proposalIndex) internal view {

        require(proposalIndex < proposalQueue.length, "!proposal");

        Proposal memory proposal = proposals[proposalQueue[proposalIndex]];



        require(getCurrentPeriod() >= proposal.startingPeriod + votingPeriodLength + gracePeriodLength, "!ready");

        require(proposal.flags[1] == 0, "processed");

        require(proposalIndex == 0 || proposals[proposalQueue[proposalIndex - 1]].flags[1] == 1, "prior !processed");

    }



    function _returnDeposit(address sponsor) internal {

        unsafeInternalTransfer(ESCROW, msg.sender, depositToken, processingReward);

        unsafeInternalTransfer(ESCROW, sponsor, depositToken, proposalDeposit - processingReward);

    }



    function ragequit(uint256 sharesToBurn, uint256 lootToBurn) external {

        require(members[msg.sender].exists == 1, "!member");

        

        _ragequit(msg.sender, sharesToBurn, lootToBurn);

    }



    function _ragequit(address memberAddress, uint256 sharesToBurn, uint256 lootToBurn) internal {

        uint256 initialTotalSharesAndLoot = totalSupply();



        Member storage member = members[memberAddress];



        require(member.shares >= sharesToBurn, "!shares");

        require(member.loot >= lootToBurn, "!loot");



        require(canRagequit(member.highestIndexYesVote), "!ragequit until highest index proposal member voted YES processes");



        uint256 sharesAndLootToBurn = sharesToBurn.add(lootToBurn);



        // burn guild token, shares & loot

        burnGuildToken(memberAddress, sharesAndLootToBurn);

        member.shares = member.shares.sub(sharesToBurn);

        member.loot = member.loot.sub(lootToBurn);

        totalShares = totalShares.sub(sharesToBurn);

        totalLoot = totalLoot.sub(lootToBurn);



        for (uint256 i = 0; i < approvedTokens.length; i++) {

            uint256 amountToRagequit = fairShare(userTokenBalances[GUILD][approvedTokens[i]], sharesAndLootToBurn, initialTotalSharesAndLoot);

            if (amountToRagequit > 0) { // gas optimization to allow a higher maximum token limit

                // deliberately not using safemath here to keep overflows from preventing the function execution (which would break ragekicks)

                // if a token overflows, it is because the supply was artificially inflated to oblivion, so we probably don't care about it anyways

                userTokenBalances[GUILD][approvedTokens[i]] -= amountToRagequit;

                userTokenBalances[memberAddress][approvedTokens[i]] += amountToRagequit;

            }

        }



        emit Ragequit(memberAddress, sharesToBurn, lootToBurn);

    }



    function ragekick(address memberToKick) external {

        Member storage member = members[memberToKick];



        require(member.jailed != 0, "!jailed");

        require(member.loot > 0, "!loot"); // note - should be impossible for jailed member to have shares

        require(canRagequit(member.highestIndexYesVote), "!ragequit until highest index proposal member voted YES processes");



        _ragequit(memberToKick, 0, member.loot);

    }

    

    function withdrawBalance(address token, uint256 amount) external nonReentrant {

        _withdrawBalance(token, amount);

    }



    function withdrawBalances(address[] calldata tokens, uint256[] calldata amounts, bool max) external nonReentrant {

        require(tokens.length == amounts.length, "tokens != amounts");



        for (uint256 i=0; i < tokens.length; i++) {

            uint256 withdrawAmount = amounts[i];

            if (max) { // withdraw the maximum balance

                withdrawAmount = userTokenBalances[msg.sender][tokens[i]];

            }



            _withdrawBalance(tokens[i], withdrawAmount);

        }

    }

    

    function _withdrawBalance(address token, uint256 amount) internal {

        require(userTokenBalances[msg.sender][token] >= amount, "!balance");

        

        require(IERC20(token).transfer(msg.sender, amount), "!transfer");

        unsafeSubtractFromBalance(msg.sender, token, amount);

        

        emit Withdraw(msg.sender, token, amount);

    }



    function collectTokens(address token) external {

        uint256 amountToCollect = IERC20(token).balanceOf(address(this)).sub(userTokenBalances[TOTAL][token]);

        // only collect if 1) there are tokens to collect & 2) token is whitelisted

        require(amountToCollect > 0, "!amount");

        require(tokenWhitelist[token], "!whitelisted");

        

        if (userTokenBalances[GUILD][token] == 0 && totalGuildBankTokens < MAX_TOKEN_GUILDBANK_COUNT) {totalGuildBankTokens += 1;}

        unsafeAddToBalance(GUILD, token, amountToCollect);



        emit TokensCollected(token, amountToCollect);

    }



    // NOTE: requires that delegate key which sent the original proposal cancels, msg.sender == proposal.proposer

    function cancelProposal(uint256 proposalId) external {

        Proposal storage proposal = proposals[proposalId];

        require(proposal.flags[0] == 0, "sponsored");

        require(proposal.flags[3] == 0, "cancelled");

        require(msg.sender == proposal.proposer, "!proposer");



        proposal.flags[3] = 1; // cancelled

        

        unsafeInternalTransfer(ESCROW, proposal.proposer, proposal.tributeToken, proposal.tributeOffered);

        

        emit CancelProposal(proposalId, msg.sender);

    }



    function updateDelegateKey(address newDelegateKey) external {

        require(members[msg.sender].shares > 0, "caller !shareholder");

        require(newDelegateKey != address(0), "newDelegateKey == 0");



        // skip checks if member is setting the delegate key to their member address

        if (newDelegateKey != msg.sender) {

            require(members[newDelegateKey].exists == 0, "!overwrite members");

            require(members[memberAddressByDelegateKey[newDelegateKey]].exists == 0, "!overwrite keys");

        }



        Member storage member = members[msg.sender];

        memberAddressByDelegateKey[member.delegateKey] = address(0);

        memberAddressByDelegateKey[newDelegateKey] = msg.sender;

        member.delegateKey = newDelegateKey;



        emit UpdateDelegateKey(msg.sender, newDelegateKey);

    }

    

    // can only ragequit if the latest proposal you voted YES on has been processed

    function canRagequit(uint256 highestIndexYesVote) public view returns (bool) {

        require(highestIndexYesVote < proposalQueue.length, "!proposal");

        

        return proposals[proposalQueue[highestIndexYesVote]].flags[1] == 1;

    }



    function hasVotingPeriodExpired(uint256 startingPeriod) public view returns (bool) {

        return getCurrentPeriod() >= startingPeriod + votingPeriodLength;

    }

    

    /***************

    GETTER FUNCTIONS

    ***************/

    function max(uint256 x, uint256 y) internal pure returns (uint256) {

        return x >= y ? x : y;

    }

    

    function getCurrentPeriod() public view returns (uint256) {

        return now.sub(summoningTime).div(periodDuration);

    }

    

    function getMemberProposalVote(address memberAddress, uint256 proposalIndex) external view returns (Vote) {

        require(members[memberAddress].exists == 1, "!member");

        require(proposalIndex < proposalQueue.length, "!proposed");

        

        return proposals[proposalQueue[proposalIndex]].votesByMember[memberAddress];

    }



    function getProposalFlags(uint256 proposalId) external view returns (uint8[7] memory) {

        return proposals[proposalId].flags;

    }

    

    function getProposalQueueLength() external view returns (uint256) {

        return proposalQueue.length;

    }

    

    function getTokenCount() external view returns (uint256) {

        return approvedTokens.length;

    }



    function getUserTokenBalance(address user, address token) external view returns (uint256) {

        return userTokenBalances[user][token];

    }

    

    /***************

    HELPER FUNCTIONS

    ***************/

    function() external payable {}

    

    function fairShare(uint256 balance, uint256 shares, uint256 totalSharesAndLoot) internal pure returns (uint256) {

        require(totalSharesAndLoot != 0);



        if (balance == 0) { return 0; }



        uint256 prod = balance * shares;



        if (prod / balance == shares) { // no overflow in multiplication above?

            return prod / totalSharesAndLoot;

        }



        return (balance / totalSharesAndLoot) * shares;

    }

    

    function registerMember(address newMember, uint256 shares) internal {

        // if new member is already taken by a member's delegateKey, reset it to their member address

        if (members[memberAddressByDelegateKey[newMember]].exists == 1) {

            address memberToOverride = memberAddressByDelegateKey[newMember];

            memberAddressByDelegateKey[memberToOverride] = memberToOverride;

            members[memberToOverride].delegateKey = memberToOverride;

        }

        

        members[newMember] = Member({

            delegateKey : newMember,

            exists : 1, // 'true'

            shares : shares,

            loot : 0,

            highestIndexYesVote : 0,

            jailed : 0

        });



        memberAddressByDelegateKey[newMember] = newMember;

    }

    

    function unsafeAddToBalance(address user, address token, uint256 amount) internal {

        userTokenBalances[user][token] += amount;

        userTokenBalances[TOTAL][token] += amount;

    }

    

    function unsafeInternalTransfer(address from, address to, address token, uint256 amount) internal {

        unsafeSubtractFromBalance(from, token, amount);

        unsafeAddToBalance(to, token, amount);

    }



    function unsafeSubtractFromBalance(address user, address token, uint256 amount) internal {

        userTokenBalances[user][token] -= amount;

        userTokenBalances[TOTAL][token] -= amount;

    }

    

    /********************

    GUILD TOKEN FUNCTIONS

    ********************/

    // GETTER FUNCTIONS

    function balanceOf(address account) external view returns (uint256) { 

        return balances[account];

    }

    

    function totalSupply() public view returns (uint256) { 

        return totalShares.add(totalLoot);

    }

    

    // BALANCE MGMT FUNCTIONS

    function allowance(address owner, address spender) external view returns (uint256) { // tracks guild token (loot) allowances 

        return allowances[owner][spender];

    }

    

    function approve(address spender, uint256 amount) external returns (bool) {

        if(amount != 0 && allowances[msg.sender][spender] != 0) {return false;}

        

        allowances[msg.sender][spender] = amount;

        

        emit Approval(msg.sender, spender, amount);

        

        return true;

    }

    

    function burnGuildToken(address memberAddress, uint256 amount) internal {

        balances[memberAddress] = balances[memberAddress].sub(amount);

        

        emit Transfer(memberAddress, address(0), amount);

    }

    

    function claimShares(uint256 amount) external nonReentrant {

        require(IERC20(stakeToken).transferFrom(msg.sender, address(this), amount), "!transfer"); // deposit stake token & claim shares (1:1)

        

        // if the sender is already a member, add to their existing shares 

        if (members[msg.sender].exists == 1) {

            members[msg.sender].shares = members[msg.sender].shares.add(amount);



        // if the sender is a new member, create a new record for them

        } else {

            registerMember(msg.sender, amount);

        }



        // mint new guild token & shares 

        mintGuildToken(msg.sender, amount);

        totalShares = totalShares.add(amount);

            

        require(totalShares <= MAX_GUILD_BOUND, "guild maxed");

    }

    

    function convertSharesToLoot(uint256 sharesToLoot) external {

        require(members[msg.sender].shares >= sharesToLoot, "!shares");

        

        members[msg.sender].shares = members[msg.sender].shares.sub(sharesToLoot);

        members[msg.sender].loot = members[msg.sender].loot.add(sharesToLoot);

        totalShares = totalShares.sub(sharesToLoot);

        totalLoot = totalLoot.add(sharesToLoot);

    }

    

    function mintGuildToken(address memberAddress, uint256 amount) internal {

        balances[memberAddress] = balances[memberAddress].add(amount);

        

        emit Transfer(address(0), memberAddress, amount);

    }



    // LOOT TRANSFER FUNCTIONS

    function transfer(address receiver, uint256 lootToTransfer) external returns (bool) {

        require(members[msg.sender].loot >= lootToTransfer, "!loot");

        

        members[msg.sender].loot = members[msg.sender].loot.sub(lootToTransfer);

        members[receiver].loot = members[receiver].loot.add(lootToTransfer);

        

        balances[msg.sender] = balances[msg.sender].sub(lootToTransfer);

        balances[receiver] = balances[receiver].add(lootToTransfer);

        

        emit Transfer(msg.sender, receiver, lootToTransfer);

        

        return true;

    }

    

    function transferFrom(address sender, address receiver, uint256 lootToTransfer) external returns (bool) {

        require(members[sender].loot >= lootToTransfer, "!loot");

        

        allowances[sender][msg.sender] = allowances[sender][msg.sender].sub(lootToTransfer);

        

        members[sender].loot = members[sender].loot.sub(lootToTransfer);

        members[receiver].loot = members[receiver].loot.add(lootToTransfer);

        

        balances[sender] = balances[sender].sub(lootToTransfer);

        balances[receiver] = balances[receiver].add(lootToTransfer);

        

        emit Transfer(sender, receiver, lootToTransfer);

        

        return true;

    }

}

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:44.911949
Transaction Length: 1
Severity: High
Contract: MysticMoloch
Function name: submitWhitelistProposal(address,bytes32)
PC address: 44572
Estimated Gas Usage: 1106 - 4496
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x22dfed2edd99a1f1e6a7475f58e6435e0b6126eb.sol:146

contract MysticMoloch is ReentrancyGuard { 

    using SafeMath for uint256;



    /***************

    GLOBAL CONSTANTS

    ***************/

    address public depositToken; // deposit token contract reference - default = wETH

    address public stakeToken; // stake token contract reference for guild voting shares 

    address public constant wETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; // canonical ether token wrapper contract reference for proposals

    

    uint256 public proposalDeposit; // default = 10 deposit token 

    uint256 public processingReward; // default = 0.1 - amount of deposit token to give to whoever processes a proposal

    uint256 public periodDuration; // default = 17280 = 4.8 hours in seconds (5 periods per day)

    uint256 public votingPeriodLength; // default = 35 periods (7 days)

    uint256 public gracePeriodLength; // default = 35 periods (7 days)

    uint256 public dilutionBound; // default = 3 - maximum multiplier a YES voter will be obligated to pay in case of mass ragequit

    uint256 public summoningTime; // needed to determine the current period

    

    // HARD-CODED LIMITS

    // These numbers are quite arbitrary; they are small enough to avoid overflows when doing calculations

    // with periods or shares, yet big enough to not limit reasonable use cases.

    uint256 constant MAX_GUILD_BOUND = 10**36; // maximum bound for guild accounting

    uint256 constant MAX_TOKEN_WHITELIST_COUNT = 400; // maximum number of whitelisted tokens

    uint256 constant MAX_TOKEN_GUILDBANK_COUNT = 200; // maximum number of tokens with non-zero balance in guildbank



    // BANK TOKEN DETAILS

    string public constant name = "Moloch DAO v2x Bank";

    string public constant symbol = "MOL-V2X";

    uint8 public constant decimals = 18;



    // **************

    // EVENT TRACKING

    // **************

    event SubmitProposal(address indexed applicant, uint256 sharesRequested, uint256 lootRequested, uint256 tributeOffered, address tributeToken, uint256 paymentRequested, address paymentToken, bytes32 details, uint8[7] flags, bytes data, uint256 proposalId, address indexed delegateKey, address indexed memberAddress);

    event CancelProposal(uint256 indexed proposalId, address applicantAddress);

    event SponsorProposal(address indexed delegateKey, address indexed memberAddress, uint256 proposalId, uint256 proposalIndex, uint256 startingPeriod);

    event SubmitVote(uint256 proposalId, uint256 indexed proposalIndex, address indexed delegateKey, address indexed memberAddress, uint8 uintVote);

    event ProcessProposal(uint256 indexed proposalIndex, uint256 indexed proposalId, bool didPass);

    event ProcessActionProposal(uint256 indexed proposalIndex, uint256 indexed proposalId, bool didPass);

    event ProcessWhitelistProposal(uint256 indexed proposalIndex, uint256 indexed proposalId, bool didPass);

    event ProcessGuildKickProposal(uint256 indexed proposalIndex, uint256 indexed proposalId, bool didPass);

    event UpdateDelegateKey(address indexed memberAddress, address newDelegateKey);

    event Approval(address indexed owner, address indexed spender, uint256 amount); // guild token (loot) allowance tracking

    event Transfer(address indexed from, address indexed to, uint256 amount); // guild token mint, burn & (loot) transfer tracking

    event Ragequit(address indexed memberAddress, uint256 sharesToBurn, uint256 lootToBurn);

    event TokensCollected(address indexed token, uint256 amountToCollect);

    event Withdraw(address indexed memberAddress, address token, uint256 amount);

    

    // *******************

    // INTERNAL ACCOUNTING

    // *******************

    address public constant GUILD = address(0xdead);

    address public constant ESCROW = address(0xdeaf);

    address public constant TOTAL = address(0xdeed);

    

    uint256 public proposalCount; // total proposals submitted

    uint256 public totalShares; // total shares across all members

    uint256 public totalLoot; // total loot across all members

    uint256 public totalGuildBankTokens; // total tokens with non-zero balance in guild bank



    mapping(uint256 => bytes) public actions; // proposalId => action data

    mapping(address => uint256) private balances; // guild token balances

    mapping(address => mapping(address => uint256)) private allowances; // guild token (loot) allowances

    mapping(address => mapping(address => uint256)) private userTokenBalances; // userTokenBalances[userAddress][tokenAddress]



    enum Vote {

        Null, // default value, counted as abstention

        Yes,

        No

    }

    

    struct Member {

        address delegateKey; // the key responsible for submitting proposals & voting - defaults to member address unless updated

        uint8 exists; // always true (1) once a member has been created

        uint256 shares; // the # of voting shares assigned to this member

        uint256 loot; // the loot amount available to this member (combined with shares on ragekick) - transferable by guild token

        uint256 highestIndexYesVote; // highest proposal index # on which the member voted YES

        uint256 jailed; // set to proposalIndex of a passing guild kick proposal for this member, prevents voting on & sponsoring proposals

    }

    

    struct Proposal {

        address applicant; // the applicant who wishes to become a member - this key will be used for withdrawals (doubles as target for alt. proposals)

        address proposer; // the account that submitted the proposal (can be non-member)

        address sponsor; // the member that sponsored the proposal (moving it into the queue)

        address tributeToken; // tribute token contract reference

        address paymentToken; // payment token contract reference

        uint8[7] flags; // [sponsored, processed, didPass, cancelled, whitelist, guildkick, action]

        uint256 sharesRequested; // the # of shares the applicant is requesting

        uint256 lootRequested; // the amount of loot the applicant is requesting

        uint256 paymentRequested; // amount of tokens requested as payment

        uint256 tributeOffered; // amount of tokens offered as tribute

        uint256 startingPeriod; // the period in which voting can start for this proposal

        uint256 yesVotes; // the total number of YES votes for this proposal

        uint256 noVotes; // the total number of NO votes for this proposal

        uint256 maxTotalSharesAndLootAtYesVote; // the maximum # of total shares encountered at a yes vote on this proposal

        bytes32 details; // proposal details to add context for members 

        mapping(address => Vote) votesByMember; // the votes on this proposal by each member

    }



    mapping(address => bool) public tokenWhitelist;

    address[] public approvedTokens;



    mapping(address => bool) public proposedToWhitelist;

    mapping(address => bool) public proposedToKick;

    

    mapping(address => Member) public members;

    mapping(address => address) public memberAddressByDelegateKey;

    

    mapping(uint256 => Proposal) public proposals;



    uint256[] public proposalQueue;

    

    bool public initialized;



    modifier onlyDelegate {

        require(members[memberAddressByDelegateKey[msg.sender]].shares > 0, "!delegate");

        _;

    }



    function init(

        address _depositToken,

        address _stakeToken,

        address[] calldata _summoner,

        uint256[] calldata _summonerShares,

        uint256 _summonerDeposit,

        uint256 _proposalDeposit,

        uint256 _processingReward,

        uint256 _periodDuration,

        uint256 _votingPeriodLength,

        uint256 _gracePeriodLength,

        uint256 _dilutionBound

    ) external {

        require(!initialized, "initialized");

        require(_depositToken != _stakeToken, "depositToken == stakeToken");

        require(_summoner.length == _summonerShares.length, "summoner != summonerShares");

        require(_proposalDeposit >= _processingReward, "_processingReward > _proposalDeposit");

        

        for (uint256 i = 0; i < _summoner.length; i++) {

            registerMember(_summoner[i], _summonerShares[i]);

            mintGuildToken(_summoner[i], _summonerShares[i]);

            totalShares = totalShares.add(_summonerShares[i]);

        }

        

        require(totalShares <= MAX_GUILD_BOUND, "guild maxed");

        

        tokenWhitelist[_depositToken] = true;

        approvedTokens.push(_depositToken);

        

        if (_summonerDeposit > 0) {

            totalGuildBankTokens += 1;

            unsafeAddToBalance(GUILD, _depositToken, _summonerDeposit);

        }

        

        depositToken = _depositToken;

        stakeToken = _stakeToken;

        proposalDeposit = _proposalDeposit;

        processingReward = _processingReward;

        periodDuration = _periodDuration;

        votingPeriodLength = _votingPeriodLength;

        gracePeriodLength = _gracePeriodLength;

        dilutionBound = _dilutionBound;

        summoningTime = now;

        initialized = true;

        

        _initReentrancyGuard();

    }

    

    /*****************

    PROPOSAL FUNCTIONS

    *****************/

    function submitProposal(

        address applicant,

        uint256 sharesRequested,

        uint256 lootRequested,

        uint256 tributeOffered,

        address tributeToken,

        uint256 paymentRequested,

        address paymentToken,

        bytes32 details

    ) payable external nonReentrant returns (uint256 proposalId) {

        require(sharesRequested.add(lootRequested) <= MAX_GUILD_BOUND, "guild maxed");

        require(tokenWhitelist[tributeToken], "tributeToken != whitelist");

        require(tokenWhitelist[paymentToken], "paymentToken != whitelist");

        require(applicant != GUILD && applicant != ESCROW && applicant != TOTAL, "applicant unreservable");

        require(members[applicant].jailed == 0, "applicant jailed");



        if (tributeOffered > 0 && userTokenBalances[GUILD][tributeToken] == 0) {

            require(totalGuildBankTokens < MAX_TOKEN_GUILDBANK_COUNT, "guildbank maxed");

        }

        

        // collect tribute from proposer & store it in the Moloch until the proposal is processed - if ether, wrap into wETH

        if (tributeToken == wETH && msg.value > 0) {

            require(msg.value == tributeOffered, "!ETH");

            IWETH(wETH).deposit();

            (bool success, ) = wETH.call.value(msg.value)("");

            require(success, "!transfer");

            IWETH(wETH).transfer(address(this), msg.value);

        } else {

            require(IERC20(tributeToken).transferFrom(msg.sender, address(this), tributeOffered), "!transfer");

        }

        

        unsafeAddToBalance(ESCROW, tributeToken, tributeOffered);



        uint8[7] memory flags; // [sponsored, processed, didPass, cancelled, whitelist, guildkick, action]



        _submitProposal(applicant, sharesRequested, lootRequested, tributeOffered, tributeToken, paymentRequested, paymentToken, details, flags, "");

        

        return proposalCount - 1; // return proposalId - contracts calling submit might want it

    }

    

    function submitActionProposal( // stages arbitrary function calls for member vote - based on Raid Guild 'Minion'

        address actionTo,

        address actionToken,

        uint256 actionTokenAmount,

        uint256 actionValue,

        bytes calldata data,

        bytes32 details

    ) external returns (uint256 proposalId) {

        

        uint8[7] memory flags; // [sponsored, processed, didPass, cancelled, whitelist, guildkick, action]

        flags[6] = 1; // guild action

        

        _submitProposal(actionTo, 0, 0, actionValue, address(0), actionTokenAmount, actionToken, details, flags, data);

        

        return proposalCount - 1;

    }

    

    function submitWhitelistProposal(address tokenToWhitelist, bytes32 details) external returns (uint256 proposalId) {

        require(tokenToWhitelist != address(0), "!token");

        require(tokenToWhitelist != stakeToken, "tokenToWhitelist == stakeToken");

        require(!tokenWhitelist[tokenToWhitelist], "whitelisted");

        require(approvedTokens.length < MAX_TOKEN_WHITELIST_COUNT, "whitelist maxed");



        uint8[7] memory flags; // [sponsored, processed, didPass, cancelled, whitelist, guildkick, action]

        flags[4] = 1; // whitelist



        _submitProposal(address(0), 0, 0, 0, tokenToWhitelist, 0, address(0), details, flags, "");

        

        return proposalCount - 1;

    }

    

    function submitGuildKickProposal(address memberToKick, bytes32 details) external returns (uint256 proposalId) {

        Member memory member = members[memberToKick];



        require(member.shares > 0 || member.loot > 0, "!share||loot");

        require(members[memberToKick].jailed == 0, "jailed");



        uint8[7] memory flags; // [sponsored, processed, didPass, cancelled, whitelist, guildkick, action]

        flags[5] = 1; // guild kick



        _submitProposal(memberToKick, 0, 0, 0, address(0), 0, address(0), details, flags, "");

        

        return proposalCount - 1;

    }

    

    function _submitProposal(

        address applicant,

        uint256 sharesRequested,

        uint256 lootRequested,

        uint256 tributeOffered,

        address tributeToken,

        uint256 paymentRequested,

        address paymentToken,

        bytes32 details,

        uint8[7] memory flags,

        bytes memory data

    ) internal {

        Proposal memory proposal = Proposal({

            applicant : applicant,

            proposer : msg.sender,

            sponsor : address(0),

            tributeToken : tributeToken,

            paymentToken : paymentToken,

            flags : flags,

            sharesRequested : sharesRequested,

            lootRequested : lootRequested,

            paymentRequested : paymentRequested,

            tributeOffered : tributeOffered,

            startingPeriod : 0,

            yesVotes : 0,

            noVotes : 0,

            maxTotalSharesAndLootAtYesVote : 0,

            details : details

        });

        

        if (proposal.flags[6] == 1) {

            actions[proposalCount] = data;

        }

        

        proposals[proposalCount] = proposal;

        address memberAddress = memberAddressByDelegateKey[msg.sender];

        // NOTE: argument order matters, avoid stack too deep

        emit SubmitProposal(applicant, sharesRequested, lootRequested, tributeOffered, tributeToken, paymentRequested, paymentToken, details, flags, data, proposalCount, msg.sender, memberAddress);

        

        proposalCount += 1;

    }



    function sponsorProposal(uint256 proposalId) external nonReentrant onlyDelegate {

        // collect proposal deposit from sponsor & store it in the Moloch until the proposal is processed

        require(IERC20(depositToken).transferFrom(msg.sender, address(this), proposalDeposit), "!transfer");

        unsafeAddToBalance(ESCROW, depositToken, proposalDeposit);



        Proposal storage proposal = proposals[proposalId];



        require(proposal.proposer != address(0), "!proposed");

        require(proposal.flags[0] == 0, "sponsored");

        require(proposal.flags[3] == 0, "cancelled");

        require(members[proposal.applicant].jailed == 0, "applicant jailed");



        if (proposal.tributeOffered > 0 && userTokenBalances[GUILD][proposal.tributeToken] == 0) {

            require(totalGuildBankTokens < MAX_TOKEN_GUILDBANK_COUNT, "guildbank maxed");

        }



        // whitelist proposal

        if (proposal.flags[4] == 1) {

            require(!tokenWhitelist[address(proposal.tributeToken)], "whitelisted");

            require(!proposedToWhitelist[address(proposal.tributeToken)], "whitelist proposed");

            require(approvedTokens.length < MAX_TOKEN_WHITELIST_COUNT, "whitelist maxed");

            proposedToWhitelist[address(proposal.tributeToken)] = true;



        // guild kick proposal

        } else if (proposal.flags[5] == 1) {

            require(!proposedToKick[proposal.applicant], "kick proposed");

            proposedToKick[proposal.applicant] = true;

        }



        // compute startingPeriod for proposal

        uint256 startingPeriod = max(

            getCurrentPeriod(),

            proposalQueue.length == 0 ? 0 : proposals[proposalQueue[proposalQueue.length - 1]].startingPeriod

        ) + 1;



        proposal.startingPeriod = startingPeriod;



        address memberAddress = memberAddressByDelegateKey[msg.sender];

        proposal.sponsor = memberAddress;



        proposal.flags[0] = 1; // sponsored



        // append proposal to the queue

        proposalQueue.push(proposalId);

        

        emit SponsorProposal(msg.sender, memberAddress, proposalId, proposalQueue.length - 1, startingPeriod);

    }



    // NOTE: In MolochV2 proposalIndex != proposalId

    function submitVote(uint256 proposalIndex, uint8 uintVote) external onlyDelegate {

        address memberAddress = memberAddressByDelegateKey[msg.sender];

        Member storage member = members[memberAddress];



        require(proposalIndex < proposalQueue.length, "!proposed");

        Proposal storage proposal = proposals[proposalQueue[proposalIndex]];



        require(uintVote < 3, "!<3");

        Vote vote = Vote(uintVote);



        require(getCurrentPeriod() >= proposal.startingPeriod, "pending");

        require(!hasVotingPeriodExpired(proposal.startingPeriod), "expired");

        require(proposal.votesByMember[memberAddress] == Vote.Null, "voted");

        require(vote == Vote.Yes || vote == Vote.No, "!Yes||No");



        proposal.votesByMember[memberAddress] = vote;



        if (vote == Vote.Yes) {

            proposal.yesVotes += member.shares;



            // set highest index (latest) yes vote - must be processed for member to ragequit

            if (proposalIndex > member.highestIndexYesVote) {

                member.highestIndexYesVote = proposalIndex;

            }



            // set maximum of total shares encountered at a yes vote - used to bound dilution for yes voters

            if (totalSupply() > proposal.maxTotalSharesAndLootAtYesVote) {

                proposal.maxTotalSharesAndLootAtYesVote = totalSupply();

            }



        } else if (vote == Vote.No) {

            proposal.noVotes += member.shares;

        }

     

        // NOTE: subgraph indexes by proposalId not proposalIndex since proposalIndex isn't set until it's been sponsored but proposal is created on submission

        emit SubmitVote(proposalQueue[proposalIndex], proposalIndex, msg.sender, memberAddress, uintVote);

    }



    function processProposal(uint256 proposalIndex) external {

        _validateProposalForProcessing(proposalIndex);



        uint256 proposalId = proposalQueue[proposalIndex];

        Proposal storage proposal = proposals[proposalId];



        require(proposal.flags[4] == 0 && proposal.flags[5] == 0 && proposal.flags[6] == 0, "!standard");



        proposal.flags[1] = 1; // processed



        bool didPass = _didPass(proposalIndex);



        // Make the proposal fail if the new total number of shares & loot exceeds the limit

        if (totalSupply().add(proposal.sharesRequested).add(proposal.lootRequested) > MAX_GUILD_BOUND) {

            didPass = false;

        }



        // Make the proposal fail if it is requesting more tokens as payment than the available guild bank balance

        if (proposal.paymentRequested > userTokenBalances[GUILD][proposal.paymentToken]) {

            didPass = false;

        }



        // Make the proposal fail if it would result in too many tokens with non-zero balance in guild bank

        if (proposal.tributeOffered > 0 && userTokenBalances[GUILD][proposal.tributeToken] == 0 && totalGuildBankTokens >= MAX_TOKEN_GUILDBANK_COUNT) {

            didPass = false;

        }



        // PROPOSAL PASSED

        if (didPass == true) {

            proposal.flags[2] = 1; // didPass



            // if the applicant is already a member, add to their existing shares & loot

            if (members[proposal.applicant].exists == 1) {

                members[proposal.applicant].shares = members[proposal.applicant].shares.add(proposal.sharesRequested);

                members[proposal.applicant].loot = members[proposal.applicant].loot.add(proposal.lootRequested);



            // if the applicant is a new member, create a new record for them

            } else {

                registerMember(proposal.applicant, proposal.sharesRequested);

            }



            // mint new guild token, shares & loot 

            mintGuildToken(proposal.applicant, proposal.sharesRequested.add(proposal.lootRequested));

            totalShares = totalShares.add(proposal.sharesRequested);

            totalLoot = totalLoot.add(proposal.lootRequested);



            // if the proposal tribute is the first token of its kind to make it into the guild bank, increment total guild bank tokens

            if (userTokenBalances[GUILD][proposal.tributeToken] == 0 && proposal.tributeOffered > 0) {

                totalGuildBankTokens += 1;

            }



            unsafeInternalTransfer(ESCROW, GUILD, proposal.tributeToken, proposal.tributeOffered);

            unsafeInternalTransfer(GUILD, proposal.applicant, proposal.paymentToken, proposal.paymentRequested);



            // if the proposal spends 100% of guild bank balance for a token, decrement total guild bank tokens

            if (userTokenBalances[GUILD][proposal.paymentToken] == 0 && proposal.paymentRequested > 0) {

                totalGuildBankTokens -= 1;

            }



        // PROPOSAL FAILED

        } else {

            // return all tokens to the proposer (not the applicant, because funds come from proposer)

            unsafeInternalTransfer(ESCROW, proposal.proposer, proposal.tributeToken, proposal.tributeOffered);

        }



        _returnDeposit(proposal.sponsor);

        

        emit ProcessProposal(proposalIndex, proposalId, didPass);

    }

    

    function processActionProposal(uint256 proposalIndex) external nonReentrant returns (bool, bytes memory) {

        _validateProposalForProcessing(proposalIndex);

        

        uint256 proposalId = proposalQueue[proposalIndex];

        bytes memory action = actions[proposalId];

        Proposal storage proposal = proposals[proposalId];

        

        require(proposal.flags[6] == 1, "!action");



        proposal.flags[1] = 1; // processed



        bool didPass = _didPass(proposalIndex);

        

        // Make the proposal fail if it is requesting more ether than the available local balance

        if (proposal.paymentToken == address(0) && proposal.tributeOffered > address(this).balance) {

            didPass = false;

        }

        

        // Make the proposal fail if it is requesting more stake token than the available local balance

        if (proposal.paymentToken == stakeToken && proposal.paymentRequested > IERC20(stakeToken).balanceOf(address(this))) {

            didPass = false;

        }

        

        // Make the proposal fail if it is requesting more tokens than the available guild bank balance

        if (proposal.paymentToken != address(0) && proposal.paymentToken != stakeToken && proposal.paymentRequested > userTokenBalances[GUILD][proposal.paymentToken]) {

            didPass = false;

        }



        if (didPass == true) {

            proposal.flags[2] = 1; // didPass

            (bool success, bytes memory retData) = proposal.applicant.call.value(proposal.tributeOffered)(action);

            if (proposal.paymentToken != address(0) && proposal.paymentToken != stakeToken) {

                unsafeSubtractFromBalance(GUILD, proposal.paymentToken, proposal.paymentRequested);

                // if the action proposal spends 100% of guild bank balance for a token, decrement total guild bank tokens

                if (userTokenBalances[GUILD][proposal.paymentToken] == 0 && proposal.paymentRequested > 0) {totalGuildBankTokens -= 1;}

            }

            return (success, retData);

        }

        

        emit ProcessActionProposal(proposalIndex, proposalId, didPass);

    }



    function processWhitelistProposal(uint256 proposalIndex) external {

        _validateProposalForProcessing(proposalIndex);



        uint256 proposalId = proposalQueue[proposalIndex];

        Proposal storage proposal = proposals[proposalId];



        require(proposal.flags[4] == 1, "!whitelist");



        proposal.flags[1] = 1; // processed



        bool didPass = _didPass(proposalIndex);



        if (approvedTokens.length >= MAX_TOKEN_WHITELIST_COUNT) {

            didPass = false;

        }



        if (didPass == true) {

            proposal.flags[2] = 1; // didPass



            tokenWhitelist[address(proposal.tributeToken)] = true;

            approvedTokens.push(proposal.tributeToken);

        }



        proposedToWhitelist[address(proposal.tributeToken)] = false;



        _returnDeposit(proposal.sponsor);

        

        emit ProcessWhitelistProposal(proposalIndex, proposalId, didPass);

    }



    function processGuildKickProposal(uint256 proposalIndex) external {

        _validateProposalForProcessing(proposalIndex);



        uint256 proposalId = proposalQueue[proposalIndex];

        Proposal storage proposal = proposals[proposalId];



        require(proposal.flags[5] == 1, "!kick");



        proposal.flags[1] = 1; // processed



        bool didPass = _didPass(proposalIndex);



        if (didPass == true) {

            proposal.flags[2] = 1; // didPass

            Member storage member = members[proposal.applicant];

            member.jailed = proposalIndex;



            // transfer shares to loot

            member.loot = member.loot.add(member.shares);

            totalShares = totalShares.sub(member.shares);

            totalLoot = totalLoot.add(member.shares);

            member.shares = 0; // revoke all shares

        }



        proposedToKick[proposal.applicant] = false;



        _returnDeposit(proposal.sponsor);

        

        emit ProcessGuildKickProposal(proposalIndex, proposalId, didPass);

    }



    function _didPass(uint256 proposalIndex) internal view returns (bool didPass) {

        Proposal memory proposal = proposals[proposalQueue[proposalIndex]];

        

        if (proposal.yesVotes > proposal.noVotes) {

            didPass = true;

        }

        

        // Make the proposal fail if the dilutionBound is exceeded

        if ((totalSupply().mul(dilutionBound)) < proposal.maxTotalSharesAndLootAtYesVote) {

            didPass = false;

        }



        // Make the proposal fail if the applicant is jailed

        // - for standard proposals, we don't want the applicant to get any shares/loot/payment

        // - for guild kick proposals, we should never be able to propose to kick a jailed member (or have two kick proposals active), so it doesn't matter

        if (members[proposal.applicant].jailed != 0) {

            didPass = false;

        }



        return didPass;

    }



    function _validateProposalForProcessing(uint256 proposalIndex) internal view {

        require(proposalIndex < proposalQueue.length, "!proposal");

        Proposal memory proposal = proposals[proposalQueue[proposalIndex]];



        require(getCurrentPeriod() >= proposal.startingPeriod + votingPeriodLength + gracePeriodLength, "!ready");

        require(proposal.flags[1] == 0, "processed");

        require(proposalIndex == 0 || proposals[proposalQueue[proposalIndex - 1]].flags[1] == 1, "prior !processed");

    }



    function _returnDeposit(address sponsor) internal {

        unsafeInternalTransfer(ESCROW, msg.sender, depositToken, processingReward);

        unsafeInternalTransfer(ESCROW, sponsor, depositToken, proposalDeposit - processingReward);

    }



    function ragequit(uint256 sharesToBurn, uint256 lootToBurn) external {

        require(members[msg.sender].exists == 1, "!member");

        

        _ragequit(msg.sender, sharesToBurn, lootToBurn);

    }



    function _ragequit(address memberAddress, uint256 sharesToBurn, uint256 lootToBurn) internal {

        uint256 initialTotalSharesAndLoot = totalSupply();



        Member storage member = members[memberAddress];



        require(member.shares >= sharesToBurn, "!shares");

        require(member.loot >= lootToBurn, "!loot");



        require(canRagequit(member.highestIndexYesVote), "!ragequit until highest index proposal member voted YES processes");



        uint256 sharesAndLootToBurn = sharesToBurn.add(lootToBurn);



        // burn guild token, shares & loot

        burnGuildToken(memberAddress, sharesAndLootToBurn);

        member.shares = member.shares.sub(sharesToBurn);

        member.loot = member.loot.sub(lootToBurn);

        totalShares = totalShares.sub(sharesToBurn);

        totalLoot = totalLoot.sub(lootToBurn);



        for (uint256 i = 0; i < approvedTokens.length; i++) {

            uint256 amountToRagequit = fairShare(userTokenBalances[GUILD][approvedTokens[i]], sharesAndLootToBurn, initialTotalSharesAndLoot);

            if (amountToRagequit > 0) { // gas optimization to allow a higher maximum token limit

                // deliberately not using safemath here to keep overflows from preventing the function execution (which would break ragekicks)

                // if a token overflows, it is because the supply was artificially inflated to oblivion, so we probably don't care about it anyways

                userTokenBalances[GUILD][approvedTokens[i]] -= amountToRagequit;

                userTokenBalances[memberAddress][approvedTokens[i]] += amountToRagequit;

            }

        }



        emit Ragequit(memberAddress, sharesToBurn, lootToBurn);

    }



    function ragekick(address memberToKick) external {

        Member storage member = members[memberToKick];



        require(member.jailed != 0, "!jailed");

        require(member.loot > 0, "!loot"); // note - should be impossible for jailed member to have shares

        require(canRagequit(member.highestIndexYesVote), "!ragequit until highest index proposal member voted YES processes");



        _ragequit(memberToKick, 0, member.loot);

    }

    

    function withdrawBalance(address token, uint256 amount) external nonReentrant {

        _withdrawBalance(token, amount);

    }



    function withdrawBalances(address[] calldata tokens, uint256[] calldata amounts, bool max) external nonReentrant {

        require(tokens.length == amounts.length, "tokens != amounts");



        for (uint256 i=0; i < tokens.length; i++) {

            uint256 withdrawAmount = amounts[i];

            if (max) { // withdraw the maximum balance

                withdrawAmount = userTokenBalances[msg.sender][tokens[i]];

            }



            _withdrawBalance(tokens[i], withdrawAmount);

        }

    }

    

    function _withdrawBalance(address token, uint256 amount) internal {

        require(userTokenBalances[msg.sender][token] >= amount, "!balance");

        

        require(IERC20(token).transfer(msg.sender, amount), "!transfer");

        unsafeSubtractFromBalance(msg.sender, token, amount);

        

        emit Withdraw(msg.sender, token, amount);

    }



    function collectTokens(address token) external {

        uint256 amountToCollect = IERC20(token).balanceOf(address(this)).sub(userTokenBalances[TOTAL][token]);

        // only collect if 1) there are tokens to collect & 2) token is whitelisted

        require(amountToCollect > 0, "!amount");

        require(tokenWhitelist[token], "!whitelisted");

        

        if (userTokenBalances[GUILD][token] == 0 && totalGuildBankTokens < MAX_TOKEN_GUILDBANK_COUNT) {totalGuildBankTokens += 1;}

        unsafeAddToBalance(GUILD, token, amountToCollect);



        emit TokensCollected(token, amountToCollect);

    }



    // NOTE: requires that delegate key which sent the original proposal cancels, msg.sender == proposal.proposer

    function cancelProposal(uint256 proposalId) external {

        Proposal storage proposal = proposals[proposalId];

        require(proposal.flags[0] == 0, "sponsored");

        require(proposal.flags[3] == 0, "cancelled");

        require(msg.sender == proposal.proposer, "!proposer");



        proposal.flags[3] = 1; // cancelled

        

        unsafeInternalTransfer(ESCROW, proposal.proposer, proposal.tributeToken, proposal.tributeOffered);

        

        emit CancelProposal(proposalId, msg.sender);

    }



    function updateDelegateKey(address newDelegateKey) external {

        require(members[msg.sender].shares > 0, "caller !shareholder");

        require(newDelegateKey != address(0), "newDelegateKey == 0");



        // skip checks if member is setting the delegate key to their member address

        if (newDelegateKey != msg.sender) {

            require(members[newDelegateKey].exists == 0, "!overwrite members");

            require(members[memberAddressByDelegateKey[newDelegateKey]].exists == 0, "!overwrite keys");

        }



        Member storage member = members[msg.sender];

        memberAddressByDelegateKey[member.delegateKey] = address(0);

        memberAddressByDelegateKey[newDelegateKey] = msg.sender;

        member.delegateKey = newDelegateKey;



        emit UpdateDelegateKey(msg.sender, newDelegateKey);

    }

    

    // can only ragequit if the latest proposal you voted YES on has been processed

    function canRagequit(uint256 highestIndexYesVote) public view returns (bool) {

        require(highestIndexYesVote < proposalQueue.length, "!proposal");

        

        return proposals[proposalQueue[highestIndexYesVote]].flags[1] == 1;

    }



    function hasVotingPeriodExpired(uint256 startingPeriod) public view returns (bool) {

        return getCurrentPeriod() >= startingPeriod + votingPeriodLength;

    }

    

    /***************

    GETTER FUNCTIONS

    ***************/

    function max(uint256 x, uint256 y) internal pure returns (uint256) {

        return x >= y ? x : y;

    }

    

    function getCurrentPeriod() public view returns (uint256) {

        return now.sub(summoningTime).div(periodDuration);

    }

    

    function getMemberProposalVote(address memberAddress, uint256 proposalIndex) external view returns (Vote) {

        require(members[memberAddress].exists == 1, "!member");

        require(proposalIndex < proposalQueue.length, "!proposed");

        

        return proposals[proposalQueue[proposalIndex]].votesByMember[memberAddress];

    }



    function getProposalFlags(uint256 proposalId) external view returns (uint8[7] memory) {

        return proposals[proposalId].flags;

    }

    

    function getProposalQueueLength() external view returns (uint256) {

        return proposalQueue.length;

    }

    

    function getTokenCount() external view returns (uint256) {

        return approvedTokens.length;

    }



    function getUserTokenBalance(address user, address token) external view returns (uint256) {

        return userTokenBalances[user][token];

    }

    

    /***************

    HELPER FUNCTIONS

    ***************/

    function() external payable {}

    

    function fairShare(uint256 balance, uint256 shares, uint256 totalSharesAndLoot) internal pure returns (uint256) {

        require(totalSharesAndLoot != 0);



        if (balance == 0) { return 0; }



        uint256 prod = balance * shares;



        if (prod / balance == shares) { // no overflow in multiplication above?

            return prod / totalSharesAndLoot;

        }



        return (balance / totalSharesAndLoot) * shares;

    }

    

    function registerMember(address newMember, uint256 shares) internal {

        // if new member is already taken by a member's delegateKey, reset it to their member address

        if (members[memberAddressByDelegateKey[newMember]].exists == 1) {

            address memberToOverride = memberAddressByDelegateKey[newMember];

            memberAddressByDelegateKey[memberToOverride] = memberToOverride;

            members[memberToOverride].delegateKey = memberToOverride;

        }

        

        members[newMember] = Member({

            delegateKey : newMember,

            exists : 1, // 'true'

            shares : shares,

            loot : 0,

            highestIndexYesVote : 0,

            jailed : 0

        });



        memberAddressByDelegateKey[newMember] = newMember;

    }

    

    function unsafeAddToBalance(address user, address token, uint256 amount) internal {

        userTokenBalances[user][token] += amount;

        userTokenBalances[TOTAL][token] += amount;

    }

    

    function unsafeInternalTransfer(address from, address to, address token, uint256 amount) internal {

        unsafeSubtractFromBalance(from, token, amount);

        unsafeAddToBalance(to, token, amount);

    }



    function unsafeSubtractFromBalance(address user, address token, uint256 amount) internal {

        userTokenBalances[user][token] -= amount;

        userTokenBalances[TOTAL][token] -= amount;

    }

    

    /********************

    GUILD TOKEN FUNCTIONS

    ********************/

    // GETTER FUNCTIONS

    function balanceOf(address account) external view returns (uint256) { 

        return balances[account];

    }

    

    function totalSupply() public view returns (uint256) { 

        return totalShares.add(totalLoot);

    }

    

    // BALANCE MGMT FUNCTIONS

    function allowance(address owner, address spender) external view returns (uint256) { // tracks guild token (loot) allowances 

        return allowances[owner][spender];

    }

    

    function approve(address spender, uint256 amount) external returns (bool) {

        if(amount != 0 && allowances[msg.sender][spender] != 0) {return false;}

        

        allowances[msg.sender][spender] = amount;

        

        emit Approval(msg.sender, spender, amount);

        

        return true;

    }

    

    function burnGuildToken(address memberAddress, uint256 amount) internal {

        balances[memberAddress] = balances[memberAddress].sub(amount);

        

        emit Transfer(memberAddress, address(0), amount);

    }

    

    function claimShares(uint256 amount) external nonReentrant {

        require(IERC20(stakeToken).transferFrom(msg.sender, address(this), amount), "!transfer"); // deposit stake token & claim shares (1:1)

        

        // if the sender is already a member, add to their existing shares 

        if (members[msg.sender].exists == 1) {

            members[msg.sender].shares = members[msg.sender].shares.add(amount);



        // if the sender is a new member, create a new record for them

        } else {

            registerMember(msg.sender, amount);

        }



        // mint new guild token & shares 

        mintGuildToken(msg.sender, amount);

        totalShares = totalShares.add(amount);

            

        require(totalShares <= MAX_GUILD_BOUND, "guild maxed");

    }

    

    function convertSharesToLoot(uint256 sharesToLoot) external {

        require(members[msg.sender].shares >= sharesToLoot, "!shares");

        

        members[msg.sender].shares = members[msg.sender].shares.sub(sharesToLoot);

        members[msg.sender].loot = members[msg.sender].loot.add(sharesToLoot);

        totalShares = totalShares.sub(sharesToLoot);

        totalLoot = totalLoot.add(sharesToLoot);

    }

    

    function mintGuildToken(address memberAddress, uint256 amount) internal {

        balances[memberAddress] = balances[memberAddress].add(amount);

        

        emit Transfer(address(0), memberAddress, amount);

    }



    // LOOT TRANSFER FUNCTIONS

    function transfer(address receiver, uint256 lootToTransfer) external returns (bool) {

        require(members[msg.sender].loot >= lootToTransfer, "!loot");

        

        members[msg.sender].loot = members[msg.sender].loot.sub(lootToTransfer);

        members[receiver].loot = members[receiver].loot.add(lootToTransfer);

        

        balances[msg.sender] = balances[msg.sender].sub(lootToTransfer);

        balances[receiver] = balances[receiver].add(lootToTransfer);

        

        emit Transfer(msg.sender, receiver, lootToTransfer);

        

        return true;

    }

    

    function transferFrom(address sender, address receiver, uint256 lootToTransfer) external returns (bool) {

        require(members[sender].loot >= lootToTransfer, "!loot");

        

        allowances[sender][msg.sender] = allowances[sender][msg.sender].sub(lootToTransfer);

        

        members[sender].loot = members[sender].loot.sub(lootToTransfer);

        members[receiver].loot = members[receiver].loot.add(lootToTransfer);

        

        balances[sender] = balances[sender].sub(lootToTransfer);

        balances[receiver] = balances[receiver].add(lootToTransfer);

        

        emit Transfer(sender, receiver, lootToTransfer);

        

        return true;

    }

}

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:58.292876
Transaction Length: 1
Severity: High
Contract: MysticMoloch
Function name: submitWhitelistProposal(address,bytes32)
PC address: 45091
Estimated Gas Usage: 1106 - 4496
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x22dfed2edd99a1f1e6a7475f58e6435e0b6126eb.sol:146

contract MysticMoloch is ReentrancyGuard { 

    using SafeMath for uint256;



    /***************

    GLOBAL CONSTANTS

    ***************/

    address public depositToken; // deposit token contract reference - default = wETH

    address public stakeToken; // stake token contract reference for guild voting shares 

    address public constant wETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; // canonical ether token wrapper contract reference for proposals

    

    uint256 public proposalDeposit; // default = 10 deposit token 

    uint256 public processingReward; // default = 0.1 - amount of deposit token to give to whoever processes a proposal

    uint256 public periodDuration; // default = 17280 = 4.8 hours in seconds (5 periods per day)

    uint256 public votingPeriodLength; // default = 35 periods (7 days)

    uint256 public gracePeriodLength; // default = 35 periods (7 days)

    uint256 public dilutionBound; // default = 3 - maximum multiplier a YES voter will be obligated to pay in case of mass ragequit

    uint256 public summoningTime; // needed to determine the current period

    

    // HARD-CODED LIMITS

    // These numbers are quite arbitrary; they are small enough to avoid overflows when doing calculations

    // with periods or shares, yet big enough to not limit reasonable use cases.

    uint256 constant MAX_GUILD_BOUND = 10**36; // maximum bound for guild accounting

    uint256 constant MAX_TOKEN_WHITELIST_COUNT = 400; // maximum number of whitelisted tokens

    uint256 constant MAX_TOKEN_GUILDBANK_COUNT = 200; // maximum number of tokens with non-zero balance in guildbank



    // BANK TOKEN DETAILS

    string public constant name = "Moloch DAO v2x Bank";

    string public constant symbol = "MOL-V2X";

    uint8 public constant decimals = 18;



    // **************

    // EVENT TRACKING

    // **************

    event SubmitProposal(address indexed applicant, uint256 sharesRequested, uint256 lootRequested, uint256 tributeOffered, address tributeToken, uint256 paymentRequested, address paymentToken, bytes32 details, uint8[7] flags, bytes data, uint256 proposalId, address indexed delegateKey, address indexed memberAddress);

    event CancelProposal(uint256 indexed proposalId, address applicantAddress);

    event SponsorProposal(address indexed delegateKey, address indexed memberAddress, uint256 proposalId, uint256 proposalIndex, uint256 startingPeriod);

    event SubmitVote(uint256 proposalId, uint256 indexed proposalIndex, address indexed delegateKey, address indexed memberAddress, uint8 uintVote);

    event ProcessProposal(uint256 indexed proposalIndex, uint256 indexed proposalId, bool didPass);

    event ProcessActionProposal(uint256 indexed proposalIndex, uint256 indexed proposalId, bool didPass);

    event ProcessWhitelistProposal(uint256 indexed proposalIndex, uint256 indexed proposalId, bool didPass);

    event ProcessGuildKickProposal(uint256 indexed proposalIndex, uint256 indexed proposalId, bool didPass);

    event UpdateDelegateKey(address indexed memberAddress, address newDelegateKey);

    event Approval(address indexed owner, address indexed spender, uint256 amount); // guild token (loot) allowance tracking

    event Transfer(address indexed from, address indexed to, uint256 amount); // guild token mint, burn & (loot) transfer tracking

    event Ragequit(address indexed memberAddress, uint256 sharesToBurn, uint256 lootToBurn);

    event TokensCollected(address indexed token, uint256 amountToCollect);

    event Withdraw(address indexed memberAddress, address token, uint256 amount);

    

    // *******************

    // INTERNAL ACCOUNTING

    // *******************

    address public constant GUILD = address(0xdead);

    address public constant ESCROW = address(0xdeaf);

    address public constant TOTAL = address(0xdeed);

    

    uint256 public proposalCount; // total proposals submitted

    uint256 public totalShares; // total shares across all members

    uint256 public totalLoot; // total loot across all members

    uint256 public totalGuildBankTokens; // total tokens with non-zero balance in guild bank



    mapping(uint256 => bytes) public actions; // proposalId => action data

    mapping(address => uint256) private balances; // guild token balances

    mapping(address => mapping(address => uint256)) private allowances; // guild token (loot) allowances

    mapping(address => mapping(address => uint256)) private userTokenBalances; // userTokenBalances[userAddress][tokenAddress]



    enum Vote {

        Null, // default value, counted as abstention

        Yes,

        No

    }

    

    struct Member {

        address delegateKey; // the key responsible for submitting proposals & voting - defaults to member address unless updated

        uint8 exists; // always true (1) once a member has been created

        uint256 shares; // the # of voting shares assigned to this member

        uint256 loot; // the loot amount available to this member (combined with shares on ragekick) - transferable by guild token

        uint256 highestIndexYesVote; // highest proposal index # on which the member voted YES

        uint256 jailed; // set to proposalIndex of a passing guild kick proposal for this member, prevents voting on & sponsoring proposals

    }

    

    struct Proposal {

        address applicant; // the applicant who wishes to become a member - this key will be used for withdrawals (doubles as target for alt. proposals)

        address proposer; // the account that submitted the proposal (can be non-member)

        address sponsor; // the member that sponsored the proposal (moving it into the queue)

        address tributeToken; // tribute token contract reference

        address paymentToken; // payment token contract reference

        uint8[7] flags; // [sponsored, processed, didPass, cancelled, whitelist, guildkick, action]

        uint256 sharesRequested; // the # of shares the applicant is requesting

        uint256 lootRequested; // the amount of loot the applicant is requesting

        uint256 paymentRequested; // amount of tokens requested as payment

        uint256 tributeOffered; // amount of tokens offered as tribute

        uint256 startingPeriod; // the period in which voting can start for this proposal

        uint256 yesVotes; // the total number of YES votes for this proposal

        uint256 noVotes; // the total number of NO votes for this proposal

        uint256 maxTotalSharesAndLootAtYesVote; // the maximum # of total shares encountered at a yes vote on this proposal

        bytes32 details; // proposal details to add context for members 

        mapping(address => Vote) votesByMember; // the votes on this proposal by each member

    }



    mapping(address => bool) public tokenWhitelist;

    address[] public approvedTokens;



    mapping(address => bool) public proposedToWhitelist;

    mapping(address => bool) public proposedToKick;

    

    mapping(address => Member) public members;

    mapping(address => address) public memberAddressByDelegateKey;

    

    mapping(uint256 => Proposal) public proposals;



    uint256[] public proposalQueue;

    

    bool public initialized;



    modifier onlyDelegate {

        require(members[memberAddressByDelegateKey[msg.sender]].shares > 0, "!delegate");

        _;

    }



    function init(

        address _depositToken,

        address _stakeToken,

        address[] calldata _summoner,

        uint256[] calldata _summonerShares,

        uint256 _summonerDeposit,

        uint256 _proposalDeposit,

        uint256 _processingReward,

        uint256 _periodDuration,

        uint256 _votingPeriodLength,

        uint256 _gracePeriodLength,

        uint256 _dilutionBound

    ) external {

        require(!initialized, "initialized");

        require(_depositToken != _stakeToken, "depositToken == stakeToken");

        require(_summoner.length == _summonerShares.length, "summoner != summonerShares");

        require(_proposalDeposit >= _processingReward, "_processingReward > _proposalDeposit");

        

        for (uint256 i = 0; i < _summoner.length; i++) {

            registerMember(_summoner[i], _summonerShares[i]);

            mintGuildToken(_summoner[i], _summonerShares[i]);

            totalShares = totalShares.add(_summonerShares[i]);

        }

        

        require(totalShares <= MAX_GUILD_BOUND, "guild maxed");

        

        tokenWhitelist[_depositToken] = true;

        approvedTokens.push(_depositToken);

        

        if (_summonerDeposit > 0) {

            totalGuildBankTokens += 1;

            unsafeAddToBalance(GUILD, _depositToken, _summonerDeposit);

        }

        

        depositToken = _depositToken;

        stakeToken = _stakeToken;

        proposalDeposit = _proposalDeposit;

        processingReward = _processingReward;

        periodDuration = _periodDuration;

        votingPeriodLength = _votingPeriodLength;

        gracePeriodLength = _gracePeriodLength;

        dilutionBound = _dilutionBound;

        summoningTime = now;

        initialized = true;

        

        _initReentrancyGuard();

    }

    

    /*****************

    PROPOSAL FUNCTIONS

    *****************/

    function submitProposal(

        address applicant,

        uint256 sharesRequested,

        uint256 lootRequested,

        uint256 tributeOffered,

        address tributeToken,

        uint256 paymentRequested,

        address paymentToken,

        bytes32 details

    ) payable external nonReentrant returns (uint256 proposalId) {

        require(sharesRequested.add(lootRequested) <= MAX_GUILD_BOUND, "guild maxed");

        require(tokenWhitelist[tributeToken], "tributeToken != whitelist");

        require(tokenWhitelist[paymentToken], "paymentToken != whitelist");

        require(applicant != GUILD && applicant != ESCROW && applicant != TOTAL, "applicant unreservable");

        require(members[applicant].jailed == 0, "applicant jailed");



        if (tributeOffered > 0 && userTokenBalances[GUILD][tributeToken] == 0) {

            require(totalGuildBankTokens < MAX_TOKEN_GUILDBANK_COUNT, "guildbank maxed");

        }

        

        // collect tribute from proposer & store it in the Moloch until the proposal is processed - if ether, wrap into wETH

        if (tributeToken == wETH && msg.value > 0) {

            require(msg.value == tributeOffered, "!ETH");

            IWETH(wETH).deposit();

            (bool success, ) = wETH.call.value(msg.value)("");

            require(success, "!transfer");

            IWETH(wETH).transfer(address(this), msg.value);

        } else {

            require(IERC20(tributeToken).transferFrom(msg.sender, address(this), tributeOffered), "!transfer");

        }

        

        unsafeAddToBalance(ESCROW, tributeToken, tributeOffered);



        uint8[7] memory flags; // [sponsored, processed, didPass, cancelled, whitelist, guildkick, action]



        _submitProposal(applicant, sharesRequested, lootRequested, tributeOffered, tributeToken, paymentRequested, paymentToken, details, flags, "");

        

        return proposalCount - 1; // return proposalId - contracts calling submit might want it

    }

    

    function submitActionProposal( // stages arbitrary function calls for member vote - based on Raid Guild 'Minion'

        address actionTo,

        address actionToken,

        uint256 actionTokenAmount,

        uint256 actionValue,

        bytes calldata data,

        bytes32 details

    ) external returns (uint256 proposalId) {

        

        uint8[7] memory flags; // [sponsored, processed, didPass, cancelled, whitelist, guildkick, action]

        flags[6] = 1; // guild action

        

        _submitProposal(actionTo, 0, 0, actionValue, address(0), actionTokenAmount, actionToken, details, flags, data);

        

        return proposalCount - 1;

    }

    

    function submitWhitelistProposal(address tokenToWhitelist, bytes32 details) external returns (uint256 proposalId) {

        require(tokenToWhitelist != address(0), "!token");

        require(tokenToWhitelist != stakeToken, "tokenToWhitelist == stakeToken");

        require(!tokenWhitelist[tokenToWhitelist], "whitelisted");

        require(approvedTokens.length < MAX_TOKEN_WHITELIST_COUNT, "whitelist maxed");



        uint8[7] memory flags; // [sponsored, processed, didPass, cancelled, whitelist, guildkick, action]

        flags[4] = 1; // whitelist



        _submitProposal(address(0), 0, 0, 0, tokenToWhitelist, 0, address(0), details, flags, "");

        

        return proposalCount - 1;

    }

    

    function submitGuildKickProposal(address memberToKick, bytes32 details) external returns (uint256 proposalId) {

        Member memory member = members[memberToKick];



        require(member.shares > 0 || member.loot > 0, "!share||loot");

        require(members[memberToKick].jailed == 0, "jailed");



        uint8[7] memory flags; // [sponsored, processed, didPass, cancelled, whitelist, guildkick, action]

        flags[5] = 1; // guild kick



        _submitProposal(memberToKick, 0, 0, 0, address(0), 0, address(0), details, flags, "");

        

        return proposalCount - 1;

    }

    

    function _submitProposal(

        address applicant,

        uint256 sharesRequested,

        uint256 lootRequested,

        uint256 tributeOffered,

        address tributeToken,

        uint256 paymentRequested,

        address paymentToken,

        bytes32 details,

        uint8[7] memory flags,

        bytes memory data

    ) internal {

        Proposal memory proposal = Proposal({

            applicant : applicant,

            proposer : msg.sender,

            sponsor : address(0),

            tributeToken : tributeToken,

            paymentToken : paymentToken,

            flags : flags,

            sharesRequested : sharesRequested,

            lootRequested : lootRequested,

            paymentRequested : paymentRequested,

            tributeOffered : tributeOffered,

            startingPeriod : 0,

            yesVotes : 0,

            noVotes : 0,

            maxTotalSharesAndLootAtYesVote : 0,

            details : details

        });

        

        if (proposal.flags[6] == 1) {

            actions[proposalCount] = data;

        }

        

        proposals[proposalCount] = proposal;

        address memberAddress = memberAddressByDelegateKey[msg.sender];

        // NOTE: argument order matters, avoid stack too deep

        emit SubmitProposal(applicant, sharesRequested, lootRequested, tributeOffered, tributeToken, paymentRequested, paymentToken, details, flags, data, proposalCount, msg.sender, memberAddress);

        

        proposalCount += 1;

    }



    function sponsorProposal(uint256 proposalId) external nonReentrant onlyDelegate {

        // collect proposal deposit from sponsor & store it in the Moloch until the proposal is processed

        require(IERC20(depositToken).transferFrom(msg.sender, address(this), proposalDeposit), "!transfer");

        unsafeAddToBalance(ESCROW, depositToken, proposalDeposit);



        Proposal storage proposal = proposals[proposalId];



        require(proposal.proposer != address(0), "!proposed");

        require(proposal.flags[0] == 0, "sponsored");

        require(proposal.flags[3] == 0, "cancelled");

        require(members[proposal.applicant].jailed == 0, "applicant jailed");



        if (proposal.tributeOffered > 0 && userTokenBalances[GUILD][proposal.tributeToken] == 0) {

            require(totalGuildBankTokens < MAX_TOKEN_GUILDBANK_COUNT, "guildbank maxed");

        }



        // whitelist proposal

        if (proposal.flags[4] == 1) {

            require(!tokenWhitelist[address(proposal.tributeToken)], "whitelisted");

            require(!proposedToWhitelist[address(proposal.tributeToken)], "whitelist proposed");

            require(approvedTokens.length < MAX_TOKEN_WHITELIST_COUNT, "whitelist maxed");

            proposedToWhitelist[address(proposal.tributeToken)] = true;



        // guild kick proposal

        } else if (proposal.flags[5] == 1) {

            require(!proposedToKick[proposal.applicant], "kick proposed");

            proposedToKick[proposal.applicant] = true;

        }



        // compute startingPeriod for proposal

        uint256 startingPeriod = max(

            getCurrentPeriod(),

            proposalQueue.length == 0 ? 0 : proposals[proposalQueue[proposalQueue.length - 1]].startingPeriod

        ) + 1;



        proposal.startingPeriod = startingPeriod;



        address memberAddress = memberAddressByDelegateKey[msg.sender];

        proposal.sponsor = memberAddress;



        proposal.flags[0] = 1; // sponsored



        // append proposal to the queue

        proposalQueue.push(proposalId);

        

        emit SponsorProposal(msg.sender, memberAddress, proposalId, proposalQueue.length - 1, startingPeriod);

    }



    // NOTE: In MolochV2 proposalIndex != proposalId

    function submitVote(uint256 proposalIndex, uint8 uintVote) external onlyDelegate {

        address memberAddress = memberAddressByDelegateKey[msg.sender];

        Member storage member = members[memberAddress];



        require(proposalIndex < proposalQueue.length, "!proposed");

        Proposal storage proposal = proposals[proposalQueue[proposalIndex]];



        require(uintVote < 3, "!<3");

        Vote vote = Vote(uintVote);



        require(getCurrentPeriod() >= proposal.startingPeriod, "pending");

        require(!hasVotingPeriodExpired(proposal.startingPeriod), "expired");

        require(proposal.votesByMember[memberAddress] == Vote.Null, "voted");

        require(vote == Vote.Yes || vote == Vote.No, "!Yes||No");



        proposal.votesByMember[memberAddress] = vote;



        if (vote == Vote.Yes) {

            proposal.yesVotes += member.shares;



            // set highest index (latest) yes vote - must be processed for member to ragequit

            if (proposalIndex > member.highestIndexYesVote) {

                member.highestIndexYesVote = proposalIndex;

            }



            // set maximum of total shares encountered at a yes vote - used to bound dilution for yes voters

            if (totalSupply() > proposal.maxTotalSharesAndLootAtYesVote) {

                proposal.maxTotalSharesAndLootAtYesVote = totalSupply();

            }



        } else if (vote == Vote.No) {

            proposal.noVotes += member.shares;

        }

     

        // NOTE: subgraph indexes by proposalId not proposalIndex since proposalIndex isn't set until it's been sponsored but proposal is created on submission

        emit SubmitVote(proposalQueue[proposalIndex], proposalIndex, msg.sender, memberAddress, uintVote);

    }



    function processProposal(uint256 proposalIndex) external {

        _validateProposalForProcessing(proposalIndex);



        uint256 proposalId = proposalQueue[proposalIndex];

        Proposal storage proposal = proposals[proposalId];



        require(proposal.flags[4] == 0 && proposal.flags[5] == 0 && proposal.flags[6] == 0, "!standard");



        proposal.flags[1] = 1; // processed



        bool didPass = _didPass(proposalIndex);



        // Make the proposal fail if the new total number of shares & loot exceeds the limit

        if (totalSupply().add(proposal.sharesRequested).add(proposal.lootRequested) > MAX_GUILD_BOUND) {

            didPass = false;

        }



        // Make the proposal fail if it is requesting more tokens as payment than the available guild bank balance

        if (proposal.paymentRequested > userTokenBalances[GUILD][proposal.paymentToken]) {

            didPass = false;

        }



        // Make the proposal fail if it would result in too many tokens with non-zero balance in guild bank

        if (proposal.tributeOffered > 0 && userTokenBalances[GUILD][proposal.tributeToken] == 0 && totalGuildBankTokens >= MAX_TOKEN_GUILDBANK_COUNT) {

            didPass = false;

        }



        // PROPOSAL PASSED

        if (didPass == true) {

            proposal.flags[2] = 1; // didPass



            // if the applicant is already a member, add to their existing shares & loot

            if (members[proposal.applicant].exists == 1) {

                members[proposal.applicant].shares = members[proposal.applicant].shares.add(proposal.sharesRequested);

                members[proposal.applicant].loot = members[proposal.applicant].loot.add(proposal.lootRequested);



            // if the applicant is a new member, create a new record for them

            } else {

                registerMember(proposal.applicant, proposal.sharesRequested);

            }



            // mint new guild token, shares & loot 

            mintGuildToken(proposal.applicant, proposal.sharesRequested.add(proposal.lootRequested));

            totalShares = totalShares.add(proposal.sharesRequested);

            totalLoot = totalLoot.add(proposal.lootRequested);



            // if the proposal tribute is the first token of its kind to make it into the guild bank, increment total guild bank tokens

            if (userTokenBalances[GUILD][proposal.tributeToken] == 0 && proposal.tributeOffered > 0) {

                totalGuildBankTokens += 1;

            }



            unsafeInternalTransfer(ESCROW, GUILD, proposal.tributeToken, proposal.tributeOffered);

            unsafeInternalTransfer(GUILD, proposal.applicant, proposal.paymentToken, proposal.paymentRequested);



            // if the proposal spends 100% of guild bank balance for a token, decrement total guild bank tokens

            if (userTokenBalances[GUILD][proposal.paymentToken] == 0 && proposal.paymentRequested > 0) {

                totalGuildBankTokens -= 1;

            }



        // PROPOSAL FAILED

        } else {

            // return all tokens to the proposer (not the applicant, because funds come from proposer)

            unsafeInternalTransfer(ESCROW, proposal.proposer, proposal.tributeToken, proposal.tributeOffered);

        }



        _returnDeposit(proposal.sponsor);

        

        emit ProcessProposal(proposalIndex, proposalId, didPass);

    }

    

    function processActionProposal(uint256 proposalIndex) external nonReentrant returns (bool, bytes memory) {

        _validateProposalForProcessing(proposalIndex);

        

        uint256 proposalId = proposalQueue[proposalIndex];

        bytes memory action = actions[proposalId];

        Proposal storage proposal = proposals[proposalId];

        

        require(proposal.flags[6] == 1, "!action");



        proposal.flags[1] = 1; // processed



        bool didPass = _didPass(proposalIndex);

        

        // Make the proposal fail if it is requesting more ether than the available local balance

        if (proposal.paymentToken == address(0) && proposal.tributeOffered > address(this).balance) {

            didPass = false;

        }

        

        // Make the proposal fail if it is requesting more stake token than the available local balance

        if (proposal.paymentToken == stakeToken && proposal.paymentRequested > IERC20(stakeToken).balanceOf(address(this))) {

            didPass = false;

        }

        

        // Make the proposal fail if it is requesting more tokens than the available guild bank balance

        if (proposal.paymentToken != address(0) && proposal.paymentToken != stakeToken && proposal.paymentRequested > userTokenBalances[GUILD][proposal.paymentToken]) {

            didPass = false;

        }



        if (didPass == true) {

            proposal.flags[2] = 1; // didPass

            (bool success, bytes memory retData) = proposal.applicant.call.value(proposal.tributeOffered)(action);

            if (proposal.paymentToken != address(0) && proposal.paymentToken != stakeToken) {

                unsafeSubtractFromBalance(GUILD, proposal.paymentToken, proposal.paymentRequested);

                // if the action proposal spends 100% of guild bank balance for a token, decrement total guild bank tokens

                if (userTokenBalances[GUILD][proposal.paymentToken] == 0 && proposal.paymentRequested > 0) {totalGuildBankTokens -= 1;}

            }

            return (success, retData);

        }

        

        emit ProcessActionProposal(proposalIndex, proposalId, didPass);

    }



    function processWhitelistProposal(uint256 proposalIndex) external {

        _validateProposalForProcessing(proposalIndex);



        uint256 proposalId = proposalQueue[proposalIndex];

        Proposal storage proposal = proposals[proposalId];



        require(proposal.flags[4] == 1, "!whitelist");



        proposal.flags[1] = 1; // processed



        bool didPass = _didPass(proposalIndex);



        if (approvedTokens.length >= MAX_TOKEN_WHITELIST_COUNT) {

            didPass = false;

        }



        if (didPass == true) {

            proposal.flags[2] = 1; // didPass



            tokenWhitelist[address(proposal.tributeToken)] = true;

            approvedTokens.push(proposal.tributeToken);

        }



        proposedToWhitelist[address(proposal.tributeToken)] = false;



        _returnDeposit(proposal.sponsor);

        

        emit ProcessWhitelistProposal(proposalIndex, proposalId, didPass);

    }



    function processGuildKickProposal(uint256 proposalIndex) external {

        _validateProposalForProcessing(proposalIndex);



        uint256 proposalId = proposalQueue[proposalIndex];

        Proposal storage proposal = proposals[proposalId];



        require(proposal.flags[5] == 1, "!kick");



        proposal.flags[1] = 1; // processed



        bool didPass = _didPass(proposalIndex);



        if (didPass == true) {

            proposal.flags[2] = 1; // didPass

            Member storage member = members[proposal.applicant];

            member.jailed = proposalIndex;



            // transfer shares to loot

            member.loot = member.loot.add(member.shares);

            totalShares = totalShares.sub(member.shares);

            totalLoot = totalLoot.add(member.shares);

            member.shares = 0; // revoke all shares

        }



        proposedToKick[proposal.applicant] = false;



        _returnDeposit(proposal.sponsor);

        

        emit ProcessGuildKickProposal(proposalIndex, proposalId, didPass);

    }



    function _didPass(uint256 proposalIndex) internal view returns (bool didPass) {

        Proposal memory proposal = proposals[proposalQueue[proposalIndex]];

        

        if (proposal.yesVotes > proposal.noVotes) {

            didPass = true;

        }

        

        // Make the proposal fail if the dilutionBound is exceeded

        if ((totalSupply().mul(dilutionBound)) < proposal.maxTotalSharesAndLootAtYesVote) {

            didPass = false;

        }



        // Make the proposal fail if the applicant is jailed

        // - for standard proposals, we don't want the applicant to get any shares/loot/payment

        // - for guild kick proposals, we should never be able to propose to kick a jailed member (or have two kick proposals active), so it doesn't matter

        if (members[proposal.applicant].jailed != 0) {

            didPass = false;

        }



        return didPass;

    }



    function _validateProposalForProcessing(uint256 proposalIndex) internal view {

        require(proposalIndex < proposalQueue.length, "!proposal");

        Proposal memory proposal = proposals[proposalQueue[proposalIndex]];



        require(getCurrentPeriod() >= proposal.startingPeriod + votingPeriodLength + gracePeriodLength, "!ready");

        require(proposal.flags[1] == 0, "processed");

        require(proposalIndex == 0 || proposals[proposalQueue[proposalIndex - 1]].flags[1] == 1, "prior !processed");

    }



    function _returnDeposit(address sponsor) internal {

        unsafeInternalTransfer(ESCROW, msg.sender, depositToken, processingReward);

        unsafeInternalTransfer(ESCROW, sponsor, depositToken, proposalDeposit - processingReward);

    }



    function ragequit(uint256 sharesToBurn, uint256 lootToBurn) external {

        require(members[msg.sender].exists == 1, "!member");

        

        _ragequit(msg.sender, sharesToBurn, lootToBurn);

    }



    function _ragequit(address memberAddress, uint256 sharesToBurn, uint256 lootToBurn) internal {

        uint256 initialTotalSharesAndLoot = totalSupply();



        Member storage member = members[memberAddress];



        require(member.shares >= sharesToBurn, "!shares");

        require(member.loot >= lootToBurn, "!loot");



        require(canRagequit(member.highestIndexYesVote), "!ragequit until highest index proposal member voted YES processes");



        uint256 sharesAndLootToBurn = sharesToBurn.add(lootToBurn);



        // burn guild token, shares & loot

        burnGuildToken(memberAddress, sharesAndLootToBurn);

        member.shares = member.shares.sub(sharesToBurn);

        member.loot = member.loot.sub(lootToBurn);

        totalShares = totalShares.sub(sharesToBurn);

        totalLoot = totalLoot.sub(lootToBurn);



        for (uint256 i = 0; i < approvedTokens.length; i++) {

            uint256 amountToRagequit = fairShare(userTokenBalances[GUILD][approvedTokens[i]], sharesAndLootToBurn, initialTotalSharesAndLoot);

            if (amountToRagequit > 0) { // gas optimization to allow a higher maximum token limit

                // deliberately not using safemath here to keep overflows from preventing the function execution (which would break ragekicks)

                // if a token overflows, it is because the supply was artificially inflated to oblivion, so we probably don't care about it anyways

                userTokenBalances[GUILD][approvedTokens[i]] -= amountToRagequit;

                userTokenBalances[memberAddress][approvedTokens[i]] += amountToRagequit;

            }

        }



        emit Ragequit(memberAddress, sharesToBurn, lootToBurn);

    }



    function ragekick(address memberToKick) external {

        Member storage member = members[memberToKick];



        require(member.jailed != 0, "!jailed");

        require(member.loot > 0, "!loot"); // note - should be impossible for jailed member to have shares

        require(canRagequit(member.highestIndexYesVote), "!ragequit until highest index proposal member voted YES processes");



        _ragequit(memberToKick, 0, member.loot);

    }

    

    function withdrawBalance(address token, uint256 amount) external nonReentrant {

        _withdrawBalance(token, amount);

    }



    function withdrawBalances(address[] calldata tokens, uint256[] calldata amounts, bool max) external nonReentrant {

        require(tokens.length == amounts.length, "tokens != amounts");



        for (uint256 i=0; i < tokens.length; i++) {

            uint256 withdrawAmount = amounts[i];

            if (max) { // withdraw the maximum balance

                withdrawAmount = userTokenBalances[msg.sender][tokens[i]];

            }



            _withdrawBalance(tokens[i], withdrawAmount);

        }

    }

    

    function _withdrawBalance(address token, uint256 amount) internal {

        require(userTokenBalances[msg.sender][token] >= amount, "!balance");

        

        require(IERC20(token).transfer(msg.sender, amount), "!transfer");

        unsafeSubtractFromBalance(msg.sender, token, amount);

        

        emit Withdraw(msg.sender, token, amount);

    }



    function collectTokens(address token) external {

        uint256 amountToCollect = IERC20(token).balanceOf(address(this)).sub(userTokenBalances[TOTAL][token]);

        // only collect if 1) there are tokens to collect & 2) token is whitelisted

        require(amountToCollect > 0, "!amount");

        require(tokenWhitelist[token], "!whitelisted");

        

        if (userTokenBalances[GUILD][token] == 0 && totalGuildBankTokens < MAX_TOKEN_GUILDBANK_COUNT) {totalGuildBankTokens += 1;}

        unsafeAddToBalance(GUILD, token, amountToCollect);



        emit TokensCollected(token, amountToCollect);

    }



    // NOTE: requires that delegate key which sent the original proposal cancels, msg.sender == proposal.proposer

    function cancelProposal(uint256 proposalId) external {

        Proposal storage proposal = proposals[proposalId];

        require(proposal.flags[0] == 0, "sponsored");

        require(proposal.flags[3] == 0, "cancelled");

        require(msg.sender == proposal.proposer, "!proposer");



        proposal.flags[3] = 1; // cancelled

        

        unsafeInternalTransfer(ESCROW, proposal.proposer, proposal.tributeToken, proposal.tributeOffered);

        

        emit CancelProposal(proposalId, msg.sender);

    }



    function updateDelegateKey(address newDelegateKey) external {

        require(members[msg.sender].shares > 0, "caller !shareholder");

        require(newDelegateKey != address(0), "newDelegateKey == 0");



        // skip checks if member is setting the delegate key to their member address

        if (newDelegateKey != msg.sender) {

            require(members[newDelegateKey].exists == 0, "!overwrite members");

            require(members[memberAddressByDelegateKey[newDelegateKey]].exists == 0, "!overwrite keys");

        }



        Member storage member = members[msg.sender];

        memberAddressByDelegateKey[member.delegateKey] = address(0);

        memberAddressByDelegateKey[newDelegateKey] = msg.sender;

        member.delegateKey = newDelegateKey;



        emit UpdateDelegateKey(msg.sender, newDelegateKey);

    }

    

    // can only ragequit if the latest proposal you voted YES on has been processed

    function canRagequit(uint256 highestIndexYesVote) public view returns (bool) {

        require(highestIndexYesVote < proposalQueue.length, "!proposal");

        

        return proposals[proposalQueue[highestIndexYesVote]].flags[1] == 1;

    }



    function hasVotingPeriodExpired(uint256 startingPeriod) public view returns (bool) {

        return getCurrentPeriod() >= startingPeriod + votingPeriodLength;

    }

    

    /***************

    GETTER FUNCTIONS

    ***************/

    function max(uint256 x, uint256 y) internal pure returns (uint256) {

        return x >= y ? x : y;

    }

    

    function getCurrentPeriod() public view returns (uint256) {

        return now.sub(summoningTime).div(periodDuration);

    }

    

    function getMemberProposalVote(address memberAddress, uint256 proposalIndex) external view returns (Vote) {

        require(members[memberAddress].exists == 1, "!member");

        require(proposalIndex < proposalQueue.length, "!proposed");

        

        return proposals[proposalQueue[proposalIndex]].votesByMember[memberAddress];

    }



    function getProposalFlags(uint256 proposalId) external view returns (uint8[7] memory) {

        return proposals[proposalId].flags;

    }

    

    function getProposalQueueLength() external view returns (uint256) {

        return proposalQueue.length;

    }

    

    function getTokenCount() external view returns (uint256) {

        return approvedTokens.length;

    }



    function getUserTokenBalance(address user, address token) external view returns (uint256) {

        return userTokenBalances[user][token];

    }

    

    /***************

    HELPER FUNCTIONS

    ***************/

    function() external payable {}

    

    function fairShare(uint256 balance, uint256 shares, uint256 totalSharesAndLoot) internal pure returns (uint256) {

        require(totalSharesAndLoot != 0);



        if (balance == 0) { return 0; }



        uint256 prod = balance * shares;



        if (prod / balance == shares) { // no overflow in multiplication above?

            return prod / totalSharesAndLoot;

        }



        return (balance / totalSharesAndLoot) * shares;

    }

    

    function registerMember(address newMember, uint256 shares) internal {

        // if new member is already taken by a member's delegateKey, reset it to their member address

        if (members[memberAddressByDelegateKey[newMember]].exists == 1) {

            address memberToOverride = memberAddressByDelegateKey[newMember];

            memberAddressByDelegateKey[memberToOverride] = memberToOverride;

            members[memberToOverride].delegateKey = memberToOverride;

        }

        

        members[newMember] = Member({

            delegateKey : newMember,

            exists : 1, // 'true'

            shares : shares,

            loot : 0,

            highestIndexYesVote : 0,

            jailed : 0

        });



        memberAddressByDelegateKey[newMember] = newMember;

    }

    

    function unsafeAddToBalance(address user, address token, uint256 amount) internal {

        userTokenBalances[user][token] += amount;

        userTokenBalances[TOTAL][token] += amount;

    }

    

    function unsafeInternalTransfer(address from, address to, address token, uint256 amount) internal {

        unsafeSubtractFromBalance(from, token, amount);

        unsafeAddToBalance(to, token, amount);

    }



    function unsafeSubtractFromBalance(address user, address token, uint256 amount) internal {

        userTokenBalances[user][token] -= amount;

        userTokenBalances[TOTAL][token] -= amount;

    }

    

    /********************

    GUILD TOKEN FUNCTIONS

    ********************/

    // GETTER FUNCTIONS

    function balanceOf(address account) external view returns (uint256) { 

        return balances[account];

    }

    

    function totalSupply() public view returns (uint256) { 

        return totalShares.add(totalLoot);

    }

    

    // BALANCE MGMT FUNCTIONS

    function allowance(address owner, address spender) external view returns (uint256) { // tracks guild token (loot) allowances 

        return allowances[owner][spender];

    }

    

    function approve(address spender, uint256 amount) external returns (bool) {

        if(amount != 0 && allowances[msg.sender][spender] != 0) {return false;}

        

        allowances[msg.sender][spender] = amount;

        

        emit Approval(msg.sender, spender, amount);

        

        return true;

    }

    

    function burnGuildToken(address memberAddress, uint256 amount) internal {

        balances[memberAddress] = balances[memberAddress].sub(amount);

        

        emit Transfer(memberAddress, address(0), amount);

    }

    

    function claimShares(uint256 amount) external nonReentrant {

        require(IERC20(stakeToken).transferFrom(msg.sender, address(this), amount), "!transfer"); // deposit stake token & claim shares (1:1)

        

        // if the sender is already a member, add to their existing shares 

        if (members[msg.sender].exists == 1) {

            members[msg.sender].shares = members[msg.sender].shares.add(amount);



        // if the sender is a new member, create a new record for them

        } else {

            registerMember(msg.sender, amount);

        }



        // mint new guild token & shares 

        mintGuildToken(msg.sender, amount);

        totalShares = totalShares.add(amount);

            

        require(totalShares <= MAX_GUILD_BOUND, "guild maxed");

    }

    

    function convertSharesToLoot(uint256 sharesToLoot) external {

        require(members[msg.sender].shares >= sharesToLoot, "!shares");

        

        members[msg.sender].shares = members[msg.sender].shares.sub(sharesToLoot);

        members[msg.sender].loot = members[msg.sender].loot.add(sharesToLoot);

        totalShares = totalShares.sub(sharesToLoot);

        totalLoot = totalLoot.add(sharesToLoot);

    }

    

    function mintGuildToken(address memberAddress, uint256 amount) internal {

        balances[memberAddress] = balances[memberAddress].add(amount);

        

        emit Transfer(address(0), memberAddress, amount);

    }



    // LOOT TRANSFER FUNCTIONS

    function transfer(address receiver, uint256 lootToTransfer) external returns (bool) {

        require(members[msg.sender].loot >= lootToTransfer, "!loot");

        

        members[msg.sender].loot = members[msg.sender].loot.sub(lootToTransfer);

        members[receiver].loot = members[receiver].loot.add(lootToTransfer);

        

        balances[msg.sender] = balances[msg.sender].sub(lootToTransfer);

        balances[receiver] = balances[receiver].add(lootToTransfer);

        

        emit Transfer(msg.sender, receiver, lootToTransfer);

        

        return true;

    }

    

    function transferFrom(address sender, address receiver, uint256 lootToTransfer) external returns (bool) {

        require(members[sender].loot >= lootToTransfer, "!loot");

        

        allowances[sender][msg.sender] = allowances[sender][msg.sender].sub(lootToTransfer);

        

        members[sender].loot = members[sender].loot.sub(lootToTransfer);

        members[receiver].loot = members[receiver].loot.add(lootToTransfer);

        

        balances[sender] = balances[sender].sub(lootToTransfer);

        balances[receiver] = balances[receiver].add(lootToTransfer);

        

        emit Transfer(sender, receiver, lootToTransfer);

        

        return true;

    }

}

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xaDe500DCA59E3C7716b32D86dE20f12F59e8a29b.sol
Total states:5978
10830.380865
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.402367
Transaction Length: 0
Severity: High
Contract: Ether5
Function name: constructor
PC address: 287
Estimated Gas Usage: 66753 - 330473
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xaDe500DCA59E3C7716b32D86dE20f12F59e8a29b.sol:216

now + poolTime

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x052280a48ce0b00cbea7164a2b99b6a0cf534344.sol
Total states:23706
77.091283
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.099905
Transaction Length: 0
Severity: High
Contract: LexAIR
Function name: constructor
PC address: 110
Estimated Gas Usage: 257 - 3030
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x052280a48ce0b00cbea7164a2b99b6a0cf534344.sol:10

█████╗

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.115074
Transaction Length: 0
Severity: High
Contract: LexAIR
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x052280a48ce0b00cbea7164a2b99b6a0cf534344.sol:9

█╔██╗ 
███████╗█

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.946207
Transaction Length: 1
Severity: High
Contract: LexAIR
Function name: updateMessage(string)
PC address: 275
Estimated Gas Usage: 319 - 414
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x052280a48ce0b00cbea7164a2b99b6a0cf534344.sol:3

*/

/*
██╗     ████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.341663
Transaction Length: 1
Severity: High
Contract: LexAIR
Function name: list(address[],bytes32)
PC address: 536
Estimated Gas Usage: 385 - 480
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x052280a48ce0b00cbea7164a2b99b6a0cf534344.sol:6

     ████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.340725
Transaction Length: 1
Severity: High
Contract: LexAIR
Function name: list(address[],bytes32)
PC address: 538
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x052280a48ce0b00cbea7164a2b99b6a0cf534344.sol:3

*/

/*
██╗     █████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:19.940064
Transaction Length: 1
Severity: High
Contract: LexAIR
Function name: delist(address[],bytes32)
PC address: 735
Estimated Gas Usage: 318 - 413
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x052280a48ce0b00cbea7164a2b99b6a0cf534344.sol:6

     ████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:23.028289
Transaction Length: 1
Severity: High
Contract: LexAIR
Function name: delist(address[],bytes32)
PC address: 737
Estimated Gas Usage: 318 - 413
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x052280a48ce0b00cbea7164a2b99b6a0cf534344.sol:3

*/

/*
██╗     █████

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x4F4001b06A2d5E71674a3591713B47580a100244.sol
Total states:1055
2.47138
==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.005893
Transaction Length: 0
Severity: Medium
Contract: Governance
Function name: constructor
PC address: 18
Estimated Gas Usage: 42 - 137
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../new/0x4F4001b06A2d5E71674a3591713B47580a100244.sol:220

tx.origin

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x6e58b1a54c5e57895b45ec8752c39e6d1c38ca19.sol
Total states:2955
3.987661
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xa2185aa4e9ddf0e6f58dc76a1fbc6376f64cd8f2.sol
Total states:2927
3.107344
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x12c211dc731410ee5c5ee18670b54cb1b989e0112.sol
Total states:1805
3.526252
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x8033eCe502a6CF62F9aEA0ef40Df467B723F04F6.sol
Total states:18680
153.297785
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.104006
Transaction Length: 1
Severity: High
Contract: mimitoken
Function name: bulkTransfer(address[],uint256[])
PC address: 757
Estimated Gas Usage: 408 - 503
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x8033eCe502a6CF62F9aEA0ef40Df467B723F04F6.sol:5

olidity ^0.5.13;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.033258
Transaction Length: 1
Severity: High
Contract: mimitoken
Function name: bulkTransfer(address[],uint256[])
PC address: 759
Estimated Gas Usage: 408 - 503
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x8033eCe502a6CF62F9aEA0ef40Df467B723F04F6.sol:3

*/

//pragma solidity ^0.5.13;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.803346
Transaction Length: 1
Severity: High
Contract: mimitoken
Function name: bulkTransfer(address[],uint256[])
PC address: 842
Estimated Gas Usage: 584 - 679
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x8033eCe502a6CF62F9aEA0ef40Df467B723F04F6.sol:5

olidity ^0.5.13;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:27.776480
Transaction Length: 1
Severity: High
Contract: mimitoken
Function name: bulkTransfer(address[],uint256[])
PC address: 844
Estimated Gas Usage: 584 - 679
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x8033eCe502a6CF62F9aEA0ef40Df467B723F04F6.sol:3

*/

//pragma solidity ^0.5.13;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:45.161631
Transaction Length: 1
Severity: High
Contract: mimitoken
Function name: transferAndCall(address,uint256,bytes)
PC address: 1417
Estimated Gas Usage: 511 - 606
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x8033eCe502a6CF62F9aEA0ef40Df467B723F04F6.sol:3

*/

//pragma solidity ^0.5.13;
prag

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:51.929910
Transaction Length: 1
Severity: Low
Contract: mimitoken
Function name: unfreeze(uint256)
PC address: 6428
Estimated Gas Usage: 1375 - 1660
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x8033eCe502a6CF62F9aEA0ef40Df467B723F04F6.sol:212

_burnedAmount * FLOAT_SCALAR / info.totalFrozen

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:26.724630
Transaction Length: 2
Severity: Low
Contract: mimitoken
Function name: unfreeze(uint256)
PC address: 6428
Estimated Gas Usage: 1375 - 1660
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x8033eCe502a6CF62F9aEA0ef40Df467B723F04F6.sol:212

_burnedAmount * FLOAT_SCALAR / info.totalFrozen

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xb9d01530c7c59437daa96aba918e31150589dc00.sol
Total states:149
2.638558
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x2f701fc5b2bc15fa8b09190a5cfc7b564ae9fad3.sol
Total states:35050
165.618293
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.136535
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1004
Estimated Gas Usage: 417 - 512
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x2f701fc5b2bc15fa8b09190a5cfc7b564ae9fad3.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.906930
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1006
Estimated Gas Usage: 417 - 512
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x2f701fc5b2bc15fa8b09190a5cfc7b564ae9fad3.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.638980
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1089
Estimated Gas Usage: 593 - 688
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x2f701fc5b2bc15fa8b09190a5cfc7b564ae9fad3.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:19.789723
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1091
Estimated Gas Usage: 593 - 688
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x2f701fc5b2bc15fa8b09190a5cfc7b564ae9fad3.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.905185
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1250
Estimated Gas Usage: 462 - 557
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x2f701fc5b2bc15fa8b09190a5cfc7b564ae9fad3.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.934990
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1252
Estimated Gas Usage: 462 - 557
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x2f701fc5b2bc15fa8b09190a5cfc7b564ae9fad3.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.360173
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1335
Estimated Gas Usage: 638 - 733
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x2f701fc5b2bc15fa8b09190a5cfc7b564ae9fad3.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:19.937917
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1337
Estimated Gas Usage: 638 - 733
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x2f701fc5b2bc15fa8b09190a5cfc7b564ae9fad3.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.764248
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeBP(uint256)
PC address: 2585
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x2f701fc5b2bc15fa8b09190a5cfc7b564ae9fad3.sol:784

uint[] public bonusRangeBP

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.392422
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3621
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x2f701fc5b2bc15fa8b09190a5cfc7b564ae9fad3.sol:1226

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:03.798086
Transaction Length: 2
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3621
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x2f701fc5b2bc15fa8b09190a5cfc7b564ae9fad3.sol:1226

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:34.396028
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeStart(uint256)
PC address: 6017
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x2f701fc5b2bc15fa8b09190a5cfc7b564ae9fad3.sol:783

uint[] public bonusRangeStart

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:35.536399
Transaction Length: 1
Severity: Low
Contract: LidStaking
Function name: stakeHandlers(uint256)
PC address: 6118
Estimated Gas Usage: 790 - 885
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x2f701fc5b2bc15fa8b09190a5cfc7b564ae9fad3.sol:961

IStakeHandler[] public stakeHandlers

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:01.061589
Transaction Length: 2
Severity: High
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6315
Estimated Gas Usage: 1699 - 2124
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0x2f701fc5b2bc15fa8b09190a5cfc7b564ae9fad3.sol:1111

stakeHandlers.length-1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:08.361486
Transaction Length: 2
Severity: Low
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6326
Estimated Gas Usage: 1709 - 2134
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x2f701fc5b2bc15fa8b09190a5cfc7b564ae9fad3.sol:1111

stakeHandlers[stakeHandlers.length-1]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:30.364947
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: calculateRatePerEth(uint256,uint256,uint256)
PC address: 6866
Estimated Gas Usage: 955 - 1050
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x2f701fc5b2bc15fa8b09190a5cfc7b564ae9fad3.sol:162

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.365293
Transaction Length: 1
Severity: High
Contract: LidStaking
Function name: findTaxAmount(uint256,uint256)
PC address: 13348
Estimated Gas Usage: 474 - 569
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x2f701fc5b2bc15fa8b09190a5cfc7b564ae9fad3.sol:162

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:32.782441
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPoolBPs(uint256)
PC address: 15373
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x2f701fc5b2bc15fa8b09190a5cfc7b564ae9fad3.sol:1227

uint[] public tokenPoolBPs

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xb380f3727467253108e2c034a8ae519dd631851c.sol
Total states:2324
1.829344
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x28681d373aF03A0Eb00ACE262c5dad9A0C65F2762.sol
Total states:4368
582.954974
==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.005729
Transaction Length: 0
Severity: Medium
Contract: Governance
Function name: constructor
PC address: 18
Estimated Gas Usage: 42 - 137
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../new/0x28681d373aF03A0Eb00ACE262c5dad9A0C65F2762.sol:639

tx.origin

--------------------

==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.030899
Transaction Length: 0
Severity: Medium
Contract: LPTokenWrapper
Function name: constructor
PC address: 241
Estimated Gas Usage: 16419 - 77504
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../new/0x28681d373aF03A0Eb00ACE262c5dad9A0C65F2762.sol:639

tx.origin

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.300259
Transaction Length: 0
Severity: High
Contract: UniswapReward
Function name: constructor
PC address: 516
Estimated Gas Usage: 37837 - 179912
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x28681d373aF03A0Eb00ACE262c5dad9A0C65F2762.sol:796

now + 365 days

--------------------

==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.752837
Transaction Length: 0
Severity: Medium
Contract: UniswapReward
Function name: constructor
PC address: 582
Estimated Gas Usage: 78340 - 380745
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../new/0x28681d373aF03A0Eb00ACE262c5dad9A0C65F2762.sol:639

tx.origin

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.779099
Transaction Length: 1
Severity: High
Contract: LPTokenWrapper
Function name: stake(uint256,string)
PC address: 873
Estimated Gas Usage: 411 - 506
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x28681d373aF03A0Eb00ACE262c5dad9A0C65F2762.sol:3

*/

/***
 *    ██████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.666309
Transaction Length: 1
Severity: High
Contract: UniswapReward
Function name: stake(uint256,string)
PC address: 2435
Estimated Gas Usage: 456 - 551
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x28681d373aF03A0Eb00ACE262c5dad9A0C65F2762.sol:3

*/

/***
 *    ██████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:57.252490
Transaction Length: 1
Severity: High
Contract: UniswapReward
Function name: seize(address,uint256)
PC address: 13914
Estimated Gas Usage: 2651 - 5713
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x28681d373aF03A0Eb00ACE262c5dad9A0C65F2762.sol:544

address(token).call(abi.encodeWithSelector(SELECTOR, to, value))

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:06:49.197099
Transaction Length: 1
Severity: Medium
Contract: UniswapReward
Function name: seize(address,uint256)
PC address: 13931
Estimated Gas Usage: 2976 - 7118
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../new/0x28681d373aF03A0Eb00ACE262c5dad9A0C65F2762.sol:544

address(token).call(abi.encodeWithSelector(SELECTOR, to, value))

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x5dabc0ed37d881b1b09707e0a894301adafcd4af.sol
Total states:19027
123.970377
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.860186
Transaction Length: 1
Severity: High
Contract: DefFinance
Function name: bulkTransfer(address[],uint256[])
PC address: 909
Estimated Gas Usage: 364 - 459
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5dabc0ed37d881b1b09707e0a894301adafcd4af.sol:5

olidity ^0.5.13;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.796942
Transaction Length: 1
Severity: High
Contract: DefFinance
Function name: bulkTransfer(address[],uint256[])
PC address: 911
Estimated Gas Usage: 364 - 459
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5dabc0ed37d881b1b09707e0a894301adafcd4af.sol:3

*/

//pragma solidity ^0.5.13;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.153437
Transaction Length: 1
Severity: High
Contract: DefFinance
Function name: bulkTransfer(address[],uint256[])
PC address: 994
Estimated Gas Usage: 540 - 635
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5dabc0ed37d881b1b09707e0a894301adafcd4af.sol:5

olidity ^0.5.13;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:24.391495
Transaction Length: 1
Severity: High
Contract: DefFinance
Function name: bulkTransfer(address[],uint256[])
PC address: 996
Estimated Gas Usage: 540 - 635
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5dabc0ed37d881b1b09707e0a894301adafcd4af.sol:3

*/

//pragma solidity ^0.5.13;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:40.522603
Transaction Length: 1
Severity: High
Contract: DefFinance
Function name: transferAndCall(address,uint256,bytes)
PC address: 1541
Estimated Gas Usage: 423 - 518
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5dabc0ed37d881b1b09707e0a894301adafcd4af.sol:3

*/

//pragma solidity ^0.5.13;
prag

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:39.588758
Transaction Length: 1
Severity: Low
Contract: DefFinance
Function name: unstake(uint256)
PC address: 8575
Estimated Gas Usage: 1420 - 1705
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x5dabc0ed37d881b1b09707e0a894301adafcd4af.sol:322

_burnedAmount * FLOAT_SCALAR / info.totalStaked

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:04.796112
Transaction Length: 2
Severity: Low
Contract: DefFinance
Function name: unstake(uint256)
PC address: 8575
Estimated Gas Usage: 1420 - 1705
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x5dabc0ed37d881b1b09707e0a894301adafcd4af.sol:322

_burnedAmount * FLOAT_SCALAR / info.totalStaked

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x12a9304681a1d29d01daffe882dcf3941bc5f8bc.sol
Total states:1308
1.079222
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xcc22f24e26e2afeb5a27b5cd98f5584287f97cea.sol
Total states:1444
7.163904
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.688515
Transaction Length: 1
Severity: High
Contract: TokenPool
Function name: balance()
PC address: 1230
Estimated Gas Usage: 2430 - 37419
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcc22f24e26e2afeb5a27b5cd98f5584287f97cea.sol:9

openzeppelin-so

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.418370
Transaction Length: 1
Severity: High
Contract: TokenPool
Function name: balance()
PC address: 1233
Estimated Gas Usage: 2430 - 37419
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcc22f24e26e2afeb5a27b5cd98f5584287f97cea.sol:5

*/



// File: openzeppelin-solidity/contra

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.162244
Transaction Length: 1
Severity: High
Contract: TokenPool
Function name: balance()
PC address: 1245
Estimated Gas Usage: 2430 - 37419
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcc22f24e26e2afeb5a27b5cd98f5584287f97cea.sol:799

token.balanceOf(address(this))

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:02.214943
Transaction Length: 1
Severity: High
Contract: TokenPool
Function name: balance()
PC address: 1920
Estimated Gas Usage: 2430 - 37419
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0xcc22f24e26e2afeb5a27b5cd98f5584287f97cea.sol:96

unction sub(uint256 a, 

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xb7555eb74b6f288fdbf9fc0013af1be59388655b.sol
Total states:1237
3.389875
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:01.448543
Transaction Length: 1
Severity: Low
Contract: ESDRouterV1
Function name: addLiquidityUSDCOnly(uint256)
PC address: 1279
Estimated Gas Usage: 2046 - 3037
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0xb7555eb74b6f288fdbf9fc0013af1be59388655b.sol:340

usdcToken.transferFrom(address(msg.sender), address(this), usdcAmountToAdd)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xabd26d7b0f70f86e4fd490837bbb21932015f97e.sol
Total states:23718
65.475495
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.859146
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3244
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xabd26d7b0f70f86e4fd490837bbb21932015f97e.sol:121

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.176331
Transaction Length: 1
Severity: High
Contract: DynamicSwap
Function name: swapExactAmountOut(address,address,uint256,uint256,uint256)
PC address: 12118
Estimated Gas Usage: 2280 - 37172
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xabd26d7b0f70f86e4fd490837bbb21932015f97e.sol:140

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.623068
Transaction Length: 2
Severity: High
Contract: DynamicSwap
Function name: increaseAllowance(address,uint256)
PC address: 13047
Estimated Gas Usage: 1037 - 1512
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xabd26d7b0f70f86e4fd490837bbb21932015f97e.sol:121

a + b

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:09.789660
Transaction Length: 1
Severity: High
Contract: DynamicSwap
Function name: getInExactOut(address,int256,int256,int256)
PC address: 14900
Estimated Gas Usage: 538 - 633
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0xabd26d7b0f70f86e4fd490837bbb21932015f97e.sol:229

a - b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:20.481064
Transaction Length: 1
Severity: High
Contract: DynamicSwap
Function name: getOutExactIn(address,int256,int256,int256)
PC address: 16120
Estimated Gas Usage: 583 - 678
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xabd26d7b0f70f86e4fd490837bbb21932015f97e.sol:235

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.642296
Transaction Length: 1
Severity: High
Contract: DynamicSwap
Function name: getInExactOut(address,int256,int256,int256)
PC address: 17245
Estimated Gas Usage: 788 - 883
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xabd26d7b0f70f86e4fd490837bbb21932015f97e.sol:215

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x642bF34F2aeC4c28a8273C8f032c1b0a21EceDcf2.sol
Total states:976
23.54247
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.656623
Transaction Length: 1
Severity: High
Contract: UniswapV2
Function name: allPairsLength()
PC address: 398
Estimated Gas Usage: 2192 - 37086
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x642bF34F2aeC4c28a8273C8f032c1b0a21EceDcf2.sol:5

racts/lib/IERC2

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.319991
Transaction Length: 1
Severity: High
Contract: UniswapV2
Function name: allPairsLength()
PC address: 401
Estimated Gas Usage: 2192 - 37086
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x642bF34F2aeC4c28a8273C8f032c1b0a21EceDcf2.sol:3



// File: contracts/lib/IERC20.sol

//prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.134372
Transaction Length: 1
Severity: High
Contract: UniswapV2
Function name: allPairsLength()
PC address: 413
Estimated Gas Usage: 2192 - 37086
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x642bF34F2aeC4c28a8273C8f032c1b0a21EceDcf2.sol:154

factory.allPairsLength()

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:06.350598
Transaction Length: 1
Severity: High
Contract: UniswapV2
Function name: getPairs(uint256,uint256)
PC address: 2557
Estimated Gas Usage: 560 - 938
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0x642bF34F2aeC4c28a8273C8f032c1b0a21EceDcf2.sol:158

toIndex - fromIndex

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:02.181428
Transaction Length: 1
Severity: High
Contract: UniswapV2
Function name: allPairsLength()
PC address: 3659
Estimated Gas Usage: 2192 - 37086
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0x642bF34F2aeC4c28a8273C8f032c1b0a21EceDcf2.sol:44

e number of decimals us

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xb9539dddc216e4e46c356da5f0c2300825d63ba5.sol
Total states:2023
4.796028
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x3370d0c3048b98eb6034774883ab14617872f012.sol
Total states:1880
93.138756
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.296016
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShip(address[])
PC address: 360
Estimated Gas Usage: 342 - 437
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3370d0c3048b98eb6034774883ab14617872f012.sol:5

penzeppelin-solidity/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.700562
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShip(address[])
PC address: 362
Estimated Gas Usage: 342 - 437
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3370d0c3048b98eb6034774883ab14617872f012.sol:3

*/

// File: openzeppelin-solidity/c

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:36.577412
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShipWithHowMany(address[],uint256)
PC address: 776
Estimated Gas Usage: 341 - 436
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3370d0c3048b98eb6034774883ab14617872f012.sol:5

penzeppelin-solidity/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:39.467229
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShipWithHowMany(address[],uint256)
PC address: 778
Estimated Gas Usage: 341 - 436
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3370d0c3048b98eb6034774883ab14617872f012.sol:3

*/

// File: openzeppelin-solidity/c

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:28.994913
Transaction Length: 1
Severity: Low
Contract: BeneficiaryOperations
Function name: allOperations(uint256)
PC address: 1715
Estimated Gas Usage: 701 - 796
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x3370d0c3048b98eb6034774883ab14617872f012.sol:386

bytes32[] public allOperations

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:28.070937
Transaction Length: 1
Severity: Low
Contract: BeneficiaryOperations
Function name: beneficiaries(uint256)
PC address: 4636
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x3370d0c3048b98eb6034774883ab14617872f012.sol:385

address[] public beneficiaries

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x1d4f16c44d3385832caff0cd43032eefbb485143.sol
Total states:1308
1.157941
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xb89abea71417ecb7fd8234a376cfc231c2c94e9a.sol
Total states:10634
27.969471
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xd5a34b505aad78dc6677dcc75d7ea357c542ec14.sol
Total states:1332
351.304869
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.229861
Transaction Length: 1
Severity: High
Contract: Airdrop
Function name: airdropTokens(address,address[],uint256[])
PC address: 201
Estimated Gas Usage: 329 - 424
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xd5a34b505aad78dc6677dcc75d7ea357c542ec14.sol:5

olidity 0.5.0;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.961395
Transaction Length: 1
Severity: High
Contract: Airdrop
Function name: airdropTokens(address,address[],uint256[])
PC address: 203
Estimated Gas Usage: 329 - 424
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xd5a34b505aad78dc6677dcc75d7ea357c542ec14.sol:3

*/

//pragma solidity 0.5.0;
pragma 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:17.586385
Transaction Length: 1
Severity: High
Contract: Airdrop
Function name: airdropTokens(address,address[],uint256[])
PC address: 349
Estimated Gas Usage: 671 - 3448
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xd5a34b505aad78dc6677dcc75d7ea357c542ec14.sol:5

olidity 0.5.0;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:28.328500
Transaction Length: 1
Severity: High
Contract: Airdrop
Function name: airdropTokens(address,address[],uint256[])
PC address: 351
Estimated Gas Usage: 671 - 3448
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xd5a34b505aad78dc6677dcc75d7ea357c542ec14.sol:3

*/

//pragma solidity 0.5.0;
pragma 

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:05.780992
Transaction Length: 1
Severity: Low
Contract: Airdrop
Function name: airdropTokens(address,address[],uint256[])
PC address: 704
Estimated Gas Usage: 6942 - 33433
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xd5a34b505aad78dc6677dcc75d7ea357c542ec14.sol:66

_tokens[i]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:03:36.297017
Transaction Length: 2
Severity: Low
Contract: Airdrop
Function name: airdropTokens(address,address[],uint256[])
PC address: 704
Estimated Gas Usage: 6942 - 33433
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xd5a34b505aad78dc6677dcc75d7ea357c542ec14.sol:66

_tokens[i]

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:01:39.192437
Transaction Length: 1
Severity: Medium
Contract: Airdrop
Function name: airdropTokens(address,address[],uint256[])
PC address: 902
Estimated Gas Usage: 7844 - 34994
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../new/0xd5a34b505aad78dc6677dcc75d7ea357c542ec14.sol:66

token.transferFrom(msg.sender, _recipient[i], _tokens[i])

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:02:32.515287
Transaction Length: 2
Severity: Medium
Contract: Airdrop
Function name: airdropTokens(address,address[],uint256[])
PC address: 902
Estimated Gas Usage: 7844 - 34994
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../new/0xd5a34b505aad78dc6677dcc75d7ea357c542ec14.sol:66

token.transferFrom(msg.sender, _recipient[i], _tokens[i])

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x5b417ce858713528b127aed8eb412c9daabbd349.sol
Total states:661
1.611348
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x6ef2e0eb03ee48d2d93751ebb904770c19a74501.sol
Total states:17998
40.204622
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.076279
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3044
Estimated Gas Usage: 989 - 1464
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x6ef2e0eb03ee48d2d93751ebb904770c19a74501.sol:38

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:02.022654
Transaction Length: 1
Severity: Low
Contract: NHCCoin
Function name: lockState(address,uint256)
PC address: 4809
Estimated Gas Usage: 830 - 1115
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x6ef2e0eb03ee48d2d93751ebb904770c19a74501.sol:334

lockInfo[_holder][_idx]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.593279
Transaction Length: 2
Severity: High
Contract: NHCCoin
Function name: increaseAllowance(address,uint256)
PC address: 14392
Estimated Gas Usage: 968 - 1443
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x6ef2e0eb03ee48d2d93751ebb904770c19a74501.sol:38

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x594e8f548ae1eb5a22b4d48a90ae9bc48e7c4742.sol
Total states:18022
39.513591
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.223518
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3044
Estimated Gas Usage: 989 - 1464
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x594e8f548ae1eb5a22b4d48a90ae9bc48e7c4742.sol:111

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:02.059350
Transaction Length: 1
Severity: Low
Contract: BitTiger
Function name: lockState(address,uint256)
PC address: 4915
Estimated Gas Usage: 897 - 1182
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x594e8f548ae1eb5a22b4d48a90ae9bc48e7c4742.sol:630

lockInfo[_holder][_idx]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.510164
Transaction Length: 2
Severity: High
Contract: BitTiger
Function name: increaseAllowance(address,uint256)
PC address: 14875
Estimated Gas Usage: 968 - 1443
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x594e8f548ae1eb5a22b4d48a90ae9bc48e7c4742.sol:111

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xa55ee5d39d6afe61069cfca5454ecaeba6843146.sol
Total states:3700
54.950805
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:00.110808
Transaction Length: 0
Severity: Low
Contract: COREv1Router
Function name: constructor
PC address: 1005
Estimated Gas Usage: 41966 - 188994
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0xa55ee5d39d6afe61069cfca5454ecaeba6843146.sol:2145

IUniswapV2Pair(_coreWETHPair).approve(address(_coreVault), uint(-1))

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:33.051162
Transaction Length: 1
Severity: Low
Contract: COREv1Router
Function name: fallback()
PC address: 1858
Estimated Gas Usage: 7928 - 29722
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0xa55ee5d39d6afe61069cfca5454ecaeba6843146.sol:2162

_WETH.deposit.value(msg.value)()

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:26.514538
Transaction Length: 1
Severity: Low
Contract: COREv1Router
Function name: refreshApproval()
PC address: 4217
Estimated Gas Usage: 1898 - 3124
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0xa55ee5d39d6afe61069cfca5454ecaeba6843146.sol:2145

IUniswapV2Pair(_coreWETHPair).approve(address(_coreVault), uint(-1))

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x792af201f356242e07da90f5c8ad634617db4eaf.sol
Total states:305
3.77749
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x12ca9db171f3f2ef9e53ab6bc4b7f6a6b8f3cfff.sol
Total states:426
0.643371
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x26050bdf45da4c5ee6288beb9c1ef629ed68c6e6.sol
Total states:524
38.519692
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.367009
Transaction Length: 1
Severity: High
Contract: MultiSend
Function name: sendMany(address,address[],uint256[])
PC address: 190
Estimated Gas Usage: 329 - 424
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x26050bdf45da4c5ee6288beb9c1ef629ed68c6e6.sol:5

cense-Identifier: MIT

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.819451
Transaction Length: 1
Severity: High
Contract: MultiSend
Function name: sendMany(address,address[],uint256[])
PC address: 192
Estimated Gas Usage: 329 - 424
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x26050bdf45da4c5ee6288beb9c1ef629ed68c6e6.sol:3

*/

// SPDX-License-Identifier: MIT


--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.847180
Transaction Length: 1
Severity: High
Contract: MultiSend
Function name: sendMany(address,address[],uint256[])
PC address: 275
Estimated Gas Usage: 505 - 600
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x26050bdf45da4c5ee6288beb9c1ef629ed68c6e6.sol:5

cense-Identifier: MIT

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:22.833703
Transaction Length: 1
Severity: High
Contract: MultiSend
Function name: sendMany(address,address[],uint256[])
PC address: 277
Estimated Gas Usage: 505 - 600
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x26050bdf45da4c5ee6288beb9c1ef629ed68c6e6.sol:3

*/

// SPDX-License-Identifier: MIT


--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x1a48B6151012a27A4ab2a8c1b8Ec108bAB9eF49c.sol
Total states:5938
22.459484
==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:03.979280
Transaction Length: 1
Severity: Medium
Contract: RewardProxyActions
Function name: claimReward(address)
PC address: 144
Estimated Gas Usage: 5139 - 108825
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 250
Offset: 409
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../new/0x1a48B6151012a27A4ab2a8c1b8Ec108bAB9eF49c.sol:1271

function claimReward(address rewarder) public {
        uint256 reward = StakingRewards(rewarder).getReward();
        IERC20(StakingRewards(rewarder).gov()).transfer(msg.sender, reward);
    }

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:00:01.603730
Transaction Length: 1
Severity: Medium
Contract: RewardProxyActions
Function name: claimReward(address)
PC address: 250
Estimated Gas Usage: 1019 - 1395
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../new/0x1a48B6151012a27A4ab2a8c1b8Ec108bAB9eF49c.sol:1272

StakingRewards(rewarder).getReward()

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:03.877974
Transaction Length: 1
Severity: Low
Contract: RewardProxyActions
Function name: claimReward(address)
PC address: 630
Estimated Gas Usage: 4314 - 73814
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0x1a48B6151012a27A4ab2a8c1b8Ec108bAB9eF49c.sol:1273

IERC20(StakingRewards(rewarder).gov()).transfer(msg.sender, reward)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x9113d0ed67fb4d6379cb70f7b51ef151c9fa10e1.sol
Total states:2324
1.853042
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xcb13fe86e4f8139d56f694c9a452d03e00f708ef.sol
Total states:976
24.235667
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.667285
Transaction Length: 1
Severity: High
Contract: UniswapV2
Function name: allPairsLength()
PC address: 398
Estimated Gas Usage: 2192 - 37086
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcb13fe86e4f8139d56f694c9a452d03e00f708ef.sol:5

racts/lib/IERC2

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.321637
Transaction Length: 1
Severity: High
Contract: UniswapV2
Function name: allPairsLength()
PC address: 401
Estimated Gas Usage: 2192 - 37086
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcb13fe86e4f8139d56f694c9a452d03e00f708ef.sol:3



// File: contracts/lib/IERC20.sol

//prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.142756
Transaction Length: 1
Severity: High
Contract: UniswapV2
Function name: allPairsLength()
PC address: 413
Estimated Gas Usage: 2192 - 37086
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcb13fe86e4f8139d56f694c9a452d03e00f708ef.sol:154

factory.allPairsLength()

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:06.378910
Transaction Length: 1
Severity: High
Contract: UniswapV2
Function name: getPairs(uint256,uint256)
PC address: 2557
Estimated Gas Usage: 560 - 938
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0xcb13fe86e4f8139d56f694c9a452d03e00f708ef.sol:158

toIndex - fromIndex

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:02.204633
Transaction Length: 1
Severity: High
Contract: UniswapV2
Function name: allPairsLength()
PC address: 3659
Estimated Gas Usage: 2192 - 37086
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0xcb13fe86e4f8139d56f694c9a452d03e00f708ef.sol:44

umber of decimals used 

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x4c8cc29226f97d92ec2d299bc14edf16bad436b7.sol
Total states:29183
581.067838
==== Delegatecall Proxy ====
SWC ID: 112
FOUND TIME: 0:00:00.007060
Transaction Length: 1
Severity: Low
Contract: BaseUpgradeabilityProxy
Function name: fallback
PC address: 97
Estimated Gas Usage: 557 - 2956
The contract implements a delegatecall proxy.
The smart contract forwards the received calldata via delegatecall. Note that callerscan execute arbitrary functions in the callee contract and that the callee contract can access the storage of the calling contract. Make sure that the callee contract is audited properly.DELEGATECALL target: 0x0
--------------------
In file: ../../new/0x4c8cc29226f97d92ec2d299bc14edf16bad436b7.sol:1030

delegatecall(gas, implementation, 0, calldatasize, 0, 0)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.149270
Transaction Length: 1
Severity: High
Contract: InitializableUpgradeabilityProxy
Function name: initialize(address,bytes)
PC address: 184
Estimated Gas Usage: 305 - 400
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x4c8cc29226f97d92ec2d299bc14edf16bad436b7.sol:3



*/



//pragma solidity 0.5.12;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.968302
Transaction Length: 1
Severity: High
Contract: BaseAdminUpgradeabilityProxy
Function name: upgradeToAndCall(address,bytes)
PC address: 309
Estimated Gas Usage: 327 - 422
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x4c8cc29226f97d92ec2d299bc14edf16bad436b7.sol:3



*/



//pragma solidity 0.5.12;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.937247
Transaction Length: 1
Severity: High
Contract: InitializableAdminUpgradeabilityProxy
Function name: upgradeToAndCall(address,bytes)
PC address: 347
Estimated Gas Usage: 350 - 445
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x4c8cc29226f97d92ec2d299bc14edf16bad436b7.sol:3



*/



//pragma solidity 0.5.12;
p

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:16.293387
Transaction Length: 1
Severity: High
Contract: InitializableUpgradeabilityProxy
Function name: initialize(address,bytes)
PC address: 441
Estimated Gas Usage: 1160 - 4266
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0x4c8cc29226f97d92ec2d299bc14edf16bad436b7.sol:1302

uint256(keccak256('eip1967.proxy.implementation')) - 1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:10.909832
Transaction Length: 1
Severity: Low
Contract: InitializableUpgradeabilityProxy
Function name: initialize(address,bytes)
PC address: 488
Estimated Gas Usage: 1170 - 4276
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x4c8cc29226f97d92ec2d299bc14edf16bad436b7.sol:1302

assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1))

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.285805
Transaction Length: 1
Severity: High
Contract: InitializableAdminUpgradeabilityProxy
Function name: initialize(address,address,bytes)
PC address: 700
Estimated Gas Usage: 382 - 477
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x4c8cc29226f97d92ec2d299bc14edf16bad436b7.sol:3



*/



//pragma solidity 0.5.12;
p

--------------------

==== Delegatecall Proxy ====
SWC ID: 112
FOUND TIME: 0:01:10.916718
Transaction Length: 1
Severity: Low
Contract: InitializableUpgradeabilityProxy
Function name: fallback
PC address: 775
Estimated Gas Usage: 618 - 3017
The contract implements a delegatecall proxy.
The smart contract forwards the received calldata via delegatecall. Note that callerscan execute arbitrary functions in the callee contract and that the callee contract can access the storage of the calling contract. Make sure that the callee contract is audited properly.DELEGATECALL target: 0x0
--------------------
In file: ../../new/0x4c8cc29226f97d92ec2d299bc14edf16bad436b7.sol:1030

delegatecall(gas, implementation, 0, calldatasize, 0, 0)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.622767
Transaction Length: 1
Severity: Low
Contract: KRoles
Function name: operators(uint256)
PC address: 898
Estimated Gas Usage: 722 - 817
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x4c8cc29226f97d92ec2d299bc14edf16bad436b7.sol:770

address[] public operators

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:37.772931
Transaction Length: 1
Severity: High
Contract: InitializableAdminUpgradeabilityProxy
Function name: initialize(address,bytes)
PC address: 919
Estimated Gas Usage: 371 - 466
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x4c8cc29226f97d92ec2d299bc14edf16bad436b7.sol:3



*/



//pragma solidity 0.5.12;
p

--------------------

==== Delegatecall Proxy ====
SWC ID: 112
FOUND TIME: 0:00:05.733699
Transaction Length: 1
Severity: Low
Contract: BaseAdminUpgradeabilityProxy
Function name: fallback
PC address: 1699
Estimated Gas Usage: 1229 - 3628
The contract implements a delegatecall proxy.
The smart contract forwards the received calldata via delegatecall. Note that callerscan execute arbitrary functions in the callee contract and that the callee contract can access the storage of the calling contract. Make sure that the callee contract is audited properly.DELEGATECALL target: 0x0
--------------------
In file: ../../new/0x4c8cc29226f97d92ec2d299bc14edf16bad436b7.sol:1030

delegatecall(gas, implementation, 0, calldatasize, 0, 0)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.114334
Transaction Length: 1
Severity: High
Contract: LiquidityPoolV2
Function name: borrow(address,uint256,bytes)
PC address: 1714
Estimated Gas Usage: 423 - 518
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x4c8cc29226f97d92ec2d299bc14edf16bad436b7.sol:3



*/



//pragma solidity 0.5.12;
p

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.114742
Transaction Length: 1
Severity: Low
Contract: CanReclaimTokens
Function name: operators(uint256)
PC address: 1895
Estimated Gas Usage: 700 - 795
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x4c8cc29226f97d92ec2d299bc14edf16bad436b7.sol:770

address[] public operators

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.107645
Transaction Length: 1
Severity: High
Contract: LiquidityPoolV2
Function name: initialize(string,address)
PC address: 1972
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x4c8cc29226f97d92ec2d299bc14edf16bad436b7.sol:3



*/



//pragma solidity 0.5.12;
p

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:20.777397
Transaction Length: 1
Severity: High
Contract: InitializableAdminUpgradeabilityProxy
Function name: initialize(address,address,bytes)
PC address: 2230
Estimated Gas Usage: 1755 - 4861
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0x4c8cc29226f97d92ec2d299bc14edf16bad436b7.sol:1302

uint256(keccak256('eip1967.proxy.implementation')) - 1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:42.511700
Transaction Length: 1
Severity: Low
Contract: InitializableAdminUpgradeabilityProxy
Function name: initialize(address,bytes)
PC address: 2277
Estimated Gas Usage: 1227 - 4333
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x4c8cc29226f97d92ec2d299bc14edf16bad436b7.sol:1302

assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1))

--------------------

==== Delegatecall Proxy ====
SWC ID: 112
FOUND TIME: 0:01:42.554511
Transaction Length: 1
Severity: Low
Contract: InitializableAdminUpgradeabilityProxy
Function name: fallback
PC address: 2802
Estimated Gas Usage: 1240 - 3639
The contract implements a delegatecall proxy.
The smart contract forwards the received calldata via delegatecall. Note that callerscan execute arbitrary functions in the callee contract and that the callee contract can access the storage of the calling contract. Make sure that the callee contract is audited properly.DELEGATECALL target: 0x0
--------------------
In file: ../../new/0x4c8cc29226f97d92ec2d299bc14edf16bad436b7.sol:1030

delegatecall(gas, implementation, 0, calldatasize, 0, 0)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.568827
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3249
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x4c8cc29226f97d92ec2d299bc14edf16bad436b7.sol:231

a + b

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:02:32.856846
Transaction Length: 1
Severity: Medium
Contract: LiquidityPoolV2
Function name: underlyingBalance(address,address)
PC address: 3478
Estimated Gas Usage: 4821 - 75266
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 15973
Offset: 16229
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../new/0x4c8cc29226f97d92ec2d299bc14edf16bad436b7.sol:1515

function underlyingBalance(address _token, address _owner) public view returns (uint256) {
        uint256 kBalance = kTokens[_token].balanceOf(_owner);
        uint256 kSupply = kTokens[_token].totalSupply();
        if (kBalance == 0) {
            return 0;
        }
        return borrowableBalance(_token).mul(kBalance).div(kSupply);
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:56.635878
Transaction Length: 1
Severity: High
Contract: LiquidityPoolV2
Function name: VERSION()
PC address: 3573
Estimated Gas Usage: 1522 - 2557
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x4c8cc29226f97d92ec2d299bc14edf16bad436b7.sol:1341

string public VERSION

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:02.428843
Transaction Length: 1
Severity: Low
Contract: LiquidityPoolV2
Function name: registeredTokens(uint256)
PC address: 11681
Estimated Gas Usage: 701 - 796
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x4c8cc29226f97d92ec2d299bc14edf16bad436b7.sol:1339

address[] public registeredTokens

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:45.622649
Transaction Length: 1
Severity: Low
Contract: LiquidityPoolV2
Function name: operators(uint256)
PC address: 15440
Estimated Gas Usage: 767 - 862
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x4c8cc29226f97d92ec2d299bc14edf16bad436b7.sol:770

address[] public operators

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x18923b96e765aeeabb8090e17c15da958a4846d3.sol
Total states:77
3.186678
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x8177E21B333c7488993D89c11f889D78F1eADAE5.sol
Total states:981
8.657591
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.331260
Transaction Length: 1
Severity: High
Contract: PriceProvider
Function name: poke()
PC address: 1260
Estimated Gas Usage: 2248 - 37142
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x8177E21B333c7488993D89c11f889D78F1eADAE5.sol:5

tened sources o

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xf5ce0c13f9287d37adea719628821e4c20edaa2a2.sol
Total states:15386
125.382533
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:01.733275
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3645
Estimated Gas Usage: 1025 - 1500
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xf5ce0c13f9287d37adea719628821e4c20edaa2a2.sol:56

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:35.765666
Transaction Length: 2
Severity: High
Contract: ERC20Pausable
Function name: increaseAllowance(address,uint256)
PC address: 5504
Estimated Gas Usage: 1070 - 1545
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xf5ce0c13f9287d37adea719628821e4c20edaa2a2.sol:56

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x2c307a1952891cb2b6856155a1534a1c75ecc7cd.sol
Total states:2007
484.655913
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.198473
Transaction Length: 1
Severity: High
Contract: Operator
Function name: batchRemoveOperators(address[])
PC address: 294
Estimated Gas Usage: 341 - 436
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x2c307a1952891cb2b6856155a1534a1c75ecc7cd.sol:9

ma solidity ^0.5.0;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.856811
Transaction Length: 1
Severity: High
Contract: Operator
Function name: batchRemoveOperators(address[])
PC address: 296
Estimated Gas Usage: 341 - 436
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x2c307a1952891cb2b6856155a1534a1c75ecc7cd.sol:3



*/



//pragma solidity ^0.5.0;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:16.572716
Transaction Length: 1
Severity: High
Contract: Operator
Function name: batchAddOperators(address[])
PC address: 478
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x2c307a1952891cb2b6856155a1534a1c75ecc7cd.sol:9

ma solidity ^0.5.0;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:20.100306
Transaction Length: 1
Severity: High
Contract: Operator
Function name: batchAddOperators(address[])
PC address: 480
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x2c307a1952891cb2b6856155a1534a1c75ecc7cd.sol:3



*/



//pragma solidity ^0.5.0;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.524727
Transaction Length: 1
Severity: High
Contract: TimeLockFactory
Function name: batchRemoveOperators(address[])
PC address: 1015
Estimated Gas Usage: 408 - 503
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x2c307a1952891cb2b6856155a1534a1c75ecc7cd.sol:9

ma solidity ^0.5.0;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.585656
Transaction Length: 1
Severity: High
Contract: TimeLockFactory
Function name: batchRemoveOperators(address[])
PC address: 1017
Estimated Gas Usage: 408 - 503
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x2c307a1952891cb2b6856155a1534a1c75ecc7cd.sol:3



*/



//pragma solidity ^0.5.0;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:22.476634
Transaction Length: 1
Severity: High
Contract: TimeLockFactory
Function name: setLockupPhases(uint256[],uint256[],uint256[])
PC address: 1209
Estimated Gas Usage: 452 - 547
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x2c307a1952891cb2b6856155a1534a1c75ecc7cd.sol:9

ma solidity ^0.5.0;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:25.615249
Transaction Length: 1
Severity: High
Contract: TimeLockFactory
Function name: setLockupPhases(uint256[],uint256[],uint256[])
PC address: 1211
Estimated Gas Usage: 452 - 547
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x2c307a1952891cb2b6856155a1534a1c75ecc7cd.sol:3



*/



//pragma solidity ^0.5.0;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:36.502085
Transaction Length: 1
Severity: High
Contract: TimeLockFactory
Function name: setLockupPhases(uint256[],uint256[],uint256[])
PC address: 1357
Estimated Gas Usage: 785 - 3562
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x2c307a1952891cb2b6856155a1534a1c75ecc7cd.sol:9

ma solidity ^0.5.0;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:47.111531
Transaction Length: 1
Severity: High
Contract: TimeLockFactory
Function name: setLockupPhases(uint256[],uint256[],uint256[])
PC address: 1359
Estimated Gas Usage: 785 - 3562
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x2c307a1952891cb2b6856155a1534a1c75ecc7cd.sol:3



*/



//pragma solidity ^0.5.0;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:13.708933
Transaction Length: 1
Severity: High
Contract: TimeLockFactory
Function name: setLockupPhases(uint256[],uint256[],uint256[])
PC address: 1505
Estimated Gas Usage: 1118 - 6577
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x2c307a1952891cb2b6856155a1534a1c75ecc7cd.sol:9

ma solidity ^0.5.0;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:35.606427
Transaction Length: 1
Severity: High
Contract: TimeLockFactory
Function name: setLockupPhases(uint256[],uint256[],uint256[])
PC address: 1507
Estimated Gas Usage: 1118 - 6577
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x2c307a1952891cb2b6856155a1534a1c75ecc7cd.sol:3



*/



//pragma solidity ^0.5.0;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:25.185590
Transaction Length: 1
Severity: High
Contract: TimeLockFactory
Function name: version()
PC address: 1719
Estimated Gas Usage: 507 - 1637
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x2c307a1952891cb2b6856155a1534a1c75ecc7cd.sol:1366

string public constant version = "1.0"

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:26.860466
Transaction Length: 1
Severity: Low
Contract: Operator
Function name: getAllOperators()
PC address: 2456
Estimated Gas Usage: 3808 - 7953
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x2c307a1952891cb2b6856155a1534a1c75ecc7cd.sol:1054

operators[counter]

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xfecc0513a5063b8dac9e77c723a1d00cf27fe7f2.sol
Total states:1521
3.101708
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xede5a457fdd6a436435889fe8af97192a280b545.sol
Total states:723
6.227625
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xbd277e47d0ecdd5db6c57eda717dd8f5a329edec.sol
Total states:8717
522.891877
==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.003840
Transaction Length: 0
Severity: Medium
Contract: Governance
Function name: constructor
PC address: 18
Estimated Gas Usage: 42 - 137
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../new/0xbd277e47d0ecdd5db6c57eda717dd8f5a329edec.sol:1380

tx.origin

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.053285
Transaction Length: 0
Severity: High
Contract: NFTReward
Function name: constructor
PC address: 459
Estimated Gas Usage: 37837 - 179912
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xbd277e47d0ecdd5db6c57eda717dd8f5a329edec.sol:1493

now + 365 days

--------------------

==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.855255
Transaction Length: 0
Severity: Medium
Contract: NFTReward
Function name: constructor
PC address: 637
Estimated Gas Usage: 88578 - 433847
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../new/0xbd277e47d0ecdd5db6c57eda717dd8f5a329edec.sol:1380

tx.origin

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.017127
Transaction Length: 1
Severity: High
Contract: ERC721
Function name: safeTransferFrom(address,address,uint256,bytes)
PC address: 1136
Estimated Gas Usage: 477 - 572
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xbd277e47d0ecdd5db6c57eda717dd8f5a329edec.sol:3

*/

/***
 *    ██████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.832328
Transaction Length: 1
Severity: High
Contract: NFTReward
Function name: onERC721Received(address,address,uint256,bytes)
PC address: 1348
Estimated Gas Usage: 480 - 575
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xbd277e47d0ecdd5db6c57eda717dd8f5a329edec.sol:3

*/

/***
 *    ██████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.418411
Transaction Length: 1
Severity: High
Contract: ERC721Enumerable
Function name: safeTransferFrom(address,address,uint256,bytes)
PC address: 1379
Estimated Gas Usage: 477 - 572
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xbd277e47d0ecdd5db6c57eda717dd8f5a329edec.sol:3

*/

/***
 *    ██████

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:00:34.360489
Transaction Length: 1
Severity: Medium
Contract: NFTReward
Function name: seizeErc721(address,uint256)
PC address: 6092
Estimated Gas Usage: 2156 - 3477
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../new/0xbd277e47d0ecdd5db6c57eda717dd8f5a329edec.sol:1563

token.safeTransferFrom(address(this), _governance, tokenId)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:58.389680
Transaction Length: 1
Severity: Low
Contract: NFTReward
Function name: _playerGego(address,uint256)
PC address: 8494
Estimated Gas Usage: 820 - 1105
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xbd277e47d0ecdd5db6c57eda717dd8f5a329edec.sol:1520

mapping(address => uint256[]) public _playerGego

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x6238972611f7933c6c0919c54447e2bac86f96e7.sol
Total states:7160
9.035422
==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.818033
Transaction Length: 1
Severity: High
Contract: CopaDelCrypto
Function name: validateWinnersCount(uint32,uint32,uint32)
PC address: 4567
Estimated Gas Usage: 578 - 673
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0x6238972611f7933c6c0919c54447e2bac86f96e7.sol:371

winners - last

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:04.379889
Transaction Length: 1
Severity: Low
Contract: CopaDelCrypto
Function name: getForecastData(bytes32,bytes32,bytes12,uint8)
PC address: 9596
Estimated Gas Usage: 462 - 557
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x6238972611f7933c6c0919c54447e2bac86f96e7.sol:210

assert(index >= 32 && index < 108)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:06.147904
Transaction Length: 1
Severity: Low
Contract: CopaDelCrypto
Function name: getResultData(uint8)
PC address: 11005
Estimated Gas Usage: 415 - 510
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x6238972611f7933c6c0919c54447e2bac86f96e7.sol:224

assert(index >= 32 && index < 108)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:06.540958
Transaction Length: 1
Severity: Low
Contract: CopaDelCrypto
Function name: players(uint256)
PC address: 11375
Estimated Gas Usage: 788 - 883
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x6238972611f7933c6c0919c54447e2bac86f96e7.sol:48

address[] public players

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x5c6de810839f33df74d63e21f33e216802b337af.sol
Total states:25217
140.686122
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.990657
Transaction Length: 1
Severity: High
Contract: SymDeficom
Function name: bulkTransfer(address[],uint256[])
PC address: 818
Estimated Gas Usage: 408 - 503
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5c6de810839f33df74d63e21f33e216802b337af.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.459696
Transaction Length: 1
Severity: High
Contract: SymDeficom
Function name: bulkTransfer(address[],uint256[])
PC address: 820
Estimated Gas Usage: 408 - 503
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5c6de810839f33df74d63e21f33e216802b337af.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.004296
Transaction Length: 1
Severity: High
Contract: SymDeficom
Function name: bulkTransfer(address[],uint256[])
PC address: 903
Estimated Gas Usage: 584 - 679
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5c6de810839f33df74d63e21f33e216802b337af.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:23.962163
Transaction Length: 1
Severity: High
Contract: SymDeficom
Function name: bulkTransfer(address[],uint256[])
PC address: 905
Estimated Gas Usage: 584 - 679
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5c6de810839f33df74d63e21f33e216802b337af.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:37.839567
Transaction Length: 1
Severity: High
Contract: SymDeficom
Function name: transferAndCall(address,uint256,bytes)
PC address: 1523
Estimated Gas Usage: 489 - 584
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5c6de810839f33df74d63e21f33e216802b337af.sol:3

*/

/**
 *Submitted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:29.719470
Transaction Length: 2
Severity: High
Contract: SymDeficom
Function name: unstake(uint256)
PC address: 7321
Estimated Gas Usage: 1366 - 1841
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5c6de810839f33df74d63e21f33e216802b337af.sol:222

info.users[msg.sender].stakeTimestamp + 24 hours

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xe917c7c6932a1b9393e8f2df6e3c2531b58e37db.sol
Total states:77
3.243403
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x975Aa6606f1e5179814BAEf22811441C5060e815.sol
Total states:8668
151.124969
==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:01.700219
Transaction Length: 1
Severity: Medium
Contract: RewardDecayAggregator
Function name: claimReward()
PC address: 108
Estimated Gas Usage: 4540 - 74419
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 470
Offset: 470
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../new/0x975Aa6606f1e5179814BAEf22811441C5060e815.sol:1455

function claimReward() public {
        for (uint256 i = 0; i < rewarders.length; i++) {
            rewarders[i].getRewardEx(msg.sender);
        }
    }

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:01.636251
Transaction Length: 1
Severity: Low
Contract: RewardDecayAggregator
Function name: claimReward()
PC address: 470
Estimated Gas Usage: 3660 - 39353
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0x975Aa6606f1e5179814BAEf22811441C5060e815.sol:1457

rewarders[i].getRewardEx(msg.sender)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:02.785077
Transaction Length: 1
Severity: Low
Contract: RewardDecayAggregator
Function name: rewarders(uint256)
PC address: 870
Estimated Gas Usage: 278 - 373
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x975Aa6606f1e5179814BAEf22811441C5060e815.sol:1448

StakingRewardsDecay[2] public rewarders

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:01.482718
Transaction Length: 1
Severity: Low
Contract: StakingRewardsDecayHolder
Function name: withdraw(uint256,address)
PC address: 1090
Estimated Gas Usage: 1894 - 4952
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0x975Aa6606f1e5179814BAEf22811441C5060e815.sol:938

address(rewarder).call(
                abi.encodeWithSelector(rewarder.withdraw.selector, msg.sender, amount, gem)
            )

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.169285
Transaction Length: 1
Severity: High
Contract: StakingRewardsDecay
Function name: initAllEpochs(uint256[],uint256,uint256)
PC address: 1382
Estimated Gas Usage: 452 - 547
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x975Aa6606f1e5179814BAEf22811441C5060e815.sol:5

lattened sources of s

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.192839
Transaction Length: 1
Severity: High
Contract: StakingRewardsDecay
Function name: initAllEpochs(uint256[],uint256,uint256)
PC address: 1384
Estimated Gas Usage: 452 - 547
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x975Aa6606f1e5179814BAEf22811441C5060e815.sol:3

*/

// hevm: flattened sources of sr

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:15.991961
Transaction Length: 1
Severity: Low
Contract: StakingRewardsDecayHolder
Function name: stake(uint256,address)
PC address: 1969
Estimated Gas Usage: 1615 - 2606
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0x975Aa6606f1e5179814BAEf22811441C5060e815.sol:928

rewarder.stake(msg.sender, amount, gem)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:34.870880
Transaction Length: 1
Severity: Low
Contract: StakingRewardsDecay
Function name: getEpochRewardRate(uint256)
PC address: 10020
Estimated Gas Usage: 814 - 909
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x975Aa6606f1e5179814BAEf22811441C5060e815.sol:1128

epochs[epochIdx]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:35.338250
Transaction Length: 1
Severity: Low
Contract: StakingRewardsDecay
Function name: getEpochStartTime(uint256)
PC address: 10062
Estimated Gas Usage: 705 - 800
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x975Aa6606f1e5179814BAEf22811441C5060e815.sol:1132

epochs[epochIdx]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:03.465067
Transaction Length: 1
Severity: Low
Contract: StakingRewardsDecay
Function name: getEpochFinishTime(uint256)
PC address: 11918
Estimated Gas Usage: 748 - 843
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x975Aa6606f1e5179814BAEf22811441C5060e815.sol:1136

epochs[epochIdx]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:17.364543
Transaction Length: 1
Severity: Low
Contract: StakingRewardsDecay
Function name: epochs(uint256)
PC address: 12771
Estimated Gas Usage: 723 - 818
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x975Aa6606f1e5179814BAEf22811441C5060e815.sol:1007

EpochData[] public epochs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:17.575971
Transaction Length: 1
Severity: Low
Contract: StakingRewardsDecay
Function name: getStartTime()
PC address: 12880
Estimated Gas Usage: 666 - 761
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x975Aa6606f1e5179814BAEf22811441C5060e815.sol:1054

epochs[0]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:30.057036
Transaction Length: 1
Severity: Low
Contract: StakingRewardsDecay
Function name: getRewardPerHour()
PC address: 15597
Estimated Gas Usage: 1563 - 1658
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x975Aa6606f1e5179814BAEf22811441C5060e815.sol:1279

epochs[calcCurrentEpoch()]

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xfb3e3929f12120c0ba1BA243fF8af7afbefB4943.sol
Total states:13229
46.510853
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:00.042901
Transaction Length: 0
Severity: Low
Contract: UrnHandler
Function name: constructor
PC address: 223
Estimated Gas Usage: 1003 - 4059
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0xfb3e3929f12120c0ba1BA243fF8af7afbefB4943.sol:70

VatLike(vat).hope(msg.sender)

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:08.806648
Transaction Length: 1
Severity: Medium
Contract: GetCdps
Function name: getCdpsAsc(address,address)
PC address: 416
Estimated Gas Usage: 4549 - 83031
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 909
Offset: 1280
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../new/0xfb3e3929f12120c0ba1BA243fF8af7afbefB4943.sol:319

function getCdpsAsc(address manager, address guy) external view returns (uint[] memory ids, address[] memory urns, bytes32[] memory ilks) {
        uint count = DssCdpManager(manager).count(guy);
        ids = new uint[](count);
        urns = new address[](count);
        ilks = new bytes32[](count);
        uint i = 0;
        uint id = DssCdpManager(manager).first(guy);

        while (id > 0) {
            ids[i] = id;
            urns[i] = DssCdpManager(manager).urns(id);
            ilks[i] = DssCdpManager(manager).ilks(id);
            (,id) = DssCdpManager(manager).list(id);
            i++;
        }
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:36.466430
Transaction Length: 1
Severity: High
Contract: GetCdps
Function name: getCdpsDesc(address,address)
PC address: 623
Estimated Gas Usage: 4144 - 75057
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xfb3e3929f12120c0ba1BA243fF8af7afbefB4943.sol:336

function getCdpsDesc(address manager, address guy) external view returns (uint[] memory ids, address[] memory urns, bytes32[] memory ilks) {
        uint count = DssCdpManager(manager).count(guy);
        ids = new uint[](count);
        urns = new address[](count);
        ilks = new bytes32[](count);
        uint i = 0;
        uint id = DssCdpManager(manager).last(guy);

        while (id > 0) {
            ids[i] = id;
            urns[i] = DssCdpManager(manager).urns(id);
            ilks[i] = DssCdpManager(manager).ilks(id);
            (id,) = DssCdpManager(manager).list(id);
            i++;
        }
    }

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:13.837000
Transaction Length: 1
Severity: Low
Contract: GetCdps
Function name: getCdpsAsc(address,address)
PC address: 1558
Estimated Gas Usage: 5749 - 117572
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xfb3e3929f12120c0ba1BA243fF8af7afbefB4943.sol:329

urns[i]

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xc9db619abd37ae22d80fce3bdb811485b56d4fc32.sol
Total states:12855
269.051066
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.963392
Transaction Length: 1
Severity: High
Contract: Module
Function name: getModuleAddress(string)
PC address: 416
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc9db619abd37ae22d80fce3bdb811485b56d4fc32.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.711120
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 511
Estimated Gas Usage: 364 - 459
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc9db619abd37ae22d80fce3bdb811485b56d4fc32.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.038400
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 513
Estimated Gas Usage: 364 - 459
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc9db619abd37ae22d80fce3bdb811485b56d4fc32.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.151541
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 596
Estimated Gas Usage: 540 - 635
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc9db619abd37ae22d80fce3bdb811485b56d4fc32.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:17.582741
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 598
Estimated Gas Usage: 540 - 635
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc9db619abd37ae22d80fce3bdb811485b56d4fc32.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:29.845004
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 681
Estimated Gas Usage: 716 - 811
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc9db619abd37ae22d80fce3bdb811485b56d4fc32.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:52.228817
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 683
Estimated Gas Usage: 716 - 811
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc9db619abd37ae22d80fce3bdb811485b56d4fc32.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:13.570552
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 766
Estimated Gas Usage: 892 - 987
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc9db619abd37ae22d80fce3bdb811485b56d4fc32.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:43.959599
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 768
Estimated Gas Usage: 892 - 987
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc9db619abd37ae22d80fce3bdb811485b56d4fc32.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:16.909515
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: getModuleAddress(string)
PC address: 1453
Estimated Gas Usage: 451 - 546
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc9db619abd37ae22d80fce3bdb811485b56d4fc32.sol:3

*/

// File: @openzeppelin\contract

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xa24e85d0c2b3d58f1d1d08d9c8c68ceef694515c.sol
Total states:120
370.368391
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.125448
Transaction Length: 1
Severity: High
Contract: MSTX
Function name: withdrawBalances(address[],uint256[],bool)
PC address: 3280
Estimated Gas Usage: 386 - 481
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xa24e85d0c2b3d58f1d1d08d9c8c68ceef694515c.sol:9

X-License-Identifier:

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.634247
Transaction Length: 1
Severity: High
Contract: MSTX
Function name: withdrawBalances(address[],uint256[],bool)
PC address: 3282
Estimated Gas Usage: 386 - 481
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xa24e85d0c2b3d58f1d1d08d9c8c68ceef694515c.sol:3



*/



// SPDX-License-Identifier: 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:14.301216
Transaction Length: 1
Severity: High
Contract: MSTX
Function name: withdrawBalances(address[],uint256[],bool)
PC address: 3365
Estimated Gas Usage: 562 - 657
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xa24e85d0c2b3d58f1d1d08d9c8c68ceef694515c.sol:9

X-License-Identifier:

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:25.245271
Transaction Length: 1
Severity: High
Contract: MSTX
Function name: withdrawBalances(address[],uint256[],bool)
PC address: 3367
Estimated Gas Usage: 562 - 657
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xa24e85d0c2b3d58f1d1d08d9c8c68ceef694515c.sol:3



*/



// SPDX-License-Identifier: 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:44.299542
Transaction Length: 1
Severity: High
Contract: MSTX
Function name: submitActionProposal(address,uint256,uint256,bytes32,bytes)
PC address: 4844
Estimated Gas Usage: 500 - 595
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xa24e85d0c2b3d58f1d1d08d9c8c68ceef694515c.sol:3



*/



// SPDX-License-Identifier:

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:48.586313
Transaction Length: 1
Severity: High
Contract: MSTX
Function name: symbol()
PC address: 5079
Estimated Gas Usage: 551 - 1681
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xa24e85d0c2b3d58f1d1d08d9c8c68ceef694515c.sol:246

string public constant symbol = "MSTX"

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:34.527618
Transaction Length: 1
Severity: High
Contract: MSTX
Function name: init(address,address,address[],uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256)
PC address: 5614
Estimated Gas Usage: 473 - 568
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xa24e85d0c2b3d58f1d1d08d9c8c68ceef694515c.sol:9

X-License-Identifier:

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:40.202032
Transaction Length: 1
Severity: High
Contract: MSTX
Function name: init(address,address,address[],uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256)
PC address: 5616
Estimated Gas Usage: 473 - 568
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xa24e85d0c2b3d58f1d1d08d9c8c68ceef694515c.sol:3



*/



// SPDX-License-Identifier: 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:46.411473
Transaction Length: 1
Severity: High
Contract: MSTX
Function name: init(address,address,address[],uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256)
PC address: 5699
Estimated Gas Usage: 649 - 744
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xa24e85d0c2b3d58f1d1d08d9c8c68ceef694515c.sol:9

X-License-Identifier:

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:58.748641
Transaction Length: 1
Severity: High
Contract: MSTX
Function name: init(address,address,address[],uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256)
PC address: 5701
Estimated Gas Usage: 649 - 744
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xa24e85d0c2b3d58f1d1d08d9c8c68ceef694515c.sol:3



*/



// SPDX-License-Identifier: 

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:02.670467
Transaction Length: 1
Severity: Low
Contract: MSTX
Function name: approvedTokens(uint256)
PC address: 9442
Estimated Gas Usage: 769 - 864
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xa24e85d0c2b3d58f1d1d08d9c8c68ceef694515c.sol:284

address[] public approvedTokens

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:04.709466
Transaction Length: 1
Severity: Low
Contract: MSTX
Function name: proposalQueue(uint256)
PC address: 12834
Estimated Gas Usage: 747 - 842
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xa24e85d0c2b3d58f1d1d08d9c8c68ceef694515c.sol:290

uint256[] public proposalQueue

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xaaa601ae20077f9fae80494ddc36bb39c952c2d0.sol
Total states:7896
52.135165
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.740518
Transaction Length: 1
Severity: High
Contract: PriceFeeds
Function name: setPriceFeed(address[],address[])
PC address: 1295
Estimated Gas Usage: 385 - 480
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xaaa601ae20077f9fae80494ddc36bb39c952c2d0.sol:6

yright 2017-2020, bZe

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.705993
Transaction Length: 1
Severity: High
Contract: PriceFeeds
Function name: setPriceFeed(address[],address[])
PC address: 1297
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xaaa601ae20077f9fae80494ddc36bb39c952c2d0.sol:3

*/

/**
 * Copyright 2017-2020, bZer

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:16.883893
Transaction Length: 1
Severity: High
Contract: PriceFeeds
Function name: setPriceFeed(address[],address[])
PC address: 1380
Estimated Gas Usage: 561 - 656
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xaaa601ae20077f9fae80494ddc36bb39c952c2d0.sol:6

yright 2017-2020, bZe

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:30.454647
Transaction Length: 1
Severity: High
Contract: PriceFeeds
Function name: setPriceFeed(address[],address[])
PC address: 1382
Estimated Gas Usage: 561 - 656
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xaaa601ae20077f9fae80494ddc36bb39c952c2d0.sol:3

*/

/**
 * Copyright 2017-2020, bZer

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:42.706618
Transaction Length: 1
Severity: High
Contract: PriceFeeds
Function name: setDecimals(address[])
PC address: 1865
Estimated Gas Usage: 385 - 480
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xaaa601ae20077f9fae80494ddc36bb39c952c2d0.sol:6

yright 2017-2020, bZe

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:46.312187
Transaction Length: 1
Severity: High
Contract: PriceFeeds
Function name: setDecimals(address[])
PC address: 1867
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xaaa601ae20077f9fae80494ddc36bb39c952c2d0.sol:3

*/

/**
 * Copyright 2017-2020, bZer

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.215773
Transaction Length: 1
Severity: High
Contract: PriceFeeds
Function name: checkPriceDisagreement(address,address,uint256,uint256,uint256)
PC address: 6399
Estimated Gas Usage: 1065 - 1490
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xaaa601ae20077f9fae80494ddc36bb39c952c2d0.sol:181

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x40d9f0c693121eab65b289a11c87a38f5f17d9b1.sol
Total states:2673
113.894723
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.217523
Transaction Length: 1
Severity: High
Contract: PaymentMaster
Function name: multiHandlerSweep(address[],address)
PC address: 295
Estimated Gas Usage: 319 - 414
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x40d9f0c693121eab65b289a11c87a38f5f17d9b1.sol:9

0 PaymentMaster







--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.270325
Transaction Length: 1
Severity: High
Contract: PaymentMaster
Function name: multiHandlerSweep(address[],address)
PC address: 297
Estimated Gas Usage: 319 - 414
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x40d9f0c693121eab65b289a11c87a38f5f17d9b1.sol:3



*/



// v1.0 PaymentMaster





/

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:05.947576
Transaction Length: 1
Severity: Low
Contract: PaymentHandler
Function name: fallback()
PC address: 597
Estimated Gas Usage: 4310 - 74284
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0x40d9f0c693121eab65b289a11c87a38f5f17d9b1.sol:302

master.firePaymentReceivedEvent(address(this), msg.sender, msg.value)

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:05.952249
Transaction Length: 1
Severity: Medium
Contract: PaymentHandler
Function name: fallback()
PC address: 620
Estimated Gas Usage: 5043 - 109017
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 217
Offset: 597
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../new/0x40d9f0c693121eab65b289a11c87a38f5f17d9b1.sol:242

contract PaymentHandler {



	// Keep track of the parent master contract - cannot be changed once set

	PaymentMaster public master;



	/**

	 * General constructor called by the master

	 */

	constructor(PaymentMaster _master) public {

		master = _master;

	}



	/**

	 * Helper function to return the parent master's address

	 */

	function getMasterAddress() public view returns (address) {

		return address(master);

	}



	/**

	 * Default payable function - forwards to the owner and triggers event

	 */

	function() external payable {

		// Get the parent master's owner address - explicity convert to payable

		address payable ownerAddress = address(uint160(master.owner()));



		// Forward the funds to the owner

		ownerAddress.transfer(msg.value);



		// Trigger the event notification in the parent master

		master.firePaymentReceivedEvent(address(this), msg.sender, msg.value);

	}



	/**

	 * Sweep any tokens to the owner of the master

	 */

	function sweepTokens(IERC20 token) public {

		// Get the owner address

		address ownerAddress = master.owner();



		// Get the current balance

		uint balance = token.balanceOf(address(this));



		// Transfer to the owner

		token.transfer(ownerAddress, balance);

	}



}

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:04.158068
Transaction Length: 1
Severity: Medium
Contract: PaymentHandler
Function name: sweepTokens(address)
PC address: 875
Estimated Gas Usage: 5654 - 109765
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 1090
Offset: 1306
Offset: 1530
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../new/0x40d9f0c693121eab65b289a11c87a38f5f17d9b1.sol:314

function sweepTokens(IERC20 token) public {

		// Get the owner address

		address ownerAddress = master.owner();



		// Get the current balance

		uint balance = token.balanceOf(address(this));



		// Transfer to the owner

		token.transfer(ownerAddress, balance);

	}

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:43.532723
Transaction Length: 1
Severity: High
Contract: PaymentMaster
Function name: getHandlerList()
PC address: 932
Estimated Gas Usage: 1227 - 2074
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x40d9f0c693121eab65b289a11c87a38f5f17d9b1.sol:429

function getHandlerList() public view returns (address[] memory) {

			// Return the entire list

      return handlerList;

  }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:52.459368
Transaction Length: 1
Severity: High
Contract: PaymentMaster
Function name: getHandlerList()
PC address: 972
Estimated Gas Usage: 1377 - 2600
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x40d9f0c693121eab65b289a11c87a38f5f17d9b1.sol:429

function getHandlerList() public view returns (address[] memory) {

			// Return the entire list

      return handlerList;

  }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:01:47.299707
Transaction Length: 1
Severity: Medium
Contract: PaymentMaster
Function name: sweepTokens(address)
PC address: 1130
Estimated Gas Usage: 5292 - 109073
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 2955
Offset: 3142
Offset: 3335
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../new/0x40d9f0c693121eab65b289a11c87a38f5f17d9b1.sol:509

function sweepTokens(IERC20 token) public {

		// Get the current balance

		uint balance = token.balanceOf(address(this));



		// Transfer to the owner

		token.transfer(this.owner(), balance);

	}

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:00:04.047369
Transaction Length: 1
Severity: Medium
Contract: PaymentHandler
Function name: sweepTokens(address)
PC address: 1530
Estimated Gas Usage: 4827 - 74752
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../new/0x40d9f0c693121eab65b289a11c87a38f5f17d9b1.sol:330

token.transfer(ownerAddress, balance)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:27.750753
Transaction Length: 1
Severity: Low
Contract: PaymentMaster
Function name: handlerList(uint256)
PC address: 1950
Estimated Gas Usage: 656 - 751
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x40d9f0c693121eab65b289a11c87a38f5f17d9b1.sol:373

address[] public handlerList

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:01:42.908580
Transaction Length: 1
Severity: Medium
Contract: PaymentMaster
Function name: sweepTokens(address)
PC address: 3335
Estimated Gas Usage: 4467 - 74062
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../new/0x40d9f0c693121eab65b289a11c87a38f5f17d9b1.sol:519

token.transfer(this.owner(), balance)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xc902c9ad7a3c039f4151c28f95532f40dc1614ed.sol
Total states:1237
3.479173
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:01.484044
Transaction Length: 1
Severity: Low
Contract: ESDRouterV1
Function name: addLiquidityUSDCOnly(uint256)
PC address: 1279
Estimated Gas Usage: 2046 - 3037
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0xc902c9ad7a3c039f4151c28f95532f40dc1614ed.sol:340

usdcToken.transferFrom(msg.sender, address(this), usdcAmountToAdd)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xf6eb94e64fc7789a57fdf89fe2ffd2eb39b252e4.sol
Total states:34354
236.296646
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xbbfd9e6f960a62e17952705ed9ad64eacf23d008.sol
Total states:654
0.406181
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x4339aeA71d38b5Edb545987F5096992aE7abBB14.sol
Total states:87
1.102905
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xfeb75b3cc7281b18f2d475a04f1ffaaa3c9a6e36.sol
Total states:822
11.208773
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xa3587ce44ae345b21b2cb7a361424ac8d4e7f055.sol
Total states:2324
1.846416
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x4570b4faf71e23942b8b9f934b47ccedf7540162.sol
Total states:18247
860.823711
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.158844
Transaction Length: 1
Severity: High
Contract: Submitter
Function name: submitGuildKickProposal(address,string)
PC address: 225
Estimated Gas Usage: 329 - 424
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x4570b4faf71e23942b8b9f934b47ccedf7540162.sol:3



*/



// Sources flattened with b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.285013
Transaction Length: 1
Severity: High
Contract: MolochSummoner
Function name: summonMoloch(address,address[],uint256,uint256,uint256,uint256,uint256,uint256)
PC address: 243
Estimated Gas Usage: 351 - 446
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x4570b4faf71e23942b8b9f934b47ccedf7540162.sol:9

rces flattened with b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.864165
Transaction Length: 1
Severity: High
Contract: MolochSummoner
Function name: summonMoloch(address,address[],uint256,uint256,uint256,uint256,uint256,uint256)
PC address: 245
Estimated Gas Usage: 351 - 446
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x4570b4faf71e23942b8b9f934b47ccedf7540162.sol:3



*/



// Sources flattened with bu

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:16.521717
Transaction Length: 1
Severity: High
Contract: Submitter
Function name: submitProposal(address,uint256,uint256,uint256,address,uint256,address,string)
PC address: 549
Estimated Gas Usage: 525 - 620
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x4570b4faf71e23942b8b9f934b47ccedf7540162.sol:3



*/



// Sources flattened with b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:08:20.698906
Transaction Length: 1
Severity: High
Contract: Submitter
Function name: submitWhitelistProposal(address,string)
PC address: 842
Estimated Gas Usage: 395 - 490
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x4570b4faf71e23942b8b9f934b47ccedf7540162.sol:3



*/



// Sources flattened with b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:35.428288
Transaction Length: 1
Severity: Low
Contract: MolochSummoner
Function name: Molochs(uint256)
PC address: 1087
Estimated Gas Usage: 678 - 773
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x4570b4faf71e23942b8b9f934b47ccedf7540162.sol:859

address[] public Molochs

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:03:13.756345
Transaction Length: 1
Severity: Low
Contract: Submitter
Function name: submitGuildKickProposal(address,string)
PC address: 1248
Estimated Gas Usage: 2466 - 7783
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0x4570b4faf71e23942b8b9f934b47ccedf7540162.sol:1147

moloch.submitGuildKickProposal(
      memberToKick,
      details
    )

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:31.271404
Transaction Length: 1
Severity: High
Contract: Submitter
Function name: submitProposal(address,uint256,uint256,uint256,address,uint256,address,string)
PC address: 1727
Estimated Gas Usage: 1623 - 6147
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x4570b4faf71e23942b8b9f934b47ccedf7540162.sol:1117

moloch.submitProposal(
      applicant,
      sharesRequested,
      lootRequested,
      tributeOffered,
      tributeToken,
      paymentRequested,
      paymentToken,
      details
    )

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:07:45.000264
Transaction Length: 1
Severity: Low
Contract: Submitter
Function name: submitProposal(address,uint256,uint256,uint256,address,uint256,address,string)
PC address: 1804
Estimated Gas Usage: 2707 - 8406
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0x4570b4faf71e23942b8b9f934b47ccedf7540162.sol:1117

moloch.submitProposal(
      applicant,
      sharesRequested,
      lootRequested,
      tributeOffered,
      tributeToken,
      paymentRequested,
      paymentToken,
      details
    )

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:09:38.590669
Transaction Length: 1
Severity: High
Contract: Submitter
Function name: submitWhitelistProposal(address,string)
PC address: 2196
Estimated Gas Usage: 1361 - 5315
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x4570b4faf71e23942b8b9f934b47ccedf7540162.sol:1135

moloch.submitWhitelistProposal(
      tokenToWhitelist,
      details
    )

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:12:29.126153
Transaction Length: 1
Severity: Low
Contract: Submitter
Function name: submitWhitelistProposal(address,string)
PC address: 2267
Estimated Gas Usage: 2358 - 7299
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0x4570b4faf71e23942b8b9f934b47ccedf7540162.sol:1135

moloch.submitWhitelistProposal(
      tokenToWhitelist,
      details
    )

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.206946
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 2575
Estimated Gas Usage: 989 - 1464
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x4570b4faf71e23942b8b9f934b47ccedf7540162.sol:44

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.075724
Transaction Length: 2
Severity: High
Contract: Token
Function name: increaseAllowance(address,uint256)
PC address: 2806
Estimated Gas Usage: 989 - 1464
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x4570b4faf71e23942b8b9f934b47ccedf7540162.sol:44

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xf86a1f19bfdf106ff108f33f7a339dfcc89f6c24.sol
Total states:1751
1.405582
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xccbc5b5f4155907cfe6557ccb12841ab4c46ae70.sol
Total states:740
1.535405
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x54277B3a7A4aEe0fdF279E16aBF9D5Dad87828D6.sol
Total states:663
2.063189
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x68051c65c310aa210bd8e79ed7aa1b0ac7e6db52.sol
Total states:1225
3.56657
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xc1693a3a12b0d021cd857e5d4293edcd61a82502.sol
Total states:1394
19.180991
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.832306
Transaction Length: 1
Severity: High
Contract: KYFV2
Function name: removeMultiple(address[])
PC address: 1011
Estimated Gas Usage: 384 - 479
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc1693a3a12b0d021cd857e5d4293edcd61a82502.sol:7

    |  __    / ____|


--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.665012
Transaction Length: 1
Severity: High
Contract: KYFV2
Function name: removeMultiple(address[])
PC address: 1013
Estimated Gas Usage: 384 - 479
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc1693a3a12b0d021cd857e5d4293edcd61a82502.sol:3

*/

/*

    /     |  __    / ____|
 

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x4bbb69e277a94357aa75b44ebe4ee4390e85ac83.sol
Total states:10228
494.759594
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.579758
Transaction Length: 1
Severity: High
Contract: OxBase
Function name: multiTransfer(address[],uint256[])
PC address: 774
Estimated Gas Usage: 430 - 525
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x4bbb69e277a94357aa75b44ebe4ee4390e85ac83.sol:7

!!!!!!!!!Notice!!!!!!

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.096693
Transaction Length: 1
Severity: High
Contract: OxBase
Function name: multiTransfer(address[],uint256[])
PC address: 776
Estimated Gas Usage: 430 - 525
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x4bbb69e277a94357aa75b44ebe4ee4390e85ac83.sol:3

*/

/*

!!!!!!!!!!!!!!!Notice!!!!!!!

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.485372
Transaction Length: 1
Severity: High
Contract: OxBase
Function name: multiTransfer(address[],uint256[])
PC address: 922
Estimated Gas Usage: 763 - 3540
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x4bbb69e277a94357aa75b44ebe4ee4390e85ac83.sol:7

!!!!!!!!!Notice!!!!!!

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:25.755828
Transaction Length: 1
Severity: High
Contract: OxBase
Function name: multiTransfer(address[],uint256[])
PC address: 924
Estimated Gas Usage: 763 - 3540
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x4bbb69e277a94357aa75b44ebe4ee4390e85ac83.sol:3

*/

/*

!!!!!!!!!!!!!!!Notice!!!!!!!

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:26.184043
Transaction Length: 1
Severity: High
Contract: OxBase
Function name: symbol()
PC address: 1596
Estimated Gas Usage: 1913 - 3043
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x4bbb69e277a94357aa75b44ebe4ee4390e85ac83.sol:136

function symbol() public view returns(string memory) {
    return _Tokensymbol;
  }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:30.553921
Transaction Length: 1
Severity: High
Contract: OxBase
Function name: multiTransferEqualAmount(address[],uint256)
PC address: 1905
Estimated Gas Usage: 340 - 435
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x4bbb69e277a94357aa75b44ebe4ee4390e85ac83.sol:7

!!!!!!!!!Notice!!!!!!

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:33.874882
Transaction Length: 1
Severity: High
Contract: OxBase
Function name: multiTransferEqualAmount(address[],uint256)
PC address: 1907
Estimated Gas Usage: 340 - 435
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x4bbb69e277a94357aa75b44ebe4ee4390e85ac83.sol:3

*/

/*

!!!!!!!!!!!!!!!Notice!!!!!!!

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:54.619609
Transaction Length: 1
Severity: High
Contract: OxBase
Function name: multiTransferEqualAmount(address[],uint256)
PC address: 5590
Estimated Gas Usage: 819 - 4205
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x4bbb69e277a94357aa75b44ebe4ee4390e85ac83.sol:283

amount * 10**uint256(tokenDecimals)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:06:29.315674
Transaction Length: 1
Severity: Low
Contract: OxBase
Function name: decreaseAllowance(address,uint256)
PC address: 7970
Estimated Gas Usage: 1062 - 1537
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x4bbb69e277a94357aa75b44ebe4ee4390e85ac83.sol:101

assert(b <= a)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:40.222578
Transaction Length: 2
Severity: Low
Contract: OxBase
Function name: decreaseAllowance(address,uint256)
PC address: 7970
Estimated Gas Usage: 1062 - 1537
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x4bbb69e277a94357aa75b44ebe4ee4390e85ac83.sol:101

assert(b <= a)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.582915
Transaction Length: 2
Severity: High
Contract: OxBase
Function name: increaseAllowance(address,uint256)
PC address: 7988
Estimated Gas Usage: 1047 - 1522
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x4bbb69e277a94357aa75b44ebe4ee4390e85ac83.sol:106

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:34.922278
Transaction Length: 2
Severity: Low
Contract: OxBase
Function name: increaseAllowance(address,uint256)
PC address: 8001
Estimated Gas Usage: 1057 - 1532
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x4bbb69e277a94357aa75b44ebe4ee4390e85ac83.sol:107

assert(c >= a)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:44.075850
Transaction Length: 1
Severity: High
Contract: OxBase
Function name: findPercentage(uint256)
PC address: 8412
Estimated Gas Usage: 828 - 923
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x4bbb69e277a94357aa75b44ebe4ee4390e85ac83.sol:90

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:05:59.199606
Transaction Length: 1
Severity: Low
Contract: OxBase
Function name: findPercentage(uint256)
PC address: 8435
Estimated Gas Usage: 866 - 961
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x4bbb69e277a94357aa75b44ebe4ee4390e85ac83.sol:91

assert(c / a == b)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xf1f689042e6a0b1d9239ff04822990c58cc25503.sol
Total states:2324
1.791575
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xa735224e43cb2549438275e985ef67fa9fcf3c8c.sol
Total states:41703
139.924973
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.791582
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1164
Estimated Gas Usage: 440 - 535
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xa735224e43cb2549438275e985ef67fa9fcf3c8c.sol:9

ma solidity =0.5.16;


--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.172389
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1166
Estimated Gas Usage: 440 - 535
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xa735224e43cb2549438275e985ef67fa9fcf3c8c.sol:3



*/



//pragma solidity =0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.846337
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1249
Estimated Gas Usage: 616 - 711
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xa735224e43cb2549438275e985ef67fa9fcf3c8c.sol:9

ma solidity =0.5.16;


--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:17.029031
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1251
Estimated Gas Usage: 616 - 711
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xa735224e43cb2549438275e985ef67fa9fcf3c8c.sol:3



*/



//pragma solidity =0.5.16;
p

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.387936
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3590
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xa735224e43cb2549438275e985ef67fa9fcf3c8c.sol:2342

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:03.860942
Transaction Length: 2
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3590
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xa735224e43cb2549438275e985ef67fa9fcf3c8c.sol:2342

address[] public tokenPools

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.610935
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: calculateRatePerEth(uint256,uint256)
PC address: 4541
Estimated Gas Usage: 450 - 545
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xa735224e43cb2549438275e985ef67fa9fcf3c8c.sol:446

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:42.384217
Transaction Length: 1
Severity: Low
Contract: LidStaking
Function name: stakeHandlers(uint256)
PC address: 6118
Estimated Gas Usage: 790 - 885
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xa735224e43cb2549438275e985ef67fa9fcf3c8c.sol:1836

IStakeHandler[] public stakeHandlers

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.757101
Transaction Length: 2
Severity: High
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6315
Estimated Gas Usage: 1699 - 2124
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0xa735224e43cb2549438275e985ef67fa9fcf3c8c.sol:2136

stakeHandlers.length-1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:08.364859
Transaction Length: 2
Severity: Low
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6326
Estimated Gas Usage: 1709 - 2134
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xa735224e43cb2549438275e985ef67fa9fcf3c8c.sol:2136

stakeHandlers[stakeHandlers.length-1]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.410303
Transaction Length: 1
Severity: High
Contract: LidStaking
Function name: findTaxAmount(uint256,uint256)
PC address: 13348
Estimated Gas Usage: 474 - 569
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xa735224e43cb2549438275e985ef67fa9fcf3c8c.sol:446

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:27.488497
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPoolBPs(uint256)
PC address: 15384
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xa735224e43cb2549438275e985ef67fa9fcf3c8c.sol:2344

uint[] public tokenPoolBPs

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xdd037e770c4df544cf530e9072315a1855f1c929.sol
Total states:1308
1.144672
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xeb7e15b4e38cbee57a98204d05999c3230d36348.sol
Total states:27512
458.165179
==== Delegatecall Proxy ====
SWC ID: 112
FOUND TIME: 0:00:00.007911
Transaction Length: 1
Severity: Low
Contract: BaseUpgradeabilityProxy
Function name: fallback
PC address: 97
Estimated Gas Usage: 557 - 2956
The contract implements a delegatecall proxy.
The smart contract forwards the received calldata via delegatecall. Note that callerscan execute arbitrary functions in the callee contract and that the callee contract can access the storage of the calling contract. Make sure that the callee contract is audited properly.DELEGATECALL target: 0x0
--------------------
In file: ../../new/0xeb7e15b4e38cbee57a98204d05999c3230d36348.sol:1030

delegatecall(gas, implementation, 0, calldatasize, 0, 0)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.912278
Transaction Length: 1
Severity: High
Contract: InitializableUpgradeabilityProxy
Function name: initialize(address,bytes)
PC address: 184
Estimated Gas Usage: 305 - 400
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xeb7e15b4e38cbee57a98204d05999c3230d36348.sol:3



*/



//pragma solidity 0.5.12;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.973211
Transaction Length: 1
Severity: High
Contract: BaseAdminUpgradeabilityProxy
Function name: upgradeToAndCall(address,bytes)
PC address: 309
Estimated Gas Usage: 327 - 422
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xeb7e15b4e38cbee57a98204d05999c3230d36348.sol:3



*/



//pragma solidity 0.5.12;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.906706
Transaction Length: 1
Severity: High
Contract: InitializableAdminUpgradeabilityProxy
Function name: upgradeToAndCall(address,bytes)
PC address: 347
Estimated Gas Usage: 350 - 445
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xeb7e15b4e38cbee57a98204d05999c3230d36348.sol:3



*/



//pragma solidity 0.5.12;
p

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:14.956477
Transaction Length: 1
Severity: High
Contract: InitializableUpgradeabilityProxy
Function name: initialize(address,bytes)
PC address: 441
Estimated Gas Usage: 1160 - 4266
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0xeb7e15b4e38cbee57a98204d05999c3230d36348.sol:1302

uint256(keccak256('eip1967.proxy.implementation')) - 1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:07.019802
Transaction Length: 1
Severity: Low
Contract: InitializableUpgradeabilityProxy
Function name: initialize(address,bytes)
PC address: 488
Estimated Gas Usage: 1170 - 4276
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xeb7e15b4e38cbee57a98204d05999c3230d36348.sol:1302

assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1))

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.366735
Transaction Length: 1
Severity: High
Contract: InitializableAdminUpgradeabilityProxy
Function name: initialize(address,address,bytes)
PC address: 700
Estimated Gas Usage: 382 - 477
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xeb7e15b4e38cbee57a98204d05999c3230d36348.sol:3



*/



//pragma solidity 0.5.12;
p

--------------------

==== Delegatecall Proxy ====
SWC ID: 112
FOUND TIME: 0:01:07.026610
Transaction Length: 1
Severity: Low
Contract: InitializableUpgradeabilityProxy
Function name: fallback
PC address: 775
Estimated Gas Usage: 618 - 3017
The contract implements a delegatecall proxy.
The smart contract forwards the received calldata via delegatecall. Note that callerscan execute arbitrary functions in the callee contract and that the callee contract can access the storage of the calling contract. Make sure that the callee contract is audited properly.DELEGATECALL target: 0x0
--------------------
In file: ../../new/0xeb7e15b4e38cbee57a98204d05999c3230d36348.sol:1030

delegatecall(gas, implementation, 0, calldatasize, 0, 0)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.404105
Transaction Length: 1
Severity: Low
Contract: kRoles
Function name: operators(uint256)
PC address: 898
Estimated Gas Usage: 722 - 817
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xeb7e15b4e38cbee57a98204d05999c3230d36348.sol:770

address[] public operators

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:34.823846
Transaction Length: 1
Severity: High
Contract: InitializableAdminUpgradeabilityProxy
Function name: initialize(address,bytes)
PC address: 919
Estimated Gas Usage: 371 - 466
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xeb7e15b4e38cbee57a98204d05999c3230d36348.sol:3



*/



//pragma solidity 0.5.12;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.281851
Transaction Length: 1
Severity: High
Contract: LiquidityPoolV1
Function name: borrow(address,uint256,bytes)
PC address: 1461
Estimated Gas Usage: 423 - 518
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xeb7e15b4e38cbee57a98204d05999c3230d36348.sol:3



*/



//pragma solidity 0.5.12;
p

--------------------

==== Delegatecall Proxy ====
SWC ID: 112
FOUND TIME: 0:00:05.448999
Transaction Length: 1
Severity: Low
Contract: BaseAdminUpgradeabilityProxy
Function name: fallback
PC address: 1699
Estimated Gas Usage: 1229 - 3628
The contract implements a delegatecall proxy.
The smart contract forwards the received calldata via delegatecall. Note that callerscan execute arbitrary functions in the callee contract and that the callee contract can access the storage of the calling contract. Make sure that the callee contract is audited properly.DELEGATECALL target: 0x0
--------------------
In file: ../../new/0xeb7e15b4e38cbee57a98204d05999c3230d36348.sol:1030

delegatecall(gas, implementation, 0, calldatasize, 0, 0)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.301022
Transaction Length: 1
Severity: High
Contract: LiquidityPoolV1
Function name: initialize(string,address)
PC address: 1719
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xeb7e15b4e38cbee57a98204d05999c3230d36348.sol:3



*/



//pragma solidity 0.5.12;
p

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.082009
Transaction Length: 1
Severity: Low
Contract: CanReclaimTokens
Function name: operators(uint256)
PC address: 1895
Estimated Gas Usage: 700 - 795
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xeb7e15b4e38cbee57a98204d05999c3230d36348.sol:770

address[] public operators

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:19.755007
Transaction Length: 1
Severity: High
Contract: InitializableAdminUpgradeabilityProxy
Function name: initialize(address,address,bytes)
PC address: 2230
Estimated Gas Usage: 1755 - 4861
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0xeb7e15b4e38cbee57a98204d05999c3230d36348.sol:1302

uint256(keccak256('eip1967.proxy.implementation')) - 1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:34.833281
Transaction Length: 1
Severity: Low
Contract: InitializableAdminUpgradeabilityProxy
Function name: initialize(address,bytes)
PC address: 2277
Estimated Gas Usage: 1227 - 4333
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xeb7e15b4e38cbee57a98204d05999c3230d36348.sol:1302

assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1))

--------------------

==== Delegatecall Proxy ====
SWC ID: 112
FOUND TIME: 0:01:34.863642
Transaction Length: 1
Severity: Low
Contract: InitializableAdminUpgradeabilityProxy
Function name: fallback
PC address: 2802
Estimated Gas Usage: 1240 - 3639
The contract implements a delegatecall proxy.
The smart contract forwards the received calldata via delegatecall. Note that callerscan execute arbitrary functions in the callee contract and that the callee contract can access the storage of the calling contract. Make sure that the callee contract is audited properly.DELEGATECALL target: 0x0
--------------------
In file: ../../new/0xeb7e15b4e38cbee57a98204d05999c3230d36348.sol:1030

delegatecall(gas, implementation, 0, calldatasize, 0, 0)

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:01:38.541856
Transaction Length: 1
Severity: Medium
Contract: LiquidityPoolV1
Function name: underlyingBalance(address,address)
PC address: 2999
Estimated Gas Usage: 4799 - 75244
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 14031
Offset: 14287
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../new/0xeb7e15b4e38cbee57a98204d05999c3230d36348.sol:1456

function underlyingBalance(address _token, address _owner) public view returns (uint256) {
        uint256 kBalance = kTokens[_token].balanceOf(_owner);
        uint256 kSupply = kTokens[_token].totalSupply();
        if (kBalance == 0) {
            return 0;
        }
        return borrowableBalance(_token).mul(kBalance).div(kSupply);
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:59.728103
Transaction Length: 1
Severity: High
Contract: LiquidityPoolV1
Function name: VERSION()
PC address: 3094
Estimated Gas Usage: 1500 - 2535
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xeb7e15b4e38cbee57a98204d05999c3230d36348.sol:1341

string public VERSION

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.592061
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3249
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xeb7e15b4e38cbee57a98204d05999c3230d36348.sol:231

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:45.642155
Transaction Length: 1
Severity: Low
Contract: LiquidityPoolV1
Function name: registeredTokens(uint256)
PC address: 10354
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xeb7e15b4e38cbee57a98204d05999c3230d36348.sol:1339

address[] public registeredTokens

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:01.692390
Transaction Length: 1
Severity: Low
Contract: LiquidityPoolV1
Function name: operators(uint256)
PC address: 13504
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xeb7e15b4e38cbee57a98204d05999c3230d36348.sol:770

address[] public operators

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x12c790b8bfd6f8ccfa48244419dd1611adad4bbb.sol
Total states:11864
13.333333
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.373049
Transaction Length: 1
Severity: Low
Contract: WBTCexPro
Function name: userLotteryTicker(address,uint256)
PC address: 8334
Estimated Gas Usage: 886 - 1171
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x12c790b8bfd6f8ccfa48244419dd1611adad4bbb.sol:1090

mapping(address => uint256[]) public userLotteryTicker

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:02.365971
Transaction Length: 1
Severity: Low
Contract: WBTCexPro
Function name: lotteryPool(uint256)
PC address: 9271
Estimated Gas Usage: 746 - 841
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x12c790b8bfd6f8ccfa48244419dd1611adad4bbb.sol:1092

LotteryTicket[] public  lotteryPool

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:03.323654
Transaction Length: 1
Severity: Low
Contract: WBTCexPro
Function name: getUserDepositInfo(address,uint256)
PC address: 12807
Estimated Gas Usage: 894 - 1179
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x12c790b8bfd6f8ccfa48244419dd1611adad4bbb.sol:1804

user.deposits[index]

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xa809b0ea04e2ea2b70af56b8db256ba2529753ff.sol
Total states:2324
1.905463
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x0f14488cbac6cb0f94ef211c80eb38d470a6a3f9.sol
Total states:149
2.638392
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xe3d02a14d0eae3aea47081dee53d2281baf3d43f.sol
Total states:1822
3.696161
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x15910d6238e437ea01a2a9d3144678c988b81e58.sol
Total states:18334
2625.427133
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.397770
Transaction Length: 1
Severity: High
Contract: master
Function name: airdrop(address,address[],uint256[])
PC address: 458
Estimated Gas Usage: 375 - 470
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x15910d6238e437ea01a2a9d3144678c988b81e58.sol:5

olidity 0.5.7;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.225155
Transaction Length: 1
Severity: High
Contract: master
Function name: airdrop(address,address[],uint256[])
PC address: 460
Estimated Gas Usage: 375 - 470
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x15910d6238e437ea01a2a9d3144678c988b81e58.sol:3

*/

//pragma solidity 0.5.7;
pragma 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:14.650029
Transaction Length: 1
Severity: High
Contract: master
Function name: airdrop(address,address[],uint256[])
PC address: 606
Estimated Gas Usage: 717 - 3494
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x15910d6238e437ea01a2a9d3144678c988b81e58.sol:5

olidity 0.5.7;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:23.776976
Transaction Length: 1
Severity: High
Contract: master
Function name: airdrop(address,address[],uint256[])
PC address: 608
Estimated Gas Usage: 717 - 3494
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x15910d6238e437ea01a2a9d3144678c988b81e58.sol:3

*/

//pragma solidity 0.5.7;
pragma 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:54.054246
Transaction Length: 1
Severity: High
Contract: master
Function name: name()
PC address: 790
Estimated Gas Usage: 1914 - 3044
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x15910d6238e437ea01a2a9d3144678c988b81e58.sol:68

function name() public view returns(string memory) {
        return _name;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:10:31.641615
Transaction Length: 1
Severity: High
Contract: master
Function name: symbol()
PC address: 1757
Estimated Gas Usage: 1957 - 3087
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x15910d6238e437ea01a2a9d3144678c988b81e58.sol:72

function symbol() public view returns(string memory) {
        return _symbol;
    }

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:12:59.331063
Transaction Length: 1
Severity: Low
Contract: master
Function name: decreaseAllowance(address,uint256)
PC address: 9553
Estimated Gas Usage: 973 - 1448
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x15910d6238e437ea01a2a9d3144678c988b81e58.sol:40

assert(b <= a)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:27:16.422147
Transaction Length: 2
Severity: Low
Contract: master
Function name: decreaseAllowance(address,uint256)
PC address: 9553
Estimated Gas Usage: 973 - 1448
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x15910d6238e437ea01a2a9d3144678c988b81e58.sol:40

assert(b <= a)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:18:16.210113
Transaction Length: 2
Severity: High
Contract: master
Function name: increaseAllowance(address,uint256)
PC address: 9571
Estimated Gas Usage: 1003 - 1478
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x15910d6238e437ea01a2a9d3144678c988b81e58.sol:45

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:24:54.205531
Transaction Length: 2
Severity: Low
Contract: master
Function name: increaseAllowance(address,uint256)
PC address: 9584
Estimated Gas Usage: 1013 - 1488
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x15910d6238e437ea01a2a9d3144678c988b81e58.sol:46

assert(c >= a)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xf1a8793cfc1ae7fe721aa9bfe1b930bec145602d.sol
Total states:7346
38.917786
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xe5376b859347020129786c7cf5d82010f2d1c274.sol
Total states:723
5.987982
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xcfaf813c03838d43f133afa2a425b6a1d1b86558.sol
Total states:11825
27.381819
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.045708
Transaction Length: 0
Severity: High
Contract: Token
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcfaf813c03838d43f133afa2a425b6a1d1b86558.sol:8

Public License as published by
// the Free 

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x8b7d92aa522f192dda6c8c9556338776b9c72ab6.sol
Total states:2324
1.79612
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x84294fc9710e1252d407d3d80a84bc39001bd4a8.sol
Total states:9842
764.788033
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.416076
Transaction Length: 1
Severity: High
Contract: NUTS
Function name: multiTransfer(address[],uint256[])
PC address: 623
Estimated Gas Usage: 341 - 436
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x84294fc9710e1252d407d3d80a84bc39001bd4a8.sol:5

olidity ^0.5.0;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.348306
Transaction Length: 1
Severity: High
Contract: NUTS
Function name: multiTransfer(address[],uint256[])
PC address: 625
Estimated Gas Usage: 341 - 436
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x84294fc9710e1252d407d3d80a84bc39001bd4a8.sol:3

*/

//pragma solidity ^0.5.0;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:14.197642
Transaction Length: 1
Severity: High
Contract: NUTS
Function name: multiTransfer(address[],uint256[])
PC address: 771
Estimated Gas Usage: 674 - 3451
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x84294fc9710e1252d407d3d80a84bc39001bd4a8.sol:5

olidity ^0.5.0;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:27.968544
Transaction Length: 1
Severity: High
Contract: NUTS
Function name: multiTransfer(address[],uint256[])
PC address: 773
Estimated Gas Usage: 674 - 3451
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x84294fc9710e1252d407d3d80a84bc39001bd4a8.sol:3

*/

//pragma solidity ^0.5.0;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:05.641886
Transaction Length: 1
Severity: High
Contract: NUTS
Function name: symbol()
PC address: 1411
Estimated Gas Usage: 528 - 1658
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x84294fc9710e1252d407d3d80a84bc39001bd4a8.sol:37

string public constant symbol = "NUTS"

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:48.917229
Transaction Length: 1
Severity: High
Contract: NUTS
Function name: approveAndCall(address,uint256,bytes)
PC address: 1756
Estimated Gas Usage: 444 - 539
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x84294fc9710e1252d407d3d80a84bc39001bd4a8.sol:3

*/

//pragma solidity ^0.5.0;
pragm

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:09.607337
Transaction Length: 1
Severity: Low
Contract: NUTS
Function name: multiTransfer(address[],uint256[])
PC address: 2361
Estimated Gas Usage: 1028 - 6859
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x84294fc9710e1252d407d3d80a84bc39001bd4a8.sol:74

amounts[i]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:03:42.448301
Transaction Length: 2
Severity: Low
Contract: NUTS
Function name: multiTransfer(address[],uint256[])
PC address: 2361
Estimated Gas Usage: 1040 - 6871
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x84294fc9710e1252d407d3d80a84bc39001bd4a8.sol:74

amounts[i]

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:07:08.987133
Transaction Length: 1
Severity: Medium
Contract: NUTS
Function name: approveAndCall(address,uint256,bytes)
PC address: 5473
Estimated Gas Usage: 8291 - 32458
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../new/0x84294fc9710e1252d407d3d80a84bc39001bd4a8.sol:88

ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x08cda1baddbca220e75b3f90f8b029508969ee5c.sol
Total states:10094
22.94824
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.045995
Transaction Length: 0
Severity: High
Contract: UniswapExchange
Function name: constructor
PC address: 98
Estimated Gas Usage: 233 - 3006
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x08cda1baddbca220e75b3f90f8b029508969ee5c.sol:22

function transfer(address recipient, uint a

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.334858
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3244
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x08cda1baddbca220e75b3f90f8b029508969ee5c.sol:84

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x464131bf3a803566bb2142e36a8ccf0fbb8bda5b.sol
Total states:10046
660.676552
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.080620
Transaction Length: 1
Severity: High
Contract: EMTC
Function name: multipleAirdrop(address[],uint256[])
PC address: 1618
Estimated Gas Usage: 407 - 502
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x464131bf3a803566bb2142e36a8ccf0fbb8bda5b.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.116464
Transaction Length: 1
Severity: High
Contract: EMTC
Function name: multipleAirdrop(address[],uint256[])
PC address: 1620
Estimated Gas Usage: 407 - 502
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x464131bf3a803566bb2142e36a8ccf0fbb8bda5b.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:16.171434
Transaction Length: 1
Severity: High
Contract: EMTC
Function name: multipleAirdrop(address[],uint256[])
PC address: 1766
Estimated Gas Usage: 740 - 3517
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x464131bf3a803566bb2142e36a8ccf0fbb8bda5b.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:29.009476
Transaction Length: 1
Severity: High
Contract: EMTC
Function name: multipleAirdrop(address[],uint256[])
PC address: 1768
Estimated Gas Usage: 740 - 3517
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x464131bf3a803566bb2142e36a8ccf0fbb8bda5b.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:35.640536
Transaction Length: 1
Severity: High
Contract: EMTC
Function name: symbol()
PC address: 2404
Estimated Gas Usage: 1957 - 3087
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x464131bf3a803566bb2142e36a8ccf0fbb8bda5b.sol:152

function symbol() public view returns(string memory) {
        return _symbol;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.071624
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3291
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x464131bf3a803566bb2142e36a8ccf0fbb8bda5b.sol:163

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:29.136384
Transaction Length: 1
Severity: High
Contract: EMTC
Function name: decreaseAllowance(address,uint256)
PC address: 9541
Estimated Gas Usage: 1363 - 5177
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x464131bf3a803566bb2142e36a8ccf0fbb8bda5b.sol:174

require(b <= a, errorMessage)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xFf1B56597a71F2317746EA430f73ac3475cBc46c.sol
Total states:1740
126.486537
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.539881
Transaction Length: 1
Severity: High
Contract: PriceConsumerV3
Function name: priceOfBatch(address[])
PC address: 257
Estimated Gas Usage: 318 - 413
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xFf1B56597a71F2317746EA430f73ac3475cBc46c.sol:9

ma solidity ^0.6.3;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.957973
Transaction Length: 1
Severity: High
Contract: PriceConsumerV3
Function name: priceOfBatch(address[])
PC address: 259
Estimated Gas Usage: 318 - 413
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xFf1B56597a71F2317746EA430f73ac3475cBc46c.sol:3



*/



//pragma solidity ^0.6.3;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:47.065231
Transaction Length: 1
Severity: High
Contract: PriceConsumerV3
Function name: priceOfBatch(address[])
PC address: 392
Estimated Gas Usage: 2862 - 44280
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xFf1B56597a71F2317746EA430f73ac3475cBc46c.sol:138

function priceOfBatch(address[] memory _aggregators) public view returns (int[] memory) {

        require(_aggregators.length > 0, "Should contain more than one aggregator address");

        // Variables

        int[] memory batchPrices = new int[](_aggregators.length);

        // Iterate over each owner and token ID

        for (uint256 i = 0; i < _aggregators.length; i++) {

            AggregatorV3Interface priceFeed = AggregatorV3Interface(_aggregators[i]);

            (

                uint80 roundID, 

                int price,

                uint startedAt,

                uint timeStamp,

                uint80 answeredInRound

            ) = priceFeed.latestRoundData();

            batchPrices[i] = price;

        }

        return batchPrices;

    }

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:02.089623
Transaction Length: 1
Severity: Low
Contract: PriceConsumerV3
Function name: priceOfBatch(address[])
PC address: 1264
Estimated Gas Usage: 2608 - 43369
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xFf1B56597a71F2317746EA430f73ac3475cBc46c.sol:166

batchPrices[i]

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x9e3c953a425483924a42e47cbdef3d66513b9ee3.sol
Total states:2324
2.026343
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x09a95a502a5f380eda8b7f1e8c3ff2ead41afc7e.sol
Total states:10252
580.363048
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.704487
Transaction Length: 1
Severity: High
Contract: seveninch
Function name: multiTransfer(address[],uint256[])
PC address: 785
Estimated Gas Usage: 430 - 525
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x09a95a502a5f380eda8b7f1e8c3ff2ead41afc7e.sol:13

!!!!!!!!!!!!!!!Notice

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.609083
Transaction Length: 1
Severity: High
Contract: seveninch
Function name: multiTransfer(address[],uint256[])
PC address: 787
Estimated Gas Usage: 430 - 525
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x09a95a502a5f380eda8b7f1e8c3ff2ead41afc7e.sol:3



*/



/*



!!!!!!!!!!!!!!!Notice!

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:14.508475
Transaction Length: 1
Severity: High
Contract: seveninch
Function name: multiTransfer(address[],uint256[])
PC address: 933
Estimated Gas Usage: 763 - 3540
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x09a95a502a5f380eda8b7f1e8c3ff2ead41afc7e.sol:13

!!!!!!!!!!!!!!!Notice

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:28.921589
Transaction Length: 1
Severity: High
Contract: seveninch
Function name: multiTransfer(address[],uint256[])
PC address: 935
Estimated Gas Usage: 763 - 3540
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x09a95a502a5f380eda8b7f1e8c3ff2ead41afc7e.sol:3



*/



/*



!!!!!!!!!!!!!!!Notice!

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:04.664099
Transaction Length: 1
Severity: High
Contract: seveninch
Function name: symbol()
PC address: 1607
Estimated Gas Usage: 1913 - 3043
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x09a95a502a5f380eda8b7f1e8c3ff2ead41afc7e.sol:270

function symbol() public view returns(string memory) {

    return _Tokensymbol;

  }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:07:05.067208
Transaction Length: 1
Severity: High
Contract: seveninch
Function name: multiTransferEqualAmount(address[],uint256)
PC address: 1916
Estimated Gas Usage: 451 - 546
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x09a95a502a5f380eda8b7f1e8c3ff2ead41afc7e.sol:13

!!!!!!!!!!!!!!!Notice

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:07:07.977425
Transaction Length: 1
Severity: High
Contract: seveninch
Function name: multiTransferEqualAmount(address[],uint256)
PC address: 1918
Estimated Gas Usage: 451 - 546
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x09a95a502a5f380eda8b7f1e8c3ff2ead41afc7e.sol:3



*/



/*



!!!!!!!!!!!!!!!Notice!

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:07:31.569676
Transaction Length: 1
Severity: High
Contract: seveninch
Function name: multiTransferEqualAmount(address[],uint256)
PC address: 5631
Estimated Gas Usage: 930 - 4316
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x09a95a502a5f380eda8b7f1e8c3ff2ead41afc7e.sol:570

amount * 10**uint256(tokenDecimals)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:07:03.675961
Transaction Length: 1
Severity: Low
Contract: seveninch
Function name: decreaseAllowance(address,uint256)
PC address: 8017
Estimated Gas Usage: 1062 - 1537
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x09a95a502a5f380eda8b7f1e8c3ff2ead41afc7e.sol:200

assert(b <= a)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:49.072440
Transaction Length: 2
Severity: Low
Contract: seveninch
Function name: decreaseAllowance(address,uint256)
PC address: 8017
Estimated Gas Usage: 1062 - 1537
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x09a95a502a5f380eda8b7f1e8c3ff2ead41afc7e.sol:200

assert(b <= a)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:15.925444
Transaction Length: 2
Severity: High
Contract: seveninch
Function name: increaseAllowance(address,uint256)
PC address: 8035
Estimated Gas Usage: 1047 - 1522
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x09a95a502a5f380eda8b7f1e8c3ff2ead41afc7e.sol:210

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:43.443385
Transaction Length: 2
Severity: Low
Contract: seveninch
Function name: increaseAllowance(address,uint256)
PC address: 8048
Estimated Gas Usage: 1057 - 1532
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x09a95a502a5f380eda8b7f1e8c3ff2ead41afc7e.sol:212

assert(c >= a)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:18.915280
Transaction Length: 1
Severity: High
Contract: seveninch
Function name: findPercentage(uint256)
PC address: 8459
Estimated Gas Usage: 828 - 923
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x09a95a502a5f380eda8b7f1e8c3ff2ead41afc7e.sol:178

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:06:30.637557
Transaction Length: 1
Severity: Low
Contract: seveninch
Function name: findPercentage(uint256)
PC address: 8482
Estimated Gas Usage: 866 - 961
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x09a95a502a5f380eda8b7f1e8c3ff2ead41afc7e.sol:180

assert(c / a == b)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xdf69471dca7c45fdc9ed0dc2e15f2232e58b9d6a.sol
Total states:2398
19.426442
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xa387d2be9f737612fa85c86d0234e36e3f2a048b.sol
Total states:272
96.929519
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.042127
Transaction Length: 0
Severity: High
Contract: VaultTimely
Function name: constructor
PC address: 230
Estimated Gas Usage: 41453 - 201878
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xa387d2be9f737612fa85c86d0234e36e3f2a048b.sol:34

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.833530
Transaction Length: 0
Severity: Low
Contract: VaultTimely
Function name: constructor
PC address: 244
Estimated Gas Usage: 41463 - 201888
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xa387d2be9f737612fa85c86d0234e36e3f2a048b.sol:35

assert(c >= a)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x3afdb0877206dea0a57e4e4d18a00059cb6dd897.sol
Total states:1986
20.774197
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.327151
Transaction Length: 1
Severity: High
Contract: StrategyAddTwoSidesOptimal
Function name: execute(address,uint256,bytes)
PC address: 726
Estimated Gas Usage: 376 - 471
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3afdb0877206dea0a57e4e4d18a00059cb6dd897.sol:3

*/

// File: openzeppelin-solidity-

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:00.181503
Transaction Length: 0
Severity: Medium
Contract: StrategyAddTwoSidesOptimal
Function name: constructor
PC address: 867
Estimated Gas Usage: 38791 - 235224
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 375
Offset: 664
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../new/0x3afdb0877206dea0a57e4e4d18a00059cb6dd897.sol:619

contract StrategyAddTwoSidesOptimal is Ownable, ReentrancyGuard, Strategy {
    using SafeToken for address;
    using SafeMath for uint256;

    IUniswapV2Factory public factory;
    IUniswapV2Router02 public router;
    address public weth;
    address public goblin;

    /// @dev Create a new add two-side optimal strategy instance.
    /// @param _router The Uniswap router smart contract.
    constructor(IUniswapV2Router02 _router, address _goblin) public {
        factory = IUniswapV2Factory(_router.factory());
        router = _router;
        weth = _router.WETH();
        goblin = _goblin;
    }
    
    /// @dev Throws if called by any account other than the goblin.
    modifier onlyGoblin() {
        require(isGoblin(), "caller is not the goblin");
        _;
    }

    /// @dev Returns true if the caller is the current goblin.
    function isGoblin() public view returns (bool) {
        return msg.sender == goblin;
    }

    /// @dev Compute optimal deposit amount
    /// @param amtA amount of token A desired to deposit
    /// @param amtB amonut of token B desired to deposit
    /// @param resA amount of token A in reserve
    /// @param resB amount of token B in reserve
    function optimalDeposit(
        uint256 amtA,
        uint256 amtB,
        uint256 resA,
        uint256 resB
    ) internal pure returns (uint256 swapAmt, bool isReversed) {
        if (amtA.mul(resB) >= amtB.mul(resA)) {
            swapAmt = _optimalDepositA(amtA, amtB, resA, resB);
            isReversed = false;
        } else {
            swapAmt = _optimalDepositA(amtB, amtA, resB, resA);
            isReversed = true;
        }
    }

    /// @dev Compute optimal deposit amount helper
    /// @param amtA amount of token A desired to deposit
    /// @param amtB amonut of token B desired to deposit
    /// @param resA amount of token A in reserve
    /// @param resB amount of token B in reserve
    function _optimalDepositA(
        uint256 amtA,
        uint256 amtB,
        uint256 resA,
        uint256 resB
    ) internal pure returns (uint256) {
        require(amtA.mul(resB) >= amtB.mul(resA), "Reversed");

        uint256 a = 997;
        uint256 b = uint256(1997).mul(resA);
        uint256 _c = (amtA.mul(resB)).sub(amtB.mul(resA));
        uint256 c = _c.mul(1000).div(amtB.add(resB)).mul(resA);

        uint256 d = a.mul(c).mul(4);
        uint256 e = Math.sqrt(b.mul(b).add(d));

        uint256 numerator = e.sub(b);
        uint256 denominator = a.mul(2);

        return numerator.div(denominator);
    }

    /// @dev Execute worker strategy. Take LP tokens + ETH. Return LP tokens + ETH.
    /// @param user User address
    /// @param data Extra calldata information passed along to this strategy.
    function execute(address user, uint256, /* debt */ bytes calldata data) 
        external         
        payable  
        onlyGoblin       
        nonReentrant 
    {
        // 1. Find out what farming token we are dealing with.
        (address fToken, uint256 fAmount, uint256 minLPAmount) = abi.decode(data, (address, uint256, uint256));
        IUniswapV2Pair lpToken = IUniswapV2Pair(factory.getPair(fToken, weth));        
        // 2. Compute the optimal amount of ETH and fToken to be converted.  
        if (fAmount > 0) {  
            fToken.safeTransferFrom(user, address(this), fAmount);            
        }
        uint256 ethBalance = address(this).balance;
        uint256 swapAmt;
        bool isReversed;
        {
            (uint256 r0, uint256 r1, ) = lpToken.getReserves();
            (uint256 ethReserve, uint256 fReserve) = lpToken.token0() == weth ? (r0, r1) : (r1, r0);
            (swapAmt, isReversed) = optimalDeposit(ethBalance, fToken.myBalance(), ethReserve, fReserve);
        }
        // 3. Convert between ETH and farming tokens
        fToken.safeApprove(address(router), 0);
        fToken.safeApprove(address(router), uint256(-1));
        address[] memory path = new address[](2);
        (path[0], path[1]) = isReversed ? (fToken, weth) : (weth, fToken);
        if (isReversed) {
            router.swapExactTokensForETH(swapAmt, 0, path, address(this), now); // farming tokens to ETH
        } else {
            router.swapExactETHForTokens.value(swapAmt)(0, path, address(this), now); // ETH to farming tokens
        }
        // 4. Mint more LP tokens and return all LP tokens to the sender.
        (,, uint256 moreLPAmount) = router.addLiquidityETH.value(address(this).balance)(
            fToken, fToken.myBalance(), 0, 0, address(this), now
        );
        require(moreLPAmount >= minLPAmount, "insufficient LP tokens received");
        lpToken.transfer(msg.sender, lpToken.balanceOf(address(this)));
    }

    /// @dev Recover ERC20 tokens that were accidentally sent to this smart contract.
    /// @param token The token contract. Can be anything. This contract should not hold ERC20 tokens.
    /// @param to The address to send the tokens to.
    /// @param value The number of tokens to transfer to `to`.
    function recover(address token, address to, uint256 value) external onlyOwner nonReentrant {
        token.safeTransfer(to, value);
    }

    function() external payable {}
}

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol
Total states:1897
1045.64867
==== Delegatecall Proxy ====
SWC ID: 112
FOUND TIME: 0:00:00.264285
Transaction Length: 1
Severity: Low
Contract: OwnedUpgradeabilityProxy
Function name: fallback
PC address: 180
Estimated Gas Usage: 771 - 5753
The contract implements a delegatecall proxy.
The smart contract forwards the received calldata via delegatecall. Note that callerscan execute arbitrary functions in the callee contract and that the callee contract can access the storage of the calling contract. Make sure that the callee contract is audited properly.DELEGATECALL target: Concat(9_code(OwnedUpgradeabilityProxy),
       9_code(OwnedUpgradeabilityProxy),
       9_code(OwnedUpgradeabilityProxy),
       9_code(OwnedUpgradeabilityProxy),
       9_code(OwnedUpgradeabilityProxy),
       9_code(OwnedUpgradeabilityProxy),
       9_code(OwnedUpgradeabilityProxy),
       9_code(OwnedUpgradeabilityProxy),
       9_code(OwnedUpgradeabilityProxy),
       9_code(OwnedUpgradeabilityProxy),
       9_code(OwnedUpgradeabilityProxy),
       9_code(OwnedUpgradeabilityProxy),
       9_code(OwnedUpgradeabilityProxy),
       9_code(OwnedUpgradeabilityProxy),
       9_code(OwnedUpgradeabilityProxy),
       9_code(OwnedUpgradeabilityProxy),
       9_code(OwnedUpgradeabilityProxy),
       9_code(OwnedUpgradeabilityProxy),
       9_code(OwnedUpgradeabilityProxy),
       9_code(OwnedUpgradeabilityProxy),
       9_code(OwnedUpgradeabilityProxy),
       9_code(OwnedUpgradeabilityProxy),
       9_code(OwnedUpgradeabilityProxy),
       9_code(OwnedUpgradeabilityProxy),
       9_code(OwnedUpgradeabilityProxy),
       9_code(OwnedUpgradeabilityProxy),
       9_code(OwnedUpgradeabilityProxy),
       9_code(OwnedUpgradeabilityProxy),
       9_code(OwnedUpgradeabilityProxy),
       9_code(OwnedUpgradeabilityProxy),
       9_code(OwnedUpgradeabilityProxy),
       9_code(OwnedUpgradeabilityProxy))
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:913

delegatecall(gas, _impl, ptr, calldatasize, 0, 0)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.465768
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: initiate(address,address,address,address[])
PC address: 1211
Estimated Gas Usage: 463 - 558
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:9

e: contracts/external

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.489965
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: initiate(address,address,address,address[])
PC address: 1213
Estimated Gas Usage: 463 - 558
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:3



*/



// File: contracts/external/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.597315
Transaction Length: 1
Severity: High
Contract: MarketRegistryNew
Function name: initiate(address,address,address,address[])
PC address: 1295
Estimated Gas Usage: 552 - 647
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:9

e: contracts/external

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.829469
Transaction Length: 1
Severity: High
Contract: MarketRegistryNew
Function name: initiate(address,address,address,address[])
PC address: 1297
Estimated Gas Usage: 552 - 647
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:3



*/



// File: contracts/external/

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:01:17.469161
Transaction Length: 1
Severity: Medium
Contract: MarketRegistry
Function name: transferAssets(address,address,uint256)
PC address: 2105
Estimated Gas Usage: 3436 - 72609
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 10805
Offset: 26176
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:2538

function transferAssets(address _asset, address payable _to, uint _amount) external onlyAuthorizedToGovern {

      _transferAsset(_asset, _to, _amount);

    }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:01:39.967375
Transaction Length: 1
Severity: Medium
Contract: MarketRegistry
Function name: setMasterAddress()
PC address: 2131
Estimated Gas Usage: 20392 - 150836
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 11129
Offset: 11658
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:2198

function setMasterAddress() public {

      OwnedUpgradeabilityProxy proxy =  OwnedUpgradeabilityProxy(address(uint160(address(this))));

      require(msg.sender == proxy.proxyOwner(),"Sender is not proxy owner.");

      ms = IMaster(msg.sender);

      masterAddress = msg.sender;

      governance = IGovernance(ms.getLatestAddress("GV"));

    }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:01:23.148159
Transaction Length: 1
Severity: Medium
Contract: MarketRegistryNew
Function name: transferAssets(address,address,uint256)
PC address: 2279
Estimated Gas Usage: 3436 - 72609
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 12048
Offset: 30628
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:2538

function transferAssets(address _asset, address payable _to, uint _amount) external onlyAuthorizedToGovern {

      _transferAsset(_asset, _to, _amount);

    }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:01:45.219012
Transaction Length: 1
Severity: Medium
Contract: MarketRegistryNew
Function name: setMasterAddress()
PC address: 2305
Estimated Gas Usage: 20392 - 150836
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 12372
Offset: 12901
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:2198

function setMasterAddress() public {

      OwnedUpgradeabilityProxy proxy =  OwnedUpgradeabilityProxy(address(uint160(address(this))));

      require(msg.sender == proxy.proxyOwner(),"Sender is not proxy owner.");

      ms = IMaster(msg.sender);

      masterAddress = msg.sender;

      governance = IGovernance(ms.getLatestAddress("GV"));

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:29.877105
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: updateMarketImplementations(uint256[],address[])
PC address: 2899
Estimated Gas Usage: 451 - 546
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:9

e: contracts/external

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:32.994122
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: updateMarketImplementations(uint256[],address[])
PC address: 2901
Estimated Gas Usage: 451 - 546
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:3



*/



// File: contracts/external/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:38.029266
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: updateMarketImplementations(uint256[],address[])
PC address: 2987
Estimated Gas Usage: 627 - 722
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:9

e: contracts/external

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:53.205424
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: updateMarketImplementations(uint256[],address[])
PC address: 2989
Estimated Gas Usage: 627 - 722
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:3



*/



// File: contracts/external/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:18.496246
Transaction Length: 1
Severity: High
Contract: MarketRegistryNew
Function name: updateMarketImplementations(uint256[],address[])
PC address: 3148
Estimated Gas Usage: 451 - 546
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:9

e: contracts/external

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:21.833597
Transaction Length: 1
Severity: High
Contract: MarketRegistryNew
Function name: updateMarketImplementations(uint256[],address[])
PC address: 3150
Estimated Gas Usage: 451 - 546
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:3



*/



// File: contracts/external/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:26.701912
Transaction Length: 1
Severity: High
Contract: MarketRegistryNew
Function name: updateMarketImplementations(uint256[],address[])
PC address: 3236
Estimated Gas Usage: 627 - 722
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:9

e: contracts/external

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:42.479525
Transaction Length: 1
Severity: High
Contract: MarketRegistryNew
Function name: updateMarketImplementations(uint256[],address[])
PC address: 3238
Estimated Gas Usage: 627 - 722
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:3



*/



// File: contracts/external/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:10.321737
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: callMarketResultEvent(uint256[],uint256,uint256,uint256)
PC address: 3585
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:9

e: contracts/external

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:13.302933
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: callMarketResultEvent(uint256[],uint256,uint256,uint256)
PC address: 3587
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:3



*/



// File: contracts/external/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:21.268475
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: callClaimedEvent(address,uint256[],address[],uint256,address)
PC address: 4369
Estimated Gas Usage: 484 - 579
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:9

e: contracts/external

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:26.984610
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: callClaimedEvent(address,uint256[],address[],uint256,address)
PC address: 4371
Estimated Gas Usage: 484 - 579
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:3



*/



// File: contracts/external/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:35.153063
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: callClaimedEvent(address,uint256[],address[],uint256,address)
PC address: 4457
Estimated Gas Usage: 660 - 755
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:9

e: contracts/external

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:45.359989
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: callClaimedEvent(address,uint256[],address[],uint256,address)
PC address: 4459
Estimated Gas Usage: 660 - 755
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:3



*/



// File: contracts/external/

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:08:58.790278
Transaction Length: 1
Severity: Medium
Contract: MarketRegistry
Function name: upgradeContractImplementation(address,address)
PC address: 4762
Estimated Gas Usage: 4098 - 73461
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 21857
Offset: 22280
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:2174

function upgradeContractImplementation(address payable _proxyAddress, address _newImplementation) 

        external onlyAuthorizedToGovern

    {

      require(_newImplementation != address(0));

      OwnedUpgradeabilityProxy tempInstance 

          = OwnedUpgradeabilityProxy(_proxyAddress);

      tempInstance.upgradeTo(_newImplementation);

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:10:21.373322
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: createGovernanceProposal(string,string,string,bytes,uint256,address,uint256,uint256,uint256)
PC address: 5068
Estimated Gas Usage: 362 - 457
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:3



*/



// File: contracts/external

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:10:43.742765
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: createGovernanceProposal(string,string,string,bytes,uint256,address,uint256,uint256,uint256)
PC address: 5222
Estimated Gas Usage: 704 - 3481
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:3



*/



// File: contracts/external

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:11:21.944621
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: createGovernanceProposal(string,string,string,bytes,uint256,address,uint256,uint256,uint256)
PC address: 5376
Estimated Gas Usage: 1046 - 6505
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:3



*/



// File: contracts/external

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:02:22.219207
Transaction Length: 1
Severity: Low
Contract: MarketRegistry
Function name: updateConfigAddressParameters(bytes8,address)
PC address: 13397
Estimated Gas Usage: 3816 - 39604
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:2596

marketUtility.updateAddressParameters(code, value)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:03:08.646704
Transaction Length: 1
Severity: Low
Contract: MarketRegistryNew
Function name: updateConfigAddressParameters(bytes8,address)
PC address: 15683
Estimated Gas Usage: 3851 - 39639
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:3704

marketUtility.updateAddressParameters(code, value)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:03:30.062029
Transaction Length: 1
Severity: Low
Contract: MarketRegistry
Function name: updateUintParameters(bytes8,uint256)
PC address: 16788
Estimated Gas Usage: 3812 - 39600
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:2586

marketUtility.updateUintParameters(code, value)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:03:51.665589
Transaction Length: 1
Severity: Low
Contract: MarketRegistry
Function name: burnDisputedProposalTokens(uint256)
PC address: 17424
Estimated Gas Usage: 3858 - 39836
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:2464

IMarket(disputedMarket).resolveDispute(false, 0)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:04:02.123776
Transaction Length: 1
Severity: Low
Contract: MarketRegistry
Function name: burnDisputedProposalTokens(uint256)
PC address: 17752
Estimated Gas Usage: 7571 - 78982
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:2470

plotToken.burn(_stakedAmount)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:36.084341
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: getMarketDetails(address)
PC address: 18576
Estimated Gas Usage: 1945 - 36509
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:9

contracts/exter

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:47.534564
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: getMarketDetails(address)
PC address: 18579
Estimated Gas Usage: 2065 - 36815
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:5

*/



// File: contracts/external/openzeppe

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:52.455930
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: getMarketDetails(address)
PC address: 18602
Estimated Gas Usage: 2065 - 36815
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:2766

IMarket(_marketAdd).getData()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:43.067499
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: getMarketDetails(address)
PC address: 18638
Estimated Gas Usage: 2065 - 36815
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:3

0

*/



// File: con

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:57.454838
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: getMarketDetails(address)
PC address: 18644
Estimated Gas Usage: 2065 - 36815
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:9

lidity/math/Sa

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:05.405785
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: getMarketDetails(address)
PC address: 18665
Estimated Gas Usage: 2123 - 36966
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:26

metic operations in S

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:11.428932
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: getMarketDetails(address)
PC address: 18667
Estimated Gas Usage: 2123 - 36966
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:22

 checks.

 *

 * Arithmetic operations in So

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:20.570731
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: getMarketDetails(address)
PC address: 18720
Estimated Gas Usage: 2223 - 37159
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:3

0

*/



// File: con

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:25.514924
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: getMarketDetails(address)
PC address: 18726
Estimated Gas Usage: 2223 - 37159
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:9

lidity/math/Sa

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:33.377835
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: getMarketDetails(address)
PC address: 18747
Estimated Gas Usage: 2281 - 37310
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:26

metic operations in S

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:40.278193
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: getMarketDetails(address)
PC address: 18749
Estimated Gas Usage: 2281 - 37310
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:22

 checks.

 *

 * Arithmetic operations in So

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:50.314798
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: getMarketDetails(address)
PC address: 18802
Estimated Gas Usage: 2381 - 37503
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:3

0

*/



// File: con

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:55.739631
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: getMarketDetails(address)
PC address: 18808
Estimated Gas Usage: 2381 - 37503
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:9

lidity/math/Sa

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:04.895883
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: getMarketDetails(address)
PC address: 18829
Estimated Gas Usage: 2439 - 37654
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:26

metic operations in S

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:11.807820
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: getMarketDetails(address)
PC address: 18831
Estimated Gas Usage: 2439 - 37654
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:22

 checks.

 *

 * Arithmetic operations in So

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:06:20.037248
Transaction Length: 1
Severity: Low
Contract: MarketRegistry
Function name: createMarket(uint256,uint256)
PC address: 19617
Estimated Gas Usage: 2068 - 3583
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:2274

marketCurrencies[_marketCurrencyIndex]

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:08:58.766724
Transaction Length: 1
Severity: Medium
Contract: MarketRegistry
Function name: upgradeContractImplementation(address,address)
PC address: 22280
Estimated Gas Usage: 3350 - 38713
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:2186

tempInstance.upgradeTo(_newImplementation)

--------------------

==== Unprotected Ether Withdrawal ====
SWC ID: 105
FOUND TIME: 0:01:17.279270
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: transferAssets(address,address,uint256)
PC address: 26176
Estimated Gas Usage: 2655 - 37828
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:2564

_recipient.transfer(_amount)

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:01:09.158657
Transaction Length: 1
Severity: Medium
Contract: MarketRegistry
Function name: transferAssets(address,address,uint256)
PC address: 26373
Estimated Gas Usage: 3452 - 38910
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:2568

IToken(_asset).transfer(_recipient, _amount)

--------------------

==== Unprotected Ether Withdrawal ====
SWC ID: 105
FOUND TIME: 0:01:22.952281
Transaction Length: 1
Severity: High
Contract: MarketRegistryNew
Function name: transferAssets(address,address,uint256)
PC address: 30628
Estimated Gas Usage: 2655 - 37828
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:2564

_recipient.transfer(_amount)

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:01:14.506288
Transaction Length: 1
Severity: Medium
Contract: MarketRegistryNew
Function name: transferAssets(address,address,uint256)
PC address: 30825
Estimated Gas Usage: 3452 - 38910
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:2568

IToken(_asset).transfer(_recipient, _amount)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol
Total states:1164
11.441527
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.463422
Transaction Length: 1
Severity: Low
Contract: LoihiStorage
Function name: reserves(uint256)
PC address: 1334
Estimated Gas Usage: 767 - 862
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol:984

address[] public reserves

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.805647
Transaction Length: 1
Severity: Low
Contract: LoihiStorage
Function name: numeraires(uint256)
PC address: 1491
Estimated Gas Usage: 700 - 795
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol:983

address[] public numeraires

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.310801
Transaction Length: 1
Severity: Low
Contract: LoihiStorage
Function name: derivatives(uint256)
PC address: 1596
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol:982

address[] public derivatives

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x4F4001b06A2d5E71674a3591713B47580a1002442.sol
Total states:1055
2.42331
==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.005703
Transaction Length: 0
Severity: Medium
Contract: Governance
Function name: constructor
PC address: 18
Estimated Gas Usage: 42 - 137
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../new/0x4F4001b06A2d5E71674a3591713B47580a1002442.sol:220

tx.origin

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x21643bddd9f5af8267700f4c3aa57bf508946e28.sol
Total states:845
9.738218
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xefc8b22a6d8da10aacddaa30a432671c49668a02.sol
Total states:729
1.230406
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.081935
Transaction Length: 0
Severity: High
Contract: MultiWallet
Function name: constructor
PC address: 110
Estimated Gas Usage: 257 - 3030
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xefc8b22a6d8da10aacddaa30a432671c49668a02.sol:15

uint newThreshold;
  

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.097303
Transaction Length: 0
Severity: High
Contract: MultiWallet
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xefc8b22a6d8da10aacddaa30a432671c49668a02.sol:14

ole roleType;
        uint newThreshold;
   

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xe3b8541655d70804526e366d7b8c914b8ecd944a.sol
Total states:2848
327.08531
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.727390
Transaction Length: 1
Severity: High
Contract: NiftyTools
Function name: feedMultiple(uint256[],uint256[])
PC address: 719
Estimated Gas Usage: 407 - 502
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xe3b8541655d70804526e366d7b8c914b8ecd944a.sol:5

openzeppelin/contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.642768
Transaction Length: 1
Severity: High
Contract: NiftyTools
Function name: feedMultiple(uint256[],uint256[])
PC address: 721
Estimated Gas Usage: 407 - 502
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xe3b8541655d70804526e366d7b8c914b8ecd944a.sol:3

*/

// File: @openzeppelin/contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.333279
Transaction Length: 1
Severity: High
Contract: NiftyTools
Function name: feedMultiple(uint256[],uint256[])
PC address: 804
Estimated Gas Usage: 583 - 678
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xe3b8541655d70804526e366d7b8c914b8ecd944a.sol:5

openzeppelin/contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:26.808742
Transaction Length: 1
Severity: High
Contract: NiftyTools
Function name: feedMultiple(uint256[],uint256[])
PC address: 806
Estimated Gas Usage: 583 - 678
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xe3b8541655d70804526e366d7b8c914b8ecd944a.sol:3

*/

// File: @openzeppelin/contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:06.875669
Transaction Length: 1
Severity: High
Contract: NiftyTools
Function name: claimMultiple(uint256[])
PC address: 999
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xe3b8541655d70804526e366d7b8c914b8ecd944a.sol:5

openzeppelin/contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:10.634754
Transaction Length: 1
Severity: High
Contract: NiftyTools
Function name: claimMultiple(uint256[])
PC address: 1001
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xe3b8541655d70804526e366d7b8c914b8ecd944a.sol:3

*/

// File: @openzeppelin/contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:27.508198
Transaction Length: 1
Severity: High
Contract: NiftyTools
Function name: _checkAmount(uint256[])
PC address: 1198
Estimated Gas Usage: 340 - 435
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xe3b8541655d70804526e366d7b8c914b8ecd944a.sol:5

openzeppelin/contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:31.180817
Transaction Length: 1
Severity: High
Contract: NiftyTools
Function name: _checkAmount(uint256[])
PC address: 1200
Estimated Gas Usage: 340 - 435
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xe3b8541655d70804526e366d7b8c914b8ecd944a.sol:3

*/

// File: @openzeppelin/contracts

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:03:10.032628
Transaction Length: 1
Severity: Low
Contract: NiftyTools
Function name: claimMultiple(uint256[])
PC address: 5672
Estimated Gas Usage: 4851 - 40874
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0xe3b8541655d70804526e366d7b8c914b8ecd944a.sol:412

vnft.claimMiningRewards(ids[i])

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:24.672961
Transaction Length: 1
Severity: High
Contract: NiftyTools
Function name: claimMultiple(uint256[])
PC address: 8265
Estimated Gas Usage: 3963 - 39280
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xe3b8541655d70804526e366d7b8c914b8ecd944a.sol:191

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x6c936307dad9b197de34e3f0642f54c39f662441.sol
Total states:2324
1.898026
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xc9db619abd37ae22d80fce3bdb811485b56d4fc3.sol
Total states:12855
257.507497
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.966045
Transaction Length: 1
Severity: High
Contract: Module
Function name: getModuleAddress(string)
PC address: 416
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc9db619abd37ae22d80fce3bdb811485b56d4fc3.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.281150
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 511
Estimated Gas Usage: 364 - 459
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc9db619abd37ae22d80fce3bdb811485b56d4fc3.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.564975
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 513
Estimated Gas Usage: 364 - 459
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc9db619abd37ae22d80fce3bdb811485b56d4fc3.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.523941
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 596
Estimated Gas Usage: 540 - 635
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc9db619abd37ae22d80fce3bdb811485b56d4fc3.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:17.941804
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 598
Estimated Gas Usage: 540 - 635
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc9db619abd37ae22d80fce3bdb811485b56d4fc3.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:30.826795
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 681
Estimated Gas Usage: 716 - 811
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc9db619abd37ae22d80fce3bdb811485b56d4fc3.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:51.452582
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 683
Estimated Gas Usage: 716 - 811
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc9db619abd37ae22d80fce3bdb811485b56d4fc3.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:11.837415
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 766
Estimated Gas Usage: 892 - 987
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc9db619abd37ae22d80fce3bdb811485b56d4fc3.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:35.843560
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 768
Estimated Gas Usage: 892 - 987
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc9db619abd37ae22d80fce3bdb811485b56d4fc3.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:05.427913
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: getModuleAddress(string)
PC address: 1453
Estimated Gas Usage: 451 - 546
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc9db619abd37ae22d80fce3bdb811485b56d4fc3.sol:3

*/

// File: @openzeppelin\contract

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xDf625D21ab9aE7C74A1864265D6116EeaE9E94B22.sol
Total states:2203
46.423721
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.439263
Transaction Length: 1
Severity: High
Contract: EUSDReserves
Function name: migrateReserves(address,address[])
PC address: 305
Estimated Gas Usage: 352 - 447
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xDf625D21ab9aE7C74A1864265D6116EeaE9E94B22.sol:5

olidity 0.5.17;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.671555
Transaction Length: 1
Severity: High
Contract: EUSDReserves
Function name: migrateReserves(address,address[])
PC address: 307
Estimated Gas Usage: 352 - 447
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xDf625D21ab9aE7C74A1864265D6116EeaE9E94B22.sol:3

*/

//pragma solidity 0.5.17;
pragma

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x2b0881c43467bb590a7339ff7afe494807f5f914.sol
Total states:77
3.249335
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xc7c5E7d7d5C6e49Be1CC835ac67E774e164D7811.sol
Total states:9197
1672.200037
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.431930
Transaction Length: 1
Severity: High
Contract: Operator
Function name: setOperators(address[])
PC address: 540
Estimated Gas Usage: 340 - 435
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc7c5E7d7d5C6e49Be1CC835ac67E774e164D7811.sol:9

e: contracts\modules\

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.461054
Transaction Length: 1
Severity: High
Contract: Operator
Function name: setOperators(address[])
PC address: 542
Estimated Gas Usage: 340 - 435
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc7c5E7d7d5C6e49Be1CC835ac67E774e164D7811.sol:3



*/



// File: contracts\modules\S

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:36.765552
Transaction Length: 1
Severity: High
Contract: Operator
Function name: getOperator()
PC address: 763
Estimated Gas Usage: 1249 - 2096
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc7c5E7d7d5C6e49Be1CC835ac67E774e164D7811.sol:1115

function getOperator()public view returns (address[] memory) {

        return _operatorList;

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:46.076339
Transaction Length: 1
Severity: High
Contract: Operator
Function name: getOperator()
PC address: 803
Estimated Gas Usage: 1399 - 2622
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc7c5E7d7d5C6e49Be1CC835ac67E774e164D7811.sol:1115

function getOperator()public view returns (address[] memory) {

        return _operatorList;

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.181267
Transaction Length: 1
Severity: High
Contract: CollateralPool
Function name: getAllRealBalance(address[])
PC address: 1179
Estimated Gas Usage: 388 - 483
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc7c5E7d7d5C6e49Be1CC835ac67E774e164D7811.sol:9

e: contracts\modules\

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.882948
Transaction Length: 1
Severity: High
Contract: CollateralPool
Function name: getAllRealBalance(address[])
PC address: 1181
Estimated Gas Usage: 388 - 483
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc7c5E7d7d5C6e49Be1CC835ac67E774e164D7811.sol:3



*/



// File: contracts\modules\S

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:22.501816
Transaction Length: 1
Severity: High
Contract: CollateralPool
Function name: getAllRealBalance(address[])
PC address: 1314
Estimated Gas Usage: 880 - 4502
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc7c5E7d7d5C6e49Be1CC835ac67E774e164D7811.sol:2062

function getAllRealBalance(address[] memory whiteList)public view returns(int256[] memory){

        uint256 len = whiteList.length;

        int256[] memory realBalances = new int256[](len); 

        for (uint i = 0;i<len;i++){

            int256 latestWorth = _optionsPool.getNetWrothLatestWorth(whiteList[i]);

            realBalances[i] = netWorthBalances[whiteList[i]].add(latestWorth);

        }

        return realBalances;

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:23.637556
Transaction Length: 1
Severity: High
Contract: CollateralPool
Function name: getWhiteList()
PC address: 1422
Estimated Gas Usage: 1275 - 2122
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc7c5E7d7d5C6e49Be1CC835ac67E774e164D7811.sol:901

function getWhiteList()public view returns (address[] memory){

        return whiteList;

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.071000
Transaction Length: 1
Severity: High
Contract: CollateralData
Function name: setOperators(address[])
PC address: 1436
Estimated Gas Usage: 429 - 524
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc7c5E7d7d5C6e49Be1CC835ac67E774e164D7811.sol:9

e: contracts\modules\

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.262938
Transaction Length: 1
Severity: High
Contract: CollateralData
Function name: setOperators(address[])
PC address: 1438
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc7c5E7d7d5C6e49Be1CC835ac67E774e164D7811.sol:3



*/



// File: contracts\modules\S

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:42.244051
Transaction Length: 1
Severity: High
Contract: CollateralPool
Function name: getWhiteList()
PC address: 1462
Estimated Gas Usage: 1425 - 2648
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc7c5E7d7d5C6e49Be1CC835ac67E774e164D7811.sol:901

function getWhiteList()public view returns (address[] memory){

        return whiteList;

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:35.849925
Transaction Length: 1
Severity: High
Contract: CollateralData
Function name: getOperator()
PC address: 1727
Estimated Gas Usage: 1249 - 2096
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc7c5E7d7d5C6e49Be1CC835ac67E774e164D7811.sol:1115

function getOperator()public view returns (address[] memory) {

        return _operatorList;

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:45.908965
Transaction Length: 1
Severity: High
Contract: CollateralData
Function name: getOperator()
PC address: 1767
Estimated Gas Usage: 1399 - 2622
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc7c5E7d7d5C6e49Be1CC835ac67E774e164D7811.sol:1115

function getOperator()public view returns (address[] memory) {

        return _operatorList;

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:08:35.417919
Transaction Length: 1
Severity: High
Contract: CollateralPool
Function name: getFeeRateAll()
PC address: 2636
Estimated Gas Usage: 4034 - 7101
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc7c5E7d7d5C6e49Be1CC835ac67E774e164D7811.sol:1263

function getFeeRateAll()public view returns (uint32[] memory){

        return FeeRates;

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:09:02.648582
Transaction Length: 1
Severity: High
Contract: CollateralPool
Function name: getFeeRateAll()
PC address: 2676
Estimated Gas Usage: 4184 - 7627
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc7c5E7d7d5C6e49Be1CC835ac67E774e164D7811.sol:1263

function getFeeRateAll()public view returns (uint32[] memory){

        return FeeRates;

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:23:44.350242
Transaction Length: 1
Severity: High
Contract: CollateralPool
Function name: getCollateralAndPremiumBalances(address,uint256,address[],uint256[],uint256[])
PC address: 3660
Estimated Gas Usage: 445 - 540
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc7c5E7d7d5C6e49Be1CC835ac67E774e164D7811.sol:9

e: contracts\modules\

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:23:49.132266
Transaction Length: 1
Severity: High
Contract: CollateralPool
Function name: getCollateralAndPremiumBalances(address,uint256,address[],uint256[],uint256[])
PC address: 3662
Estimated Gas Usage: 445 - 540
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc7c5E7d7d5C6e49Be1CC835ac67E774e164D7811.sol:3



*/



// File: contracts\modules\S

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:24:26.000177
Transaction Length: 1
Severity: High
Contract: CollateralPool
Function name: getCollateralAndPremiumBalances(address,uint256,address[],uint256[],uint256[])
PC address: 3808
Estimated Gas Usage: 778 - 3555
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc7c5E7d7d5C6e49Be1CC835ac67E774e164D7811.sol:9

e: contracts\modules\

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:24:34.517454
Transaction Length: 1
Severity: High
Contract: CollateralPool
Function name: getCollateralAndPremiumBalances(address,uint256,address[],uint256[],uint256[])
PC address: 3810
Estimated Gas Usage: 778 - 3555
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc7c5E7d7d5C6e49Be1CC835ac67E774e164D7811.sol:3



*/



// File: contracts\modules\S

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:05:56.189875
Transaction Length: 1
Severity: Low
Contract: CollateralPool
Function name: calculateFee(uint256,uint256)
PC address: 10987
Estimated Gas Usage: 760 - 855
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xc7c5E7d7d5C6e49Be1CC835ac67E774e164D7811.sol:1369

FeeRates[feeType]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:44.041452
Transaction Length: 1
Severity: High
Contract: CollateralPool
Function name: getFeeRateAll()
PC address: 11416
Estimated Gas Usage: 1715 - 2613
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc7c5E7d7d5C6e49Be1CC835ac67E774e164D7811.sol:1265

return FeeRates

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:31.341035
Transaction Length: 1
Severity: High
Contract: CollateralPool
Function name: getFeeRateAll()
PC address: 11429
Estimated Gas Usage: 1715 - 2613
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc7c5E7d7d5C6e49Be1CC835ac67E774e164D7811.sol:1265

return FeeRates

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:47.095185
Transaction Length: 1
Severity: High
Contract: CollateralPool
Function name: getFeeRateAll()
PC address: 11443
Estimated Gas Usage: 1715 - 2613
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc7c5E7d7d5C6e49Be1CC835ac67E774e164D7811.sol:1265

return FeeRates

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x2b84ac57440941a1219fb5c020f3a4ac134a736c.sol
Total states:149
2.75554
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xC6d7522545671b161D5CE9ff7586e5daCB2aA987.sol
Total states:272
72.521327
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.082632
Transaction Length: 0
Severity: High
Contract: FarmPrdzRfi96
Function name: constructor
PC address: 430
Estimated Gas Usage: 82565 - 406328
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xC6d7522545671b161D5CE9ff7586e5daCB2aA987.sol:38

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.526006
Transaction Length: 0
Severity: Low
Contract: FarmPrdzRfi96
Function name: constructor
PC address: 444
Estimated Gas Usage: 82575 - 406338
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xC6d7522545671b161D5CE9ff7586e5daCB2aA987.sol:39

assert(c >= a)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x619108560f0a3a0f2b38840b40e9456070294fa02.sol
Total states:426
0.786882
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x576773cd0b51294997ec4e4ff96c93d5e3ae9038.sol
Total states:2476
4.168774
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x3ddbbfb6f2003f670735bcd44beadd0e0056df99.sol
Total states:11074
27.368293
==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.694070
Transaction Length: 1
Severity: High
Contract: pBASEDPYLONVault
Function name: availableWithdraw(address)
PC address: 1955
Estimated Gas Usage: 1110 - 1395
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0x3ddbbfb6f2003f670735bcd44beadd0e0056df99.sol:642

_rewardCount - 1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.615425
Transaction Length: 1
Severity: Low
Contract: pBASEDPYLONVault
Function name: addressIndices(uint256)
PC address: 2467
Estimated Gas Usage: 679 - 774
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x3ddbbfb6f2003f670735bcd44beadd0e0056df99.sol:458

address[] public addressIndices

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.426803
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3244
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3ddbbfb6f2003f670735bcd44beadd0e0056df99.sol:214

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.424518
Transaction Length: 1
Severity: High
Contract: pBASEDPYLONVault
Function name: deposit(uint256)
PC address: 5816
Estimated Gas Usage: 11866 - 52386
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3ddbbfb6f2003f670735bcd44beadd0e0056df99.sol:252

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x457a04d3ec4314eeaff263502a212a35f19d59d7.sol
Total states:30
0.243891
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x8a6c1dda95a802eae1267439c91cdb2a3a7009b0.sol
Total states:426
0.667744
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x5f8a35021f1c9be802000ca141d7eeee577df7fd.sol
Total states:426
0.599027
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xcafc98f5fab7a171634c2330151fbc3c256e331a.sol
Total states:12965
85.740739
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.642324
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleAccess
Function name: interpolate(uint256,uint256,uint256,uint256,uint256)
PC address: 2339
Estimated Gas Usage: 997 - 1848
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcafc98f5fab7a171634c2330151fbc3c256e331a.sol:148

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:25.475000
Transaction Length: 1
Severity: Low
Contract: LidStaking
Function name: stakeHandlers(uint256)
PC address: 6118
Estimated Gas Usage: 790 - 885
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xcafc98f5fab7a171634c2330151fbc3c256e331a.sol:405

IStakeHandler[] public stakeHandlers

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.667074
Transaction Length: 2
Severity: High
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6315
Estimated Gas Usage: 1699 - 2124
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0xcafc98f5fab7a171634c2330151fbc3c256e331a.sol:555

stakeHandlers.length-1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:07.612326
Transaction Length: 2
Severity: Low
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6326
Estimated Gas Usage: 1709 - 2134
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xcafc98f5fab7a171634c2330151fbc3c256e331a.sol:555

stakeHandlers[stakeHandlers.length-1]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.430408
Transaction Length: 1
Severity: High
Contract: LidStaking
Function name: findTaxAmount(uint256,uint256)
PC address: 13348
Estimated Gas Usage: 474 - 569
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcafc98f5fab7a171634c2330151fbc3c256e331a.sol:148

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x7f784fd50a648702bc3970cbf1e9b80a9e56a4db.sol
Total states:36397
207.409461
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.047663
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1004
Estimated Gas Usage: 417 - 512
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x7f784fd50a648702bc3970cbf1e9b80a9e56a4db.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.713314
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1006
Estimated Gas Usage: 417 - 512
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x7f784fd50a648702bc3970cbf1e9b80a9e56a4db.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.764139
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1089
Estimated Gas Usage: 593 - 688
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x7f784fd50a648702bc3970cbf1e9b80a9e56a4db.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:18.763450
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1091
Estimated Gas Usage: 593 - 688
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x7f784fd50a648702bc3970cbf1e9b80a9e56a4db.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.835135
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1272
Estimated Gas Usage: 462 - 557
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x7f784fd50a648702bc3970cbf1e9b80a9e56a4db.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.506184
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1274
Estimated Gas Usage: 462 - 557
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x7f784fd50a648702bc3970cbf1e9b80a9e56a4db.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.758922
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1357
Estimated Gas Usage: 638 - 733
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x7f784fd50a648702bc3970cbf1e9b80a9e56a4db.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:17.797452
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1359
Estimated Gas Usage: 638 - 733
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x7f784fd50a648702bc3970cbf1e9b80a9e56a4db.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.131803
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleAccess
Function name: interpolate(uint256,uint256,uint256,uint256,uint256)
PC address: 2313
Estimated Gas Usage: 997 - 1848
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x7f784fd50a648702bc3970cbf1e9b80a9e56a4db.sol:162

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.797660
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeBP(uint256)
PC address: 2585
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x7f784fd50a648702bc3970cbf1e9b80a9e56a4db.sol:784

uint[] public bonusRangeBP

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.393330
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3783
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x7f784fd50a648702bc3970cbf1e9b80a9e56a4db.sol:1266

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:03.818672
Transaction Length: 2
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3783
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x7f784fd50a648702bc3970cbf1e9b80a9e56a4db.sol:1266

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:33.713692
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeStart(uint256)
PC address: 6017
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x7f784fd50a648702bc3970cbf1e9b80a9e56a4db.sol:783

uint[] public bonusRangeStart

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:42.436543
Transaction Length: 1
Severity: Low
Contract: LidStaking
Function name: stakeHandlers(uint256)
PC address: 6118
Estimated Gas Usage: 790 - 885
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x7f784fd50a648702bc3970cbf1e9b80a9e56a4db.sol:962

IStakeHandler[] public stakeHandlers

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.656334
Transaction Length: 2
Severity: High
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6315
Estimated Gas Usage: 1699 - 2124
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0x7f784fd50a648702bc3970cbf1e9b80a9e56a4db.sol:1112

stakeHandlers.length-1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:08.355490
Transaction Length: 2
Severity: Low
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6326
Estimated Gas Usage: 1709 - 2134
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x7f784fd50a648702bc3970cbf1e9b80a9e56a4db.sol:1112

stakeHandlers[stakeHandlers.length-1]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:30.005619
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: calculateRatePerEth(uint256,uint256,uint256)
PC address: 6866
Estimated Gas Usage: 955 - 1050
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x7f784fd50a648702bc3970cbf1e9b80a9e56a4db.sol:162

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:15.005035
Transaction Length: 1
Severity: High
Contract: LidStaking
Function name: findTaxAmount(uint256,uint256)
PC address: 13348
Estimated Gas Usage: 474 - 569
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x7f784fd50a648702bc3970cbf1e9b80a9e56a4db.sol:162

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:29.034003
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPoolBPs(uint256)
PC address: 15438
Estimated Gas Usage: 722 - 817
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x7f784fd50a648702bc3970cbf1e9b80a9e56a4db.sol:1267

uint[] public tokenPoolBPs

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xe539893109ad320b6b02f59d11f06b56aa6f8603.sol
Total states:3990
544.654151
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.233862
Transaction Length: 1
Severity: High
Contract: DtaPool
Function name: transferAmount(address,uint256,string)
PC address: 619
Estimated Gas Usage: 446 - 541
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xe539893109ad320b6b02f59d11f06b56aa6f8603.sol:3

*/

//pragma solidity >=0.5.0 <0.8.

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:48.911167
Transaction Length: 1
Severity: High
Contract: DtaPool
Function name: allDate()
PC address: 1205
Estimated Gas Usage: 1250 - 2097
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xe539893109ad320b6b02f59d11f06b56aa6f8603.sol:207

function allDate() public view returns (uint[] memory) {
        return dateList;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:59.992086
Transaction Length: 1
Severity: High
Contract: DtaPool
Function name: allDate()
PC address: 1245
Estimated Gas Usage: 1400 - 2623
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xe539893109ad320b6b02f59d11f06b56aa6f8603.sol:207

function allDate() public view returns (uint[] memory) {
        return dateList;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:25.948024
Transaction Length: 1
Severity: High
Contract: DtaPool
Function name: stake(string,uint256,address)
PC address: 1341
Estimated Gas Usage: 407 - 502
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xe539893109ad320b6b02f59d11f06b56aa6f8603.sol:3

*/

//pragma solidity >=0.5.0 <0.8.

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:58.315952
Transaction Length: 1
Severity: High
Contract: DtaPool
Function name: allUserAddress(address)
PC address: 2074
Estimated Gas Usage: 1077 - 4228
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xe539893109ad320b6b02f59d11f06b56aa6f8603.sol:210

function allUserAddress(address addr) public view returns (address[] memory) {
        address[] memory addrList = new address[](100);
        uint8 flag = 0;
        for (uint i = 0; i < pllist.length; i++) {
            address s = pllist[i];
            if(pledgors[s].superiorAddr == addr && flag < 99){
              addrList[flag] = s;
              flag += 1;
            }
        }
        return addrList;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:27.705008
Transaction Length: 1
Severity: High
Contract: DtaPool
Function name: allUserAddress(address)
PC address: 2114
Estimated Gas Usage: 1227 - 4754
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xe539893109ad320b6b02f59d11f06b56aa6f8603.sol:210

function allUserAddress(address addr) public view returns (address[] memory) {
        address[] memory addrList = new address[](100);
        uint8 flag = 0;
        for (uint i = 0; i < pllist.length; i++) {
            address s = pllist[i];
            if(pledgors[s].superiorAddr == addr && flag < 99){
              addrList[flag] = s;
              flag += 1;
            }
        }
        return addrList;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:25.202334
Transaction Length: 1
Severity: High
Contract: DtaPool
Function name: allAddress()
PC address: 2169
Estimated Gas Usage: 1316 - 2163
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xe539893109ad320b6b02f59d11f06b56aa6f8603.sol:204

function allAddress() public view returns (address[] memory) {
        return pllist;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:49.788982
Transaction Length: 1
Severity: High
Contract: DtaPool
Function name: allAddress()
PC address: 2209
Estimated Gas Usage: 1466 - 2689
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xe539893109ad320b6b02f59d11f06b56aa6f8603.sol:204

function allAddress() public view returns (address[] memory) {
        return pllist;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:15.934969
Transaction Length: 1
Severity: High
Contract: DtaPool
Function name: leave(string,uint256)
PC address: 2488
Estimated Gas Usage: 384 - 479
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xe539893109ad320b6b02f59d11f06b56aa6f8603.sol:3

*/

//pragma solidity >=0.5.0 <0.8.

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:14.469899
Transaction Length: 1
Severity: Low
Contract: DtaPool
Function name: pledgor(uint256)
PC address: 4331
Estimated Gas Usage: 746 - 841
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xe539893109ad320b6b02f59d11f06b56aa6f8603.sol:40

Pledgor[] public pledgor

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:56.392329
Transaction Length: 1
Severity: Low
Contract: DtaPool
Function name: dateList(uint256)
PC address: 7240
Estimated Gas Usage: 767 - 862
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xe539893109ad320b6b02f59d11f06b56aa6f8603.sol:57

uint[] public dateList

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:56.815838
Transaction Length: 1
Severity: Low
Contract: DtaPool
Function name: pllist(uint256)
PC address: 7275
Estimated Gas Usage: 789 - 884
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xe539893109ad320b6b02f59d11f06b56aa6f8603.sol:44

address[] public pllist

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:08.305698
Transaction Length: 1
Severity: Low
Contract: DtaPool
Function name: snapshot(uint256)
PC address: 7413
Estimated Gas Usage: 701 - 796
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xe539893109ad320b6b02f59d11f06b56aa6f8603.sol:55

Snapshot[] public snapshot

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:05:41.089191
Transaction Length: 1
Severity: Low
Contract: DtaPool
Function name: approveUser(address)
PC address: 8303
Estimated Gas Usage: 1550 - 2446
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0xe539893109ad320b6b02f59d11f06b56aa6f8603.sol:188

_token.approve(addr,21000000)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xf01e3a1f7bca16145afd03538bd7a28f249fc366.sol
Total states:475
5.904931
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x7e8d536600d2a66321f8a02ddc9763520200145d.sol
Total states:1880
91.718065
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.264742
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShip(address[])
PC address: 360
Estimated Gas Usage: 342 - 437
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x7e8d536600d2a66321f8a02ddc9763520200145d.sol:5

penzeppelin-solidity/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.580905
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShip(address[])
PC address: 362
Estimated Gas Usage: 342 - 437
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x7e8d536600d2a66321f8a02ddc9763520200145d.sol:3

*/

// File: openzeppelin-solidity/c

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:36.834508
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShipWithHowMany(address[],uint256)
PC address: 776
Estimated Gas Usage: 341 - 436
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x7e8d536600d2a66321f8a02ddc9763520200145d.sol:5

penzeppelin-solidity/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:39.627699
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShipWithHowMany(address[],uint256)
PC address: 778
Estimated Gas Usage: 341 - 436
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x7e8d536600d2a66321f8a02ddc9763520200145d.sol:3

*/

// File: openzeppelin-solidity/c

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:29.320792
Transaction Length: 1
Severity: Low
Contract: BeneficiaryOperations
Function name: allOperations(uint256)
PC address: 1715
Estimated Gas Usage: 701 - 796
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x7e8d536600d2a66321f8a02ddc9763520200145d.sol:386

bytes32[] public allOperations

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:26.701883
Transaction Length: 1
Severity: Low
Contract: BeneficiaryOperations
Function name: beneficiaries(uint256)
PC address: 4636
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x7e8d536600d2a66321f8a02ddc9763520200145d.sol:385

address[] public beneficiaries

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x26018c89851f49cbb75dad8a98c91bcae54e7106.sol
Total states:34465
241.552748
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xcd73e07b6ce1f37138226d45c5237d37e2fd214f.sol
Total states:1371
44.452857
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.339918
Transaction Length: 1
Severity: High
Contract: Referrers
Function name: removeReferrers(address[])
PC address: 291
Estimated Gas Usage: 340 - 435
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcd73e07b6ce1f37138226d45c5237d37e2fd214f.sol:9

e: @openzeppelin/cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.095446
Transaction Length: 1
Severity: High
Contract: Referrers
Function name: removeReferrers(address[])
PC address: 293
Estimated Gas Usage: 340 - 435
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcd73e07b6ce1f37138226d45c5237d37e2fd214f.sol:3



*/



// File: @openzeppelin/contr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:14.792965
Transaction Length: 1
Severity: High
Contract: Referrers
Function name: addReferrers(address[])
PC address: 475
Estimated Gas Usage: 362 - 457
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcd73e07b6ce1f37138226d45c5237d37e2fd214f.sol:9

e: @openzeppelin/cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:17.738244
Transaction Length: 1
Severity: High
Contract: Referrers
Function name: addReferrers(address[])
PC address: 477
Estimated Gas Usage: 362 - 457
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcd73e07b6ce1f37138226d45c5237d37e2fd214f.sol:3



*/



// File: @openzeppelin/contr

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x7ebDE181513CF2e24DF9e179cfceF4Ca9862f295.sol
Total states:4267
145.586813
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.661787
Transaction Length: 1
Severity: High
Contract: HCurve
Function name: addLiquidity(address,address,uint256[],uint256)
PC address: 862
Estimated Gas Usage: 382 - 477
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x7ebDE181513CF2e24DF9e179cfceF4Ca9862f295.sol:5

ocalhost/contracts/ha

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.620247
Transaction Length: 1
Severity: High
Contract: HCurve
Function name: addLiquidity(address,address,uint256[],uint256)
PC address: 864
Estimated Gas Usage: 382 - 477
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x7ebDE181513CF2e24DF9e179cfceF4Ca9862f295.sol:3

*/

// File: localhost/contracts/han

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:15.009215
Transaction Length: 1
Severity: High
Contract: HCurve
Function name: addLiquidityZap(address,uint256[],uint256)
PC address: 1035
Estimated Gas Usage: 393 - 488
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x7ebDE181513CF2e24DF9e179cfceF4Ca9862f295.sol:5

ocalhost/contracts/ha

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:19.978408
Transaction Length: 1
Severity: High
Contract: HCurve
Function name: addLiquidityZap(address,uint256[],uint256)
PC address: 1037
Estimated Gas Usage: 393 - 488
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x7ebDE181513CF2e24DF9e179cfceF4Ca9862f295.sol:3

*/

// File: localhost/contracts/han

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:09.516708
Transaction Length: 1
Severity: High
Contract: HCurve
Function name: swap(address,address,uint256,uint256,uint256[],uint256)
PC address: 1250
Estimated Gas Usage: 502 - 597
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x7ebDE181513CF2e24DF9e179cfceF4Ca9862f295.sol:5

ocalhost/contracts/ha

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:14.162272
Transaction Length: 1
Severity: High
Contract: HCurve
Function name: swap(address,address,uint256,uint256,uint256[],uint256)
PC address: 1252
Estimated Gas Usage: 502 - 597
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x7ebDE181513CF2e24DF9e179cfceF4Ca9862f295.sol:3

*/

// File: localhost/contracts/han

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x7b63771fdc7ae30bad88b84cf902161ef3c39f80.sol
Total states:3620
5.795703
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xe9a5a5efcc2115d5b95d8b871b5f4361e614866f.sol
Total states:654
0.540231
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x40941b4ac3bb204c4dfd37cd5124ed7d4dbe5228.sol
Total states:426
0.757624
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xeb02a1b9981b771dbf53500a9ba9bc01469452c3.sol
Total states:77
3.100146
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xcd0957127d271d77bd0476d9e97873378eb14c44.sol
Total states:3786
164.614519
==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:00.870860
Transaction Length: 1
Severity: Medium
Contract: MerkleTreeWithHistory
Function name: hashLeftRight(uint256,uint256)
PC address: 582
Estimated Gas Usage: 3995 - 74061
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 1428
Offset: 1643
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../new/0xcd0957127d271d77bd0476d9e97873378eb14c44.sol:131

function hashLeftRight(uint256 left, uint256 right) public pure returns (uint256 mimc_hash) {
    uint256 k = 21888242871839275222246405745257275088548364400416034343698204186575808495617;
    uint256 R = 0;
    uint256 C = 0;

    R = addmod(R, left, k);
    (R, C) = MiMC.MiMCSponge(R, C, 0);

    R = addmod(R, right, k);
    (R, C) = MiMC.MiMCSponge(R, C, 0);

    mimc_hash = R;
  }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.421559
Transaction Length: 1
Severity: High
Contract: MerkleTreeWithHistory
Function name: initialize(uint256,uint256,uint256[],uint256)
PC address: 756
Estimated Gas Usage: 416 - 511
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcd0957127d271d77bd0476d9e97873378eb14c44.sol:6

88P                  

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.977637
Transaction Length: 1
Severity: High
Contract: MerkleTreeWithHistory
Function name: initialize(uint256,uint256,uint256[],uint256)
PC address: 758
Estimated Gas Usage: 416 - 511
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcd0957127d271d77bd0476d9e97873378eb14c44.sol:3

*/

/*
* d888888P                   

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.613766
Transaction Length: 1
Severity: High
Contract: Mixer
Function name: migrateState(uint256[],uint256[])
PC address: 1082
Estimated Gas Usage: 452 - 547
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcd0957127d271d77bd0476d9e97873378eb14c44.sol:6

88P                  

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.427662
Transaction Length: 1
Severity: High
Contract: Mixer
Function name: migrateState(uint256[],uint256[])
PC address: 1084
Estimated Gas Usage: 452 - 547
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcd0957127d271d77bd0476d9e97873378eb14c44.sol:3

*/

/*
* d888888P                   

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.190139
Transaction Length: 1
Severity: High
Contract: Mixer
Function name: migrateState(uint256[],uint256[])
PC address: 1167
Estimated Gas Usage: 628 - 723
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcd0957127d271d77bd0476d9e97873378eb14c44.sol:6

88P                  

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:27.082376
Transaction Length: 1
Severity: High
Contract: Mixer
Function name: migrateState(uint256[],uint256[])
PC address: 1169
Estimated Gas Usage: 628 - 723
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcd0957127d271d77bd0476d9e97873378eb14c44.sol:3

*/

/*
* d888888P                   

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:37.144868
Transaction Length: 1
Severity: High
Contract: Mixer
Function name: initialize(address,uint256,uint8,uint256,address,uint256[],uint256)
PC address: 1506
Estimated Gas Usage: 516 - 611
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcd0957127d271d77bd0476d9e97873378eb14c44.sol:6

88P                  

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:41.631436
Transaction Length: 1
Severity: High
Contract: Mixer
Function name: initialize(address,uint256,uint8,uint256,address,uint256[],uint256)
PC address: 1508
Estimated Gas Usage: 516 - 611
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcd0957127d271d77bd0476d9e97873378eb14c44.sol:3

*/

/*
* d888888P                   

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:04.369022
Transaction Length: 1
Severity: High
Contract: Mixer
Function name: zeros()
PC address: 1757
Estimated Gas Usage: 1272 - 2119
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcd0957127d271d77bd0476d9e97873378eb14c44.sol:218

function zeros() public view returns(uint256[] memory) {
    return _zeros;
  }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:13.149666
Transaction Length: 1
Severity: High
Contract: Mixer
Function name: zeros()
PC address: 1797
Estimated Gas Usage: 1422 - 2645
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcd0957127d271d77bd0476d9e97873378eb14c44.sol:218

function zeros() public view returns(uint256[] memory) {
    return _zeros;
  }

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:37.215746
Transaction Length: 1
Severity: Low
Contract: MerkleTreeWithHistory
Function name: isKnownRoot(uint256)
PC address: 2427
Estimated Gas Usage: 1188 - 1283
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xcd0957127d271d77bd0476d9e97873378eb14c44.sol:180

_roots[i]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:41.763069
Transaction Length: 1
Severity: Low
Contract: MerkleTreeWithHistory
Function name: getLastRoot()
PC address: 2577
Estimated Gas Usage: 1065 - 1160
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xcd0957127d271d77bd0476d9e97873378eb14c44.sol:207

_roots[current_root]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:22.386489
Transaction Length: 1
Severity: High
Contract: MerkleTreeWithHistory
Function name: initialize(uint256,uint256,uint256[],uint256)
PC address: 2640
Estimated Gas Usage: 35003 - 161970
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcd0957127d271d77bd0476d9e97873378eb14c44.sol:101

contract MerkleTreeWithHistory is Initializable {
  uint256 public levels;

  uint8 constant ROOT_HISTORY_SIZE = 100;
  uint256[] private _roots;
  uint256 public current_root = 0;

  uint256[] private _filled_subtrees;
  uint256[] private _zeros;

  uint32 public next_index = 0;

  function initialize(
    uint256 tree_levels,
    uint256 zero_value,
    uint256[] memory filled_subtrees,
    uint256 lastRoot
  ) initializer public {
    levels = tree_levels;
    _zeros.push(zero_value);

    for (uint8 i = 1; i < levels; i++) {
      _zeros.push(hashLeftRight(_zeros[i-1], _zeros[i-1]));
    }

    _roots = new uint256[](ROOT_HISTORY_SIZE);
    _filled_subtrees = filled_subtrees;
    _roots[0] = lastRoot;
  }

  function hashLeftRight(uint256 left, uint256 right) public pure returns (uint256 mimc_hash) {
    uint256 k = 21888242871839275222246405745257275088548364400416034343698204186575808495617;
    uint256 R = 0;
    uint256 C = 0;

    R = addmod(R, left, k);
    (R, C) = MiMC.MiMCSponge(R, C, 0);

    R = addmod(R, right, k);
    (R, C) = MiMC.MiMCSponge(R, C, 0);

    mimc_hash = R;
  }

  function _insert(uint256 leaf) internal {
    uint32 current_index = next_index;
    require(current_index != 2**(levels - 1), "Merkle tree is full");
    next_index += 1;
    uint256 current_level_hash = leaf;
    uint256 left;
    uint256 right;

    for (uint256 i = 0; i < levels; i++) {
      if (current_index % 2 == 0) {
        left = current_level_hash;
        right = _zeros[i];

        _filled_subtrees[i] = current_level_hash;
      } else {
        left = _filled_subtrees[i];
        right = current_level_hash;
      }

      current_level_hash = hashLeftRight(left, right);

      current_index /= 2;
    }

    current_root = (current_root + 1) % ROOT_HISTORY_SIZE;
    _roots[current_root] = current_level_hash;
  }

  function isKnownRoot(uint256 root) public view returns(bool) {
    if (root == 0) {
      return false;
    }
    // search most recent first
    uint256 i;
    for(i = current_root; i < 2**256 - 1; i--) {
      if (root == _roots[i]) {
        return true;
      }
    }

    // process the rest of roots
    for(i = ROOT_HISTORY_SIZE - 1; i > current_root; i--) {
      if (root == _roots[i]) {
        return true;
      }
    }
    return false;

    // or we can do that in other way
    //   uint256 i = _current_root;
    //   do {
    //       if (root == _roots[i]) {
    //           return true;
    //       }
    //       if (i == 0) {
    //           i = ROOT_HISTORY_SIZE;
    //       }
    //       i--;
    //   } while (i != _current_root);
  }

  function getLastRoot() public view returns(uint256) {
    return _roots[current_root];
  }

  function roots() public view returns(uint256[] memory) {
    return _roots;
  }

  function filled_subtrees() public view returns(uint256[] memory) {
    return _filled_subtrees;
  }

  function zeros() public view returns(uint256[] memory) {
    return _zeros;
  }
}

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:20.379721
Transaction Length: 1
Severity: High
Contract: MerkleTreeWithHistory
Function name: initialize(uint256,uint256,uint256[],uint256)
PC address: 2642
Estimated Gas Usage: 35003 - 161970
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcd0957127d271d77bd0476d9e97873378eb14c44.sol:101

contract MerkleTreeWithHistory is Initializable {
  uint256 public levels;

  uint8 constant ROOT_HISTORY_SIZE = 100;
  uint256[] private _roots;
  uint256 public current_root = 0;

  uint256[] private _filled_subtrees;
  uint256[] private _zeros;

  uint32 public next_index = 0;

  function initialize(
    uint256 tree_levels,
    uint256 zero_value,
    uint256[] memory filled_subtrees,
    uint256 lastRoot
  ) initializer public {
    levels = tree_levels;
    _zeros.push(zero_value);

    for (uint8 i = 1; i < levels; i++) {
      _zeros.push(hashLeftRight(_zeros[i-1], _zeros[i-1]));
    }

    _roots = new uint256[](ROOT_HISTORY_SIZE);
    _filled_subtrees = filled_subtrees;
    _roots[0] = lastRoot;
  }

  function hashLeftRight(uint256 left, uint256 right) public pure returns (uint256 mimc_hash) {
    uint256 k = 21888242871839275222246405745257275088548364400416034343698204186575808495617;
    uint256 R = 0;
    uint256 C = 0;

    R = addmod(R, left, k);
    (R, C) = MiMC.MiMCSponge(R, C, 0);

    R = addmod(R, right, k);
    (R, C) = MiMC.MiMCSponge(R, C, 0);

    mimc_hash = R;
  }

  function _insert(uint256 leaf) internal {
    uint32 current_index = next_index;
    require(current_index != 2**(levels - 1), "Merkle tree is full");
    next_index += 1;
    uint256 current_level_hash = leaf;
    uint256 left;
    uint256 right;

    for (uint256 i = 0; i < levels; i++) {
      if (current_index % 2 == 0) {
        left = current_level_hash;
        right = _zeros[i];

        _filled_subtrees[i] = current_level_hash;
      } else {
        left = _filled_subtrees[i];
        right = current_level_hash;
      }

      current_level_hash = hashLeftRight(left, right);

      current_index /= 2;
    }

    current_root = (current_root + 1) % ROOT_HISTORY_SIZE;
    _roots[current_root] = current_level_hash;
  }

  function isKnownRoot(uint256 root) public view returns(bool) {
    if (root == 0) {
      return false;
    }
    // search most recent first
    uint256 i;
    for(i = current_root; i < 2**256 - 1; i--) {
      if (root == _roots[i]) {
        return true;
      }
    }

    // process the rest of roots
    for(i = ROOT_HISTORY_SIZE - 1; i > current_root; i--) {
      if (root == _roots[i]) {
        return true;
      }
    }
    return false;

    // or we can do that in other way
    //   uint256 i = _current_root;
    //   do {
    //       if (root == _roots[i]) {
    //           return true;
    //       }
    //       if (i == 0) {
    //           i = ROOT_HISTORY_SIZE;
    //       }
    //       i--;
    //   } while (i != _current_root);
  }

  function getLastRoot() public view returns(uint256) {
    return _roots[current_root];
  }

  function roots() public view returns(uint256[] memory) {
    return _roots;
  }

  function filled_subtrees() public view returns(uint256[] memory) {
    return _filled_subtrees;
  }

  function zeros() public view returns(uint256[] memory) {
    return _zeros;
  }
}

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x0b635CD35fC3AF8eA29f84155FA03dC9AD0Bab27.sol
Total states:3409
243.95485
==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:30.431546
Transaction Length: 1
Severity: High
Contract: Math
Function name: safeSub(uint256,uint256)
PC address: 820
Estimated Gas Usage: 309 - 404
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0x0b635CD35fC3AF8eA29f84155FA03dC9AD0Bab27.sol:109

x - y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:31.272342
Transaction Length: 1
Severity: High
Contract: Memberlist
Function name: updateMembers(address[],uint256)
PC address: 827
Estimated Gas Usage: 407 - 502
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x0b635CD35fC3AF8eA29f84155FA03dC9AD0Bab27.sol:5

d using https://dapp.

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:33.993648
Transaction Length: 1
Severity: High
Contract: Memberlist
Function name: updateMembers(address[],uint256)
PC address: 829
Estimated Gas Usage: 407 - 502
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x0b635CD35fC3AF8eA29f84155FA03dC9AD0Bab27.sol:3

*/

// Verified using https://dapp.t

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:32.490083
Transaction Length: 1
Severity: Low
Contract: Math
Function name: safeDiv(uint256,uint256)
PC address: 959
Estimated Gas Usage: 324 - 419
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x0b635CD35fC3AF8eA29f84155FA03dC9AD0Bab27.sol:117

x / y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.054189
Transaction Length: 1
Severity: High
Contract: Math
Function name: rdiv(uint256,uint256)
PC address: 985
Estimated Gas Usage: 382 - 477
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x0b635CD35fC3AF8eA29f84155FA03dC9AD0Bab27.sol:113

x * y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:20.042929
Transaction Length: 1
Severity: High
Contract: Math
Function name: rdiv(uint256,uint256)
PC address: 1128
Estimated Gas Usage: 496 - 591
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x0b635CD35fC3AF8eA29f84155FA03dC9AD0Bab27.sol:105

x + y

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:40.602019
Transaction Length: 1
Severity: High
Contract: Memberlist
Function name: safeSub(uint256,uint256)
PC address: 2809
Estimated Gas Usage: 332 - 427
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0x0b635CD35fC3AF8eA29f84155FA03dC9AD0Bab27.sol:109

x - y

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:54.870566
Transaction Length: 1
Severity: Low
Contract: Memberlist
Function name: safeDiv(uint256,uint256)
PC address: 2948
Estimated Gas Usage: 347 - 442
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x0b635CD35fC3AF8eA29f84155FA03dC9AD0Bab27.sol:117

x / y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.315775
Transaction Length: 1
Severity: High
Contract: Memberlist
Function name: rdiv(uint256,uint256)
PC address: 2998
Estimated Gas Usage: 450 - 545
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x0b635CD35fC3AF8eA29f84155FA03dC9AD0Bab27.sol:113

x * y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.501113
Transaction Length: 1
Severity: High
Contract: Memberlist
Function name: rdiv(uint256,uint256)
PC address: 3141
Estimated Gas Usage: 564 - 659
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x0b635CD35fC3AF8eA29f84155FA03dC9AD0Bab27.sol:105

x + y

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol
Total states:21393
1077.966171
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.416681
Transaction Length: 1
Severity: High
Contract: Module
Function name: getModuleAddress(string)
PC address: 416
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.670679
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 511
Estimated Gas Usage: 364 - 459
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.105389
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 513
Estimated Gas Usage: 364 - 459
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.031196
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 596
Estimated Gas Usage: 540 - 635
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:18.089723
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 598
Estimated Gas Usage: 540 - 635
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:31.230080
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 681
Estimated Gas Usage: 716 - 811
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:52.585932
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 683
Estimated Gas Usage: 716 - 811
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:11.585252
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 766
Estimated Gas Usage: 892 - 987
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:42.033568
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 768
Estimated Gas Usage: 892 - 987
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.748726
Transaction Length: 1
Severity: High
Contract: CompoundProtocol
Function name: handleDeposit(address[],uint256[])
PC address: 1413
Estimated Gas Usage: 430 - 525
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.379169
Transaction Length: 1
Severity: High
Contract: CompoundProtocol_USDC
Function name: handleDeposit(address[],uint256[])
PC address: 1413
Estimated Gas Usage: 430 - 525
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.250601
Transaction Length: 1
Severity: High
Contract: CompoundProtocol
Function name: handleDeposit(address[],uint256[])
PC address: 1415
Estimated Gas Usage: 430 - 525
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.064876
Transaction Length: 1
Severity: High
Contract: CompoundProtocol_USDC
Function name: handleDeposit(address[],uint256[])
PC address: 1415
Estimated Gas Usage: 430 - 525
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:13.502379
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: getModuleAddress(string)
PC address: 1453
Estimated Gas Usage: 451 - 546
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:15.968291
Transaction Length: 1
Severity: High
Contract: CompoundProtocol
Function name: handleDeposit(address[],uint256[])
PC address: 1561
Estimated Gas Usage: 763 - 3540
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:32.523651
Transaction Length: 1
Severity: High
Contract: CompoundProtocol_USDC
Function name: handleDeposit(address[],uint256[])
PC address: 1561
Estimated Gas Usage: 763 - 3540
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:28.338768
Transaction Length: 1
Severity: High
Contract: CompoundProtocol
Function name: handleDeposit(address[],uint256[])
PC address: 1563
Estimated Gas Usage: 763 - 3540
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:46.341223
Transaction Length: 1
Severity: High
Contract: CompoundProtocol_USDC
Function name: handleDeposit(address[],uint256[])
PC address: 1563
Estimated Gas Usage: 763 - 3540
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:48.863687
Transaction Length: 1
Severity: High
Contract: CompoundProtocol
Function name: getModuleAddress(string)
PC address: 1845
Estimated Gas Usage: 407 - 502
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:03.156918
Transaction Length: 1
Severity: High
Contract: CompoundProtocol_USDC
Function name: getModuleAddress(string)
PC address: 1845
Estimated Gas Usage: 407 - 502
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:14.329358
Transaction Length: 1
Severity: High
Contract: CompoundProtocol
Function name: withdraw(address,uint256[])
PC address: 2136
Estimated Gas Usage: 484 - 579
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:29.081970
Transaction Length: 1
Severity: High
Contract: CompoundProtocol_USDC
Function name: withdraw(address,uint256[])
PC address: 2136
Estimated Gas Usage: 484 - 579
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:17.927702
Transaction Length: 1
Severity: High
Contract: CompoundProtocol
Function name: withdraw(address,uint256[])
PC address: 2138
Estimated Gas Usage: 484 - 579
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:32.801416
Transaction Length: 1
Severity: High
Contract: CompoundProtocol_USDC
Function name: withdraw(address,uint256[])
PC address: 2138
Estimated Gas Usage: 484 - 579
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:16.555744
Transaction Length: 1
Severity: High
Contract: CompoundProtocol
Function name: supportedTokens()
PC address: 2569
Estimated Gas Usage: 988 - 4657
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol:1402

function supportedTokens() public view returns(address[] memory){
        address[] memory tokens = new address[](1);
        tokens[0] = address(baseToken);
        return tokens;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:29.429816
Transaction Length: 1
Severity: High
Contract: CompoundProtocol_USDC
Function name: supportedTokens()
PC address: 2569
Estimated Gas Usage: 988 - 4657
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol:1402

function supportedTokens() public view returns(address[] memory){
        address[] memory tokens = new address[](1);
        tokens[0] = address(baseToken);
        return tokens;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:39.481691
Transaction Length: 1
Severity: High
Contract: CompoundProtocol
Function name: supportedTokens()
PC address: 2609
Estimated Gas Usage: 1138 - 5183
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol:1402

function supportedTokens() public view returns(address[] memory){
        address[] memory tokens = new address[](1);
        tokens[0] = address(baseToken);
        return tokens;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:54.878350
Transaction Length: 1
Severity: High
Contract: CompoundProtocol_USDC
Function name: supportedTokens()
PC address: 2609
Estimated Gas Usage: 1138 - 5183
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol:1402

function supportedTokens() public view returns(address[] memory){
        address[] memory tokens = new address[](1);
        tokens[0] = address(baseToken);
        return tokens;
    }

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:55.809416
Transaction Length: 1
Severity: Low
Contract: CompoundProtocol
Function name: balanceOf(address)
PC address: 6632
Estimated Gas Usage: 2032 - 3163
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol:1379

cToken.balanceOfUnderlying(address(this))

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:01:17.158359
Transaction Length: 1
Severity: Low
Contract: CompoundProtocol_USDC
Function name: balanceOf(address)
PC address: 6632
Estimated Gas Usage: 2032 - 3163
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol:1379

cToken.balanceOfUnderlying(address(this))

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.765374
Transaction Length: 1
Severity: High
Contract: CompoundProtocol_USDC
Function name: normalizedBalance()
PC address: 16386
Estimated Gas Usage: 5661 - 43288
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol:294

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.692321
Transaction Length: 1
Severity: High
Contract: CompoundProtocol
Function name: normalizedBalance()
PC address: 16715
Estimated Gas Usage: 5661 - 43288
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol:294

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x2eb349a47633fd8c951be525dcbfefd9ca982703.sol
Total states:149
2.652848
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x5c99f74586D71d2C1063172CBd4aB317A31848F8.sol
Total states:18680
147.162807
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.827340
Transaction Length: 1
Severity: High
Contract: bestyearn
Function name: bulkTransfer(address[],uint256[])
PC address: 757
Estimated Gas Usage: 408 - 503
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5c99f74586D71d2C1063172CBd4aB317A31848F8.sol:5

olidity ^0.5.13;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.768219
Transaction Length: 1
Severity: High
Contract: bestyearn
Function name: bulkTransfer(address[],uint256[])
PC address: 759
Estimated Gas Usage: 408 - 503
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5c99f74586D71d2C1063172CBd4aB317A31848F8.sol:3

*/

//pragma solidity ^0.5.13;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.993617
Transaction Length: 1
Severity: High
Contract: bestyearn
Function name: bulkTransfer(address[],uint256[])
PC address: 842
Estimated Gas Usage: 584 - 679
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5c99f74586D71d2C1063172CBd4aB317A31848F8.sol:5

olidity ^0.5.13;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:24.041929
Transaction Length: 1
Severity: High
Contract: bestyearn
Function name: bulkTransfer(address[],uint256[])
PC address: 844
Estimated Gas Usage: 584 - 679
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5c99f74586D71d2C1063172CBd4aB317A31848F8.sol:3

*/

//pragma solidity ^0.5.13;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:36.778262
Transaction Length: 1
Severity: High
Contract: bestyearn
Function name: transferAndCall(address,uint256,bytes)
PC address: 1417
Estimated Gas Usage: 511 - 606
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5c99f74586D71d2C1063172CBd4aB317A31848F8.sol:3

*/

//pragma solidity ^0.5.13;
prag

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:45.059908
Transaction Length: 1
Severity: Low
Contract: bestyearn
Function name: unfreeze(uint256)
PC address: 6428
Estimated Gas Usage: 1375 - 1660
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x5c99f74586D71d2C1063172CBd4aB317A31848F8.sol:212

_burnedAmount * FLOAT_SCALAR / info.totalFrozen

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:27.754041
Transaction Length: 2
Severity: Low
Contract: bestyearn
Function name: unfreeze(uint256)
PC address: 6428
Estimated Gas Usage: 1375 - 1660
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x5c99f74586D71d2C1063172CBd4aB317A31848F8.sol:212

_burnedAmount * FLOAT_SCALAR / info.totalFrozen

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x269081c519c270a5e57f06e22c1c9e050d395d8e.sol
Total states:16226
2072.268353
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.361454
Transaction Length: 1
Severity: High
Contract: GameBalance
Function name: stringToUint(string)
PC address: 957
Estimated Gas Usage: 431 - 526
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x269081c519c270a5e57f06e22c1c9e050d395d8e.sol:3

*/

// File: @chainlink/contracts/s

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:33.524369
Transaction Length: 1
Severity: High
Contract: GameBalance
Function name: usernameAsHash(string)
PC address: 1322
Estimated Gas Usage: 430 - 525
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x269081c519c270a5e57f06e22c1c9e050d395d8e.sol:3

*/

// File: @chainlink/contracts/s

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:08:16.115877
Transaction Length: 1
Severity: High
Contract: GameBalance
Function name: hashToUser(bytes32)
PC address: 2104
Estimated Gas Usage: 1594 - 2819
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x269081c519c270a5e57f06e22c1c9e050d395d8e.sol:2158

mapping(bytes32 => string) public hashToUser

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:10:47.757017
Transaction Length: 1
Severity: High
Contract: GameBalance
Function name: receiveApproval(address,uint256,address,bytes)
PC address: 2445
Estimated Gas Usage: 499 - 594
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x269081c519c270a5e57f06e22c1c9e050d395d8e.sol:3

*/

// File: @chainlink/contracts/s

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:12:00.012050
Transaction Length: 1
Severity: High
Contract: GameBalance
Function name: receiveApproval(address,uint256,address,bytes)
PC address: 2487
Estimated Gas Usage: 1312 - 4605
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x269081c519c270a5e57f06e22c1c9e050d395d8e.sol:2498

function receiveApproval(address from, uint256 tokens, address token, bytes memory data) notPaused public payable returns (bool) {
        string memory username;

        (username) = abi.decode(data, (string));

        deposit(from, tokens, username);

        return true;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:13:04.886759
Transaction Length: 1
Severity: High
Contract: GameBalance
Function name: changeJobId(string)
PC address: 2748
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x269081c519c270a5e57f06e22c1c9e050d395d8e.sol:3

*/

// File: @chainlink/contracts/s

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:17:16.900187
Transaction Length: 1
Severity: High
Contract: GameBalance
Function name: usernameJobId()
PC address: 3336
Estimated Gas Usage: 483 - 1613
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x269081c519c270a5e57f06e22c1c9e050d395d8e.sol:2145

string public constant usernameJobId = "3736cccf3f444c12a78583fe4bb8f7dd"

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:21:43.894371
Transaction Length: 1
Severity: High
Contract: GameBalance
Function name: batchWithdraw(bytes)
PC address: 3525
Estimated Gas Usage: 406 - 501
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x269081c519c270a5e57f06e22c1c9e050d395d8e.sol:3

*/

// File: @chainlink/contracts/s

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:02.002883
Transaction Length: 2
Severity: High
Contract: GameBalance
Function name: withdraw(uint256)
PC address: 5339
Estimated Gas Usage: 1287 - 1712
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0x269081c519c270a5e57f06e22c1c9e050d395d8e.sol:2280

withdrawableEth - 500000000000000

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:04.379738
Transaction Length: 2
Severity: High
Contract: GameBalance
Function name: withdraw(uint256)
PC address: 5673
Estimated Gas Usage: 1729 - 2154
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0x269081c519c270a5e57f06e22c1c9e050d395d8e.sol:2263

withdrawableEth -= amount

--------------------

==== Unprotected Ether Withdrawal ====
SWC ID: 105
FOUND TIME: 0:00:11.876457
Transaction Length: 2
Severity: High
Contract: GameBalance
Function name: withdraw(uint256)
PC address: 5740
Estimated Gas Usage: 7281 - 28222
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: ../../new/0x269081c519c270a5e57f06e22c1c9e050d395d8e.sol:2267

_owner.transfer(amount)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:11:56.050546
Transaction Length: 1
Severity: High
Contract: GameBalance
Function name: hashToUser(bytes32)
PC address: 9731
Estimated Gas Usage: 1312 - 4605
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x269081c519c270a5e57f06e22c1c9e050d395d8e.sol:2158

mapping(bytes32 => string) public hashToUser

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:11:45.309964
Transaction Length: 1
Severity: High
Contract: GameBalance
Function name: receiveApproval(address,uint256,address,bytes)
PC address: 10023
Estimated Gas Usage: 1312 - 4605
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x269081c519c270a5e57f06e22c1c9e050d395d8e.sol:2501

abi.decode(data, (string))

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:12:07.772461
Transaction Length: 1
Severity: High
Contract: GameBalance
Function name: receiveApproval(address,uint256,address,bytes)
PC address: 10041
Estimated Gas Usage: 1312 - 4605
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x269081c519c270a5e57f06e22c1c9e050d395d8e.sol:2501

abi.decode(data, (string))

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:11:32.502113
Transaction Length: 1
Severity: High
Contract: GameBalance
Function name: receiveApproval(address,uint256,address,bytes)
PC address: 10066
Estimated Gas Usage: 1312 - 4605
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x269081c519c270a5e57f06e22c1c9e050d395d8e.sol:2


*/

// File: @chainl

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:12:18.306301
Transaction Length: 1
Severity: High
Contract: GameBalance
Function name: receiveApproval(address,uint256,address,bytes)
PC address: 10072
Estimated Gas Usage: 1312 - 4605
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x269081c519c270a5e57f06e22c1c9e050d395d8e.sol:5

uffer.sol

//p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:12:35.500336
Transaction Length: 1
Severity: High
Contract: GameBalance
Function name: receiveApproval(address,uint256,address,bytes)
PC address: 10094
Estimated Gas Usage: 1370 - 4756
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x269081c519c270a5e57f06e22c1c9e050d395d8e.sol:13

nd expandable, and provide a variety of pri

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x5e518287ee909c285ce3564ad5229610b5fdd26d.sol
Total states:3259
4.025629
==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.211312
Transaction Length: 1
Severity: High
Contract: UniswapZAP
Function name: fallback
PC address: 1664
Estimated Gas Usage: 5189 - 75208
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0x5e518287ee909c285ce3564ad5229610b5fdd26d.sol:305

nextEmission() - now

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xc66bfe7a84adfde612d55aab0be7fe454b8e77e1.sol
Total states:1968
6.171527
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.498445
Transaction Length: 1
Severity: Low
Contract: BValveStaking
Function name: poolList(uint256)
PC address: 1825
Estimated Gas Usage: 702 - 797
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xc66bfe7a84adfde612d55aab0be7fe454b8e77e1.sol:1070

PoolList[] public poolList

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.537334
Transaction Length: 1
Severity: Low
Contract: BValveStaking
Function name: pendingRewardsFromPool(uint256,address)
PC address: 6256
Estimated Gas Usage: 958 - 2096
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xc66bfe7a84adfde612d55aab0be7fe454b8e77e1.sol:1248

poolList[_pid]

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x1280e96618349ef01571ee148d850672d72f3e51.sol
Total states:150
37.463263
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.376626
Transaction Length: 1
Severity: High
Contract: MStableStrat
Function name: setAllowances(address,address[],bool)
PC address: 480
Estimated Gas Usage: 375 - 470
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x1280e96618349ef01571ee148d850672d72f3e51.sol:5

ontracts/vaults/IStra

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.685905
Transaction Length: 1
Severity: High
Contract: MStableStrat
Function name: setAllowances(address,address[],bool)
PC address: 482
Estimated Gas Usage: 375 - 470
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x1280e96618349ef01571ee148d850672d72f3e51.sol:3

*/

// File: contracts/vaults/IStrat

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:13.872285
Transaction Length: 1
Severity: Low
Contract: MStableStrat
Function name: exchangeRewardForWant(bool)
PC address: 3392
Estimated Gas Usage: 5172 - 41905
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0x1280e96618349ef01571ee148d850672d72f3e51.sol:873

balProxy.smartSwapExactIn(
            mta,
            musd,
            exchangeAll ? swapAmt : swapAmt.mul(8000).div(DENOM),
            0,
            numPools
        )

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:15.646854
Transaction Length: 1
Severity: Low
Contract: MStableStrat
Function name: exchangeRewardForWant(bool)
PC address: 3789
Estimated Gas Usage: 8631 - 81296
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0x1280e96618349ef01571ee148d850672d72f3e51.sol:882

balProxy.smartSwapExactIn(
            musd,
            want,
            swapAmt,
            0,
            numPools
        )

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:11.443838
Transaction Length: 1
Severity: Low
Contract: MStableStrat
Function name: exitMGov()
PC address: 4064
Estimated Gas Usage: 1425 - 2131
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0x1280e96618349ef01571ee148d850672d72f3e51.sol:850

mtaGov.withdraw()

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:12.255895
Transaction Length: 1
Severity: Low
Contract: MStableStrat
Function name: exitMGov()
PC address: 4361
Estimated Gas Usage: 2609 - 39052
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0x1280e96618349ef01571ee148d850672d72f3e51.sol:853

address(this).call(
            abi.encodeWithSignature(
                "exchangeRewardForWant(bool)",
                true
            )
        )

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x4e7783f24371cc073c8d943dfeb47846d34cbfc7.sol
Total states:654
0.678948
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x633992502d7c13E8f95A8B8E44f17BA17EB2Db6D.sol
Total states:5382
21.518831
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x3Dfb98C045d4f4Be168bBE60ba2eb0A3ccf8fBC3.sol
Total states:1328
74.363576
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.375280
Transaction Length: 1
Severity: High
Contract: Resolver
Function name: getPositions(string[],address)
PC address: 2579
Estimated Gas Usage: 635 - 1013
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3Dfb98C045d4f4Be168bBE60ba2eb0A3ccf8fBC3.sol:31


  function balanceOf(address 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:14.653437
Transaction Length: 1
Severity: High
Contract: Resolver
Function name: getPositions(string[],address)
PC address: 2652
Estimated Gas Usage: 635 - 1013
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3Dfb98C045d4f4Be168bBE60ba2eb0A3ccf8fBC3.sol:39

c92;
  }

  funct

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.813376
Transaction Length: 1
Severity: High
Contract: InstaCurveGaugeResolver
Function name: getPositions(string[],address)
PC address: 2677
Estimated Gas Usage: 651 - 1029
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3Dfb98C045d4f4Be168bBE60ba2eb0A3ccf8fBC3.sol:31


  function balanceOf(address 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:15.925567
Transaction Length: 1
Severity: High
Contract: InstaCurveGaugeResolver
Function name: getPositions(string[],address)
PC address: 2750
Estimated Gas Usage: 651 - 1029
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3Dfb98C045d4f4Be168bBE60ba2eb0A3ccf8fBC3.sol:39

c92;
  }

  funct

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x8209ed0259f99abd593e8cd26e6a14f224c6ccca.sol
Total states:10150
96.407184
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.325573
Transaction Length: 1
Severity: High
Contract: DMGYieldFarmingRouter
Function name: enableTokens(address[],address[])
PC address: 671
Estimated Gas Usage: 386 - 481
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x8209ed0259f99abd593e8cd26e6a14f224c6ccca.sol:5

openzeppelin/contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.975620
Transaction Length: 1
Severity: High
Contract: DMGYieldFarmingRouter
Function name: enableTokens(address[],address[])
PC address: 673
Estimated Gas Usage: 386 - 481
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x8209ed0259f99abd593e8cd26e6a14f224c6ccca.sol:3

*/

// File: @openzeppelin/contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.324087
Transaction Length: 1
Severity: High
Contract: DMGYieldFarmingRouter
Function name: enableTokens(address[],address[])
PC address: 756
Estimated Gas Usage: 562 - 657
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x8209ed0259f99abd593e8cd26e6a14f224c6ccca.sol:5

openzeppelin/contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:21.720384
Transaction Length: 1
Severity: High
Contract: DMGYieldFarmingRouter
Function name: enableTokens(address[],address[])
PC address: 758
Estimated Gas Usage: 562 - 657
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x8209ed0259f99abd593e8cd26e6a14f224c6ccca.sol:3

*/

// File: @openzeppelin/contracts

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xc491c6f0d3092c468770c23032d44ad9dff41989.sol
Total states:1037
6.083874
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:02.955001
Transaction Length: 1
Severity: Low
Contract: VestingVault
Function name: claim()
PC address: 717
Estimated Gas Usage: 7796 - 78294
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0xc491c6f0d3092c468770c23032d44ad9dff41989.sol:138

escrow.claim(vaults[0])

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:04.105068
Transaction Length: 1
Severity: Low
Contract: VestingVault
Function name: claim()
PC address: 973
Estimated Gas Usage: 10293 - 115592
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0xc491c6f0d3092c468770c23032d44ad9dff41989.sol:139

VestingStrategy(vaults[0]).withdraw(crv)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:05.147494
Transaction Length: 1
Severity: Low
Contract: VestingVault
Function name: vaults(uint256)
PC address: 1392
Estimated Gas Usage: 700 - 795
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xc491c6f0d3092c468770c23032d44ad9dff41989.sol:132

address[] public vaults = [0x8816B2Fb982281c36E6c535B9e56B7a4417e68cF,
                                0xBE197E668D13746BB92E675dEa2868FF14dA0b73,
                                0x2De055fec2b826ed4A7478CeDDBefF82C1EdFA70]

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x2e4bfa61391230013c30ded7384dd80e282859c8.sol
Total states:3568
13.910554
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.558233
Transaction Length: 1
Severity: Low
Contract: Authorizable
Function name: authorities(uint256)
PC address: 472
Estimated Gas Usage: 805 - 900
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x2e4bfa61391230013c30ded7384dd80e282859c8.sol:2356

address[] public authorities

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.433526
Transaction Length: 1
Severity: Low
Contract: ERC20BridgeProxy
Function name: authorities(uint256)
PC address: 1015
Estimated Gas Usage: 827 - 922
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x2e4bfa61391230013c30ded7384dd80e282859c8.sol:2356

address[] public authorities

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x9605373acd82d2b9d0b39e0037d2b462db38fd10.sol
Total states:10402
104.722162
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.898014
Transaction Length: 1
Severity: Low
Contract: Doubler
Function name: users(uint256)
PC address: 2361
Estimated Gas Usage: 702 - 797
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x9605373acd82d2b9d0b39e0037d2b462db38fd10.sol:198

User[] public users

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xe422c577fe8debbec1c3b1ae5774c3b259a2ee76.sol
Total states:1880
91.810207
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.280366
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShip(address[])
PC address: 360
Estimated Gas Usage: 342 - 437
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xe422c577fe8debbec1c3b1ae5774c3b259a2ee76.sol:5

penzeppelin-solidity/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.343588
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShip(address[])
PC address: 362
Estimated Gas Usage: 342 - 437
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xe422c577fe8debbec1c3b1ae5774c3b259a2ee76.sol:3

*/

// File: openzeppelin-solidity/c

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:35.004303
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShipWithHowMany(address[],uint256)
PC address: 776
Estimated Gas Usage: 341 - 436
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xe422c577fe8debbec1c3b1ae5774c3b259a2ee76.sol:5

penzeppelin-solidity/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:37.707250
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShipWithHowMany(address[],uint256)
PC address: 778
Estimated Gas Usage: 341 - 436
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xe422c577fe8debbec1c3b1ae5774c3b259a2ee76.sol:3

*/

// File: openzeppelin-solidity/c

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:27.479314
Transaction Length: 1
Severity: Low
Contract: BeneficiaryOperations
Function name: allOperations(uint256)
PC address: 1715
Estimated Gas Usage: 701 - 796
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xe422c577fe8debbec1c3b1ae5774c3b259a2ee76.sol:386

bytes32[] public allOperations

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:26.722916
Transaction Length: 1
Severity: Low
Contract: BeneficiaryOperations
Function name: beneficiaries(uint256)
PC address: 4636
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xe422c577fe8debbec1c3b1ae5774c3b259a2ee76.sol:385

address[] public beneficiaries

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x5ff99a7127fb6948c3fb9fddb2d18163f8b0629d2.sol
Total states:12855
243.899379
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.052718
Transaction Length: 1
Severity: High
Contract: Module
Function name: getModuleAddress(string)
PC address: 416
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5ff99a7127fb6948c3fb9fddb2d18163f8b0629d2.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.242408
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 511
Estimated Gas Usage: 364 - 459
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5ff99a7127fb6948c3fb9fddb2d18163f8b0629d2.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.961292
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 513
Estimated Gas Usage: 364 - 459
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5ff99a7127fb6948c3fb9fddb2d18163f8b0629d2.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.533944
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 596
Estimated Gas Usage: 540 - 635
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5ff99a7127fb6948c3fb9fddb2d18163f8b0629d2.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:16.835116
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 598
Estimated Gas Usage: 540 - 635
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5ff99a7127fb6948c3fb9fddb2d18163f8b0629d2.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:28.731515
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 681
Estimated Gas Usage: 716 - 811
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5ff99a7127fb6948c3fb9fddb2d18163f8b0629d2.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:44.799297
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 683
Estimated Gas Usage: 716 - 811
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5ff99a7127fb6948c3fb9fddb2d18163f8b0629d2.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:02.784197
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 766
Estimated Gas Usage: 892 - 987
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5ff99a7127fb6948c3fb9fddb2d18163f8b0629d2.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:25.138788
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 768
Estimated Gas Usage: 892 - 987
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5ff99a7127fb6948c3fb9fddb2d18163f8b0629d2.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:56.267281
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: getModuleAddress(string)
PC address: 1453
Estimated Gas Usage: 451 - 546
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5ff99a7127fb6948c3fb9fddb2d18163f8b0629d2.sol:3

*/

// File: @openzeppelin\contract

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x0eab6f04d173d055676e68876c22fab00ad9fe83.sol
Total states:22501
267.949311
==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.085342
Transaction Length: 1
Severity: High
Contract: Periods
Function name: getCurrentPeriod()
PC address: 2579
Estimated Gas Usage: 1102 - 1857
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0x0eab6f04d173d055676e68876c22fab00ad9fe83.sol:349

_total_periods-1

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.063445
Transaction Length: 1
Severity: High
Contract: Subscriptions
Function name: getCurrentPeriod()
PC address: 6527
Estimated Gas Usage: 1147 - 1902
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0x0eab6f04d173d055676e68876c22fab00ad9fe83.sol:349

_total_periods-1

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.305362
Transaction Length: 1
Severity: High
Contract: Cert
Function name: getCurrentPeriod()
PC address: 16501
Estimated Gas Usage: 1236 - 1991
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0x0eab6f04d173d055676e68876c22fab00ad9fe83.sol:349

_total_periods-1

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xbe0c05097932cabeeaa4773bb50ee7cf168a7de4.sol
Total states:2330
52.721121
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.815587
Transaction Length: 1
Severity: High
Contract: MultisigVault
Function name: external_call(address,uint256,bytes)
PC address: 221
Estimated Gas Usage: 356 - 451
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xbe0c05097932cabeeaa4773bb50ee7cf168a7de4.sol:3

*/

// File: contracts/IMultisigCar

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:25.387535
Transaction Length: 1
Severity: Low
Contract: MultisigVault
Function name: approve(address,address,uint256)
PC address: 1167
Estimated Gas Usage: 1687 - 2773
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0xbe0c05097932cabeeaa4773bb50ee7cf168a7de4.sol:49

multisigCarrier.approveFrom(msg.sender, destination, currencyAddress, amount)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.712273
Transaction Length: 1
Severity: High
Contract: MultisigCarrier
Function name: setVaultInfo(address,uint8,address[])
PC address: 1640
Estimated Gas Usage: 494 - 589
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xbe0c05097932cabeeaa4773bb50ee7cf168a7de4.sol:5

ontracts/IMultisigCar

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.805582
Transaction Length: 1
Severity: High
Contract: MultisigCarrier
Function name: setVaultInfo(address,uint8,address[])
PC address: 1642
Estimated Gas Usage: 494 - 589
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xbe0c05097932cabeeaa4773bb50ee7cf168a7de4.sol:3

*/

// File: contracts/IMultisigCarr

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x084314184599c71f03a1b15edb8161a1f72c01d4.sol
Total states:367
1146.733595
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.273886
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12Staging
Function name: getBalances()
PC address: 2652
Estimated Gas Usage: 549 - 737
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x084314184599c71f03a1b15edb8161a1f72c01d4.sol:5

dity 0.5.17; //

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.553333
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12Staging
Function name: getBalances()
PC address: 2655
Estimated Gas Usage: 549 - 737
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x084314184599c71f03a1b15edb8161a1f72c01d4.sol:3



//pragma solidity 0.5.17; // optimization

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:05.067592
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12Staging
Function name: getImplementation()
PC address: 8959
Estimated Gas Usage: 1889 - 36453
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x084314184599c71f03a1b15edb8161a1f72c01d4.sol:5

ns: 200, evm version: istan

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:44.867808
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12Staging
Function name: getImplementation()
PC address: 8962
Estimated Gas Usage: 1232 - 35889
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x084314184599c71f03a1b15edb8161a1f72c01d4.sol:5

mization runs: 200, evm version: istanbul
pragma so

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:48.314589
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12Staging
Function name: getImplementation()
PC address: 8975
Estimated Gas Usage: 1232 - 35889
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x084314184599c71f03a1b15edb8161a1f72c01d4.sol:7

icBatchCalls

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:52.073373
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12Staging
Function name: getImplementation()
PC address: 9075
Estimated Gas Usage: 1246 - 35996
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x084314184599c71f03a1b15edb8161a1f72c01d4.sol:1796

abi.decode(returnData, (address))

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:08.429315
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12Staging
Function name: getImplementation()
PC address: 9084
Estimated Gas Usage: 1246 - 35996
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x084314184599c71f03a1b15edb8161a1f72c01d4.sol:1796

abi.decode(returnData, (address))

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:11:41.049218
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12Staging
Function name: escape()
PC address: 13539
Estimated Gas Usage: 1889 - 36453
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x084314184599c71f03a1b15edb8161a1f72c01d4.sol:5

dity 0.5.17; //

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:11:32.857777
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12Staging
Function name: escape()
PC address: 13542
Estimated Gas Usage: 1889 - 36453
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x084314184599c71f03a1b15edb8161a1f72c01d4.sol:3



//pragma solidity 0.5.17; // optimization

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:11:36.755463
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12Staging
Function name: escape()
PC address: 13554
Estimated Gas Usage: 1889 - 36453
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x084314184599c71f03a1b15edb8161a1f72c01d4.sol:1320

_ESCAPE_HATCH_REGISTRY.getEscapeHatch()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:18.342722
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12Staging
Function name: executeActionWithAtomicBatchCalls((address,bytes)[],uint256,bytes,bytes)
PC address: 31188
Estimated Gas Usage: 722 - 1100
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x084314184599c71f03a1b15edb8161a1f72c01d4.sol:78

ns (bytes32 actionID);

  func

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:12.857663
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12Staging
Function name: executeActionWithAtomicBatchCalls((address,bytes)[],uint256,bytes,bytes)
PC address: 31947
Estimated Gas Usage: 722 - 1100
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0x084314184599c71f03a1b15edb8161a1f72c01d4.sol:248

iew returns (bytes3

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:03:12.454814
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12Staging
Function name: getImplementation()
PC address: 32169
Estimated Gas Usage: 1246 - 35996
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0x084314184599c71f03a1b15edb8161a1f72c01d4.sol:294

DTokenInterface {
  // 

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:11:41.729611
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12Staging
Function name: escape()
PC address: 33455
Estimated Gas Usage: 1889 - 36453
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0x084314184599c71f03a1b15edb8161a1f72c01d4.sol:513

6c1d19D4a2e9Eb0cE3606eB

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.816233
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12Staging
Function name: executeActionWithAtomicBatchCalls((address,bytes)[],uint256,bytes,bytes)
PC address: 38221
Estimated Gas Usage: 549 - 737
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x084314184599c71f03a1b15edb8161a1f72c01d4.sol:1247

s memory returnDa

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xf5ce0c13f9287d37adea719628821e4c20edaa2a.sol
Total states:15386
129.171679
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:04.256425
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3645
Estimated Gas Usage: 1025 - 1500
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xf5ce0c13f9287d37adea719628821e4c20edaa2a.sol:56

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:36.698420
Transaction Length: 2
Severity: High
Contract: ERC20Pausable
Function name: increaseAllowance(address,uint256)
PC address: 5504
Estimated Gas Usage: 1070 - 1545
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xf5ce0c13f9287d37adea719628821e4c20edaa2a.sol:56

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xCE92FbAC689710bCa1e1c8DB265e9B06BCB85c08.sol
Total states:3248
8.257524
==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.009877
Transaction Length: 0
Severity: Medium
Contract: DegoVoterProxy
Function name: constructor
PC address: 18
Estimated Gas Usage: 42 - 137
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../new/0xCE92FbAC689710bCa1e1c8DB265e9B06BCB85c08.sol:58

tx.origin

--------------------

==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.004798
Transaction Length: 0
Severity: Medium
Contract: Governance
Function name: constructor
PC address: 18
Estimated Gas Usage: 42 - 137
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../new/0xCE92FbAC689710bCa1e1c8DB265e9B06BCB85c08.sol:58

tx.origin

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xef47223f77d726826c866f56e3a6000914289702.sol
Total states:5848
974.245973
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.134462
Transaction Length: 1
Severity: High
Contract: WDXStacking
Function name: buyStatus(uint8,address[])
PC address: 915
Estimated Gas Usage: 439 - 534
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xef47223f77d726826c866f56e3a6000914289702.sol:5

olidity ^0.5.17;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.642061
Transaction Length: 1
Severity: High
Contract: WDXStacking
Function name: buyStatus(uint8,address[])
PC address: 917
Estimated Gas Usage: 439 - 534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xef47223f77d726826c866f56e3a6000914289702.sol:3

*/

//pragma solidity ^0.5.17;
pragm

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:01:37.254743
Transaction Length: 1
Severity: Medium
Contract: WDXStacking
Function name: sendToStaking(uint256)
PC address: 1111
Estimated Gas Usage: 51713 - 305268
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 4753
Offset: 5182
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../new/0xef47223f77d726826c866f56e3a6000914289702.sol:165

function sendToStaking(uint256 numberOfTokens) public returns(bool) {
        require(numberOfTokens > 0, "You need to sell at least some tokens");

        uint256 allowance = tokenContract.allowance(msg.sender, address(this));
        require(allowance >= numberOfTokens, "Check the token allowance");


        tokenContract.transferFrom(msg.sender, address(this), numberOfTokens);
        if (stakes[address(msg.sender)].amount > 0) {
            computeAmount();
            stakes[address(msg.sender)].amount = stakes[address(msg.sender)].amount + numberOfTokens;
            return true;
        }
        stakes[address(msg.sender)] = Stake(
            now, //start_time
            numberOfTokens, //amount

            now, //week_starts_at
            0, //week_withdrawal_amount
            now, //last_withdrawal_time

            now, //last_compute_time
            0, //last_percent
            0, //pure_profit
            stakes[address(msg.sender)].status //status
        );
        return true;
    }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:13:43.880631
Transaction Length: 2
Severity: Medium
Contract: WDXStacking
Function name: sendToStaking(uint256)
PC address: 1111
Estimated Gas Usage: 51713 - 305268
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 4753
Offset: 5182
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../new/0xef47223f77d726826c866f56e3a6000914289702.sol:165

function sendToStaking(uint256 numberOfTokens) public returns(bool) {
        require(numberOfTokens > 0, "You need to sell at least some tokens");

        uint256 allowance = tokenContract.allowance(msg.sender, address(this));
        require(allowance >= numberOfTokens, "Check the token allowance");


        tokenContract.transferFrom(msg.sender, address(this), numberOfTokens);
        if (stakes[address(msg.sender)].amount > 0) {
            computeAmount();
            stakes[address(msg.sender)].amount = stakes[address(msg.sender)].amount + numberOfTokens;
            return true;
        }
        stakes[address(msg.sender)] = Stake(
            now, //start_time
            numberOfTokens, //amount

            now, //week_starts_at
            0, //week_withdrawal_amount
            now, //last_withdrawal_time

            now, //last_compute_time
            0, //last_percent
            0, //pure_profit
            stakes[address(msg.sender)].status //status
        );
        return true;
    }

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:51.498142
Transaction Length: 1
Severity: Low
Contract: WDXStacking
Function name: sendToStaking(uint256)
PC address: 5182
Estimated Gas Usage: 3851 - 39829
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0xef47223f77d726826c866f56e3a6000914289702.sol:172

tokenContract.transferFrom(msg.sender, address(this), numberOfTokens)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:12:24.397444
Transaction Length: 2
Severity: Low
Contract: WDXStacking
Function name: sendToStaking(uint256)
PC address: 5182
Estimated Gas Usage: 3851 - 39829
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0xef47223f77d726826c866f56e3a6000914289702.sol:172

tokenContract.transferFrom(msg.sender, address(this), numberOfTokens)

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:02:18.063179
Transaction Length: 2
Severity: High
Contract: WDXStacking
Function name: getFromStaking(uint256)
PC address: 6049
Estimated Gas Usage: 2525 - 3380
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0xef47223f77d726826c866f56e3a6000914289702.sol:94

now - stake_last_compute_time

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:06:14.250183
Transaction Length: 2
Severity: High
Contract: WDXStacking
Function name: getFromStaking(uint256)
PC address: 6089
Estimated Gas Usage: 2770 - 3625
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0xef47223f77d726826c866f56e3a6000914289702.sol:100

now - stake_start_time

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xd20770105592629e49f90eb360a03ddb08c7e207.sol
Total states:2301
2.095729
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.039592
Transaction Length: 0
Severity: High
Contract: ERC20
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xd20770105592629e49f90eb360a03ddb08c7e207.sol:12

ily result
 * in bugs, because programmers 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.041719
Transaction Length: 0
Severity: High
Contract: WarLordToken
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xd20770105592629e49f90eb360a03ddb08c7e207.sol:12

ily result
 * in bugs, because programmers 

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xd4553Ee5693A926E0b9f5B0726ee51773F97df85.sol
Total states:4440
19.450119
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.642513
Transaction Length: 1
Severity: High
Contract: OSM
Function name: kiss(address[])
PC address: 498
Estimated Gas Usage: 408 - 503
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xd4553Ee5693A926E0b9f5B0726ee51773F97df85.sol:5

ol -- mixin for inlin

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.196666
Transaction Length: 1
Severity: High
Contract: OSM
Function name: kiss(address[])
PC address: 500
Estimated Gas Usage: 408 - 503
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xd4553Ee5693A926E0b9f5B0726ee51773F97df85.sol:3

*/

/// math.sol -- mixin for inline

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.278438
Transaction Length: 1
Severity: High
Contract: OSM
Function name: diss(address[])
PC address: 761
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xd4553Ee5693A926E0b9f5B0726ee51773F97df85.sol:5

ol -- mixin for inlin

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.614498
Transaction Length: 1
Severity: High
Contract: OSM
Function name: diss(address[])
PC address: 763
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xd4553Ee5693A926E0b9f5B0726ee51773F97df85.sol:3

*/

/// math.sol -- mixin for inline

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xd0c59798f986d333554688cd667033d469c2398e.sol
Total states:426
0.872452
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xcbf0db1968f6b157af366e057c1e5d54d1d37b3c.sol
Total states:10402
104.886124
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.994661
Transaction Length: 1
Severity: Low
Contract: Doubler
Function name: users(uint256)
PC address: 2361
Estimated Gas Usage: 702 - 797
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xcbf0db1968f6b157af366e057c1e5d54d1d37b3c.sol:198

User[] public users

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x34194a17d9d02bdabe930b27919ce797cfb065bf.sol
Total states:1322
73.342279
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.830818
Transaction Length: 1
Severity: High
Contract: TimeLock
Function name: addParameters(address[],uint256[],uint256[])
PC address: 857
Estimated Gas Usage: 384 - 479
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x34194a17d9d02bdabe930b27919ce797cfb065bf.sol:5

olidity ^0.6.0;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.608784
Transaction Length: 1
Severity: High
Contract: TimeLock
Function name: addParameters(address[],uint256[],uint256[])
PC address: 859
Estimated Gas Usage: 384 - 479
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x34194a17d9d02bdabe930b27919ce797cfb065bf.sol:3

*/

//pragma solidity ^0.6.0;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.523306
Transaction Length: 1
Severity: High
Contract: TimeLock
Function name: addParameters(address[],uint256[],uint256[])
PC address: 942
Estimated Gas Usage: 560 - 655
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x34194a17d9d02bdabe930b27919ce797cfb065bf.sol:5

olidity ^0.6.0;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:20.021132
Transaction Length: 1
Severity: High
Contract: TimeLock
Function name: addParameters(address[],uint256[],uint256[])
PC address: 944
Estimated Gas Usage: 560 - 655
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x34194a17d9d02bdabe930b27919ce797cfb065bf.sol:3

*/

//pragma solidity ^0.6.0;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:33.173071
Transaction Length: 1
Severity: High
Contract: TimeLock
Function name: addParameters(address[],uint256[],uint256[])
PC address: 1027
Estimated Gas Usage: 736 - 831
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x34194a17d9d02bdabe930b27919ce797cfb065bf.sol:5

olidity ^0.6.0;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:56.721764
Transaction Length: 1
Severity: High
Contract: TimeLock
Function name: addParameters(address[],uint256[],uint256[])
PC address: 1029
Estimated Gas Usage: 736 - 831
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x34194a17d9d02bdabe930b27919ce797cfb065bf.sol:3

*/

//pragma solidity ^0.6.0;
pragma

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x7729b6278ac7c6c1fcf40d8d505e37488fbc0ec02.sol
Total states:3685
113.351073
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xd1400d2c740d061434fa46c9e0f818bd14147e61.sol
Total states:3585
157.317597
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.427028
Transaction Length: 1
Severity: High
Contract: LexGuildLocker
Function name: registerLocker(address,address[],address,address,uint256[],uint256,uint256,uint256,bytes32)
PC address: 355
Estimated Gas Usage: 352 - 447
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xd1400d2c740d061434fa46c9e0f818bd14147e61.sol:6

     ████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.710084
Transaction Length: 1
Severity: High
Contract: LexGuildLocker
Function name: registerLocker(address,address[],address,address,uint256[],uint256,uint256,uint256,bytes32)
PC address: 357
Estimated Gas Usage: 352 - 447
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xd1400d2c740d061434fa46c9e0f818bd14147e61.sol:3

*/

/*
██╗     █████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.715029
Transaction Length: 1
Severity: High
Contract: LexGuildLocker
Function name: registerLocker(address,address[],address,address,uint256[],uint256,uint256,uint256,bytes32)
PC address: 504
Estimated Gas Usage: 594 - 689
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xd1400d2c740d061434fa46c9e0f818bd14147e61.sol:6

     ████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:20.180476
Transaction Length: 1
Severity: High
Contract: LexGuildLocker
Function name: registerLocker(address,address[],address,address,uint256[],uint256,uint256,uint256,bytes32)
PC address: 506
Estimated Gas Usage: 594 - 689
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xd1400d2c740d061434fa46c9e0f818bd14147e61.sol:3

*/

/*
██╗     █████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:09.625585
Transaction Length: 1
Severity: High
Contract: LexGuildLocker
Function name: resolve(uint256,uint256,uint256[],bytes32)
PC address: 1471
Estimated Gas Usage: 394 - 489
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xd1400d2c740d061434fa46c9e0f818bd14147e61.sol:6

     ████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:14.060885
Transaction Length: 1
Severity: High
Contract: LexGuildLocker
Function name: resolve(uint256,uint256,uint256[],bytes32)
PC address: 1473
Estimated Gas Usage: 394 - 489
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xd1400d2c740d061434fa46c9e0f818bd14147e61.sol:3

*/

/*
██╗     █████

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:06.674212
Transaction Length: 1
Severity: Low
Contract: LexGuildLocker
Function name: registerLocker(address,address[],address,address,uint256[],uint256,uint256,uint256,bytes32)
PC address: 1730
Estimated Gas Usage: 846 - 941
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xd1400d2c740d061434fa46c9e0f818bd14147e61.sol:185

batch[i]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:28.788357
Transaction Length: 1
Severity: High
Contract: LexGuildLocker
Function name: registerLocker(address,address[],address,address,uint256[],uint256,uint256,uint256,bytes32)
PC address: 9688
Estimated Gas Usage: 1414 - 1509
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xd1400d2c740d061434fa46c9e0f818bd14147e61.sol:87

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:36.591883
Transaction Length: 1
Severity: High
Contract: LexGuildLocker
Function name: registerLocker(address,address[],address,address,uint256[],uint256,uint256,uint256,bytes32)
PC address: 9739
Estimated Gas Usage: 1157 - 1252
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xd1400d2c740d061434fa46c9e0f818bd14147e61.sol:105

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xded5059195a7feb96f151271d038517d9736e5d7.sol
Total states:1454
80.310576
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.747235
Transaction Length: 1
Severity: High
Contract: DivideContract
Function name: registerRecipientsInfo(address[],uint256[])
PC address: 1747
Estimated Gas Usage: 406 - 501
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xded5059195a7feb96f151271d038517d9736e5d7.sol:5

penzeppelin-solidity/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.511808
Transaction Length: 1
Severity: High
Contract: DivideContract
Function name: registerRecipientsInfo(address[],uint256[])
PC address: 1749
Estimated Gas Usage: 406 - 501
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xded5059195a7feb96f151271d038517d9736e5d7.sol:3

*/

// File: openzeppelin-solidity/c

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.064885
Transaction Length: 1
Severity: High
Contract: DivideContract
Function name: registerRecipientsInfo(address[],uint256[])
PC address: 1895
Estimated Gas Usage: 739 - 3516
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xded5059195a7feb96f151271d038517d9736e5d7.sol:5

penzeppelin-solidity/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:27.299681
Transaction Length: 1
Severity: High
Contract: DivideContract
Function name: registerRecipientsInfo(address[],uint256[])
PC address: 1897
Estimated Gas Usage: 739 - 3516
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xded5059195a7feb96f151271d038517d9736e5d7.sol:3

*/

// File: openzeppelin-solidity/c

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x4e538b49ba7f6068b0d5ada08e80bda5524bc28f.sol
Total states:1458
76.382306
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.186924
Transaction Length: 1
Severity: High
Contract: GotScammed
Function name: swapExactTokensForTokens(address[])
PC address: 243
Estimated Gas Usage: 318 - 413
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x4e538b49ba7f6068b0d5ada08e80bda5524bc28f.sol:5

olidity ^0.6.6;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.357848
Transaction Length: 1
Severity: High
Contract: GotScammed
Function name: swapExactTokensForTokens(address[])
PC address: 245
Estimated Gas Usage: 318 - 413
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x4e538b49ba7f6068b0d5ada08e80bda5524bc28f.sol:3

*/

//pragma solidity ^0.6.6;
pragma

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:55.711600
Transaction Length: 2
Severity: Low
Contract: GotScammed
Function name: swapExactTokensForTokens(address[])
PC address: 942
Estimated Gas Usage: 1318 - 1743
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x4e538b49ba7f6068b0d5ada08e80bda5524bc28f.sol:58

path[0]

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:00:17.785283
Transaction Length: 2
Severity: Medium
Contract: GotScammed
Function name: swapExactTokensForTokens(address[])
PC address: 1169
Estimated Gas Usage: 2637 - 3768
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../new/0x4e538b49ba7f6068b0d5ada08e80bda5524bc28f.sol:59

tkn.balanceOf(address(this))

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.253435
Transaction Length: 1
Severity: High
Contract: GotScammed
Function name: queue()
PC address: 2300
Estimated Gas Usage: 6142 - 26567
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x4e538b49ba7f6068b0d5ada08e80bda5524bc28f.sol:52

block.timestamp + 600

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:44.811487
Transaction Length: 2
Severity: Low
Contract: GotScammed
Function name: swapExactTokensForTokens(address[])
PC address: 2498
Estimated Gas Usage: 3834 - 44699
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x4e538b49ba7f6068b0d5ada08e80bda5524bc28f.sol:84

amounts[0]

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xdc0897529568b142d8a7a82cf6893948b7f47123.sol
Total states:367
1129.698421
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.469894
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12
Function name: getBalances()
PC address: 2652
Estimated Gas Usage: 549 - 737
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xdc0897529568b142d8a7a82cf6893948b7f47123.sol:5

dity 0.5.17; //

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.745988
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12
Function name: getBalances()
PC address: 2655
Estimated Gas Usage: 549 - 737
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xdc0897529568b142d8a7a82cf6893948b7f47123.sol:3



//pragma solidity 0.5.17; // optimization

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:57.760740
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12
Function name: getImplementation()
PC address: 8953
Estimated Gas Usage: 1889 - 36453
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xdc0897529568b142d8a7a82cf6893948b7f47123.sol:5

ns: 200, evm version: istan

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:45.671127
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12
Function name: getImplementation()
PC address: 8956
Estimated Gas Usage: 1232 - 35889
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xdc0897529568b142d8a7a82cf6893948b7f47123.sol:5

mization runs: 200, evm version: istanbul
pragma so

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:48.648406
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12
Function name: getImplementation()
PC address: 8969
Estimated Gas Usage: 1232 - 35889
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xdc0897529568b142d8a7a82cf6893948b7f47123.sol:7

icBatchCalls

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:45.009053
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12
Function name: getImplementation()
PC address: 9069
Estimated Gas Usage: 1246 - 35996
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xdc0897529568b142d8a7a82cf6893948b7f47123.sol:1798

abi.decode(returnData, (address))

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:00.890500
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12
Function name: getImplementation()
PC address: 9078
Estimated Gas Usage: 1246 - 35996
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xdc0897529568b142d8a7a82cf6893948b7f47123.sol:1798

abi.decode(returnData, (address))

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:11:29.840345
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12
Function name: escape()
PC address: 13533
Estimated Gas Usage: 1889 - 36453
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xdc0897529568b142d8a7a82cf6893948b7f47123.sol:5

dity 0.5.17; //

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:11:21.865937
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12
Function name: escape()
PC address: 13536
Estimated Gas Usage: 1889 - 36453
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xdc0897529568b142d8a7a82cf6893948b7f47123.sol:3



//pragma solidity 0.5.17; // optimization

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:11:26.319726
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12
Function name: escape()
PC address: 13548
Estimated Gas Usage: 1889 - 36453
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xdc0897529568b142d8a7a82cf6893948b7f47123.sol:1322

_ESCAPE_HATCH_REGISTRY.getEscapeHatch()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:22.170960
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12
Function name: executeActionWithAtomicBatchCalls((address,bytes)[],uint256,bytes,bytes)
PC address: 31182
Estimated Gas Usage: 722 - 1100
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xdc0897529568b142d8a7a82cf6893948b7f47123.sol:78

ns (bytes32 actionID);

  func

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:12.659206
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12
Function name: executeActionWithAtomicBatchCalls((address,bytes)[],uint256,bytes,bytes)
PC address: 31941
Estimated Gas Usage: 722 - 1100
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0xdc0897529568b142d8a7a82cf6893948b7f47123.sol:248

iew returns (bytes3

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:03:06.066011
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12
Function name: getImplementation()
PC address: 32163
Estimated Gas Usage: 1246 - 35996
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0xdc0897529568b142d8a7a82cf6893948b7f47123.sol:294

DTokenInterface {
  // 

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:11:30.409109
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12
Function name: escape()
PC address: 33449
Estimated Gas Usage: 1889 - 36453
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0xdc0897529568b142d8a7a82cf6893948b7f47123.sol:514

20Interface(
    0xA0b8

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.019904
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12
Function name: executeActionWithAtomicBatchCalls((address,bytes)[],uint256,bytes,bytes)
PC address: 38215
Estimated Gas Usage: 549 - 737
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xdc0897529568b142d8a7a82cf6893948b7f47123.sol:1249

nal returns (bool

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xc85306056a212863b6f6413bba6669d62a70f31a.sol
Total states:4358
10.774324
==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:00.508942
Transaction Length: 1
Severity: Medium
Contract: Lottery
Function name: init(address)
PC address: 635
Estimated Gas Usage: 15432 - 125641
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 2426
Offset: 2975
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../new/0xc85306056a212863b6f6413bba6669d62a70f31a.sol:130

function init(address liqToken) public isAdmin{
    require(lastDrawing==0,"must be before any dispersal");
    liquidityToken=ERC20(liqToken);
    startingLiquidityTokens=liquidityToken.balanceOf(address(this));
  }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:00.487940
Transaction Length: 2
Severity: Medium
Contract: Lottery
Function name: init(address)
PC address: 635
Estimated Gas Usage: 15438 - 125647
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 2426
Offset: 2975
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../new/0xc85306056a212863b6f6413bba6669d62a70f31a.sol:130

function init(address liqToken) public isAdmin{
    require(lastDrawing==0,"must be before any dispersal");
    liquidityToken=ERC20(liqToken);
    startingLiquidityTokens=liquidityToken.balanceOf(address(this));
  }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.931579
Transaction Length: 2
Severity: High
Contract: Lottery
Function name: setWinningIndex1(bytes32)
PC address: 5932
Estimated Gas Usage: 9224 - 64211
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc85306056a212863b6f6413bba6669d62a70f31a.sol:140

block.number+1

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x41097f634ff8998153644cc04a6016280b0b6406.sol
Total states:475
5.764258
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xBc39429B98EE55D2e4F77b852F22ad3C90255203.sol
Total states:9233
31.395112
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x7aed3c28fa8f6580cbb6f5ed14888b8d923608dc.sol
Total states:44520
261.244458
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.646838
Transaction Length: 1
Severity: High
Contract: PRNCToken
Function name: batchTransfer(address[],uint256[])
PC address: 1272
Estimated Gas Usage: 385 - 480
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x7aed3c28fa8f6580cbb6f5ed14888b8d923608dc.sol:5

olidity 0.5.17;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.382428
Transaction Length: 1
Severity: High
Contract: PRNCToken
Function name: batchTransfer(address[],uint256[])
PC address: 1274
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x7aed3c28fa8f6580cbb6f5ed14888b8d923608dc.sol:3

*/

//pragma solidity 0.5.17;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.189550
Transaction Length: 1
Severity: High
Contract: PRNCToken
Function name: batchTransfer(address[],uint256[])
PC address: 1357
Estimated Gas Usage: 561 - 656
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x7aed3c28fa8f6580cbb6f5ed14888b8d923608dc.sol:5

olidity 0.5.17;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:26.477610
Transaction Length: 1
Severity: High
Contract: PRNCToken
Function name: batchTransfer(address[],uint256[])
PC address: 1359
Estimated Gas Usage: 561 - 656
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x7aed3c28fa8f6580cbb6f5ed14888b8d923608dc.sol:3

*/

//pragma solidity 0.5.17;
pragma

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:04.290315
Transaction Length: 1
Severity: Low
Contract: StandardToken
Function name: burnFrom(address,uint256)
PC address: 5663
Estimated Gas Usage: 884 - 1169
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x7aed3c28fa8f6580cbb6f5ed14888b8d923608dc.sol:49

assert(b <= a)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:24.132542
Transaction Length: 2
Severity: Low
Contract: StandardToken
Function name: burnFrom(address,uint256)
PC address: 5663
Estimated Gas Usage: 884 - 1169
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x7aed3c28fa8f6580cbb6f5ed14888b8d923608dc.sol:49

assert(b <= a)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:20.997460
Transaction Length: 2
Severity: High
Contract: StandardToken
Function name: increaseApproval(address,uint256)
PC address: 5681
Estimated Gas Usage: 980 - 1455
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x7aed3c28fa8f6580cbb6f5ed14888b8d923608dc.sol:56

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:27.967497
Transaction Length: 2
Severity: Low
Contract: StandardToken
Function name: increaseApproval(address,uint256)
PC address: 5694
Estimated Gas Usage: 990 - 1465
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x7aed3c28fa8f6580cbb6f5ed14888b8d923608dc.sol:57

assert(c >= a)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:04.350762
Transaction Length: 1
Severity: Low
Contract: PRNCToken
Function name: burnFrom(address,uint256)
PC address: 7077
Estimated Gas Usage: 907 - 1192
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x7aed3c28fa8f6580cbb6f5ed14888b8d923608dc.sol:49

assert(b <= a)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:56.054176
Transaction Length: 2
Severity: Low
Contract: PRNCToken
Function name: burnFrom(address,uint256)
PC address: 7077
Estimated Gas Usage: 907 - 1192
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x7aed3c28fa8f6580cbb6f5ed14888b8d923608dc.sol:49

assert(b <= a)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:22.722640
Transaction Length: 2
Severity: High
Contract: PRNCToken
Function name: increaseApproval(address,uint256)
PC address: 7095
Estimated Gas Usage: 958 - 1433
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x7aed3c28fa8f6580cbb6f5ed14888b8d923608dc.sol:56

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:59.937450
Transaction Length: 2
Severity: Low
Contract: PRNCToken
Function name: increaseApproval(address,uint256)
PC address: 7108
Estimated Gas Usage: 968 - 1443
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x7aed3c28fa8f6580cbb6f5ed14888b8d923608dc.sol:57

assert(c >= a)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x5e602265a972ae4d3ba11f21afbb676b4ed251911.sol
Total states:426
0.668393
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x6eb47d6d3c3faa8cefb0a389941f22644e554f7d.sol
Total states:2324
1.868751
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x5ba7caa4ea791add309625025594881425662a20.sol
Total states:305
3.723335
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x6fafad57060201d8fac9d190d4f42ef1e68494c2.sol
Total states:24490
88.647162
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.097844
Transaction Length: 0
Severity: High
Contract: LexAIR
Function name: constructor
PC address: 110
Estimated Gas Usage: 257 - 3030
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x6fafad57060201d8fac9d190d4f42ef1e68494c2.sol:10

█████╗

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.113085
Transaction Length: 0
Severity: High
Contract: LexAIR
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x6fafad57060201d8fac9d190d4f42ef1e68494c2.sol:9

█╔██╗ 
███████╗█

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.922420
Transaction Length: 1
Severity: High
Contract: LexAIR
Function name: updateMessage(string)
PC address: 275
Estimated Gas Usage: 319 - 414
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x6fafad57060201d8fac9d190d4f42ef1e68494c2.sol:3

*/

/*
██╗     ████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.947464
Transaction Length: 1
Severity: High
Contract: LexAIR
Function name: deregister(address[],bytes32)
PC address: 394
Estimated Gas Usage: 341 - 436
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x6fafad57060201d8fac9d190d4f42ef1e68494c2.sol:6

     ████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.787212
Transaction Length: 1
Severity: High
Contract: LexAIR
Function name: deregister(address[],bytes32)
PC address: 396
Estimated Gas Usage: 341 - 436
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x6fafad57060201d8fac9d190d4f42ef1e68494c2.sol:3

*/

/*
██╗     █████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:15.383850
Transaction Length: 1
Severity: High
Contract: LexAIR
Function name: register(address[],bytes32)
PC address: 735
Estimated Gas Usage: 318 - 413
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x6fafad57060201d8fac9d190d4f42ef1e68494c2.sol:6

     ████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:18.417829
Transaction Length: 1
Severity: High
Contract: LexAIR
Function name: register(address[],bytes32)
PC address: 737
Estimated Gas Usage: 318 - 413
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x6fafad57060201d8fac9d190d4f42ef1e68494c2.sol:3

*/

/*
██╗     █████

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x7b1be7f8e6431514b20029cb7f2242ff9081b4b2.sol
Total states:1367
2.982965
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x4F9845130168743Cb8f602FEFE82d2bcB6B9FEe9.sol
Total states:1999
2.896308
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xe4f6da994a9694ae64de34858f19440b4ff32ac6.sol
Total states:18680
144.590713
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.823527
Transaction Length: 1
Severity: High
Contract: HeritageFi
Function name: bulkTransfer(address[],uint256[])
PC address: 757
Estimated Gas Usage: 408 - 503
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xe4f6da994a9694ae64de34858f19440b4ff32ac6.sol:5

olidity ^0.5.17;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.887256
Transaction Length: 1
Severity: High
Contract: HeritageFi
Function name: bulkTransfer(address[],uint256[])
PC address: 759
Estimated Gas Usage: 408 - 503
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xe4f6da994a9694ae64de34858f19440b4ff32ac6.sol:3

*/

//pragma solidity ^0.5.17;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.744513
Transaction Length: 1
Severity: High
Contract: HeritageFi
Function name: bulkTransfer(address[],uint256[])
PC address: 842
Estimated Gas Usage: 584 - 679
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xe4f6da994a9694ae64de34858f19440b4ff32ac6.sol:5

olidity ^0.5.17;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:26.076903
Transaction Length: 1
Severity: High
Contract: HeritageFi
Function name: bulkTransfer(address[],uint256[])
PC address: 844
Estimated Gas Usage: 584 - 679
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xe4f6da994a9694ae64de34858f19440b4ff32ac6.sol:3

*/

//pragma solidity ^0.5.17;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:40.217248
Transaction Length: 1
Severity: High
Contract: HeritageFi
Function name: transferAndCall(address,uint256,bytes)
PC address: 1417
Estimated Gas Usage: 511 - 606
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xe4f6da994a9694ae64de34858f19440b4ff32ac6.sol:3

*/

//pragma solidity ^0.5.17;
prag

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:46.445976
Transaction Length: 1
Severity: Low
Contract: HeritageFi
Function name: unfreeze(uint256)
PC address: 6434
Estimated Gas Usage: 1375 - 1660
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xe4f6da994a9694ae64de34858f19440b4ff32ac6.sol:212

_burnedAmount * FLOAT_SCALAR / info.totalFrozen

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:24.401873
Transaction Length: 2
Severity: Low
Contract: HeritageFi
Function name: unfreeze(uint256)
PC address: 6434
Estimated Gas Usage: 1375 - 1660
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xe4f6da994a9694ae64de34858f19440b4ff32ac6.sol:212

_burnedAmount * FLOAT_SCALAR / info.totalFrozen

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xbca5fc48d3d0310204965f6d22764add6989ca06.sol
Total states:3620
6.032401
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xd1902581868163BEf61776cfD27228EE5074be8F.sol
Total states:10702
14.797331
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.071194
Transaction Length: 1
Severity: Low
Contract: StakingRewardsAccrualCapped
Function name: kyfInstancesArray(uint256)
PC address: 4522
Estimated Gas Usage: 790 - 885
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xd1902581868163BEf61776cfD27228EE5074be8F.sol:1111

address[] public kyfInstancesArray

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xBf198A82F39Ec0E989F33D16Aa86A6A9660e9776.sol
Total states:537
3.46091
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xe6bb2220819569b8e9d8265c49ca6c79e15a1559.sol
Total states:2632
11.900721
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x4e72b11b92308f6ada9b212274b07f70fcd0def4.sol
Total states:8674
34.223983
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.212262
Transaction Length: 1
Severity: Low
Contract: Layer2Base
Function name: EROs(uint256)
PC address: 4148
Estimated Gas Usage: 746 - 841
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x4e72b11b92308f6ada9b212274b07f70fcd0def4.sol:1389

Data.Request[] public EROs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.195380
Transaction Length: 1
Severity: Low
Contract: Layer2Storage
Function name: EROs(uint256)
PC address: 4148
Estimated Gas Usage: 746 - 841
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x4e72b11b92308f6ada9b212274b07f70fcd0def4.sol:1389

Data.Request[] public EROs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.658228
Transaction Length: 1
Severity: Low
Contract: Layer2Base
Function name: URBs(uint256)
PC address: 4631
Estimated Gas Usage: 723 - 818
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x4e72b11b92308f6ada9b212274b07f70fcd0def4.sol:1394

Data.RequestBlock[] public URBs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.680228
Transaction Length: 1
Severity: Low
Contract: Layer2Storage
Function name: URBs(uint256)
PC address: 4631
Estimated Gas Usage: 723 - 818
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x4e72b11b92308f6ada9b212274b07f70fcd0def4.sol:1394

Data.RequestBlock[] public URBs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:02.236843
Transaction Length: 1
Severity: Low
Contract: Layer2Base
Function name: ORBs(uint256)
PC address: 5009
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x4e72b11b92308f6ada9b212274b07f70fcd0def4.sol:1393

Data.RequestBlock[] public ORBs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:02.536481
Transaction Length: 1
Severity: Low
Contract: Layer2Storage
Function name: ORBs(uint256)
PC address: 5009
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x4e72b11b92308f6ada9b212274b07f70fcd0def4.sol:1393

Data.RequestBlock[] public ORBs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:02.605707
Transaction Length: 1
Severity: Low
Contract: Layer2Base
Function name: ERUs(uint256)
PC address: 5209
Estimated Gas Usage: 766 - 861
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x4e72b11b92308f6ada9b212274b07f70fcd0def4.sol:1390

Data.Request[] public ERUs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:02.889836
Transaction Length: 1
Severity: Low
Contract: Layer2Storage
Function name: ERUs(uint256)
PC address: 5209
Estimated Gas Usage: 766 - 861
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x4e72b11b92308f6ada9b212274b07f70fcd0def4.sol:1390

Data.Request[] public ERUs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:03.469244
Transaction Length: 1
Severity: Low
Contract: SubmitHandler
Function name: EROs(uint256)
PC address: 9197
Estimated Gas Usage: 790 - 885
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x4e72b11b92308f6ada9b212274b07f70fcd0def4.sol:1389

Data.Request[] public EROs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:03.990435
Transaction Length: 1
Severity: Low
Contract: SubmitHandler
Function name: URBs(uint256)
PC address: 9680
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x4e72b11b92308f6ada9b212274b07f70fcd0def4.sol:1394

Data.RequestBlock[] public URBs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:04.637461
Transaction Length: 1
Severity: Low
Contract: SubmitHandler
Function name: ORBs(uint256)
PC address: 10058
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x4e72b11b92308f6ada9b212274b07f70fcd0def4.sol:1393

Data.RequestBlock[] public ORBs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:05.020561
Transaction Length: 1
Severity: Low
Contract: SubmitHandler
Function name: ERUs(uint256)
PC address: 10258
Estimated Gas Usage: 766 - 861
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x4e72b11b92308f6ada9b212274b07f70fcd0def4.sol:1390

Data.Request[] public ERUs

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x06d1f34fd7c055ae5ca39aa8c6a8e10100a45c01.sol
Total states:2849
18.01298
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.283981
Transaction Length: 1
Severity: High
Contract: Invoker
Function name: invoke(address,bytes,address,uint256)
PC address: 559
Estimated Gas Usage: 395 - 490
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x06d1f34fd7c055ae5ca39aa8c6a8e10100a45c01.sol:3



*/



// File: @openzeppelin/cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.829082
Transaction Length: 1
Severity: High
Contract: Invoker
Function name: setLiquidityProxies(address,address[])
PC address: 2195
Estimated Gas Usage: 373 - 468
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x06d1f34fd7c055ae5ca39aa8c6a8e10100a45c01.sol:9

e: @openzeppelin/cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.519154
Transaction Length: 1
Severity: High
Contract: Invoker
Function name: setLiquidityProxies(address,address[])
PC address: 2197
Estimated Gas Usage: 373 - 468
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x06d1f34fd7c055ae5ca39aa8c6a8e10100a45c01.sol:3



*/



// File: @openzeppelin/contr

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x5d4c6a60d80bad2bad174ab4da5d7e5a2097d6cc.sol
Total states:17674
692.393521
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.018695
Transaction Length: 1
Severity: High
Contract: Module
Function name: getModuleAddress(string)
PC address: 416
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5d4c6a60d80bad2bad174ab4da5d7e5a2097d6cc.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.313981
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 511
Estimated Gas Usage: 364 - 459
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5d4c6a60d80bad2bad174ab4da5d7e5a2097d6cc.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.613322
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 513
Estimated Gas Usage: 364 - 459
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5d4c6a60d80bad2bad174ab4da5d7e5a2097d6cc.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.273008
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 596
Estimated Gas Usage: 540 - 635
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5d4c6a60d80bad2bad174ab4da5d7e5a2097d6cc.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:19.265916
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 598
Estimated Gas Usage: 540 - 635
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5d4c6a60d80bad2bad174ab4da5d7e5a2097d6cc.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:31.488987
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 681
Estimated Gas Usage: 716 - 811
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5d4c6a60d80bad2bad174ab4da5d7e5a2097d6cc.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:52.024392
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 683
Estimated Gas Usage: 716 - 811
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5d4c6a60d80bad2bad174ab4da5d7e5a2097d6cc.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:12.639296
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 766
Estimated Gas Usage: 892 - 987
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5d4c6a60d80bad2bad174ab4da5d7e5a2097d6cc.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:36.417410
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 768
Estimated Gas Usage: 892 - 987
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5d4c6a60d80bad2bad174ab4da5d7e5a2097d6cc.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:08.893040
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: getModuleAddress(string)
PC address: 1453
Estimated Gas Usage: 451 - 546
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5d4c6a60d80bad2bad174ab4da5d7e5a2097d6cc.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.302737
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_renBTC
Function name: handleDeposit(address[],uint256[])
PC address: 1711
Estimated Gas Usage: 452 - 547
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5d4c6a60d80bad2bad174ab4da5d7e5a2097d6cc.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.178548
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_renBTC
Function name: handleDeposit(address[],uint256[])
PC address: 1713
Estimated Gas Usage: 452 - 547
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5d4c6a60d80bad2bad174ab4da5d7e5a2097d6cc.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:15.305227
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_renBTC
Function name: handleDeposit(address[],uint256[])
PC address: 1859
Estimated Gas Usage: 785 - 3562
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5d4c6a60d80bad2bad174ab4da5d7e5a2097d6cc.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:28.187294
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_renBTC
Function name: handleDeposit(address[],uint256[])
PC address: 1861
Estimated Gas Usage: 785 - 3562
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5d4c6a60d80bad2bad174ab4da5d7e5a2097d6cc.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:34.558063
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_renBTC
Function name: getModuleAddress(string)
PC address: 2143
Estimated Gas Usage: 407 - 502
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5d4c6a60d80bad2bad174ab4da5d7e5a2097d6cc.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:08.424254
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_renBTC
Function name: withdraw(address,uint256[])
PC address: 2508
Estimated Gas Usage: 397 - 492
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5d4c6a60d80bad2bad174ab4da5d7e5a2097d6cc.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:12.868863
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_renBTC
Function name: withdraw(address,uint256[])
PC address: 2510
Estimated Gas Usage: 397 - 492
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5d4c6a60d80bad2bad174ab4da5d7e5a2097d6cc.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:40.649014
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_renBTC
Function name: supportedTokens()
PC address: 3015
Estimated Gas Usage: 1250 - 2097
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5d4c6a60d80bad2bad174ab4da5d7e5a2097d6cc.sol:1597

function supportedTokens() public view returns(address[] memory){
        return _registeredTokens;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:11.929299
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_renBTC
Function name: supportedTokens()
PC address: 3055
Estimated Gas Usage: 1400 - 2623
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5d4c6a60d80bad2bad174ab4da5d7e5a2097d6cc.sol:1597

function supportedTokens() public view returns(address[] memory){
        return _registeredTokens;
    }

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x6afba805ab9740ecd93e4e5cc2ef4eac37654914.sol
Total states:426
0.850778
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x5b4f9ed98002Cb15Dc5d1166Cf0e80cF58b8a181.sol
Total states:1179
0.920239
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.127189
Transaction Length: 0
Severity: High
Contract: MultisigVaultETH
Function name: constructor
PC address: 120
Estimated Gas Usage: 287 - 3153
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5b4f9ed98002Cb15Dc5d1166Cf0e80cF58b8a181.sol:14

olidity wrap on overf

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xcd9af4fcb3b0eac14bff9f2753f627d43ee08da9.sol
Total states:1880
95.07851
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.300123
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShip(address[])
PC address: 360
Estimated Gas Usage: 342 - 437
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcd9af4fcb3b0eac14bff9f2753f627d43ee08da9.sol:5

penzeppelin-solidity/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.022457
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShip(address[])
PC address: 362
Estimated Gas Usage: 342 - 437
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcd9af4fcb3b0eac14bff9f2753f627d43ee08da9.sol:3

*/

// File: openzeppelin-solidity/c

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:37.036641
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShipWithHowMany(address[],uint256)
PC address: 776
Estimated Gas Usage: 341 - 436
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcd9af4fcb3b0eac14bff9f2753f627d43ee08da9.sol:5

penzeppelin-solidity/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:39.920416
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShipWithHowMany(address[],uint256)
PC address: 778
Estimated Gas Usage: 341 - 436
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcd9af4fcb3b0eac14bff9f2753f627d43ee08da9.sol:3

*/

// File: openzeppelin-solidity/c

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:29.428212
Transaction Length: 1
Severity: Low
Contract: BeneficiaryOperations
Function name: allOperations(uint256)
PC address: 1715
Estimated Gas Usage: 701 - 796
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xcd9af4fcb3b0eac14bff9f2753f627d43ee08da9.sol:386

bytes32[] public allOperations

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:30.018808
Transaction Length: 1
Severity: Low
Contract: BeneficiaryOperations
Function name: beneficiaries(uint256)
PC address: 4636
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xcd9af4fcb3b0eac14bff9f2753f627d43ee08da9.sol:385

address[] public beneficiaries

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x5cd2aaab38ad597f807e404f78cf52af423325f5.sol
Total states:654
0.538628
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x6feef983562a28ecfe80b8854c4dcd4af0899d36.sol
Total states:1237
3.482107
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:01.476901
Transaction Length: 1
Severity: Low
Contract: ESDRouterV1
Function name: addLiquidityUSDCOnly(uint256)
PC address: 1279
Estimated Gas Usage: 2046 - 3037
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0x6feef983562a28ecfe80b8854c4dcd4af0899d36.sol:340

usdcToken.transferFrom(msg.sender, address(this), usdcAmountToAdd)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xc85306056a212863b6f6413bba6669d62a70f31a2.sol
Total states:4358
11.072781
==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:00.511969
Transaction Length: 1
Severity: Medium
Contract: Lottery
Function name: init(address)
PC address: 635
Estimated Gas Usage: 15432 - 125641
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 2426
Offset: 2975
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../new/0xc85306056a212863b6f6413bba6669d62a70f31a2.sol:130

function init(address liqToken) public isAdmin{
    require(lastDrawing==0,"must be before any dispersal");
    liquidityToken=ERC20(liqToken);
    startingLiquidityTokens=liquidityToken.balanceOf(address(this));
  }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:00.729182
Transaction Length: 2
Severity: Medium
Contract: Lottery
Function name: init(address)
PC address: 635
Estimated Gas Usage: 15438 - 125647
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 2426
Offset: 2975
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../new/0xc85306056a212863b6f6413bba6669d62a70f31a2.sol:130

function init(address liqToken) public isAdmin{
    require(lastDrawing==0,"must be before any dispersal");
    liquidityToken=ERC20(liqToken);
    startingLiquidityTokens=liquidityToken.balanceOf(address(this));
  }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.337968
Transaction Length: 2
Severity: High
Contract: Lottery
Function name: setWinningIndex1(bytes32)
PC address: 5932
Estimated Gas Usage: 9224 - 64211
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc85306056a212863b6f6413bba6669d62a70f31a2.sol:140

block.number+1

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xcf8f32e032f432b02393636b2092a6bef975fbf9.sol
Total states:480
1.547944
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.075107
Transaction Length: 0
Severity: High
Contract: TokenContract
Function name: constructor
PC address: 166
Estimated Gas Usage: 11191 - 54624
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcf8f32e032f432b02393636b2092a6bef975fbf9.sol:13

ions, this simplifies the implementation of

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xbdB687373A205bb7eD379A1c85940E8C162f8930.sol
Total states:20618
684.446984
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.574090
Transaction Length: 1
Severity: High
Contract: HashRegistrar
Function name: invalidateName(string)
PC address: 588
Estimated Gas Usage: 386 - 481
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xbdB687373A205bb7eD379A1c85940E8C162f8930.sol:3

*/

//pragma solidity >=0.4.24;
pra

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.905007
Transaction Length: 1
Severity: High
Contract: ERC721
Function name: safeTransferFrom(address,address,uint256,bytes)
PC address: 1136
Estimated Gas Usage: 477 - 572
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xbdB687373A205bb7eD379A1c85940E8C162f8930.sol:3

*/

//pragma solidity >=0.4.24;
pra

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:37.544432
Transaction Length: 1
Severity: High
Contract: HashRegistrar
Function name: eraseNode(bytes32[])
PC address: 1967
Estimated Gas Usage: 340 - 435
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xbdB687373A205bb7eD379A1c85940E8C162f8930.sol:5

olidity >=0.4.24;
pra

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:41.400982
Transaction Length: 1
Severity: High
Contract: HashRegistrar
Function name: eraseNode(bytes32[])
PC address: 1969
Estimated Gas Usage: 340 - 435
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xbdB687373A205bb7eD379A1c85940E8C162f8930.sol:3

*/

//pragma solidity >=0.4.24;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.161477
Transaction Length: 1
Severity: High
Contract: BaseRegistrarImplementation
Function name: safeTransferFrom(address,address,uint256,bytes)
PC address: 2062
Estimated Gas Usage: 478 - 573
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xbdB687373A205bb7eD379A1c85940E8C162f8930.sol:3

*/

//pragma solidity >=0.4.24;
pra

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:54.607655
Transaction Length: 1
Severity: High
Contract: HashRegistrar
Function name: startAuctions(bytes32[])
PC address: 2101
Estimated Gas Usage: 362 - 457
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xbdB687373A205bb7eD379A1c85940E8C162f8930.sol:5

olidity >=0.4.24;
pra

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:57.885184
Transaction Length: 1
Severity: High
Contract: HashRegistrar
Function name: startAuctions(bytes32[])
PC address: 2103
Estimated Gas Usage: 362 - 457
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xbdB687373A205bb7eD379A1c85940E8C162f8930.sol:3

*/

//pragma solidity >=0.4.24;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:05.799534
Transaction Length: 1
Severity: High
Contract: HashRegistrar
Function name: startAuctionsAndBid(bytes32[],bytes32)
PC address: 2425
Estimated Gas Usage: 426 - 521
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xbdB687373A205bb7eD379A1c85940E8C162f8930.sol:5

olidity >=0.4.24;
pra

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:08.674894
Transaction Length: 1
Severity: High
Contract: HashRegistrar
Function name: startAuctionsAndBid(bytes32[],bytes32)
PC address: 2427
Estimated Gas Usage: 426 - 521
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xbdB687373A205bb7eD379A1c85940E8C162f8930.sol:3

*/

//pragma solidity >=0.4.24;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.305259
Transaction Length: 1
Severity: High
Contract: HashRegistrar
Function name: releaseDeed(bytes32)
PC address: 3477
Estimated Gas Usage: 1001 - 1946
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xbdB687373A205bb7eD379A1c85940E8C162f8930.sol:596

registryStarted + ((launchLength * (uint(_hash) >> 128)) >> 128)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:03.753257
Transaction Length: 1
Severity: Low
Contract: BaseRegistrarImplementation
Function name: available(uint256)
PC address: 5717
Estimated Gas Usage: 3349 - 38526
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xbdB687373A205bb7eD379A1c85940E8C162f8930.sol:1486

previousRegistrar.state(bytes32(id)) == Registrar.Mode.Open

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:24.435943
Transaction Length: 1
Severity: High
Contract: HashRegistrar
Function name: startAuctions(bytes32[])
PC address: 14872
Estimated Gas Usage: 1574 - 4630
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xbdB687373A205bb7eD379A1c85940E8C162f8930.sol:253

registryStarted + (365 * 4) * 1 days

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xc6de3a7e4112d5a62a8466af223c6f27e7f4efd2.sol
Total states:77
2.843416
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xc4caf58fafcb947eec3c99d6d92c49d437b2f93a.sol
Total states:447
0.869404
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xc4cec1a714ad2658df2060134ce03caeb1865912.sol
Total states:1986
20.224775
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.195231
Transaction Length: 1
Severity: High
Contract: StrategyAddTwoSidesOptimal
Function name: execute(address,uint256,bytes)
PC address: 726
Estimated Gas Usage: 376 - 471
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc4cec1a714ad2658df2060134ce03caeb1865912.sol:3

*/

// File: openzeppelin-solidity-

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:00.179349
Transaction Length: 0
Severity: Medium
Contract: StrategyAddTwoSidesOptimal
Function name: constructor
PC address: 867
Estimated Gas Usage: 38791 - 235224
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 375
Offset: 664
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../new/0xc4cec1a714ad2658df2060134ce03caeb1865912.sol:619

contract StrategyAddTwoSidesOptimal is Ownable, ReentrancyGuard, Strategy {
    using SafeToken for address;
    using SafeMath for uint256;

    IUniswapV2Factory public factory;
    IUniswapV2Router02 public router;
    address public weth;
    address public goblin;

    /// @dev Create a new add two-side optimal strategy instance.
    /// @param _router The Uniswap router smart contract.
    constructor(IUniswapV2Router02 _router, address _goblin) public {
        factory = IUniswapV2Factory(_router.factory());
        router = _router;
        weth = _router.WETH();
        goblin = _goblin;
    }
    
    /// @dev Throws if called by any account other than the goblin.
    modifier onlyGoblin() {
        require(isGoblin(), "caller is not the goblin");
        _;
    }

    /// @dev Returns true if the caller is the current goblin.
    function isGoblin() public view returns (bool) {
        return msg.sender == goblin;
    }

    /// @dev Compute optimal deposit amount
    /// @param amtA amount of token A desired to deposit
    /// @param amtB amonut of token B desired to deposit
    /// @param resA amount of token A in reserve
    /// @param resB amount of token B in reserve
    function optimalDeposit(
        uint256 amtA,
        uint256 amtB,
        uint256 resA,
        uint256 resB
    ) internal pure returns (uint256 swapAmt, bool isReversed) {
        if (amtA.mul(resB) >= amtB.mul(resA)) {
            swapAmt = _optimalDepositA(amtA, amtB, resA, resB);
            isReversed = false;
        } else {
            swapAmt = _optimalDepositA(amtB, amtA, resB, resA);
            isReversed = true;
        }
    }

    /// @dev Compute optimal deposit amount helper
    /// @param amtA amount of token A desired to deposit
    /// @param amtB amonut of token B desired to deposit
    /// @param resA amount of token A in reserve
    /// @param resB amount of token B in reserve
    function _optimalDepositA(
        uint256 amtA,
        uint256 amtB,
        uint256 resA,
        uint256 resB
    ) internal pure returns (uint256) {
        require(amtA.mul(resB) >= amtB.mul(resA), "Reversed");

        uint256 a = 997;
        uint256 b = uint256(1997).mul(resA);
        uint256 _c = (amtA.mul(resB)).sub(amtB.mul(resA));
        uint256 c = _c.mul(1000).div(amtB.add(resB)).mul(resA);

        uint256 d = a.mul(c).mul(4);
        uint256 e = Math.sqrt(b.mul(b).add(d));

        uint256 numerator = e.sub(b);
        uint256 denominator = a.mul(2);

        return numerator.div(denominator);
    }

    /// @dev Execute worker strategy. Take LP tokens + ETH. Return LP tokens + ETH.
    /// @param user User address
    /// @param data Extra calldata information passed along to this strategy.
    function execute(address user, uint256, /* debt */ bytes calldata data) 
        external         
        payable  
        onlyGoblin       
        nonReentrant 
    {
        // 1. Find out what farming token we are dealing with.
        (address fToken, uint256 fAmount, uint256 minLPAmount) = abi.decode(data, (address, uint256, uint256));
        IUniswapV2Pair lpToken = IUniswapV2Pair(factory.getPair(fToken, weth));        
        // 2. Compute the optimal amount of ETH and fToken to be converted.  
        if (fAmount > 0) {  
            fToken.safeTransferFrom(user, address(this), fAmount);            
        }
        uint256 ethBalance = address(this).balance;
        uint256 swapAmt;
        bool isReversed;
        {
            (uint256 r0, uint256 r1, ) = lpToken.getReserves();
            (uint256 ethReserve, uint256 fReserve) = lpToken.token0() == weth ? (r0, r1) : (r1, r0);
            (swapAmt, isReversed) = optimalDeposit(ethBalance, fToken.myBalance(), ethReserve, fReserve);
        }
        // 3. Convert between ETH and farming tokens
        fToken.safeApprove(address(router), 0);
        fToken.safeApprove(address(router), uint256(-1));
        address[] memory path = new address[](2);
        (path[0], path[1]) = isReversed ? (fToken, weth) : (weth, fToken);
        if (isReversed) {
            router.swapExactTokensForETH(swapAmt, 0, path, address(this), now); // farming tokens to ETH
        } else {
            router.swapExactETHForTokens.value(swapAmt)(0, path, address(this), now); // ETH to farming tokens
        }
        // 4. Mint more LP tokens and return all LP tokens to the sender.
        (,, uint256 moreLPAmount) = router.addLiquidityETH.value(address(this).balance)(
            fToken, fToken.myBalance(), 0, 0, address(this), now
        );
        require(moreLPAmount >= minLPAmount, "insufficient LP tokens received");
        lpToken.transfer(msg.sender, lpToken.balanceOf(address(this)));
    }

    /// @dev Recover ERC20 tokens that were accidentally sent to this smart contract.
    /// @param token The token contract. Can be anything. This contract should not hold ERC20 tokens.
    /// @param to The address to send the tokens to.
    /// @param value The number of tokens to transfer to `to`.
    function recover(address token, address to, uint256 value) external onlyOwner nonReentrant {
        token.safeTransfer(to, value);
    }

    function() external payable {}
}

--------------------


