$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x417aa847eaedcd956aba6901b1f38a86950dc6d8.sol
Total states:426
1.018277
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x5f0b23ba4dcb8e0bb5d81cee1db2de2b13e264a1.sol
Total states:18346
560.792016
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.242048
Transaction Length: 1
Severity: High
Contract: InDefiEcoPreMining
Function name: initialize(string,string,uint8)
PC address: 1011
Estimated Gas Usage: 431 - 526
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x5f0b23ba4dcb8e0bb5d81cee1db2de2b13e264a1.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.225942
Transaction Length: 1
Severity: High
Contract: InDefiEcoPreMining
Function name: initialize(string,string,uint8)
PC address: 1162
Estimated Gas Usage: 773 - 3550
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x5f0b23ba4dcb8e0bb5d81cee1db2de2b13e264a1.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:58.036566
Transaction Length: 1
Severity: High
Contract: InDefiEcoPreMining
Function name: externalCallToTokenizedStrategy(address,bytes,uint256)
PC address: 2466
Estimated Gas Usage: 418 - 513
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x5f0b23ba4dcb8e0bb5d81cee1db2de2b13e264a1.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.654834
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3185
Estimated Gas Usage: 989 - 1464
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x5f0b23ba4dcb8e0bb5d81cee1db2de2b13e264a1.sol:289

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:49.674621
Transaction Length: 1
Severity: High
Contract: InDefiEcoPreMining
Function name: transferFrom(address,address,uint256)
PC address: 15217
Estimated Gas Usage: 1320 - 4944
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x5f0b23ba4dcb8e0bb5d81cee1db2de2b13e264a1.sol:320

require(b <= a, errorMessage)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:51.173057
Transaction Length: 1
Severity: High
Contract: InDefiEcoPreMining
Function name: fundsToTokensUsePrice(address,uint256,uint256)
PC address: 16699
Estimated Gas Usage: 2202 - 36764
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x5f0b23ba4dcb8e0bb5d81cee1db2de2b13e264a1.sol:657

x * y

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0xcc392757cc8e5839b7147d2b0bb974690c874c1f.sol
Total states:16294
36.142265
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.137746
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3858
Estimated Gas Usage: 989 - 1464
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xcc392757cc8e5839b7147d2b0bb974690c874c1f.sol:32

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.683702
Transaction Length: 2
Severity: High
Contract: ColonyCLNY
Function name: increaseAllowance(address,uint256)
PC address: 4960
Estimated Gas Usage: 967 - 1442
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xcc392757cc8e5839b7147d2b0bb974690c874c1f.sol:32

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x8Ae6AE8F172d7fc103CCfa5890883d6fE46038C9.sol
Total states:1106
1.694081
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x69e2c1a516e1c617d96bb9524d739b30b54568a4.sol
Total states:18334
2670.721709
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.434513
Transaction Length: 1
Severity: High
Contract: master
Function name: airdrop(address,address[],uint256[])
PC address: 458
Estimated Gas Usage: 375 - 470
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x69e2c1a516e1c617d96bb9524d739b30b54568a4.sol:5

olidity 0.5.7;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.837836
Transaction Length: 1
Severity: High
Contract: master
Function name: airdrop(address,address[],uint256[])
PC address: 460
Estimated Gas Usage: 375 - 470
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x69e2c1a516e1c617d96bb9524d739b30b54568a4.sol:3

*/

//pragma solidity 0.5.7;
pragma 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:16.766818
Transaction Length: 1
Severity: High
Contract: master
Function name: airdrop(address,address[],uint256[])
PC address: 606
Estimated Gas Usage: 717 - 3494
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x69e2c1a516e1c617d96bb9524d739b30b54568a4.sol:5

olidity 0.5.7;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:27.643761
Transaction Length: 1
Severity: High
Contract: master
Function name: airdrop(address,address[],uint256[])
PC address: 608
Estimated Gas Usage: 717 - 3494
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x69e2c1a516e1c617d96bb9524d739b30b54568a4.sol:3

*/

//pragma solidity 0.5.7;
pragma 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:05.297428
Transaction Length: 1
Severity: High
Contract: master
Function name: name()
PC address: 790
Estimated Gas Usage: 1914 - 3044
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x69e2c1a516e1c617d96bb9524d739b30b54568a4.sol:68

function name() public view returns(string memory) {
        return _name;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:11:18.321370
Transaction Length: 1
Severity: High
Contract: master
Function name: symbol()
PC address: 1757
Estimated Gas Usage: 1957 - 3087
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x69e2c1a516e1c617d96bb9524d739b30b54568a4.sol:72

function symbol() public view returns(string memory) {
        return _symbol;
    }

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:13:53.735019
Transaction Length: 1
Severity: Low
Contract: master
Function name: decreaseAllowance(address,uint256)
PC address: 9553
Estimated Gas Usage: 973 - 1448
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x69e2c1a516e1c617d96bb9524d739b30b54568a4.sol:40

assert(b <= a)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:27:29.926354
Transaction Length: 2
Severity: Low
Contract: master
Function name: decreaseAllowance(address,uint256)
PC address: 9553
Estimated Gas Usage: 973 - 1448
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x69e2c1a516e1c617d96bb9524d739b30b54568a4.sol:40

assert(b <= a)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:18:30.484249
Transaction Length: 2
Severity: High
Contract: master
Function name: increaseAllowance(address,uint256)
PC address: 9571
Estimated Gas Usage: 1003 - 1478
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x69e2c1a516e1c617d96bb9524d739b30b54568a4.sol:45

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:25:04.849142
Transaction Length: 2
Severity: Low
Contract: master
Function name: increaseAllowance(address,uint256)
PC address: 9584
Estimated Gas Usage: 1013 - 1488
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x69e2c1a516e1c617d96bb9524d739b30b54568a4.sol:46

assert(c >= a)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0xB95EC860C1999bcd5111Ff3Ff086D0CeECadB7F9.sol
Total states:18016
34.780395
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.042261
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3847
Estimated Gas Usage: 1025 - 1500
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xB95EC860C1999bcd5111Ff3Ff086D0CeECadB7F9.sol:36

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.179066
Transaction Length: 2
Severity: High
Contract: ERC20Pausable
Function name: increaseAllowance(address,uint256)
PC address: 5606
Estimated Gas Usage: 1070 - 1545
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xB95EC860C1999bcd5111Ff3Ff086D0CeECadB7F9.sol:36

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0xedffadb79bc62737d6033594faf56a5a3df48aa2.sol
Total states:1517
1.337217
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0xf7c41056dabf08a82682f3a31fa04e427678ff55.sol
Total states:7204
33.54762
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.413532
Transaction Length: 1
Severity: Low
Contract: Layer2Storage
Function name: EROs(uint256)
PC address: 4148
Estimated Gas Usage: 746 - 841
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0xf7c41056dabf08a82682f3a31fa04e427678ff55.sol:1389

Data.Request[] public EROs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.937883
Transaction Length: 1
Severity: Low
Contract: Layer2Storage
Function name: URBs(uint256)
PC address: 4631
Estimated Gas Usage: 723 - 818
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0xf7c41056dabf08a82682f3a31fa04e427678ff55.sol:1394

Data.RequestBlock[] public URBs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:02.544403
Transaction Length: 1
Severity: Low
Contract: Layer2Storage
Function name: ORBs(uint256)
PC address: 5009
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0xf7c41056dabf08a82682f3a31fa04e427678ff55.sol:1393

Data.RequestBlock[] public ORBs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:02.924294
Transaction Length: 1
Severity: Low
Contract: Layer2Storage
Function name: ERUs(uint256)
PC address: 5209
Estimated Gas Usage: 766 - 861
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0xf7c41056dabf08a82682f3a31fa04e427678ff55.sol:1390

Data.Request[] public ERUs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:02.844249
Transaction Length: 1
Severity: Low
Contract: EpochHandler
Function name: EROs(uint256)
PC address: 10676
Estimated Gas Usage: 790 - 885
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0xf7c41056dabf08a82682f3a31fa04e427678ff55.sol:1389

Data.Request[] public EROs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:03.430180
Transaction Length: 1
Severity: Low
Contract: EpochHandler
Function name: URBs(uint256)
PC address: 11159
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0xf7c41056dabf08a82682f3a31fa04e427678ff55.sol:1394

Data.RequestBlock[] public URBs

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:04.567515
Transaction Length: 1
Severity: High
Contract: EpochHandler
Function name: prepareToSubmitURB()
PC address: 12323
Estimated Gas Usage: 65990 - 293115
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xf7c41056dabf08a82682f3a31fa04e427678ff55.sol:1614

ERUs.length - 1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:05.700753
Transaction Length: 1
Severity: Low
Contract: EpochHandler
Function name: ORBs(uint256)
PC address: 13973
Estimated Gas Usage: 766 - 861
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0xf7c41056dabf08a82682f3a31fa04e427678ff55.sol:1393

Data.RequestBlock[] public ORBs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:06.083656
Transaction Length: 1
Severity: Low
Contract: EpochHandler
Function name: ERUs(uint256)
PC address: 14173
Estimated Gas Usage: 788 - 883
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0xf7c41056dabf08a82682f3a31fa04e427678ff55.sol:1390

Data.Request[] public ERUs

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x4cc945e7b97fed1ead961cd83ed622fe48bbf3a0.sol
Total states:11132
656.38327
==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.004948
Transaction Length: 0
Severity: Medium
Contract: Governance
Function name: constructor
PC address: 18
Estimated Gas Usage: 42 - 137
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../contracts/m_loop/loop5/0x4cc945e7b97fed1ead961cd83ed622fe48bbf3a0.sol:625

tx.origin

--------------------

==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.055023
Transaction Length: 0
Severity: Medium
Contract: PlayerBook
Function name: constructor
PC address: 258
Estimated Gas Usage: 51024 - 251779
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../contracts/m_loop/loop5/0x4cc945e7b97fed1ead961cd83ed622fe48bbf3a0.sol:625

tx.origin

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.641310
Transaction Length: 1
Severity: High
Contract: PlayerBook
Function name: registerNameXName(string,string)
PC address: 1737
Estimated Gas Usage: 339 - 434
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x4cc945e7b97fed1ead961cd83ed622fe48bbf3a0.sol:3

*/

/***
 *    ██████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.706045
Transaction Length: 1
Severity: High
Contract: PlayerBook
Function name: registerNameXName(string,string)
PC address: 1888
Estimated Gas Usage: 681 - 3458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x4cc945e7b97fed1ead961cd83ed622fe48bbf3a0.sol:3

*/

/***
 *    ██████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:09.030728
Transaction Length: 1
Severity: High
Contract: PlayerBook
Function name: checkIfNameValid(string)
PC address: 2088
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x4cc945e7b97fed1ead961cd83ed622fe48bbf3a0.sol:3

*/

/***
 *    ██████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:07:32.651579
Transaction Length: 1
Severity: High
Contract: PlayerBook
Function name: bindRefer(address,string)
PC address: 3319
Estimated Gas Usage: 462 - 557
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x4cc945e7b97fed1ead961cd83ed622fe48bbf3a0.sol:3

*/

/***
 *    ██████

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:03:25.113755
Transaction Length: 1
Severity: Low
Contract: PlayerBook
Function name: checkIfNameValid(string)
PC address: 12849
Estimated Gas Usage: 878 - 4027
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x4cc945e7b97fed1ead961cd83ed622fe48bbf3a0.sol:337

_temp[1]

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0xefbe86f3b03681017907e4e0b3683f43773455aa.sol
Total states:14395
56.112788
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.982251
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1004
Estimated Gas Usage: 417 - 512
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xefbe86f3b03681017907e4e0b3683f43773455aa.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.988632
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1006
Estimated Gas Usage: 417 - 512
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xefbe86f3b03681017907e4e0b3683f43773455aa.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.165242
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1089
Estimated Gas Usage: 593 - 688
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xefbe86f3b03681017907e4e0b3683f43773455aa.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:20.003639
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1091
Estimated Gas Usage: 593 - 688
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xefbe86f3b03681017907e4e0b3683f43773455aa.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.795583
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeBP(uint256)
PC address: 2585
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0xefbe86f3b03681017907e4e0b3683f43773455aa.sol:629

uint[] public bonusRangeBP

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:35.075706
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeStart(uint256)
PC address: 6017
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0xefbe86f3b03681017907e4e0b3683f43773455aa.sol:628

uint[] public bonusRangeStart

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:32.169107
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: calculateRatePerEth(uint256,uint256,uint256)
PC address: 6866
Estimated Gas Usage: 955 - 1050
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xefbe86f3b03681017907e4e0b3683f43773455aa.sol:163

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x6518e0e9ff977ba017e5ec92d98e0ce2acdfccfa.sol
Total states:2673
114.401337
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.643413
Transaction Length: 1
Severity: High
Contract: PaymentMaster
Function name: multiHandlerSweep(address[],address)
PC address: 295
Estimated Gas Usage: 319 - 414
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x6518e0e9ff977ba017e5ec92d98e0ce2acdfccfa.sol:9

0 PaymentMaster







--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.507127
Transaction Length: 1
Severity: High
Contract: PaymentMaster
Function name: multiHandlerSweep(address[],address)
PC address: 297
Estimated Gas Usage: 319 - 414
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x6518e0e9ff977ba017e5ec92d98e0ce2acdfccfa.sol:3



*/



// v1.0 PaymentMaster





/

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:05.702529
Transaction Length: 1
Severity: Low
Contract: PaymentHandler
Function name: fallback()
PC address: 597
Estimated Gas Usage: 4310 - 74284
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop5/0x6518e0e9ff977ba017e5ec92d98e0ce2acdfccfa.sol:302

master.firePaymentReceivedEvent(address(this), msg.sender, msg.value)

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:05.707026
Transaction Length: 1
Severity: Medium
Contract: PaymentHandler
Function name: fallback()
PC address: 620
Estimated Gas Usage: 5043 - 109017
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 217
Offset: 597
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop5/0x6518e0e9ff977ba017e5ec92d98e0ce2acdfccfa.sol:242

contract PaymentHandler {



	// Keep track of the parent master contract - cannot be changed once set

	PaymentMaster public master;



	/**

	 * General constructor called by the master

	 */

	constructor(PaymentMaster _master) public {

		master = _master;

	}



	/**

	 * Helper function to return the parent master's address

	 */

	function getMasterAddress() public view returns (address) {

		return address(master);

	}



	/**

	 * Default payable function - forwards to the owner and triggers event

	 */

	function() external payable {

		// Get the parent master's owner address - explicity convert to payable

		address payable ownerAddress = address(uint160(master.owner()));



		// Forward the funds to the owner

		ownerAddress.transfer(msg.value);



		// Trigger the event notification in the parent master

		master.firePaymentReceivedEvent(address(this), msg.sender, msg.value);

	}



	/**

	 * Sweep any tokens to the owner of the master

	 */

	function sweepTokens(IERC20 token) public {

		// Get the owner address

		address ownerAddress = master.owner();



		// Get the current balance

		uint balance = token.balanceOf(address(this));



		// Transfer to the owner

		token.transfer(ownerAddress, balance);

	}



}

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:03.939563
Transaction Length: 1
Severity: Medium
Contract: PaymentHandler
Function name: sweepTokens(address)
PC address: 875
Estimated Gas Usage: 5654 - 109765
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 1090
Offset: 1306
Offset: 1530
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop5/0x6518e0e9ff977ba017e5ec92d98e0ce2acdfccfa.sol:314

function sweepTokens(IERC20 token) public {

		// Get the owner address

		address ownerAddress = master.owner();



		// Get the current balance

		uint balance = token.balanceOf(address(this));



		// Transfer to the owner

		token.transfer(ownerAddress, balance);

	}

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:42.701046
Transaction Length: 1
Severity: High
Contract: PaymentMaster
Function name: getHandlerList()
PC address: 932
Estimated Gas Usage: 1227 - 2074
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x6518e0e9ff977ba017e5ec92d98e0ce2acdfccfa.sol:429

function getHandlerList() public view returns (address[] memory) {

			// Return the entire list

      return handlerList;

  }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:51.970850
Transaction Length: 1
Severity: High
Contract: PaymentMaster
Function name: getHandlerList()
PC address: 972
Estimated Gas Usage: 1377 - 2600
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x6518e0e9ff977ba017e5ec92d98e0ce2acdfccfa.sol:429

function getHandlerList() public view returns (address[] memory) {

			// Return the entire list

      return handlerList;

  }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:01:48.161295
Transaction Length: 1
Severity: Medium
Contract: PaymentMaster
Function name: sweepTokens(address)
PC address: 1130
Estimated Gas Usage: 5292 - 109073
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 2955
Offset: 3142
Offset: 3335
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop5/0x6518e0e9ff977ba017e5ec92d98e0ce2acdfccfa.sol:509

function sweepTokens(IERC20 token) public {

		// Get the current balance

		uint balance = token.balanceOf(address(this));



		// Transfer to the owner

		token.transfer(this.owner(), balance);

	}

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:00:03.830485
Transaction Length: 1
Severity: Medium
Contract: PaymentHandler
Function name: sweepTokens(address)
PC address: 1530
Estimated Gas Usage: 4827 - 74752
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../contracts/m_loop/loop5/0x6518e0e9ff977ba017e5ec92d98e0ce2acdfccfa.sol:330

token.transfer(ownerAddress, balance)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:27.468077
Transaction Length: 1
Severity: Low
Contract: PaymentMaster
Function name: handlerList(uint256)
PC address: 1950
Estimated Gas Usage: 656 - 751
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x6518e0e9ff977ba017e5ec92d98e0ce2acdfccfa.sol:373

address[] public handlerList

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:01:43.601135
Transaction Length: 1
Severity: Medium
Contract: PaymentMaster
Function name: sweepTokens(address)
PC address: 3335
Estimated Gas Usage: 4467 - 74062
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../contracts/m_loop/loop5/0x6518e0e9ff977ba017e5ec92d98e0ce2acdfccfa.sol:519

token.transfer(this.owner(), balance)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x7b6c0726c8d2da330bf5c65c6889ee268cd19466.sol
Total states:35189
161.170814
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.048198
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1004
Estimated Gas Usage: 417 - 512
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x7b6c0726c8d2da330bf5c65c6889ee268cd19466.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.699683
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1006
Estimated Gas Usage: 417 - 512
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x7b6c0726c8d2da330bf5c65c6889ee268cd19466.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.913838
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1089
Estimated Gas Usage: 593 - 688
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x7b6c0726c8d2da330bf5c65c6889ee268cd19466.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:22.205927
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1091
Estimated Gas Usage: 593 - 688
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x7b6c0726c8d2da330bf5c65c6889ee268cd19466.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.915974
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1261
Estimated Gas Usage: 462 - 557
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x7b6c0726c8d2da330bf5c65c6889ee268cd19466.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.331037
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1263
Estimated Gas Usage: 462 - 557
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x7b6c0726c8d2da330bf5c65c6889ee268cd19466.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.331732
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1346
Estimated Gas Usage: 638 - 733
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x7b6c0726c8d2da330bf5c65c6889ee268cd19466.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:16.972291
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1348
Estimated Gas Usage: 638 - 733
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x7b6c0726c8d2da330bf5c65c6889ee268cd19466.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.770630
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeBP(uint256)
PC address: 2585
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x7b6c0726c8d2da330bf5c65c6889ee268cd19466.sol:784

uint[] public bonusRangeBP

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.448764
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3691
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x7b6c0726c8d2da330bf5c65c6889ee268cd19466.sol:1226

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:03.972470
Transaction Length: 2
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3691
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x7b6c0726c8d2da330bf5c65c6889ee268cd19466.sol:1226

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:34.811868
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeStart(uint256)
PC address: 6017
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x7b6c0726c8d2da330bf5c65c6889ee268cd19466.sol:783

uint[] public bonusRangeStart

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:32.831716
Transaction Length: 1
Severity: Low
Contract: LidStaking
Function name: stakeHandlers(uint256)
PC address: 6118
Estimated Gas Usage: 790 - 885
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x7b6c0726c8d2da330bf5c65c6889ee268cd19466.sol:961

IStakeHandler[] public stakeHandlers

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.662627
Transaction Length: 2
Severity: High
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6315
Estimated Gas Usage: 1699 - 2124
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x7b6c0726c8d2da330bf5c65c6889ee268cd19466.sol:1111

stakeHandlers.length-1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:07.405514
Transaction Length: 2
Severity: Low
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6326
Estimated Gas Usage: 1709 - 2134
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x7b6c0726c8d2da330bf5c65c6889ee268cd19466.sol:1111

stakeHandlers[stakeHandlers.length-1]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:30.653004
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: calculateRatePerEth(uint256,uint256,uint256)
PC address: 6866
Estimated Gas Usage: 955 - 1050
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x7b6c0726c8d2da330bf5c65c6889ee268cd19466.sol:162

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.335545
Transaction Length: 1
Severity: High
Contract: LidStaking
Function name: findTaxAmount(uint256,uint256)
PC address: 13348
Estimated Gas Usage: 474 - 569
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x7b6c0726c8d2da330bf5c65c6889ee268cd19466.sol:162

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:28.784269
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPoolBPs(uint256)
PC address: 15578
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x7b6c0726c8d2da330bf5c65c6889ee268cd19466.sol:1227

uint[] public tokenPoolBPs

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x40511f821857008644d07cedf5473d7e783b7e63.sol
Total states:87891
193.157604
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.493431
Transaction Length: 1
Severity: High
Contract: Airdropper
Function name: bulkTransfer(address,address[],uint256[])
PC address: 1173
Estimated Gas Usage: 439 - 534
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x40511f821857008644d07cedf5473d7e783b7e63.sol:5

olidity ^0.5.17;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.578395
Transaction Length: 1
Severity: High
Contract: Airdropper
Function name: bulkTransfer(address,address[],uint256[])
PC address: 1175
Estimated Gas Usage: 439 - 534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x40511f821857008644d07cedf5473d7e783b7e63.sol:3

*/

//pragma solidity ^0.5.17;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:20.293921
Transaction Length: 1
Severity: High
Contract: Airdropper
Function name: bulkTransfer(address,address[],uint256[])
PC address: 1321
Estimated Gas Usage: 772 - 3549
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x40511f821857008644d07cedf5473d7e783b7e63.sol:5

olidity ^0.5.17;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:27.538324
Transaction Length: 1
Severity: High
Contract: Airdropper
Function name: bulkTransfer(address,address[],uint256[])
PC address: 1323
Estimated Gas Usage: 772 - 3549
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x40511f821857008644d07cedf5473d7e783b7e63.sol:3

*/

//pragma solidity ^0.5.17;
pragm

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0xf89f6d0bcfeacd4de9022c7348b64603cc6b7f1f.sol
Total states:1682
10.855084
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.264998
Transaction Length: 1
Severity: High
Contract: TokenPool
Function name: balance()
PC address: 1682
Estimated Gas Usage: 2430 - 37419
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xf89f6d0bcfeacd4de9022c7348b64603cc6b7f1f.sol:5

racts/contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.725493
Transaction Length: 1
Severity: High
Contract: TokenPool
Function name: balance()
PC address: 1685
Estimated Gas Usage: 2430 - 37419
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xf89f6d0bcfeacd4de9022c7348b64603cc6b7f1f.sol:3



// File: contracts/contracts/math/SafeMat

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.602261
Transaction Length: 1
Severity: High
Contract: TokenPool
Function name: balance()
PC address: 1697
Estimated Gas Usage: 2430 - 37419
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xf89f6d0bcfeacd4de9022c7348b64603cc6b7f1f.sol:407

token.balanceOf(address(this))

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:02.787383
Transaction Length: 1
Severity: High
Contract: TokenPool
Function name: balance()
PC address: 2443
Estimated Gas Usage: 2430 - 37419
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xf89f6d0bcfeacd4de9022c7348b64603cc6b7f1f.sol:66

ing zero, but the
     

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x12c211dc731410ee5c5ee18670b54cb1b989e011.sol
Total states:1805
3.524187
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol
Total states:49005
336.710636
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.483296
Transaction Length: 1
Severity: Low
Contract: Getters
Function name: expiringCouponsAtIndex(uint256,uint256)
PC address: 2821
Estimated Gas Usage: 1090 - 1375
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:2361

_state.epochs[epoch].coupons.expiring[i]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.813241
Transaction Length: 1
Severity: High
Contract: Getters
Function name: totalNet()
PC address: 4187
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:9

ency file: @ope

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.721294
Transaction Length: 1
Severity: High
Contract: Getters
Function name: totalNet()
PC address: 4190
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:5

*/



// Dependency file: @openzeppelin/con

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.283119
Transaction Length: 1
Severity: High
Contract: Getters
Function name: totalNet()
PC address: 4202
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:2191

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.562618
Transaction Length: 1
Severity: High
Contract: Comptroller
Function name: totalNet()
PC address: 4387
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:9

ency file: @ope

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.751342
Transaction Length: 1
Severity: High
Contract: Permission
Function name: totalNet()
PC address: 4387
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:9

ency file: @ope

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.947565
Transaction Length: 1
Severity: High
Contract: Regulator
Function name: totalNet()
PC address: 4387
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:9

ency file: @ope

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.897919
Transaction Length: 1
Severity: High
Contract: Setters
Function name: totalNet()
PC address: 4387
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:9

ency file: @ope

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.454715
Transaction Length: 1
Severity: High
Contract: Comptroller
Function name: totalNet()
PC address: 4390
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:5

*/



// Dependency file: @openzeppelin/con

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.624015
Transaction Length: 1
Severity: High
Contract: Permission
Function name: totalNet()
PC address: 4390
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:5

*/



// Dependency file: @openzeppelin/con

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.842707
Transaction Length: 1
Severity: High
Contract: Regulator
Function name: totalNet()
PC address: 4390
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:5

*/



// Dependency file: @openzeppelin/con

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.795191
Transaction Length: 1
Severity: High
Contract: Setters
Function name: totalNet()
PC address: 4390
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:5

*/



// Dependency file: @openzeppelin/con

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.009744
Transaction Length: 1
Severity: High
Contract: Comptroller
Function name: totalNet()
PC address: 4402
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:2191

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.202449
Transaction Length: 1
Severity: High
Contract: Permission
Function name: totalNet()
PC address: 4402
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:2191

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.406392
Transaction Length: 1
Severity: High
Contract: Regulator
Function name: totalNet()
PC address: 4402
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:2191

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.357770
Transaction Length: 1
Severity: High
Contract: Setters
Function name: totalNet()
PC address: 4402
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:2191

dollar().totalSupply()

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.340370
Transaction Length: 1
Severity: High
Contract: Getters
Function name: totalNet()
PC address: 5628
Estimated Gas Usage: 2775 - 37669
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:107

when the result is nega

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.939778
Transaction Length: 1
Severity: High
Contract: Bonding
Function name: totalNet()
PC address: 5771
Estimated Gas Usage: 2753 - 37647
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:9

ency file: @ope

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.626830
Transaction Length: 1
Severity: High
Contract: Bonding
Function name: totalNet()
PC address: 5774
Estimated Gas Usage: 2753 - 37647
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:5

*/



// Dependency file: @openzeppelin/con

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.174879
Transaction Length: 1
Severity: High
Contract: Bonding
Function name: totalNet()
PC address: 5786
Estimated Gas Usage: 2753 - 37647
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:2191

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.189779
Transaction Length: 1
Severity: High
Contract: Market
Function name: totalNet()
PC address: 5827
Estimated Gas Usage: 2863 - 37757
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:9

ency file: @ope

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.610854
Transaction Length: 1
Severity: High
Contract: Market
Function name: totalNet()
PC address: 5830
Estimated Gas Usage: 2863 - 37757
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:5

*/



// Dependency file: @openzeppelin/con

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.398582
Transaction Length: 1
Severity: High
Contract: Market
Function name: totalNet()
PC address: 5842
Estimated Gas Usage: 2863 - 37757
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:2191

dollar().totalSupply()

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.081866
Transaction Length: 1
Severity: High
Contract: Comptroller
Function name: totalNet()
PC address: 5918
Estimated Gas Usage: 2775 - 37669
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:143

  * overflow.

     *



--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.286102
Transaction Length: 1
Severity: High
Contract: Permission
Function name: totalNet()
PC address: 5918
Estimated Gas Usage: 2775 - 37669
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:143

  * overflow.

     *



--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.477104
Transaction Length: 1
Severity: High
Contract: Regulator
Function name: totalNet()
PC address: 5918
Estimated Gas Usage: 2775 - 37669
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:143

  * overflow.

     *



--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.434053
Transaction Length: 1
Severity: High
Contract: Setters
Function name: totalNet()
PC address: 5918
Estimated Gas Usage: 2775 - 37669
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:143

  * overflow.

     *



--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.470534
Transaction Length: 1
Severity: High
Contract: Market
Function name: couponPremium(uint256)
PC address: 7042
Estimated Gas Usage: 2555 - 37449
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:9

ency file: @ope

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.991520
Transaction Length: 1
Severity: High
Contract: Market
Function name: couponPremium(uint256)
PC address: 7045
Estimated Gas Usage: 2555 - 37449
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:5

*/



// Dependency file: @openzeppelin/con

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.284318
Transaction Length: 1
Severity: High
Contract: Market
Function name: couponPremium(uint256)
PC address: 7057
Estimated Gas Usage: 2555 - 37449
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:4181

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.691059
Transaction Length: 1
Severity: High
Contract: Implementation
Function name: totalNet()
PC address: 8850
Estimated Gas Usage: 2797 - 37691
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:9

ency file: @ope

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.553171
Transaction Length: 1
Severity: High
Contract: Implementation
Function name: totalNet()
PC address: 8853
Estimated Gas Usage: 2797 - 37691
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:5

*/



// Dependency file: @openzeppelin/con

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.119669
Transaction Length: 1
Severity: High
Contract: Implementation
Function name: totalNet()
PC address: 8865
Estimated Gas Usage: 2797 - 37691
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:2191

dollar().totalSupply()

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.497265
Transaction Length: 1
Severity: High
Contract: Bonding
Function name: totalNet()
PC address: 10094
Estimated Gas Usage: 2753 - 37647
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:163

://github.com/OpenZeppe

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:16.816632
Transaction Length: 1
Severity: Low
Contract: Market
Function name: purchaseCoupons(uint256)
PC address: 10673
Estimated Gas Usage: 681 - 1340
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:3421

result[i]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.378218
Transaction Length: 1
Severity: High
Contract: Implementation
Function name: couponPremium(uint256)
PC address: 11462
Estimated Gas Usage: 2533 - 37427
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:9

ency file: @ope

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.803348
Transaction Length: 1
Severity: High
Contract: Implementation
Function name: couponPremium(uint256)
PC address: 11465
Estimated Gas Usage: 2533 - 37427
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:5

*/



// Dependency file: @openzeppelin/con

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.794080
Transaction Length: 1
Severity: High
Contract: Implementation
Function name: couponPremium(uint256)
PC address: 11477
Estimated Gas Usage: 2533 - 37427
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:4181

dollar().totalSupply()

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.995753
Transaction Length: 1
Severity: High
Contract: Market
Function name: totalNet()
PC address: 13213
Estimated Gas Usage: 2863 - 37757
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:197

.

     *

     * Requi

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:06.216046
Transaction Length: 1
Severity: High
Contract: Implementation
Function name: totalNet()
PC address: 25623
Estimated Gas Usage: 2797 - 37691
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3116519c3cc6c7f24d239cf165e8f0acd81c1e82.sol:269

ves remaining gas untou

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0xcd243d70160707812c2475eabfcbc93b21b27fbc.sol
Total states:35050
161.155031
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.377540
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1004
Estimated Gas Usage: 417 - 512
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xcd243d70160707812c2475eabfcbc93b21b27fbc.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.657370
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1006
Estimated Gas Usage: 417 - 512
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xcd243d70160707812c2475eabfcbc93b21b27fbc.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.420131
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1089
Estimated Gas Usage: 593 - 688
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xcd243d70160707812c2475eabfcbc93b21b27fbc.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:23.525469
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1091
Estimated Gas Usage: 593 - 688
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xcd243d70160707812c2475eabfcbc93b21b27fbc.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.869321
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1250
Estimated Gas Usage: 462 - 557
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xcd243d70160707812c2475eabfcbc93b21b27fbc.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.154538
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1252
Estimated Gas Usage: 462 - 557
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xcd243d70160707812c2475eabfcbc93b21b27fbc.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.961742
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1335
Estimated Gas Usage: 638 - 733
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xcd243d70160707812c2475eabfcbc93b21b27fbc.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:17.023208
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1337
Estimated Gas Usage: 638 - 733
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xcd243d70160707812c2475eabfcbc93b21b27fbc.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.060530
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeBP(uint256)
PC address: 2585
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0xcd243d70160707812c2475eabfcbc93b21b27fbc.sol:784

uint[] public bonusRangeBP

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.385628
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3621
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0xcd243d70160707812c2475eabfcbc93b21b27fbc.sol:1226

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:03.722746
Transaction Length: 2
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3621
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0xcd243d70160707812c2475eabfcbc93b21b27fbc.sol:1226

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:35.810242
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeStart(uint256)
PC address: 6017
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0xcd243d70160707812c2475eabfcbc93b21b27fbc.sol:783

uint[] public bonusRangeStart

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:32.251808
Transaction Length: 1
Severity: Low
Contract: LidStaking
Function name: stakeHandlers(uint256)
PC address: 6118
Estimated Gas Usage: 790 - 885
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0xcd243d70160707812c2475eabfcbc93b21b27fbc.sol:961

IStakeHandler[] public stakeHandlers

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.742675
Transaction Length: 2
Severity: High
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6315
Estimated Gas Usage: 1699 - 2124
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xcd243d70160707812c2475eabfcbc93b21b27fbc.sol:1111

stakeHandlers.length-1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:07.830575
Transaction Length: 2
Severity: Low
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6326
Estimated Gas Usage: 1709 - 2134
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0xcd243d70160707812c2475eabfcbc93b21b27fbc.sol:1111

stakeHandlers[stakeHandlers.length-1]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:31.773037
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: calculateRatePerEth(uint256,uint256,uint256)
PC address: 6866
Estimated Gas Usage: 955 - 1050
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xcd243d70160707812c2475eabfcbc93b21b27fbc.sol:162

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.242241
Transaction Length: 1
Severity: High
Contract: LidStaking
Function name: findTaxAmount(uint256,uint256)
PC address: 13348
Estimated Gas Usage: 474 - 569
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xcd243d70160707812c2475eabfcbc93b21b27fbc.sol:162

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:28.368486
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPoolBPs(uint256)
PC address: 15373
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0xcd243d70160707812c2475eabfcbc93b21b27fbc.sol:1227

uint[] public tokenPoolBPs

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x8204A7Ed1335c103D82f1fA637e79f8Ae5BBE87A.sol
Total states:2391
19.791425
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0xa440cc047fd0bc519af1dab35d8d8fe558c358e3.sol
Total states:77
3.260095
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0xfb4d179d144c0390f759bdf4fe6d2891de863cdb.sol
Total states:998
43.479265
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.278804
Transaction Length: 1
Severity: High
Contract: MerkleDistributor
Function name: claim(uint256,address,uint256,bytes32[],uint256)
PC address: 343
Estimated Gas Usage: 427 - 522
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xfb4d179d144c0390f759bdf4fe6d2891de863cdb.sol:5

cense-Identifier: MIT

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.980004
Transaction Length: 1
Severity: High
Contract: MerkleDistributor
Function name: claim(uint256,address,uint256,bytes32[],uint256)
PC address: 345
Estimated Gas Usage: 427 - 522
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xfb4d179d144c0390f759bdf4fe6d2891de863cdb.sol:3

*/

// SPDX-License-Identifier: MIT


--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0xab47fbe8a0b75baa4ef846e99f6bb3b52007a115.sol
Total states:8498
78.564562
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:01.264377
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3645
Estimated Gas Usage: 1025 - 1500
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xab47fbe8a0b75baa4ef846e99f6bb3b52007a115.sol:186

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x1d4de814c6ea1ecf9020c26d73dcbae94b90b733.sol
Total states:2324
1.801116
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x158ef8873854b29b702d42ff48c99f3a59baac02.sol
Total states:3742
76.845083
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.924502
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: initialize(uint256,uint256,address[],uint256[],address)
PC address: 798
Estimated Gas Usage: 439 - 534
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x158ef8873854b29b702d42ff48c99f3a59baac02.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.069910
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: initialize(uint256,uint256,address[],uint256[],address)
PC address: 800
Estimated Gas Usage: 439 - 534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x158ef8873854b29b702d42ff48c99f3a59baac02.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.025972
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: initialize(uint256,uint256,address[],uint256[],address)
PC address: 883
Estimated Gas Usage: 615 - 710
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x158ef8873854b29b702d42ff48c99f3a59baac02.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:20.961771
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: initialize(uint256,uint256,address[],uint256[],address)
PC address: 885
Estimated Gas Usage: 615 - 710
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x158ef8873854b29b702d42ff48c99f3a59baac02.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:30.618712
Transaction Length: 1
Severity: Medium
Contract: LidTeamLock
Function name: startRelease()
PC address: 1036
Estimated Gas Usage: 20796 - 150675
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 4542
Offset: 4906
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop5/0x158ef8873854b29b702d42ff48c99f3a59baac02.sol:698

function startRelease() external {

        require(releaseStart == 0, "Has already started.");

        require(address(this).balance != 0, "Must have some ether deposited.");

        require(lidToken.balanceOf(address(this)) != 0, "Must have some lid deposited.");

        startingLid = lidToken.balanceOf(address(this));

        startingEth = address(this).balance;

        releaseStart = now.add(24 hours);

    }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:00.632401
Transaction Length: 2
Severity: Medium
Contract: LidTeamLock
Function name: startRelease()
PC address: 1036
Estimated Gas Usage: 20796 - 150675
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 4542
Offset: 4906
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop5/0x158ef8873854b29b702d42ff48c99f3a59baac02.sol:698

function startRelease() external {

        require(releaseStart == 0, "Has already started.");

        require(address(this).balance != 0, "Must have some ether deposited.");

        require(lidToken.balanceOf(address(this)) != 0, "Must have some lid deposited.");

        startingLid = lidToken.balanceOf(address(this));

        startingEth = address(this).balance;

        releaseStart = now.add(24 hours);

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:31.980287
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 1184
Estimated Gas Usage: 407 - 502
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x158ef8873854b29b702d42ff48c99f3a59baac02.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:34.906441
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 1186
Estimated Gas Usage: 407 - 502
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x158ef8873854b29b702d42ff48c99f3a59baac02.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:40.558172
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 1269
Estimated Gas Usage: 583 - 678
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x158ef8873854b29b702d42ff48c99f3a59baac02.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:55.650955
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 1271
Estimated Gas Usage: 583 - 678
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x158ef8873854b29b702d42ff48c99f3a59baac02.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.732457
Transaction Length: 1
Severity: Low
Contract: LidTeamLock
Function name: teamMemberBPs(uint256)
PC address: 1645
Estimated Gas Usage: 746 - 841
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x158ef8873854b29b702d42ff48c99f3a59baac02.sol:572

uint[] public teamMemberBPs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:12.948919
Transaction Length: 1
Severity: Low
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 5051
Estimated Gas Usage: 1070 - 1165
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x158ef8873854b29b702d42ff48c99f3a59baac02.sol:724

teamMemberAddresses[0]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:13.384230
Transaction Length: 1
Severity: Low
Contract: LidTeamLock
Function name: teamMemberAddresses(uint256)
PC address: 5622
Estimated Gas Usage: 678 - 773
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x158ef8873854b29b702d42ff48c99f3a59baac02.sol:570

address payable[] public teamMemberAddresses

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:29.479018
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: startRelease()
PC address: 6670
Estimated Gas Usage: 15736 - 125615
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x158ef8873854b29b702d42ff48c99f3a59baac02.sol:186

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0xcAAdcFC74404D54987D0763fa46484C74D166e92.sol
Total states:504
3.595711
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:00.802446
Transaction Length: 1
Severity: Low
Contract: SpellAction
Function name: execute()
PC address: 215
Estimated Gas Usage: 939 - 1315
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop5/0xcAAdcFC74404D54987D0763fa46484C74D166e92.sol:100

PotAbstract(MCD_POT).drip()

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:01.769005
Transaction Length: 1
Severity: Low
Contract: SpellAction
Function name: execute()
PC address: 458
Estimated Gas Usage: 2612 - 37645
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop5/0xcAAdcFC74404D54987D0763fa46484C74D166e92.sol:106

PotAbstract(MCD_POT).file("dsr", ZERO_PCT_RATE)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.944533
Transaction Length: 1
Severity: High
Contract: SpellAction
Function name: execute()
PC address: 644
Estimated Gas Usage: 4958 - 108460
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xcAAdcFC74404D54987D0763fa46484C74D166e92.sol:5

(C) 2020 Maker 

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0xd6bd449f82854e324786c0709c48272995b44b4d.sol
Total states:1569
3.531098
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:01.572660
Transaction Length: 1
Severity: Low
Contract: GenesisValidator
Function name: depositKAI(address,uint256)
PC address: 3044
Estimated Gas Usage: 2261 - 3252
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop5/0xd6bd449f82854e324786c0709c48272995b44b4d.sol:848

Token(KAI_ADDRESS).transferFrom(msg.sender, address(this), _amount)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0xd5a8551a6ee63ffccce8f92736d658112bccc7c9.sol
Total states:92
1.049907
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0xa468779f69af97031435bb104d657696c65634e0.sol
Total states:736
1.592527
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x75d98EfA9B4F38661cB3ade7A7b2840BB2954806.sol
Total states:4368
582.108348
==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.005552
Transaction Length: 0
Severity: Medium
Contract: Governance
Function name: constructor
PC address: 18
Estimated Gas Usage: 42 - 137
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../contracts/m_loop/loop5/0x75d98EfA9B4F38661cB3ade7A7b2840BB2954806.sol:639

tx.origin

--------------------

==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.030871
Transaction Length: 0
Severity: Medium
Contract: LPTokenWrapper
Function name: constructor
PC address: 241
Estimated Gas Usage: 16419 - 77504
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../contracts/m_loop/loop5/0x75d98EfA9B4F38661cB3ade7A7b2840BB2954806.sol:639

tx.origin

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.250387
Transaction Length: 0
Severity: High
Contract: UniswapReward
Function name: constructor
PC address: 517
Estimated Gas Usage: 37837 - 179912
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x75d98EfA9B4F38661cB3ade7A7b2840BB2954806.sol:796

now + 365 days

--------------------

==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.705255
Transaction Length: 0
Severity: Medium
Contract: UniswapReward
Function name: constructor
PC address: 583
Estimated Gas Usage: 78340 - 380745
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../contracts/m_loop/loop5/0x75d98EfA9B4F38661cB3ade7A7b2840BB2954806.sol:639

tx.origin

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.808698
Transaction Length: 1
Severity: High
Contract: LPTokenWrapper
Function name: stake(uint256,string)
PC address: 873
Estimated Gas Usage: 411 - 506
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x75d98EfA9B4F38661cB3ade7A7b2840BB2954806.sol:3

*/

/***
 *    ██████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.642331
Transaction Length: 1
Severity: High
Contract: UniswapReward
Function name: stake(uint256,string)
PC address: 2435
Estimated Gas Usage: 456 - 551
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x75d98EfA9B4F38661cB3ade7A7b2840BB2954806.sol:3

*/

/***
 *    ██████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:58.893642
Transaction Length: 1
Severity: High
Contract: UniswapReward
Function name: seize(address,uint256)
PC address: 13914
Estimated Gas Usage: 2651 - 5713
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x75d98EfA9B4F38661cB3ade7A7b2840BB2954806.sol:544

address(token).call(abi.encodeWithSelector(SELECTOR, to, value))

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:06:45.054659
Transaction Length: 1
Severity: Medium
Contract: UniswapReward
Function name: seize(address,uint256)
PC address: 13931
Estimated Gas Usage: 2976 - 7118
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../contracts/m_loop/loop5/0x75d98EfA9B4F38661cB3ade7A7b2840BB2954806.sol:544

address(token).call(abi.encodeWithSelector(SELECTOR, to, value))

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x6e15c68d0ba6068c6c6989a1cab84b783ca901ef.sol
Total states:3585
54.000368
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:37.594360
Transaction Length: 1
Severity: High
Contract: GOKUReserves
Function name: reserves()
PC address: 1833
Estimated Gas Usage: 2452 - 37441
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x6e15c68d0ba6068c6c6989a1cab84b783ca901ef.sol:5

dity ^0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:31.630399
Transaction Length: 1
Severity: High
Contract: GOKUReserves
Function name: reserves()
PC address: 1836
Estimated Gas Usage: 2452 - 37441
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x6e15c68d0ba6068c6c6989a1cab84b783ca901ef.sol:3



//pragma solidity ^0.5.17;
pragma solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:34.813308
Transaction Length: 1
Severity: High
Contract: GOKUReserves
Function name: reserves()
PC address: 1848
Estimated Gas Usage: 2452 - 37441
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x6e15c68d0ba6068c6c6989a1cab84b783ca901ef.sol:730

IERC20(reserveToken).balanceOf(address(this))

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:38.147181
Transaction Length: 1
Severity: High
Contract: GOKUReserves
Function name: reserves()
PC address: 3792
Estimated Gas Usage: 2452 - 37441
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x6e15c68d0ba6068c6c6989a1cab84b783ca901ef.sol:67

ion transferFrom(addres

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x96b3ce8154907bde5384928d3f3923a2b807ee46.sol
Total states:723
6.392013
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0xe853f71996f4bae84da2f1c9218ddcf5b486dacc.sol
Total states:426
0.681403
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x7d591ad2a38c489e9c6eaf31336018333faf68ad.sol
Total states:41890
215.701503
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.518680
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: updateBonus(uint256[],uint256[])
PC address: 723
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x7d591ad2a38c489e9c6eaf31336018333faf68ad.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.374186
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: updateBonus(uint256[],uint256[])
PC address: 725
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x7d591ad2a38c489e9c6eaf31336018333faf68ad.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.593375
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: updateBonus(uint256[],uint256[])
PC address: 808
Estimated Gas Usage: 539 - 634
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x7d591ad2a38c489e9c6eaf31336018333faf68ad.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:22.605335
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: updateBonus(uint256[],uint256[])
PC address: 810
Estimated Gas Usage: 539 - 634
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x7d591ad2a38c489e9c6eaf31336018333faf68ad.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:34.530395
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1221
Estimated Gas Usage: 417 - 512
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x7d591ad2a38c489e9c6eaf31336018333faf68ad.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:38.115276
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1223
Estimated Gas Usage: 417 - 512
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x7d591ad2a38c489e9c6eaf31336018333faf68ad.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.073079
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1261
Estimated Gas Usage: 462 - 557
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x7d591ad2a38c489e9c6eaf31336018333faf68ad.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.415922
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1263
Estimated Gas Usage: 462 - 557
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x7d591ad2a38c489e9c6eaf31336018333faf68ad.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:43.080503
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1306
Estimated Gas Usage: 593 - 688
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x7d591ad2a38c489e9c6eaf31336018333faf68ad.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:55.593109
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1308
Estimated Gas Usage: 593 - 688
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x7d591ad2a38c489e9c6eaf31336018333faf68ad.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.762407
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1346
Estimated Gas Usage: 638 - 733
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x7d591ad2a38c489e9c6eaf31336018333faf68ad.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:20.019273
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1348
Estimated Gas Usage: 638 - 733
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x7d591ad2a38c489e9c6eaf31336018333faf68ad.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:33.322600
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeBP(uint256)
PC address: 3309
Estimated Gas Usage: 767 - 862
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x7d591ad2a38c489e9c6eaf31336018333faf68ad.sol:1577

uint[] public bonusRangeBP

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.522945
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3707
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x7d591ad2a38c489e9c6eaf31336018333faf68ad.sol:2479

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:03.904271
Transaction Length: 2
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3707
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x7d591ad2a38c489e9c6eaf31336018333faf68ad.sol:2479

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:23.962640
Transaction Length: 1
Severity: Low
Contract: LidStaking
Function name: stakeHandlers(uint256)
PC address: 6118
Estimated Gas Usage: 790 - 885
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x7d591ad2a38c489e9c6eaf31336018333faf68ad.sol:1967

IStakeHandler[] public stakeHandlers

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.682585
Transaction Length: 2
Severity: High
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6315
Estimated Gas Usage: 1699 - 2124
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x7d591ad2a38c489e9c6eaf31336018333faf68ad.sol:2267

stakeHandlers.length-1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:07.986948
Transaction Length: 2
Severity: Low
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6326
Estimated Gas Usage: 1709 - 2134
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x7d591ad2a38c489e9c6eaf31336018333faf68ad.sol:2267

stakeHandlers[stakeHandlers.length-1]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:07.239576
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeStart(uint256)
PC address: 6741
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x7d591ad2a38c489e9c6eaf31336018333faf68ad.sol:1575

uint[] public bonusRangeStart

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:03.102314
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: calculateRatePerEth(uint256,uint256,uint256)
PC address: 7590
Estimated Gas Usage: 955 - 1050
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x7d591ad2a38c489e9c6eaf31336018333faf68ad.sol:444

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.470198
Transaction Length: 1
Severity: High
Contract: LidStaking
Function name: findTaxAmount(uint256,uint256)
PC address: 13348
Estimated Gas Usage: 474 - 569
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x7d591ad2a38c489e9c6eaf31336018333faf68ad.sol:444

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:32.421852
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPoolBPs(uint256)
PC address: 15577
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x7d591ad2a38c489e9c6eaf31336018333faf68ad.sol:2481

uint[] public tokenPoolBPs

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x09e5eaa0ffc9731176713f2c2d21475eecebe56a.sol
Total states:27421
55.905234
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.105377
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3244
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x09e5eaa0ffc9731176713f2c2d21475eecebe56a.sol:134

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.902678
Transaction Length: 2
Severity: High
Contract: ERC20Burnable
Function name: increaseAllowance(address,uint256)
PC address: 3424
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x09e5eaa0ffc9731176713f2c2d21475eecebe56a.sol:134

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.053036
Transaction Length: 2
Severity: High
Contract: ERC20Mintable
Function name: increaseAllowance(address,uint256)
PC address: 3847
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x09e5eaa0ffc9731176713f2c2d21475eecebe56a.sol:134

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0xc54b0EDfef6fE57Eb47Ce4f4893108e664A9eA2d.sol
Total states:1065
1.449597
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.944643
Transaction Length: 1
Severity: Low
Contract: SynthRegistry
Function name: availableSynths(uint256)
PC address: 3128
Estimated Gas Usage: 656 - 751
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0xc54b0EDfef6fE57Eb47Ce4f4893108e664A9eA2d.sol:278

address[] public availableSynths

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0xCb4336D9aA2027f563437B721b34C56a3E7A23F4.sol
Total states:1503
10.928202
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.090253
Transaction Length: 0
Severity: High
Contract: ERC20
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xCb4336D9aA2027f563437B721b34C56a3E7A23F4.sol:15

/**
    * 可选方法
    */
    function 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.186515
Transaction Length: 0
Severity: High
Contract: BtswapToken
Function name: constructor
PC address: 1203
Estimated Gas Usage: 1750 - 36312
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xCb4336D9aA2027f563437B721b34C56a3E7A23F4.sol:86

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x1e624aB76809c4BE098f38c3a4250b5306ADE2Ce.sol
Total states:475
4.956625
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x6b41459ced638645092a1c6d50726b428a66348a2.sol
Total states:596
1.605583
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x09D4fC517c7Ee9354acA81A80A13126179957B90.sol
Total states:6882
65.904334
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.097050
Transaction Length: 0
Severity: High
Contract: GGDAsset
Function name: constructor
PC address: 163
Estimated Gas Usage: 16051 - 79388
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x09D4fC517c7Ee9354acA81A80A13126179957B90.sol:16

 The Ownable contract has an owner address,

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.112050
Transaction Length: 1
Severity: High
Contract: ERC721
Function name: safeTransferFrom(address,address,uint256,bytes)
PC address: 1136
Estimated Gas Usage: 477 - 572
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x09D4fC517c7Ee9354acA81A80A13126179957B90.sol:3

*/

/**
 *Submitted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.466909
Transaction Length: 1
Severity: High
Contract: ERC721Enumerable
Function name: safeTransferFrom(address,address,uint256,bytes)
PC address: 1379
Estimated Gas Usage: 477 - 572
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x09D4fC517c7Ee9354acA81A80A13126179957B90.sol:3

*/

/**
 *Submitted for verificatio

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x3B3812BB9f6151bEb6fa10783F1ae848a77a0d46.sol
Total states:1697
40.506473
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x1ea84b986ee08b68d37bfe07c7564b84dee40bd6.sol
Total states:77
3.358326
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0xa30Ac92c04561aFF9eD644e8E1eC53A1A5e046DD.sol
Total states:1444
7.278102
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.709003
Transaction Length: 1
Severity: High
Contract: TokenPool
Function name: balance()
PC address: 1230
Estimated Gas Usage: 2430 - 37419
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xa30Ac92c04561aFF9eD644e8E1eC53A1A5e046DD.sol:5

zeppelin-solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.461140
Transaction Length: 1
Severity: High
Contract: TokenPool
Function name: balance()
PC address: 1233
Estimated Gas Usage: 2430 - 37419
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xa30Ac92c04561aFF9eD644e8E1eC53A1A5e046DD.sol:3



// File: openzeppelin-solidity/contracts/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.183891
Transaction Length: 1
Severity: High
Contract: TokenPool
Function name: balance()
PC address: 1245
Estimated Gas Usage: 2430 - 37419
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xa30Ac92c04561aFF9eD644e8E1eC53A1A5e046DD.sol:403

token.balanceOf(address(this))

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:02.223990
Transaction Length: 1
Severity: High
Contract: TokenPool
Function name: balance()
PC address: 1920
Estimated Gas Usage: 2430 - 37419
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xa30Ac92c04561aFF9eD644e8E1eC53A1A5e046DD.sol:49

 returns (uint256) {
  

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x10334122ef6ddb3c0cf84639d881b442c00ab2e8.sol
Total states:832
6.306287
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.189930
Transaction Length: 0
Severity: High
Contract: MasterChef_pizzas
Function name: constructor
PC address: 1695
Estimated Gas Usage: 75764 - 361619
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x10334122ef6ddb3c0cf84639d881b442c00ab2e8.sol:50

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x1bb925d0ee2a799224a9b8a1a314e34315257292.sol
Total states:13131
1064.692085
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.705953
Transaction Length: 1
Severity: High
Contract: MODERNA
Function name: dropToken(address[],uint256[])
PC address: 1909
Estimated Gas Usage: 340 - 435
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x1bb925d0ee2a799224a9b8a1a314e34315257292.sol:5

olidity ^0.5.0;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.277127
Transaction Length: 1
Severity: High
Contract: MODERNA
Function name: dropToken(address[],uint256[])
PC address: 1911
Estimated Gas Usage: 340 - 435
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x1bb925d0ee2a799224a9b8a1a314e34315257292.sol:3

*/

//pragma solidity ^0.5.0;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:15.868539
Transaction Length: 1
Severity: High
Contract: MODERNA
Function name: dropToken(address[],uint256[])
PC address: 2057
Estimated Gas Usage: 673 - 3450
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x1bb925d0ee2a799224a9b8a1a314e34315257292.sol:5

olidity ^0.5.0;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:27.933084
Transaction Length: 1
Severity: High
Contract: MODERNA
Function name: dropToken(address[],uint256[])
PC address: 2059
Estimated Gas Usage: 673 - 3450
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x1bb925d0ee2a799224a9b8a1a314e34315257292.sol:3

*/

//pragma solidity ^0.5.0;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:52.208692
Transaction Length: 1
Severity: High
Contract: MODERNA
Function name: approveAndCall(address,uint256,bytes)
PC address: 2285
Estimated Gas Usage: 422 - 517
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x1bb925d0ee2a799224a9b8a1a314e34315257292.sol:3

*/

//pragma solidity ^0.5.0;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:46.923999
Transaction Length: 1
Severity: High
Contract: MODERNA
Function name: approveAndCall(address,uint256,bytes)
PC address: 7994
Estimated Gas Usage: 9044 - 36742
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x1bb925d0ee2a799224a9b8a1a314e34315257292.sol:255

spender.receiveApproval(msg.sender, _value, address(this), _extraData)

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:02:31.367214
Transaction Length: 1
Severity: Medium
Contract: MODERNA
Function name: approveAndCall(address,uint256,bytes)
PC address: 8067
Estimated Gas Usage: 9754 - 37357
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../contracts/m_loop/loop5/0x1bb925d0ee2a799224a9b8a1a314e34315257292.sol:255

spender.receiveApproval(msg.sender, _value, address(this), _extraData)

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:02:56.179322
Transaction Length: 2
Severity: Medium
Contract: MODERNA
Function name: approveAndCall(address,uint256,bytes)
PC address: 8067
Estimated Gas Usage: 9754 - 37357
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../contracts/m_loop/loop5/0x1bb925d0ee2a799224a9b8a1a314e34315257292.sol:255

spender.receiveApproval(msg.sender, _value, address(this), _extraData)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:35.240716
Transaction Length: 1
Severity: High
Contract: MODERNA
Function name: approveAndCall(address,uint256,bytes)
PC address: 9075
Estimated Gas Usage: 1552 - 7858
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x1bb925d0ee2a799224a9b8a1a314e34315257292.sol:23

require(b <= a, errorMessage)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x5cad3a3f3ddba64336ea2801a2c5b99485edbdd9.sol
Total states:22554
99.334475
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.165627
Transaction Length: 0
Severity: High
Contract: Town
Function name: constructor
PC address: 844
Estimated Gas Usage: 558 - 3889
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x5cad3a3f3ddba64336ea2801a2c5b99485edbdd9.sol:1402

distributionPeriod * 1 days

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:20.598489
Transaction Length: 0
Severity: High
Contract: Town
Function name: constructor
PC address: 1422
Estimated Gas Usage: 46536 - 230197
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x5cad3a3f3ddba64336ea2801a2c5b99485edbdd9.sol:303

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.996001
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3044
Estimated Gas Usage: 989 - 1464
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x5cad3a3f3ddba64336ea2801a2c5b99485edbdd9.sol:225

a + b

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:03.052522
Transaction Length: 1
Severity: Low
Contract: TownToken
Function name: transfer(address,uint256)
PC address: 3334
Estimated Gas Usage: 2044 - 3175
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop5/0x5cad3a3f3ddba64336ea2801a2c5b99485edbdd9.sol:1100

_town.checkProposal(recipient)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.829192
Transaction Length: 2
Severity: High
Contract: ExternalTokenTemplate
Function name: increaseAllowance(address,uint256)
PC address: 3494
Estimated Gas Usage: 922 - 1397
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x5cad3a3f3ddba64336ea2801a2c5b99485edbdd9.sol:225

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:03.684860
Transaction Length: 1
Severity: Low
Contract: TownToken
Function name: getHolderByIndex(uint256)
PC address: 4982
Estimated Gas Usage: 725 - 820
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x5cad3a3f3ddba64336ea2801a2c5b99485edbdd9.sol:1076

_holders[index]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.097668
Transaction Length: 2
Severity: High
Contract: TownToken
Function name: increaseAllowance(address,uint256)
PC address: 6628
Estimated Gas Usage: 967 - 1442
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x5cad3a3f3ddba64336ea2801a2c5b99485edbdd9.sol:225

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x58d9aeff5bd966717a61439fffd2273102084b90.sol
Total states:3592
6.951505
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.195236
Transaction Length: 0
Severity: High
Contract: LuckAssetsPoolA
Function name: constructor
PC address: 513
Estimated Gas Usage: 54881 - 291329
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x58d9aeff5bd966717a61439fffd2273102084b90.sol:371

lib_math.OneDay() * 60

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.183039
Transaction Length: 0
Severity: High
Contract: LuckAssetsPoolA
Function name: constructor
PC address: 515
Estimated Gas Usage: 54881 - 291329
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x58d9aeff5bd966717a61439fffd2273102084b90.sol:371

now + lib_math.OneDay() * 60

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.260810
Transaction Length: 1
Severity: Low
Contract: InternalModule
Function name: _contractOwners(uint256)
PC address: 550
Estimated Gas Usage: 634 - 729
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x58d9aeff5bd966717a61439fffd2273102084b90.sol:26

address payable[] public _contractOwners = [

        address(0xc99D13544297d5baD9e0b0Ca0E94A4E614312F33)

    ]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.576286
Transaction Length: 1
Severity: Low
Contract: LuckAssetsPoolA
Function name: _contractOwners(uint256)
PC address: 3489
Estimated Gas Usage: 679 - 774
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x58d9aeff5bd966717a61439fffd2273102084b90.sol:26

address payable[] public _contractOwners = [

        address(0xc99D13544297d5baD9e0b0Ca0E94A4E614312F33)

    ]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:02.916440
Transaction Length: 1
Severity: Low
Contract: LuckAssetsPoolA
Function name: _investList(uint256)
PC address: 4986
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x58d9aeff5bd966717a61439fffd2273102084b90.sol:331

Invest[] public _investList

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x3d602bc3d36fbd89e0cd16d0f0aa73e4da66ba1a.sol
Total states:4378
16.366738
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:08.563780
Transaction Length: 1
Severity: Low
Contract: HDCOREv1Router
Function name: fallback
PC address: 2051
Estimated Gas Usage: 7941 - 29735
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop5/0x3d602bc3d36fbd89e0cd16d0f0aa73e4da66ba1a.sol:646

_WETH.deposit.value(msg.value)()

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:09.419428
Transaction Length: 1
Severity: Low
Contract: HDCOREv1Router
Function name: refreshApproval()
PC address: 4460
Estimated Gas Usage: 1899 - 3125
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop5/0x3d602bc3d36fbd89e0cd16d0f0aa73e4da66ba1a.sol:630

IUniswapV2Pair(_hdcoreWETHPair).approve(address(_hdcoreVault), uint(-1))

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0xa8ee490e4c4da48cc1653502c1a77479d4d818de.sol
Total states:9507
94.575561
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.074428
Transaction Length: 0
Severity: High
Contract: ERC721BaseCollection
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xa8ee490e4c4da48cc1653502c1a77479d4d818de.sol:15

vides a basic access control mechanism, whe

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.062044
Transaction Length: 0
Severity: High
Contract: ERC721Collection
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xa8ee490e4c4da48cc1653502c1a77479d4d818de.sol:15

vides a basic access control mechanism, whe

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.056214
Transaction Length: 0
Severity: High
Contract: ERC721Full
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xa8ee490e4c4da48cc1653502c1a77479d4d818de.sol:15

vides a basic access control mechanism, whe

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.049570
Transaction Length: 0
Severity: High
Contract: ERC721Metadata
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xa8ee490e4c4da48cc1653502c1a77479d4d818de.sol:15

vides a basic access control mechanism, whe

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.153910
Transaction Length: 1
Severity: High
Contract: ERC721
Function name: safeTransferFrom(address,address,uint256,bytes)
PC address: 1136
Estimated Gas Usage: 477 - 572
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xa8ee490e4c4da48cc1653502c1a77479d4d818de.sol:3

*/

/**
 *Submitted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.362307
Transaction Length: 1
Severity: High
Contract: ERC721Enumerable
Function name: safeTransferFrom(address,address,uint256,bytes)
PC address: 1379
Estimated Gas Usage: 477 - 572
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xa8ee490e4c4da48cc1653502c1a77479d4d818de.sol:3

*/

/**
 *Submitted for verificatio

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x20081862b301c1ef9357bc0a125aa414db210f2c.sol
Total states:10421
150.684065
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.473544
Transaction Length: 1
Severity: High
Contract: Operator
Function name: setOperators(address[])
PC address: 540
Estimated Gas Usage: 340 - 435
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x20081862b301c1ef9357bc0a125aa414db210f2c.sol:5

ontracts/modules/Owna

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.627562
Transaction Length: 1
Severity: High
Contract: Operator
Function name: setOperators(address[])
PC address: 542
Estimated Gas Usage: 340 - 435
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x20081862b301c1ef9357bc0a125aa414db210f2c.sol:3

*/

// File: contracts/modules/Ownab

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:27.932597
Transaction Length: 1
Severity: High
Contract: Operator
Function name: getOperator()
PC address: 763
Estimated Gas Usage: 1249 - 2096
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x20081862b301c1ef9357bc0a125aa414db210f2c.sol:443

function getOperator()public view returns (address[] memory) {
        return _operatorList;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:36.942776
Transaction Length: 1
Severity: High
Contract: Operator
Function name: getOperator()
PC address: 803
Estimated Gas Usage: 1399 - 2622
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x20081862b301c1ef9357bc0a125aa414db210f2c.sol:443

function getOperator()public view returns (address[] memory) {
        return _operatorList;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.122696
Transaction Length: 1
Severity: High
Contract: CollateralData
Function name: setOperators(address[])
PC address: 1436
Estimated Gas Usage: 429 - 524
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x20081862b301c1ef9357bc0a125aa414db210f2c.sol:5

ontracts/modules/Owna

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.819500
Transaction Length: 1
Severity: High
Contract: CollateralData
Function name: setOperators(address[])
PC address: 1438
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x20081862b301c1ef9357bc0a125aa414db210f2c.sol:3

*/

// File: contracts/modules/Ownab

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:34.243257
Transaction Length: 1
Severity: High
Contract: CollateralData
Function name: getOperator()
PC address: 1727
Estimated Gas Usage: 1249 - 2096
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x20081862b301c1ef9357bc0a125aa414db210f2c.sol:443

function getOperator()public view returns (address[] memory) {
        return _operatorList;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:43.291452
Transaction Length: 1
Severity: High
Contract: CollateralData
Function name: getOperator()
PC address: 1767
Estimated Gas Usage: 1399 - 2622
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x20081862b301c1ef9357bc0a125aa414db210f2c.sol:443

function getOperator()public view returns (address[] memory) {
        return _operatorList;
    }

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0xd074A91B12DE6B44D56A98025efE4D5cd9b55719.sol
Total states:17674
680.009094
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.346000
Transaction Length: 1
Severity: High
Contract: Module
Function name: getModuleAddress(string)
PC address: 416
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xd074A91B12DE6B44D56A98025efE4D5cd9b55719.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.747072
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 511
Estimated Gas Usage: 364 - 459
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xd074A91B12DE6B44D56A98025efE4D5cd9b55719.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.429795
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 513
Estimated Gas Usage: 364 - 459
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xd074A91B12DE6B44D56A98025efE4D5cd9b55719.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.365662
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 596
Estimated Gas Usage: 540 - 635
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xd074A91B12DE6B44D56A98025efE4D5cd9b55719.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:23.344126
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 598
Estimated Gas Usage: 540 - 635
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xd074A91B12DE6B44D56A98025efE4D5cd9b55719.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:36.550598
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 681
Estimated Gas Usage: 716 - 811
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xd074A91B12DE6B44D56A98025efE4D5cd9b55719.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:52.379052
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 683
Estimated Gas Usage: 716 - 811
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xd074A91B12DE6B44D56A98025efE4D5cd9b55719.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:14.733578
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 766
Estimated Gas Usage: 892 - 987
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xd074A91B12DE6B44D56A98025efE4D5cd9b55719.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:35.607325
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 768
Estimated Gas Usage: 892 - 987
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xd074A91B12DE6B44D56A98025efE4D5cd9b55719.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:01.933105
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: getModuleAddress(string)
PC address: 1453
Estimated Gas Usage: 451 - 546
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xd074A91B12DE6B44D56A98025efE4D5cd9b55719.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.151761
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SUSD
Function name: handleDeposit(address[],uint256[])
PC address: 1722
Estimated Gas Usage: 452 - 547
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xd074A91B12DE6B44D56A98025efE4D5cd9b55719.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.695704
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SUSD
Function name: handleDeposit(address[],uint256[])
PC address: 1724
Estimated Gas Usage: 452 - 547
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xd074A91B12DE6B44D56A98025efE4D5cd9b55719.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:14.851305
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SUSD
Function name: handleDeposit(address[],uint256[])
PC address: 1870
Estimated Gas Usage: 785 - 3562
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xd074A91B12DE6B44D56A98025efE4D5cd9b55719.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:26.790154
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SUSD
Function name: handleDeposit(address[],uint256[])
PC address: 1872
Estimated Gas Usage: 785 - 3562
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xd074A91B12DE6B44D56A98025efE4D5cd9b55719.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:29.790423
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SUSD
Function name: getModuleAddress(string)
PC address: 2154
Estimated Gas Usage: 407 - 502
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xd074A91B12DE6B44D56A98025efE4D5cd9b55719.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:04.842687
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SUSD
Function name: withdraw(address,uint256[])
PC address: 2519
Estimated Gas Usage: 397 - 492
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xd074A91B12DE6B44D56A98025efE4D5cd9b55719.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:08.703106
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SUSD
Function name: withdraw(address,uint256[])
PC address: 2521
Estimated Gas Usage: 397 - 492
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xd074A91B12DE6B44D56A98025efE4D5cd9b55719.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:34.440662
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SUSD
Function name: supportedTokens()
PC address: 3026
Estimated Gas Usage: 1250 - 2097
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xd074A91B12DE6B44D56A98025efE4D5cd9b55719.sol:1595

function supportedTokens() public view returns(address[] memory){
        return _registeredTokens;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:05.923092
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SUSD
Function name: supportedTokens()
PC address: 3066
Estimated Gas Usage: 1400 - 2623
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xd074A91B12DE6B44D56A98025efE4D5cd9b55719.sol:1595

function supportedTokens() public view returns(address[] memory){
        return _registeredTokens;
    }

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x083de49066c1D1c9261fB649eAFc5ea7D51560072.sol
Total states:1055
2.477769
==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.005817
Transaction Length: 0
Severity: Medium
Contract: Governance
Function name: constructor
PC address: 18
Estimated Gas Usage: 42 - 137
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../contracts/m_loop/loop5/0x083de49066c1D1c9261fB649eAFc5ea7D51560072.sol:220

tx.origin

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x3615687ac4e687cffcd01e69db5b48d83c4c1b87.sol
Total states:26284
197.475192
==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:42.146568
Transaction Length: 1
Severity: High
Contract: OptionsManagerV2
Function name: sellOption(uint256,uint256)
PC address: 25009
Estimated Gas Usage: 9969 - 66504
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x3615687ac4e687cffcd01e69db5b48d83c4c1b87.sol:18

x - y

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x67122c473a6e195265b9e6d737c8f1cf5543b199.sol
Total states:17695
66.995878
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.509543
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3244
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x67122c473a6e195265b9e6d737c8f1cf5543b199.sol:121

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.829593
Transaction Length: 1
Severity: High
Contract: CreamUSD
Function name: getOutExactIn(address,address,uint256,int256,int256)
PC address: 13999
Estimated Gas Usage: 4698 - 74577
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x67122c473a6e195265b9e6d737c8f1cf5543b199.sol:140

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.412558
Transaction Length: 2
Severity: High
Contract: CreamUSD
Function name: increaseAllowance(address,uint256)
PC address: 14928
Estimated Gas Usage: 1081 - 1556
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x67122c473a6e195265b9e6d737c8f1cf5543b199.sol:121

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x8c18D6a985Ef69744b9d57248a45c0861874f244.sol
Total states:41682
107.736688
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.735947
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3244
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x8c18D6a985Ef69744b9d57248a45c0861874f244.sol:202

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.469621
Transaction Length: 1
Severity: Low
Contract: LockupContract
Function name: lockedAllocationData(address,uint256)
PC address: 3295
Estimated Gas Usage: 821 - 1106
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x8c18D6a985Ef69744b9d57248a45c0861874f244.sol:838

mapping(address => uint256[]) public lockedAllocationData

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.468828
Transaction Length: 2
Severity: High
Contract: LockupContract
Function name: getUnlockedBalance(address,uint256,uint256)
PC address: 3578
Estimated Gas Usage: 2951 - 4089
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x8c18D6a985Ef69744b9d57248a45c0861874f244.sol:905

uint256[] memory  addressLockupData = lockedAllocationData[_address]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.856305
Transaction Length: 2
Severity: High
Contract: LockupContract
Function name: getUnlockedBalance(address,uint256,uint256)
PC address: 3603
Estimated Gas Usage: 2951 - 4089
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x8c18D6a985Ef69744b9d57248a45c0861874f244.sol:905

uint256[] memory  addressLockupData = lockedAllocationData[_address]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.001788
Transaction Length: 2
Severity: High
Contract: LockupContract
Function name: getUnlockedBalance(address,uint256,uint256)
PC address: 3605
Estimated Gas Usage: 2951 - 4089
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x8c18D6a985Ef69744b9d57248a45c0861874f244.sol:905

uint256[] memory  addressLockupData = lockedAllocationData[_address]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.180957
Transaction Length: 2
Severity: High
Contract: ERC20Mintable
Function name: increaseAllowance(address,uint256)
PC address: 3847
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x8c18D6a985Ef69744b9d57248a45c0861874f244.sol:202

a + b

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:02.088612
Transaction Length: 1
Severity: Low
Contract: CLIAllocator
Function name: unlockManuallyLockedBalances(address)
PC address: 4785
Estimated Gas Usage: 5545 - 76368
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop5/0x8c18D6a985Ef69744b9d57248a45c0861874f244.sol:1265

lockupContract.setManuallyLockedForAddress(
            _holder,
            0
        )

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.437321
Transaction Length: 1
Severity: High
Contract: LockupContract
Function name: allocationLog(address,uint256,uint256,uint256,uint256,uint256)
PC address: 5243
Estimated Gas Usage: 13852 - 89787
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x8c18D6a985Ef69744b9d57248a45c0861874f244.sol:2

ification at Ether

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:04.684320
Transaction Length: 1
Severity: High
Contract: LockupContract
Function name: allocationLog(address,uint256,uint256,uint256,uint256,uint256)
PC address: 5255
Estimated Gas Usage: 24473 - 140693
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x8c18D6a985Ef69744b9d57248a45c0861874f244.sol:885

lockedAllocationData[_address].push(_amount)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.479227
Transaction Length: 1
Severity: High
Contract: LockupContract
Function name: allocationLog(address,uint256,uint256,uint256,uint256,uint256)
PC address: 5348
Estimated Gas Usage: 24473 - 140693
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x8c18D6a985Ef69744b9d57248a45c0861874f244.sol:2

ification at Ether

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:09.345395
Transaction Length: 1
Severity: High
Contract: LockupContract
Function name: allocationLog(address,uint256,uint256,uint256,uint256,uint256)
PC address: 5360
Estimated Gas Usage: 35094 - 191599
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x8c18D6a985Ef69744b9d57248a45c0861874f244.sol:886

lockedAllocationData[_address].push(_lockPeriodInSeconds)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.222285
Transaction Length: 1
Severity: High
Contract: LockupContract
Function name: allocationLog(address,uint256,uint256,uint256,uint256,uint256)
PC address: 5453
Estimated Gas Usage: 35094 - 191599
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x8c18D6a985Ef69744b9d57248a45c0861874f244.sol:2

ification at Ether

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0xe73f6f842f0bba2b711d42ad14facd1c42cf8bc1.sol
Total states:2324
1.799088
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x99bc263680a25d9f37b1a2667ca2ce561c7c1d97.sol
Total states:296
3.463156
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x1f1b038367a4ee60465ab22d8c76360523757cea.sol
Total states:17449
496.606899
==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:07:57.439731
Transaction Length: 1
Severity: Medium
Contract: MainnetASUsdToSUsdAssimilator
Function name: getASUsd()
PC address: 928
Estimated Gas Usage: 3898 - 74419
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 4676
Offset: 4913
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop5/0x1f1b038367a4ee60465ab22d8c76360523757cea.sol:994

function getASUsd () public view returns (IAToken) {

        ILendingPool pool = ILendingPool(lpProvider.getLendingPool());
        (,,,,,,,,,,,address aTokenAddress,) = pool.getReserveData(address(susd));
        return IAToken(aTokenAddress);

    }

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:07:49.371122
Transaction Length: 1
Severity: Low
Contract: MainnetASUsdToSUsdAssimilator
Function name: outputRawAndGetBalance(address,uint256)
PC address: 2194
Estimated Gas Usage: 4850 - 75466
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop5/0x1f1b038367a4ee60465ab22d8c76360523757cea.sol:1056

_asusd.deposit(_amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:07:51.784625
Transaction Length: 1
Severity: Low
Contract: MainnetASUsdToSUsdAssimilator
Function name: outputRawAndGetBalance(address,uint256)
PC address: 2383
Estimated Gas Usage: 6448 - 111535
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop5/0x1f1b038367a4ee60465ab22d8c76360523757cea.sol:1058

_asusd.transfer(_dst, _amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:07:54.360737
Transaction Length: 1
Severity: Low
Contract: MainnetASUsdToSUsdAssimilator
Function name: intakeRawAndGetBalance(uint256)
PC address: 3668
Estimated Gas Usage: 4801 - 75607
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop5/0x1f1b038367a4ee60465ab22d8c76360523757cea.sol:1007

_asusd.transferFrom(msg.sender, address(this), _amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:07:56.835617
Transaction Length: 1
Severity: Low
Contract: MainnetASUsdToSUsdAssimilator
Function name: intakeRawAndGetBalance(uint256)
PC address: 3957
Estimated Gas Usage: 6471 - 111839
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop5/0x1f1b038367a4ee60465ab22d8c76360523757cea.sol:1011

_asusd.redeem(_amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:07:59.929474
Transaction Length: 1
Severity: Low
Contract: MainnetASUsdToSUsdAssimilator
Function name: outputRaw(address,uint256)
PC address: 5239
Estimated Gas Usage: 4832 - 75448
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop5/0x1f1b038367a4ee60465ab22d8c76360523757cea.sol:1075

_asusd.deposit(_amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:08:02.291739
Transaction Length: 1
Severity: Low
Contract: MainnetASUsdToSUsdAssimilator
Function name: outputRaw(address,uint256)
PC address: 5428
Estimated Gas Usage: 6430 - 111517
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop5/0x1f1b038367a4ee60465ab22d8c76360523757cea.sol:1077

_asusd.transfer(_dst, _amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:08:12.681335
Transaction Length: 1
Severity: Low
Contract: MainnetASUsdToSUsdAssimilator
Function name: intakeRaw(uint256)
PC address: 5909
Estimated Gas Usage: 4908 - 75714
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop5/0x1f1b038367a4ee60465ab22d8c76360523757cea.sol:1026

_asusd.transferFrom(msg.sender, address(this), _amount)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x391fdcfbac5008770c26aff9e5b2e58331d2e98a.sol
Total states:426
0.782719
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x2C866FdDf7B1AA1AE27e2E90ae91C3a4241f2bfC2.sol
Total states:24017
173.343382
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.001560
Transaction Length: 1
Severity: High
Contract: DMGYieldFarmingV1
Function name: initialize(address,address,address,uint256,address[],address[],uint8[],uint16[])
PC address: 3958
Estimated Gas Usage: 598 - 693
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x2C866FdDf7B1AA1AE27e2E90ae91C3a4241f2bfC2.sol:5

olidity ^0.5.0;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.465136
Transaction Length: 1
Severity: High
Contract: DMGYieldFarmingV1
Function name: initialize(address,address,address,uint256,address[],address[],uint8[],uint16[])
PC address: 3960
Estimated Gas Usage: 598 - 693
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x2C866FdDf7B1AA1AE27e2E90ae91C3a4241f2bfC2.sol:3

*/

//pragma solidity ^0.5.0;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:20.735793
Transaction Length: 1
Severity: High
Contract: DMGYieldFarmingV1
Function name: initialize(address,address,address,uint256,address[],address[],uint8[],uint16[])
PC address: 4106
Estimated Gas Usage: 931 - 3708
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x2C866FdDf7B1AA1AE27e2E90ae91C3a4241f2bfC2.sol:5

olidity ^0.5.0;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:27.139716
Transaction Length: 1
Severity: High
Contract: DMGYieldFarmingV1
Function name: initialize(address,address,address,uint256,address[],address[],uint8[],uint16[])
PC address: 4108
Estimated Gas Usage: 931 - 3708
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x2C866FdDf7B1AA1AE27e2E90ae91C3a4241f2bfC2.sol:3

*/

//pragma solidity ^0.5.0;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:45.822789
Transaction Length: 1
Severity: High
Contract: DMGYieldFarmingV1
Function name: initialize(address,address,address,uint256,address[],address[],uint8[],uint16[])
PC address: 4254
Estimated Gas Usage: 1264 - 6723
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x2C866FdDf7B1AA1AE27e2E90ae91C3a4241f2bfC2.sol:5

olidity ^0.5.0;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:55.787349
Transaction Length: 1
Severity: High
Contract: DMGYieldFarmingV1
Function name: initialize(address,address,address,uint256,address[],address[],uint8[],uint16[])
PC address: 4256
Estimated Gas Usage: 1264 - 6723
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x2C866FdDf7B1AA1AE27e2E90ae91C3a4241f2bfC2.sol:3

*/

//pragma solidity ^0.5.0;
pragma

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x43dfc4159d86f3a37a5a4b3d4580b888ad7d4ddd.sol
Total states:1751
1.359935
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x1f10ff148a0ad63a57f98530ab472568e90a72c5.sol
Total states:1506
20.234524
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.142651
Transaction Length: 1
Severity: High
Contract: KYFV2
Function name: removeMultiple(address[])
PC address: 1130
Estimated Gas Usage: 384 - 479
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x1f10ff148a0ad63a57f98530ab472568e90a72c5.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.891869
Transaction Length: 1
Severity: High
Contract: KYFV2
Function name: removeMultiple(address[])
PC address: 1132
Estimated Gas Usage: 384 - 479
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x1f10ff148a0ad63a57f98530ab472568e90a72c5.sol:3

*/

/**
 *Submitted for verification

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x055225ac7a4c2a91fbba70fa219a7f254d17cd8f.sol
Total states:18473
23.469112
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.852310
Transaction Length: 1
Severity: Low
Contract: WhiteListStorage
Function name: tokenToTransferringRuleArray(uint8,uint256)
PC address: 1710
Estimated Gas Usage: 863 - 1148
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x055225ac7a4c2a91fbba70fa219a7f254d17cd8f.sol:79

mapping(uint8 => TransferringRule[]) public tokenToTransferringRuleArray

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.306075
Transaction Length: 1
Severity: Low
Contract: RegisteryWhiteList
Function name: tokenToTransferringRuleArray(uint8,uint256)
PC address: 5616
Estimated Gas Usage: 863 - 1148
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x055225ac7a4c2a91fbba70fa219a7f254d17cd8f.sol:79

mapping(uint8 => TransferringRule[]) public tokenToTransferringRuleArray

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:02.945080
Transaction Length: 1
Severity: Low
Contract: WhiteList
Function name: tokenToTransferringRuleArray(uint8,uint256)
PC address: 12049
Estimated Gas Usage: 864 - 1149
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x055225ac7a4c2a91fbba70fa219a7f254d17cd8f.sol:79

mapping(uint8 => TransferringRule[]) public tokenToTransferringRuleArray

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x29630bddc51da9212f718a710b9e85fe8f3b2879.sol
Total states:1055
2.461921
==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.005668
Transaction Length: 0
Severity: Medium
Contract: Governance
Function name: constructor
PC address: 18
Estimated Gas Usage: 42 - 137
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../contracts/m_loop/loop5/0x29630bddc51da9212f718a710b9e85fe8f3b2879.sol:106

tx.origin

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0xC4D477BCF1578ebF4Dee2318E19aB7649a83F5bB.sol
Total states:5429
21.95678
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x1b719f95423077213a376de770f415993396a4ab.sol
Total states:1322
70.456251
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.851040
Transaction Length: 1
Severity: High
Contract: TimeLock
Function name: addParameters(address[],uint256[],uint256[])
PC address: 857
Estimated Gas Usage: 384 - 479
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x1b719f95423077213a376de770f415993396a4ab.sol:5

olidity ^0.6.0;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.491919
Transaction Length: 1
Severity: High
Contract: TimeLock
Function name: addParameters(address[],uint256[],uint256[])
PC address: 859
Estimated Gas Usage: 384 - 479
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x1b719f95423077213a376de770f415993396a4ab.sol:3

*/

//pragma solidity ^0.6.0;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.216621
Transaction Length: 1
Severity: High
Contract: TimeLock
Function name: addParameters(address[],uint256[],uint256[])
PC address: 942
Estimated Gas Usage: 560 - 655
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x1b719f95423077213a376de770f415993396a4ab.sol:5

olidity ^0.6.0;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:19.323960
Transaction Length: 1
Severity: High
Contract: TimeLock
Function name: addParameters(address[],uint256[],uint256[])
PC address: 944
Estimated Gas Usage: 560 - 655
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x1b719f95423077213a376de770f415993396a4ab.sol:3

*/

//pragma solidity ^0.6.0;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:32.462586
Transaction Length: 1
Severity: High
Contract: TimeLock
Function name: addParameters(address[],uint256[],uint256[])
PC address: 1027
Estimated Gas Usage: 736 - 831
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x1b719f95423077213a376de770f415993396a4ab.sol:5

olidity ^0.6.0;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:53.816527
Transaction Length: 1
Severity: High
Contract: TimeLock
Function name: addParameters(address[],uint256[],uint256[])
PC address: 1029
Estimated Gas Usage: 736 - 831
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x1b719f95423077213a376de770f415993396a4ab.sol:3

*/

//pragma solidity ^0.6.0;
pragma

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x5baff73622fe06282496fabebc8711b57cc75d42.sol
Total states:1880
89.605134
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.273404
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShip(address[])
PC address: 360
Estimated Gas Usage: 342 - 437
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x5baff73622fe06282496fabebc8711b57cc75d42.sol:5

penzeppelin-solidity/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.331766
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShip(address[])
PC address: 362
Estimated Gas Usage: 342 - 437
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x5baff73622fe06282496fabebc8711b57cc75d42.sol:3

*/

// File: openzeppelin-solidity/c

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:35.167659
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShipWithHowMany(address[],uint256)
PC address: 776
Estimated Gas Usage: 341 - 436
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x5baff73622fe06282496fabebc8711b57cc75d42.sol:5

penzeppelin-solidity/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:37.893493
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShipWithHowMany(address[],uint256)
PC address: 778
Estimated Gas Usage: 341 - 436
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x5baff73622fe06282496fabebc8711b57cc75d42.sol:3

*/

// File: openzeppelin-solidity/c

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:27.820567
Transaction Length: 1
Severity: Low
Contract: BeneficiaryOperations
Function name: allOperations(uint256)
PC address: 1715
Estimated Gas Usage: 701 - 796
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x5baff73622fe06282496fabebc8711b57cc75d42.sol:386

bytes32[] public allOperations

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:24.405535
Transaction Length: 1
Severity: Low
Contract: BeneficiaryOperations
Function name: beneficiaries(uint256)
PC address: 4636
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x5baff73622fe06282496fabebc8711b57cc75d42.sol:385

address[] public beneficiaries

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x254bc132532c2932f00347f9ba4ea425bc1768ef.sol
Total states:738
3.65273
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x781a0861395Ba245e8254a61e74B0e7cD3Ac8eAf.sol
Total states:4368
565.12392
==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.005639
Transaction Length: 0
Severity: Medium
Contract: Governance
Function name: constructor
PC address: 18
Estimated Gas Usage: 42 - 137
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../contracts/m_loop/loop5/0x781a0861395Ba245e8254a61e74B0e7cD3Ac8eAf.sol:639

tx.origin

--------------------

==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.030863
Transaction Length: 0
Severity: Medium
Contract: LPTokenWrapper
Function name: constructor
PC address: 241
Estimated Gas Usage: 16419 - 77504
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../contracts/m_loop/loop5/0x781a0861395Ba245e8254a61e74B0e7cD3Ac8eAf.sol:639

tx.origin

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.275852
Transaction Length: 0
Severity: High
Contract: UniswapReward
Function name: constructor
PC address: 516
Estimated Gas Usage: 37837 - 179912
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x781a0861395Ba245e8254a61e74B0e7cD3Ac8eAf.sol:796

now + 365 days

--------------------

==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.740837
Transaction Length: 0
Severity: Medium
Contract: UniswapReward
Function name: constructor
PC address: 582
Estimated Gas Usage: 78340 - 380745
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../contracts/m_loop/loop5/0x781a0861395Ba245e8254a61e74B0e7cD3Ac8eAf.sol:639

tx.origin

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.743601
Transaction Length: 1
Severity: High
Contract: LPTokenWrapper
Function name: stake(uint256,string)
PC address: 873
Estimated Gas Usage: 411 - 506
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x781a0861395Ba245e8254a61e74B0e7cD3Ac8eAf.sol:3

*/

/***
 *    ██████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.689103
Transaction Length: 1
Severity: High
Contract: UniswapReward
Function name: stake(uint256,string)
PC address: 2435
Estimated Gas Usage: 456 - 551
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x781a0861395Ba245e8254a61e74B0e7cD3Ac8eAf.sol:3

*/

/***
 *    ██████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:48.357377
Transaction Length: 1
Severity: High
Contract: UniswapReward
Function name: seize(address,uint256)
PC address: 13914
Estimated Gas Usage: 2651 - 5713
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x781a0861395Ba245e8254a61e74B0e7cD3Ac8eAf.sol:544

address(token).call(abi.encodeWithSelector(SELECTOR, to, value))

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:06:33.851141
Transaction Length: 1
Severity: Medium
Contract: UniswapReward
Function name: seize(address,uint256)
PC address: 13931
Estimated Gas Usage: 2976 - 7118
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../contracts/m_loop/loop5/0x781a0861395Ba245e8254a61e74B0e7cD3Ac8eAf.sol:544

address(token).call(abi.encodeWithSelector(SELECTOR, to, value))

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0xe5d078f380d67b72ece5c55c65c4e0ec97ea1439.sol
Total states:16470
28.0276
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0xE0384c1741c051333BC28585321217d9B8E9d988.sol
Total states:1055
2.483204
==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.005901
Transaction Length: 0
Severity: Medium
Contract: Governance
Function name: constructor
PC address: 18
Estimated Gas Usage: 42 - 137
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../contracts/m_loop/loop5/0xE0384c1741c051333BC28585321217d9B8E9d988.sol:220

tx.origin

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0xa8d95129457194b5711c630ec7774ccb5f70bdb3.sol
Total states:7571
20.910246
==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.005544
Transaction Length: 0
Severity: Medium
Contract: Governance
Function name: constructor
PC address: 18
Estimated Gas Usage: 42 - 137
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../contracts/m_loop/loop5/0xa8d95129457194b5711c630ec7774ccb5f70bdb3.sol:994

tx.origin

--------------------

==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.026599
Transaction Length: 0
Severity: Medium
Contract: Tx2UNI
Function name: constructor
PC address: 188
Estimated Gas Usage: 10976 - 51731
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../contracts/m_loop/loop5/0xa8d95129457194b5711c630ec7774ccb5f70bdb3.sol:994

tx.origin

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:03.361140
Transaction Length: 1
Severity: Medium
Contract: Tx2UNI
Function name: seizeTOKEN(address)
PC address: 887
Estimated Gas Usage: 4598 - 74572
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 4358
Offset: 4616
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop5/0xa8d95129457194b5711c630ec7774ccb5f70bdb3.sol:1438

function seizeTOKEN( address tokenaddr ) external onlyGovernance {

        Erc20Token _token =  Erc20Token(tokenaddr);

        uint256 _currentBalance = _token.balanceOf(address(this));

        _token.transfer(_teamWallet, _currentBalance);

    }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:08.555489
Transaction Length: 2
Severity: Medium
Contract: Tx2UNI
Function name: seizeTOKEN(address)
PC address: 887
Estimated Gas Usage: 4604 - 74578
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 4358
Offset: 4616
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop5/0xa8d95129457194b5711c630ec7774ccb5f70bdb3.sol:1438

function seizeTOKEN( address tokenaddr ) external onlyGovernance {

        Erc20Token _token =  Erc20Token(tokenaddr);

        uint256 _currentBalance = _token.balanceOf(address(this));

        _token.transfer(_teamWallet, _currentBalance);

    }

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.715637
Transaction Length: 1
Severity: Low
Contract: Tx2UNI
Function name: _pair_weth_TOKEN(uint256)
PC address: 3951
Estimated Gas Usage: 723 - 818
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0xa8d95129457194b5711c630ec7774ccb5f70bdb3.sol:1250

address[] public _pair_weth_TOKEN

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:00:03.261428
Transaction Length: 1
Severity: Medium
Contract: Tx2UNI
Function name: seizeTOKEN(address)
PC address: 4616
Estimated Gas Usage: 3771 - 39559
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../contracts/m_loop/loop5/0xa8d95129457194b5711c630ec7774ccb5f70bdb3.sol:1444

_token.transfer(_teamWallet, _currentBalance)

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:00:08.361373
Transaction Length: 2
Severity: Medium
Contract: Tx2UNI
Function name: seizeTOKEN(address)
PC address: 4616
Estimated Gas Usage: 3777 - 39565
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../contracts/m_loop/loop5/0xa8d95129457194b5711c630ec7774ccb5f70bdb3.sol:1444

_token.transfer(_teamWallet, _currentBalance)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:04.478358
Transaction Length: 1
Severity: Low
Contract: Tx2UNI
Function name: _pair_TOKEN_weth(uint256)
PC address: 5486
Estimated Gas Usage: 723 - 818
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0xa8d95129457194b5711c630ec7774ccb5f70bdb3.sol:1248

address[] public _pair_TOKEN_weth

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:05.459448
Transaction Length: 1
Severity: Low
Contract: Tx2UNI
Function name: _validbots(uint256)
PC address: 5712
Estimated Gas Usage: 700 - 795
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0xa8d95129457194b5711c630ec7774ccb5f70bdb3.sol:1252

address[] public _validbots

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x52305c065579a8a620690cc39394514af905ff42.sol
Total states:361
5.872148
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0xdb171f41af8df36c1dbdddf076ed3b2e1ef4667a.sol
Total states:11782
1107.25437
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.963935
Transaction Length: 1
Severity: High
Contract: LexTokenLiteFactory
Function name: LaunchLexTokenLite(string,string,uint8,address,address,uint256,uint256,bytes32,bool)
PC address: 377
Estimated Gas Usage: 316 - 411
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xdb171f41af8df36c1dbdddf076ed3b2e1ef4667a.sol:3

*/

//pragma solidity 0.5.17;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.265649
Transaction Length: 1
Severity: High
Contract: LexTokenLiteFactory
Function name: LaunchLexTokenLite(string,string,uint8,address,address,uint256,uint256,bytes32,bool)
PC address: 528
Estimated Gas Usage: 661 - 3438
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xdb171f41af8df36c1dbdddf076ed3b2e1ef4667a.sol:3

*/

//pragma solidity 0.5.17;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.173499
Transaction Length: 1
Severity: High
Contract: LexTokenLite
Function name: transferBatch(address[],uint256[])
PC address: 1100
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xdb171f41af8df36c1dbdddf076ed3b2e1ef4667a.sol:5

olidity 0.5.17;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.003627
Transaction Length: 1
Severity: High
Contract: LexTokenLite
Function name: transferBatch(address[],uint256[])
PC address: 1102
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xdb171f41af8df36c1dbdddf076ed3b2e1ef4667a.sol:3

*/

//pragma solidity 0.5.17;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.540314
Transaction Length: 1
Severity: High
Contract: LexTokenLite
Function name: transferBatch(address[],uint256[])
PC address: 1185
Estimated Gas Usage: 539 - 634
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xdb171f41af8df36c1dbdddf076ed3b2e1ef4667a.sol:5

olidity 0.5.17;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:24.250767
Transaction Length: 1
Severity: High
Contract: LexTokenLite
Function name: transferBatch(address[],uint256[])
PC address: 1187
Estimated Gas Usage: 539 - 634
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xdb171f41af8df36c1dbdddf076ed3b2e1ef4667a.sol:3

*/

//pragma solidity 0.5.17;
pragma

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:05:21.914545
Transaction Length: 1
Severity: Low
Contract: LexTokenLiteFactory
Function name: LaunchLexTokenLite(string,string,uint8,address,address,uint256,uint256,bytes32,bool)
PC address: 1599
Estimated Gas Usage: 35144 - 43715
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop5/0xdb171f41af8df36c1dbdddf076ed3b2e1ef4667a.sol:256

lexLite.init(
            _name, 
            _symbol,
            _decimals, 
            _owner, 
            _resolver,
            ownerSupply, 
            _totalSupplyCap, 
            _message, 
            _transferable)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:01:34.915349
Transaction Length: 1
Severity: Low
Contract: LexTokenLiteFactory
Function name: LaunchLexTokenLite(string,string,uint8,address,address,uint256,uint256,bytes32,bool)
PC address: 1701
Estimated Gas Usage: 36230 - 78611
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop5/0xdb171f41af8df36c1dbdddf076ed3b2e1ef4667a.sol:267

lexDAO.call.value(msg.value)("")

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:40.163318
Transaction Length: 1
Severity: High
Contract: LexTokenLite
Function name: mintBatch(address[],uint256[])
PC address: 1710
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xdb171f41af8df36c1dbdddf076ed3b2e1ef4667a.sol:5

olidity 0.5.17;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:42.966622
Transaction Length: 1
Severity: High
Contract: LexTokenLite
Function name: mintBatch(address[],uint256[])
PC address: 1712
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xdb171f41af8df36c1dbdddf076ed3b2e1ef4667a.sol:3

*/

//pragma solidity 0.5.17;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:49.410621
Transaction Length: 1
Severity: High
Contract: LexTokenLite
Function name: mintBatch(address[],uint256[])
PC address: 1795
Estimated Gas Usage: 539 - 634
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xdb171f41af8df36c1dbdddf076ed3b2e1ef4667a.sol:5

olidity 0.5.17;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:01.754409
Transaction Length: 1
Severity: High
Contract: LexTokenLite
Function name: mintBatch(address[],uint256[])
PC address: 1797
Estimated Gas Usage: 539 - 634
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xdb171f41af8df36c1dbdddf076ed3b2e1ef4667a.sol:3

*/

//pragma solidity 0.5.17;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:15.855139
Transaction Length: 1
Severity: High
Contract: LexTokenLite
Function name: init(string,string,uint8,address,address,uint256,uint256,bytes32,bool)
PC address: 2095
Estimated Gas Usage: 451 - 546
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xdb171f41af8df36c1dbdddf076ed3b2e1ef4667a.sol:3

*/

//pragma solidity 0.5.17;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:20.786586
Transaction Length: 1
Severity: High
Contract: LexTokenLite
Function name: init(string,string,uint8,address,address,uint256,uint256,bytes32,bool)
PC address: 2180
Estimated Gas Usage: 627 - 722
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xdb171f41af8df36c1dbdddf076ed3b2e1ef4667a.sol:3

*/

//pragma solidity 0.5.17;
pragm

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x4bf1c68aed4dbd3f7b7e2116e0f6bc1a6711abff.sol
Total states:2324
1.877429
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x5631be2f1f70cee9f377a45d06b722a85d0027ca.sol
Total states:18334
2619.668165
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.354481
Transaction Length: 1
Severity: High
Contract: master
Function name: airdrop(address,address[],uint256[])
PC address: 458
Estimated Gas Usage: 375 - 470
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x5631be2f1f70cee9f377a45d06b722a85d0027ca.sol:5

olidity 0.5.7;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.730632
Transaction Length: 1
Severity: High
Contract: master
Function name: airdrop(address,address[],uint256[])
PC address: 460
Estimated Gas Usage: 375 - 470
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x5631be2f1f70cee9f377a45d06b722a85d0027ca.sol:3

*/

//pragma solidity 0.5.7;
pragma 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:15.046151
Transaction Length: 1
Severity: High
Contract: master
Function name: airdrop(address,address[],uint256[])
PC address: 606
Estimated Gas Usage: 717 - 3494
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x5631be2f1f70cee9f377a45d06b722a85d0027ca.sol:5

olidity 0.5.7;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:25.474854
Transaction Length: 1
Severity: High
Contract: master
Function name: airdrop(address,address[],uint256[])
PC address: 608
Estimated Gas Usage: 717 - 3494
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x5631be2f1f70cee9f377a45d06b722a85d0027ca.sol:3

*/

//pragma solidity 0.5.7;
pragma 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:08.671918
Transaction Length: 1
Severity: High
Contract: master
Function name: name()
PC address: 790
Estimated Gas Usage: 1914 - 3044
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x5631be2f1f70cee9f377a45d06b722a85d0027ca.sol:68

function name() public view returns(string memory) {
        return _name;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:10:25.569217
Transaction Length: 1
Severity: High
Contract: master
Function name: symbol()
PC address: 1757
Estimated Gas Usage: 1957 - 3087
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x5631be2f1f70cee9f377a45d06b722a85d0027ca.sol:72

function symbol() public view returns(string memory) {
        return _symbol;
    }

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:13:22.611131
Transaction Length: 1
Severity: Low
Contract: master
Function name: decreaseAllowance(address,uint256)
PC address: 9553
Estimated Gas Usage: 973 - 1448
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x5631be2f1f70cee9f377a45d06b722a85d0027ca.sol:40

assert(b <= a)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:27:07.823015
Transaction Length: 2
Severity: Low
Contract: master
Function name: decreaseAllowance(address,uint256)
PC address: 9553
Estimated Gas Usage: 973 - 1448
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x5631be2f1f70cee9f377a45d06b722a85d0027ca.sol:40

assert(b <= a)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:18:19.217552
Transaction Length: 2
Severity: High
Contract: master
Function name: increaseAllowance(address,uint256)
PC address: 9571
Estimated Gas Usage: 1003 - 1478
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x5631be2f1f70cee9f377a45d06b722a85d0027ca.sol:45

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:24:58.039936
Transaction Length: 2
Severity: Low
Contract: master
Function name: increaseAllowance(address,uint256)
PC address: 9584
Estimated Gas Usage: 1013 - 1488
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x5631be2f1f70cee9f377a45d06b722a85d0027ca.sol:46

assert(c >= a)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x6e3ce0f2abe08539479139928eedddff41177144.sol
Total states:648
1.526811
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0xe3013029af5f33ec3fc0f3b71508acb775ddc196.sol
Total states:4923
67.507389
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:02.206920
Transaction Length: 1
Severity: Low
Contract: ShuttleOneDepositPools
Function name: withdraw(uint256)
PC address: 5467
Estimated Gas Usage: 4298 - 5384
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop5/0xe3013029af5f33ec3fc0f3b71508acb775ddc196.sol:232

token.transfer(msg.sender,amount)

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:02.523519
Transaction Length: 1
Severity: High
Contract: ShuttleOneDepositPools
Function name: withdraw(uint256)
PC address: 5677
Estimated Gas Usage: 11588 - 67240
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xe3013029af5f33ec3fc0f3b71508acb775ddc196.sol:234

depositIdx[msg.sender] - 1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:05.284965
Transaction Length: 1
Severity: Low
Contract: ShuttleOneDepositPools
Function name: deposit(address,uint256)
PC address: 5873
Estimated Gas Usage: 770 - 1195
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0xe3013029af5f33ec3fc0f3b71508acb775ddc196.sol:189

amount % (10 ** decimal)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:06.488298
Transaction Length: 1
Severity: Low
Contract: ShuttleOneDepositPools
Function name: supplyInterest()
PC address: 7605
Estimated Gas Usage: 1058 - 1483
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0xe3013029af5f33ec3fc0f3b71508acb775ddc196.sol:386

totalSupply / (10 ** decimal)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:01:00.133358
Transaction Length: 1
Severity: Low
Contract: ShuttleOneDepositPools
Function name: borrow(uint256)
PC address: 11442
Estimated Gas Usage: 57150 - 296100
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop5/0xe3013029af5f33ec3fc0f3b71508acb775ddc196.sol:420

catToken.intTransfer(_addr,address(this),amount)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x36122ed55522ae20304d7ef68bc3f3696d72fc1c.sol
Total states:6928
22.642379
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:02.657584
Transaction Length: 1
Severity: Low
Contract: TouchEvent
Function name: userBidGirl(uint256,uint256)
PC address: 5109
Estimated Gas Usage: 8010 - 29801
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop5/0x36122ed55522ae20304d7ef68bc3f3696d72fc1c.sol:640

staker.userDepositsCounts(_user)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:05.586645
Transaction Length: 1
Severity: Low
Contract: TouchEvent
Function name: userLikeGirl(uint256,uint256)
PC address: 11725
Estimated Gas Usage: 7965 - 29756
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop5/0x36122ed55522ae20304d7ef68bc3f3696d72fc1c.sol:640

staker.userDepositsCounts(_user)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.182495
Transaction Length: 1
Severity: High
Contract: TouchEvent
Function name: getOptionLiker(uint256,uint256,uint256,uint256)
PC address: 14837
Estimated Gas Usage: 1028 - 3710
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x36122ed55522ae20304d7ef68bc3f3696d72fc1c.sol:2

or verification

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x5918705f9a172d5caabbd2e2ddb5086ae033dfe8.sol
Total states:5554
259.308463
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.335045
Transaction Length: 1
Severity: High
Contract: TokenDecimalsView
Function name: getTokenDecimals(address[])
PC address: 158
Estimated Gas Usage: 296 - 391
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x5918705f9a172d5caabbd2e2ddb5086ae033dfe8.sol:6

uthors: [@mtsalenc]
 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.840392
Transaction Length: 1
Severity: High
Contract: TokenDecimalsView
Function name: getTokenDecimals(address[])
PC address: 160
Estimated Gas Usage: 296 - 391
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x5918705f9a172d5caabbd2e2ddb5086ae033dfe8.sol:3

*/

/**
 *  @authors: [@mtsalenc]
 *

--------------------

==== Unchecked Call Return Value ====
SWC ID: 104
FOUND TIME: 0:02:18.744168
Transaction Length: 1
Severity: Low
Contract: TokenDecimalsView
Function name: getTokenDecimals(address[])
PC address: 480
Estimated Gas Usage: 1836 - 39878
The return value of a message call is not checked.
External calls return a boolean value. If the callee contract halts with an exception, 'false' is returned and execution continues in the caller. It is usually recommended to wrap external calls into a require statement to prevent unexpected states.
--------------------
In file: ../../contracts/m_loop/loop5/0x5918705f9a172d5caabbd2e2ddb5086ae033dfe8.sol:43

staticcall(
                    30000,              // 30k gas
                    tokenAddress,       // The call target.
                    x,                  // Inputs are stored at location x
                    0x04,               // Input is 4 bytes long
                    x,                  // Overwrite x with output
                    0x20                // The output length
                )

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x2bf0689b22c1092aaf6a09437af316985e67ba12.sol
Total states:77
3.344387
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x6c8b098427D17c8afe8d9bD3c68D5999240c7ACa.sol
Total states:17674
724.377059
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.391072
Transaction Length: 1
Severity: High
Contract: Module
Function name: getModuleAddress(string)
PC address: 416
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x6c8b098427D17c8afe8d9bD3c68D5999240c7ACa.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.255296
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 511
Estimated Gas Usage: 364 - 459
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x6c8b098427D17c8afe8d9bD3c68D5999240c7ACa.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.447152
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 513
Estimated Gas Usage: 364 - 459
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x6c8b098427D17c8afe8d9bD3c68D5999240c7ACa.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.605415
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 596
Estimated Gas Usage: 540 - 635
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x6c8b098427D17c8afe8d9bD3c68D5999240c7ACa.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:18.400622
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 598
Estimated Gas Usage: 540 - 635
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x6c8b098427D17c8afe8d9bD3c68D5999240c7ACa.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:31.413672
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 681
Estimated Gas Usage: 716 - 811
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x6c8b098427D17c8afe8d9bD3c68D5999240c7ACa.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:59.405156
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 683
Estimated Gas Usage: 716 - 811
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x6c8b098427D17c8afe8d9bD3c68D5999240c7ACa.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:19.302082
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 766
Estimated Gas Usage: 892 - 987
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x6c8b098427D17c8afe8d9bD3c68D5999240c7ACa.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:46.404872
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 768
Estimated Gas Usage: 892 - 987
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x6c8b098427D17c8afe8d9bD3c68D5999240c7ACa.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:20.319694
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: getModuleAddress(string)
PC address: 1453
Estimated Gas Usage: 451 - 546
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x6c8b098427D17c8afe8d9bD3c68D5999240c7ACa.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.303697
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_BUSD
Function name: handleDeposit(address[],uint256[])
PC address: 1744
Estimated Gas Usage: 452 - 547
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x6c8b098427D17c8afe8d9bD3c68D5999240c7ACa.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.908492
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_BUSD
Function name: handleDeposit(address[],uint256[])
PC address: 1746
Estimated Gas Usage: 452 - 547
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x6c8b098427D17c8afe8d9bD3c68D5999240c7ACa.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:14.851224
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_BUSD
Function name: handleDeposit(address[],uint256[])
PC address: 1892
Estimated Gas Usage: 785 - 3562
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x6c8b098427D17c8afe8d9bD3c68D5999240c7ACa.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:32.446889
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_BUSD
Function name: handleDeposit(address[],uint256[])
PC address: 1894
Estimated Gas Usage: 785 - 3562
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x6c8b098427D17c8afe8d9bD3c68D5999240c7ACa.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:29.124632
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_BUSD
Function name: getModuleAddress(string)
PC address: 2176
Estimated Gas Usage: 407 - 502
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x6c8b098427D17c8afe8d9bD3c68D5999240c7ACa.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:09.185963
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_BUSD
Function name: withdraw(address,uint256[])
PC address: 2541
Estimated Gas Usage: 506 - 601
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x6c8b098427D17c8afe8d9bD3c68D5999240c7ACa.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:13.611706
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_BUSD
Function name: withdraw(address,uint256[])
PC address: 2543
Estimated Gas Usage: 506 - 601
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x6c8b098427D17c8afe8d9bD3c68D5999240c7ACa.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:21.256756
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_BUSD
Function name: supportedTokens()
PC address: 3158
Estimated Gas Usage: 1250 - 2097
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x6c8b098427D17c8afe8d9bD3c68D5999240c7ACa.sol:1597

function supportedTokens() public view returns(address[] memory){
        return _registeredTokens;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:49.652085
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_BUSD
Function name: supportedTokens()
PC address: 3198
Estimated Gas Usage: 1400 - 2623
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x6c8b098427D17c8afe8d9bD3c68D5999240c7ACa.sol:1597

function supportedTokens() public view returns(address[] memory){
        return _registeredTokens;
    }

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:03:17.407055
Transaction Length: 1
Severity: Low
Contract: CurveFiProtocol_BUSD
Function name: yTokens(uint256)
PC address: 13200
Estimated Gas Usage: 790 - 885
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x6c8b098427D17c8afe8d9bD3c68D5999240c7ACa.sol:1743

address[] public yTokens

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0xace87eea8517918634ef3d5d8885cdacbfc6297a.sol
Total states:1759
5.77668
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x73a1f80f8aed786490d8f706785d5d7d4e413358.sol
Total states:3478
3613.617993
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.620649
Transaction Length: 1
Severity: Low
Contract: AgnosticPrivateSale
Function name: allUsers(uint256)
PC address: 2894
Estimated Gas Usage: 723 - 818
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x73a1f80f8aed786490d8f706785d5d7d4e413358.sol:146

address[] public allUsers

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x4B2464D5FfaB717ab0Bd26E5E30cB432B47E1EEd.sol
Total states:52525
1082.527392
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.156122
Transaction Length: 1
Severity: High
Contract: AccessChecker
Function name: getModuleAddress(string)
PC address: 416
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x4B2464D5FfaB717ab0Bd26E5E30cB432B47E1EEd.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.883966
Transaction Length: 1
Severity: High
Contract: Module
Function name: getModuleAddress(string)
PC address: 416
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x4B2464D5FfaB717ab0Bd26E5E30cB432B47E1EEd.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.173661
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(string,string,uint8)
PC address: 1000
Estimated Gas Usage: 409 - 504
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x4B2464D5FfaB717ab0Bd26E5E30cB432B47E1EEd.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.390914
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(string,string,uint8)
PC address: 1151
Estimated Gas Usage: 751 - 3528
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x4B2464D5FfaB717ab0Bd26E5E30cB432B47E1EEd.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.716163
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[],uint256)
PC address: 2226
Estimated Gas Usage: 429 - 524
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x4B2464D5FfaB717ab0Bd26E5E30cB432B47E1EEd.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.868404
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[],uint256)
PC address: 2228
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x4B2464D5FfaB717ab0Bd26E5E30cB432B47E1EEd.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.429219
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[])
PC address: 2357
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x4B2464D5FfaB717ab0Bd26E5E30cB432B47E1EEd.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:17.408459
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[])
PC address: 2359
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x4B2464D5FfaB717ab0Bd26E5E30cB432B47E1EEd.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:39.116182
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: getModuleAddress(string)
PC address: 2526
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x4B2464D5FfaB717ab0Bd26E5E30cB432B47E1EEd.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.305368
Transaction Length: 1
Severity: High
Contract: SavingsModule
Function name: deposit(address,address[],uint256[])
PC address: 2654
Estimated Gas Usage: 419 - 514
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x4B2464D5FfaB717ab0Bd26E5E30cB432B47E1EEd.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.600272
Transaction Length: 1
Severity: High
Contract: SavingsModule
Function name: deposit(address,address[],uint256[])
PC address: 2656
Estimated Gas Usage: 419 - 514
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x4B2464D5FfaB717ab0Bd26E5E30cB432B47E1EEd.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:18.775984
Transaction Length: 1
Severity: High
Contract: SavingsModule
Function name: deposit(address,address[],uint256[])
PC address: 2802
Estimated Gas Usage: 752 - 3529
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x4B2464D5FfaB717ab0Bd26E5E30cB432B47E1EEd.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:30.165014
Transaction Length: 1
Severity: High
Contract: SavingsModule
Function name: deposit(address,address[],uint256[])
PC address: 2804
Estimated Gas Usage: 752 - 3529
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x4B2464D5FfaB717ab0Bd26E5E30cB432B47E1EEd.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:50.215448
Transaction Length: 1
Severity: High
Contract: SavingsModule
Function name: getModuleAddress(string)
PC address: 3167
Estimated Gas Usage: 451 - 546
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x4B2464D5FfaB717ab0Bd26E5E30cB432B47E1EEd.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:43.923451
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(address,string,string)
PC address: 3179
Estimated Gas Usage: 485 - 580
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x4B2464D5FfaB717ab0Bd26E5E30cB432B47E1EEd.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.157491
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3249
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x4B2464D5FfaB717ab0Bd26E5E30cB432B47E1EEd.sol:34

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:07:04.576459
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(address,string,string)
PC address: 3330
Estimated Gas Usage: 827 - 3604
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x4B2464D5FfaB717ab0Bd26E5E30cB432B47E1EEd.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.389351
Transaction Length: 1
Severity: Low
Contract: DistributionToken
Function name: distributions(uint256)
PC address: 3405
Estimated Gas Usage: 724 - 819
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x4B2464D5FfaB717ab0Bd26E5E30cB432B47E1EEd.sol:1328

Distribution[] public distributions

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.673433
Transaction Length: 2
Severity: High
Contract: ERC20Burnable
Function name: increaseAllowance(address,uint256)
PC address: 3429
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x4B2464D5FfaB717ab0Bd26E5E30cB432B47E1EEd.sol:34

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.759172
Transaction Length: 2
Severity: High
Contract: ERC20Mintable
Function name: increaseAllowance(address,uint256)
PC address: 4214
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x4B2464D5FfaB717ab0Bd26E5E30cB432B47E1EEd.sol:34

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:47.330522
Transaction Length: 1
Severity: Low
Contract: PoolToken
Function name: distributions(uint256)
PC address: 6392
Estimated Gas Usage: 768 - 863
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x4B2464D5FfaB717ab0Bd26E5E30cB432B47E1EEd.sol:1328

Distribution[] public distributions

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.571793
Transaction Length: 2
Severity: High
Contract: DistributionToken
Function name: increaseAllowance(address,uint256)
PC address: 6759
Estimated Gas Usage: 1104 - 1579
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x4B2464D5FfaB717ab0Bd26E5E30cB432B47E1EEd.sol:34

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:03:21.876988
Transaction Length: 1
Severity: Low
Contract: SavingsModule
Function name: registeredPoolTokens()
PC address: 16017
Estimated Gas Usage: 1175 - 1646
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x4B2464D5FfaB717ab0Bd26E5E30cB432B47E1EEd.sol:2311

registeredProtocols[i]

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0xb09b1500e55b845966705f0881187f4d3d8b64d8.sol
Total states:14554
34.387122
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:01.696352
Transaction Length: 1
Severity: Low
Contract: TokenTimelock
Function name: release()
PC address: 1359
Estimated Gas Usage: 4557 - 41005
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop5/0xb09b1500e55b845966705f0881187f4d3d8b64d8.sol:103

token.transfer(to, value)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.934646
Transaction Length: 2
Severity: High
Contract: StandardToken
Function name: increaseApproval(address,uint256)
PC address: 4235
Estimated Gas Usage: 980 - 1455
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0xb09b1500e55b845966705f0881187f4d3d8b64d8.sol:31

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x0d0f5c0ed5cbc91b7bdd557cfd095c88cc66657f.sol
Total states:463
0.775288
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x7fb9fbbb6ab369808df6d92539547093a56fa76d.sol
Total states:305
3.925737
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x365c0f05ccfae37899b55d79459eb7c0fcb20e3a.sol
Total states:24322
95.308965
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.100778
Transaction Length: 0
Severity: High
Contract: LexAIR
Function name: constructor
PC address: 110
Estimated Gas Usage: 257 - 3030
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x365c0f05ccfae37899b55d79459eb7c0fcb20e3a.sol:10

█████╗

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.112070
Transaction Length: 0
Severity: High
Contract: LexAIR
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x365c0f05ccfae37899b55d79459eb7c0fcb20e3a.sol:9

█╔██╗ 
███████╗█

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.437247
Transaction Length: 1
Severity: High
Contract: LexAIR
Function name: list(address[])
PC address: 273
Estimated Gas Usage: 319 - 414
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x365c0f05ccfae37899b55d79459eb7c0fcb20e3a.sol:6

     ████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.780614
Transaction Length: 1
Severity: High
Contract: LexAIR
Function name: list(address[])
PC address: 275
Estimated Gas Usage: 319 - 414
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x365c0f05ccfae37899b55d79459eb7c0fcb20e3a.sol:3

*/

/*
██╗     █████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:18.414255
Transaction Length: 1
Severity: High
Contract: LexAIR
Function name: updateMessage(string)
PC address: 396
Estimated Gas Usage: 341 - 436
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x365c0f05ccfae37899b55d79459eb7c0fcb20e3a.sol:3

*/

/*
██╗     ████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:22.371640
Transaction Length: 1
Severity: High
Contract: LexAIR
Function name: delist(address[])
PC address: 515
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x365c0f05ccfae37899b55d79459eb7c0fcb20e3a.sol:6

     ████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:25.514948
Transaction Length: 1
Severity: High
Contract: LexAIR
Function name: delist(address[])
PC address: 517
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x365c0f05ccfae37899b55d79459eb7c0fcb20e3a.sol:3

*/

/*
██╗     █████

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0xfee3d089590625e16681cf87483d455b39f4715b.sol
Total states:426
0.78991
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0xb2c56373aabe89ee34bbcf8fcc874dbc00bc7057.sol
Total states:822
12.364078
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol
Total states:48547
325.607374
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.519133
Transaction Length: 1
Severity: Low
Contract: Getters
Function name: expiringCouponsAtIndex(uint256,uint256)
PC address: 2821
Estimated Gas Usage: 1090 - 1375
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:1153

_state.epochs[epoch].coupons.expiring[i]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.926216
Transaction Length: 1
Severity: High
Contract: Getters
Function name: totalNet()
PC address: 4187
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:9

solidity ^0.5.1

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.809944
Transaction Length: 1
Severity: High
Contract: Getters
Function name: totalNet()
PC address: 4190
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:5

*/



//pragma solidity ^0.5.17;
pragma sol

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.376651
Transaction Length: 1
Severity: High
Contract: Getters
Function name: totalNet()
PC address: 4202
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:1048

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.909684
Transaction Length: 1
Severity: High
Contract: Comptroller
Function name: totalNet()
PC address: 4387
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:9

solidity ^0.5.1

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.755619
Transaction Length: 1
Severity: High
Contract: Permission
Function name: totalNet()
PC address: 4387
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:9

solidity ^0.5.1

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.956028
Transaction Length: 1
Severity: High
Contract: Regulator
Function name: totalNet()
PC address: 4387
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:9

solidity ^0.5.1

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.726700
Transaction Length: 1
Severity: High
Contract: Setters
Function name: totalNet()
PC address: 4387
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:9

solidity ^0.5.1

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.553698
Transaction Length: 1
Severity: High
Contract: Comptroller
Function name: totalNet()
PC address: 4390
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:5

*/



//pragma solidity ^0.5.17;
pragma sol

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.632284
Transaction Length: 1
Severity: High
Contract: Permission
Function name: totalNet()
PC address: 4390
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:5

*/



//pragma solidity ^0.5.17;
pragma sol

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.826065
Transaction Length: 1
Severity: High
Contract: Regulator
Function name: totalNet()
PC address: 4390
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:5

*/



//pragma solidity ^0.5.17;
pragma sol

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.137565
Transaction Length: 1
Severity: High
Contract: Setters
Function name: totalNet()
PC address: 4390
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:5

*/



//pragma solidity ^0.5.17;
pragma sol

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.143971
Transaction Length: 1
Severity: High
Contract: Comptroller
Function name: totalNet()
PC address: 4402
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:1048

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.212382
Transaction Length: 1
Severity: High
Contract: Permission
Function name: totalNet()
PC address: 4402
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:1048

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.402017
Transaction Length: 1
Severity: High
Contract: Regulator
Function name: totalNet()
PC address: 4402
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:1048

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.899230
Transaction Length: 1
Severity: High
Contract: Setters
Function name: totalNet()
PC address: 4402
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:1048

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.479479
Transaction Length: 1
Severity: High
Contract: Market
Function name: totalNet()
PC address: 5379
Estimated Gas Usage: 2863 - 37757
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:9

solidity ^0.5.1

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.085793
Transaction Length: 1
Severity: High
Contract: Market
Function name: totalNet()
PC address: 5382
Estimated Gas Usage: 2863 - 37757
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:5

*/



//pragma solidity ^0.5.17;
pragma sol

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.923934
Transaction Length: 1
Severity: High
Contract: Market
Function name: totalNet()
PC address: 5394
Estimated Gas Usage: 2863 - 37757
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:1048

dollar().totalSupply()

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.744823
Transaction Length: 1
Severity: High
Contract: Getters
Function name: totalNet()
PC address: 5628
Estimated Gas Usage: 2775 - 37669
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:61

unterpart to Solidity's

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.482135
Transaction Length: 1
Severity: High
Contract: Bonding
Function name: totalNet()
PC address: 5771
Estimated Gas Usage: 2753 - 37647
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:9

solidity ^0.5.1

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.400610
Transaction Length: 1
Severity: High
Contract: Bonding
Function name: totalNet()
PC address: 5774
Estimated Gas Usage: 2753 - 37647
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:5

*/



//pragma solidity ^0.5.17;
pragma sol

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.952282
Transaction Length: 1
Severity: High
Contract: Bonding
Function name: totalNet()
PC address: 5786
Estimated Gas Usage: 2753 - 37647
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:1048

dollar().totalSupply()

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.641624
Transaction Length: 1
Severity: High
Contract: Comptroller
Function name: totalNet()
PC address: 5918
Estimated Gas Usage: 2775 - 37669
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:79

or.
     *
     * Requi

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.283843
Transaction Length: 1
Severity: High
Contract: Permission
Function name: totalNet()
PC address: 5918
Estimated Gas Usage: 2775 - 37669
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:79

or.
     *
     * Requi

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.507598
Transaction Length: 1
Severity: High
Contract: Regulator
Function name: totalNet()
PC address: 5918
Estimated Gas Usage: 2775 - 37669
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:79

or.
     *
     * Requi

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:06.282484
Transaction Length: 1
Severity: High
Contract: Setters
Function name: totalNet()
PC address: 5918
Estimated Gas Usage: 2775 - 37669
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:79

or.
     *
     * Requi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.467766
Transaction Length: 1
Severity: High
Contract: Market
Function name: couponPremium(uint256)
PC address: 6066
Estimated Gas Usage: 2510 - 37404
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:9

solidity ^0.5.1

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.039861
Transaction Length: 1
Severity: High
Contract: Market
Function name: couponPremium(uint256)
PC address: 6069
Estimated Gas Usage: 2510 - 37404
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:5

*/



//pragma solidity ^0.5.17;
pragma sol

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.362385
Transaction Length: 1
Severity: High
Contract: Market
Function name: couponPremium(uint256)
PC address: 6081
Estimated Gas Usage: 2510 - 37404
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:2152

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.541964
Transaction Length: 1
Severity: High
Contract: Implementation
Function name: totalNet()
PC address: 8369
Estimated Gas Usage: 2819 - 37713
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:9

solidity ^0.5.1

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.421359
Transaction Length: 1
Severity: High
Contract: Implementation
Function name: totalNet()
PC address: 8372
Estimated Gas Usage: 2819 - 37713
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:5

*/



//pragma solidity ^0.5.17;
pragma sol

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.993790
Transaction Length: 1
Severity: High
Contract: Implementation
Function name: totalNet()
PC address: 8384
Estimated Gas Usage: 2819 - 37713
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:1048

dollar().totalSupply()

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.010384
Transaction Length: 1
Severity: High
Contract: Bonding
Function name: totalNet()
PC address: 10094
Estimated Gas Usage: 2753 - 37647
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:88

= 0) {
            retu

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:15.587494
Transaction Length: 1
Severity: Low
Contract: Market
Function name: purchaseCoupons(uint256)
PC address: 10333
Estimated Gas Usage: 703 - 1362
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:1756

result[i]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.720385
Transaction Length: 1
Severity: High
Contract: Implementation
Function name: couponPremium(uint256)
PC address: 10453
Estimated Gas Usage: 2533 - 37427
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:9

solidity ^0.5.1

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.938704
Transaction Length: 1
Severity: High
Contract: Implementation
Function name: couponPremium(uint256)
PC address: 10456
Estimated Gas Usage: 2533 - 37427
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:5

*/



//pragma solidity ^0.5.17;
pragma sol

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.327888
Transaction Length: 1
Severity: High
Contract: Implementation
Function name: couponPremium(uint256)
PC address: 10468
Estimated Gas Usage: 2533 - 37427
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:2152

dollar().totalSupply()

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:06.030007
Transaction Length: 1
Severity: High
Contract: Market
Function name: totalNet()
PC address: 12180
Estimated Gas Usage: 2863 - 37757
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:109

(uint256 a, uint256 b) 

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:06.118649
Transaction Length: 1
Severity: High
Contract: Implementation
Function name: totalNet()
PC address: 24692
Estimated Gas Usage: 2819 - 37713
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x16EA3Af6dac045e809ac6833D8E6d07f05c3E99e.sol:143

* Requirements:
     * 

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop5/0x95DFe0152cA29697c4a78F105888F2ef8d0bccf2.sol
Total states:22774
1087.907491
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.997241
Transaction Length: 1
Severity: High
Contract: Module
Function name: getModuleAddress(string)
PC address: 416
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x95DFe0152cA29697c4a78F105888F2ef8d0bccf2.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.538750
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 648
Estimated Gas Usage: 386 - 481
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x95DFe0152cA29697c4a78F105888F2ef8d0bccf2.sol:5

openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.025887
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 650
Estimated Gas Usage: 386 - 481
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x95DFe0152cA29697c4a78F105888F2ef8d0bccf2.sol:3

*/

// File: @openzeppelin\upgrades\

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.725558
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 733
Estimated Gas Usage: 562 - 657
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x95DFe0152cA29697c4a78F105888F2ef8d0bccf2.sol:5

openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:19.922543
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 735
Estimated Gas Usage: 562 - 657
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x95DFe0152cA29697c4a78F105888F2ef8d0bccf2.sol:3

*/

// File: @openzeppelin\upgrades\

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:31.662448
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 818
Estimated Gas Usage: 738 - 833
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x95DFe0152cA29697c4a78F105888F2ef8d0bccf2.sol:5

openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:56.992951
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 820
Estimated Gas Usage: 738 - 833
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x95DFe0152cA29697c4a78F105888F2ef8d0bccf2.sol:3

*/

// File: @openzeppelin\upgrades\

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:18.635831
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 903
Estimated Gas Usage: 914 - 1009
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x95DFe0152cA29697c4a78F105888F2ef8d0bccf2.sol:5

openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:44.241622
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 905
Estimated Gas Usage: 914 - 1009
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x95DFe0152cA29697c4a78F105888F2ef8d0bccf2.sol:3

*/

// File: @openzeppelin\upgrades\

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.887472
Transaction Length: 1
Severity: High
Contract: StakingPoolBase
Function name: stake(uint256,bytes)
PC address: 914
Estimated Gas Usage: 414 - 509
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x95DFe0152cA29697c4a78F105888F2ef8d0bccf2.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.780351
Transaction Length: 1
Severity: High
Contract: StakingPool
Function name: stake(uint256,bytes)
PC address: 1124
Estimated Gas Usage: 459 - 554
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x95DFe0152cA29697c4a78F105888F2ef8d0bccf2.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.403659
Transaction Length: 1
Severity: High
Contract: StakingPoolADEL
Function name: stake(uint256,bytes)
PC address: 1124
Estimated Gas Usage: 459 - 554
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x95DFe0152cA29697c4a78F105888F2ef8d0bccf2.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:25.194279
Transaction Length: 1
Severity: High
Contract: StakingPoolBase
Function name: stakeFor(address,uint256,bytes)
PC address: 1143
Estimated Gas Usage: 469 - 564
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x95DFe0152cA29697c4a78F105888F2ef8d0bccf2.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:15.287047
Transaction Length: 1
Severity: High
Contract: StakingPool
Function name: stakeFor(address,uint256,bytes)
PC address: 1353
Estimated Gas Usage: 447 - 542
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x95DFe0152cA29697c4a78F105888F2ef8d0bccf2.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:18.547576
Transaction Length: 1
Severity: High
Contract: StakingPoolADEL
Function name: stakeFor(address,uint256,bytes)
PC address: 1353
Estimated Gas Usage: 447 - 542
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x95DFe0152cA29697c4a78F105888F2ef8d0bccf2.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:18.384285
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: getModuleAddress(string)
PC address: 1590
Estimated Gas Usage: 341 - 436
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x95DFe0152cA29697c4a78F105888F2ef8d0bccf2.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:26.184982
Transaction Length: 1
Severity: High
Contract: StakingPoolBase
Function name: getPersonalStakeUnlockedTimestamps(address)
PC address: 1705
Estimated Gas Usage: 2606 - 4209
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x95DFe0152cA29697c4a78F105888F2ef8d0bccf2.sol:1539

function getPersonalStakeUnlockedTimestamps(address _address) external view returns (uint256[] memory) {
    uint256[] memory timestamps;
    (timestamps,,) = getPersonalStakes(_address);

    return timestamps;
  }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:55.380529
Transaction Length: 1
Severity: High
Contract: StakingPoolBase
Function name: getPersonalStakeUnlockedTimestamps(address)
PC address: 1745
Estimated Gas Usage: 2756 - 4735
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x95DFe0152cA29697c4a78F105888F2ef8d0bccf2.sol:1539

function getPersonalStakeUnlockedTimestamps(address _address) external view returns (uint256[] memory) {
    uint256[] memory timestamps;
    (timestamps,,) = getPersonalStakes(_address);

    return timestamps;
  }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:16.595285
Transaction Length: 1
Severity: High
Contract: StakingPool
Function name: getPersonalStakeUnlockedTimestamps(address)
PC address: 1915
Estimated Gas Usage: 2629 - 4232
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x95DFe0152cA29697c4a78F105888F2ef8d0bccf2.sol:1539

function getPersonalStakeUnlockedTimestamps(address _address) external view returns (uint256[] memory) {
    uint256[] memory timestamps;
    (timestamps,,) = getPersonalStakes(_address);

    return timestamps;
  }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:32.964795
Transaction Length: 1
Severity: High
Contract: StakingPoolADEL
Function name: getPersonalStakeUnlockedTimestamps(address)
PC address: 1915
Estimated Gas Usage: 2629 - 4232
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x95DFe0152cA29697c4a78F105888F2ef8d0bccf2.sol:1539

function getPersonalStakeUnlockedTimestamps(address _address) external view returns (uint256[] memory) {
    uint256[] memory timestamps;
    (timestamps,,) = getPersonalStakes(_address);

    return timestamps;
  }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.456324
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3249
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop5/0x95DFe0152cA29697c4a78F105888F2ef8d0bccf2.sol:212

a + b

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:59.258040
Transaction Length: 1
Severity: Low
Contract: StakingPoolBase
Function name: stakeFor(address,uint256,bytes)
PC address: 13555
Estimated Gas Usage: 2998 - 7001
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop5/0x95DFe0152cA29697c4a78F105888F2ef8d0bccf2.sol:1397

stakingToken.transferFrom(_address, address(this), _amount)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol
Total states:10676
563.529141
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.917650
Transaction Length: 1
Severity: High
Contract: DeployFactory
Function name: createCashBox(address,address,uint256,uint256,string,string,string)
PC address: 386
Estimated Gas Usage: 438 - 533
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol:3



*/



// File: contracts/StockLiq

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.066050
Transaction Length: 1
Severity: High
Contract: DeployFactory
Function name: createCashBox(address,address,uint256,uint256,string,string,string)
PC address: 540
Estimated Gas Usage: 780 - 3557
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol:3



*/



// File: contracts/StockLiq

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:31.597445
Transaction Length: 1
Severity: High
Contract: DeployFactory
Function name: createCashBox(address,address,uint256,uint256,string,string,string)
PC address: 694
Estimated Gas Usage: 1122 - 6581
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol:3



*/



// File: contracts/StockLiq

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:52.958054
Transaction Length: 1
Severity: High
Contract: DeployFactory
Function name: getCashBoxesByUser(address)
PC address: 1122
Estimated Gas Usage: 1462 - 3528
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol:1645

function getCashBoxesByUser(address account)

        external

        view

        returns (address[] memory)

    {

        uint256 len = cashBoxes.length;

        address[] memory cashBoxesByUser = new address[](len);

        uint256 index = 0;



        for (uint256 i = 0; i < len; i++) {

            address payable cashBoxAddress = address(uint160(cashBoxes[i]));

            StockLiquiditator cashbox = StockLiquiditator(cashBoxAddress);



            if (cashbox.owner() == account) {

                cashBoxesByUser[index] = cashBoxes[i];

                index++;

            }

        }



        // to remove zero addresses from the result

        address[] memory result = new address[](index);

        for (uint256 i = 0; i < result.length; i++) {

            result[i] = cashBoxesByUser[i];

        }



        return result;

    }

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:54.811560
Transaction Length: 1
Severity: Low
Contract: DeployFactory
Function name: cashBoxes(uint256)
PC address: 2376
Estimated Gas Usage: 678 - 773
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol:1571

address[] public cashBoxes

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:09:01.935567
Transaction Length: 1
Severity: Low
Contract: DeployFactory
Function name: getCashBoxesByUser(address)
PC address: 3030
Estimated Gas Usage: 982 - 1829
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol:1689

cashBoxesByUser[i]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.625844
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3244
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol:238

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x10e612f9c80ed35d74a6b34aaeb18db881ccb51e.sol
Total states:474
1.015945
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.094484
Transaction Length: 0
Severity: High
Contract: EthMadness
Function name: constructor
PC address: 147
Estimated Gas Usage: 5724 - 28827
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x10e612f9c80ed35d74a6b34aaeb18db881ccb51e.sol:15

function approve(addr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.109852
Transaction Length: 0
Severity: High
Contract: EthMadness
Function name: constructor
PC address: 149
Estimated Gas Usage: 5724 - 28827
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x10e612f9c80ed35d74a6b34aaeb18db881ccb51e.sol:13

 returns (bool);

    function approve(addre

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x67C1d2552a0cE8572AAfFD0c9664EeA7edbBCeF3.sol
Total states:14979
193.918195
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.034067
Transaction Length: 0
Severity: High
Contract: ERC721Metadata
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x67C1d2552a0cE8572AAfFD0c9664EeA7edbBCeF3.sol:12

PDX-License-Identifier: GPL-3.0-or-later

/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.043730
Transaction Length: 0
Severity: High
Contract: Title
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x67C1d2552a0cE8572AAfFD0c9664EeA7edbBCeF3.sol:12

PDX-License-Identifier: GPL-3.0-or-later

/

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:20.747252
Transaction Length: 1
Severity: High
Contract: Math
Function name: safeSub(uint256,uint256)
PC address: 820
Estimated Gas Usage: 309 - 404
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x67C1d2552a0cE8572AAfFD0c9664EeA7edbBCeF3.sol:545

x - y

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:22.929422
Transaction Length: 1
Severity: Low
Contract: Math
Function name: safeDiv(uint256,uint256)
PC address: 959
Estimated Gas Usage: 324 - 419
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x67C1d2552a0cE8572AAfFD0c9664EeA7edbBCeF3.sol:553

x / y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.329840
Transaction Length: 1
Severity: High
Contract: Math
Function name: rdiv(uint256,uint256)
PC address: 985
Estimated Gas Usage: 382 - 477
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x67C1d2552a0cE8572AAfFD0c9664EeA7edbBCeF3.sol:549

x * y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.002037
Transaction Length: 1
Severity: High
Contract: Math
Function name: rdiv(uint256,uint256)
PC address: 1128
Estimated Gas Usage: 496 - 591
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x67C1d2552a0cE8572AAfFD0c9664EeA7edbBCeF3.sol:541

x + y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.975464
Transaction Length: 1
Severity: High
Contract: ERC721
Function name: safeTransferFrom(address,address,uint256,bytes)
PC address: 1136
Estimated Gas Usage: 477 - 572
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x67C1d2552a0cE8572AAfFD0c9664EeA7edbBCeF3.sol:3

*/

// Verified using https://dapp.

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:42.910203
Transaction Length: 1
Severity: Medium
Contract: Shelf
Function name: issue(address,uint256)
PC address: 1819
Estimated Gas Usage: 22744 - 157449
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 11416
Offset: 12054
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop8/0x67C1d2552a0cE8572AAfFD0c9664EeA7edbBCeF3.sol:1410

function issue(address registry_, uint token_) external note returns (uint) {
        require(NFTLike_2(registry_).ownerOf(token_) == msg.sender, "nft-not-owned");
        bytes32 nft = keccak256(abi.encodePacked(registry_, token_));
        require(nftlookup[nft] == 0, "nft-in-use");
        uint loan = title.issue(msg.sender);
        nftlookup[nft] = loan;
        shelf[loan].registry = registry_;
        shelf[loan].tokenId = token_;

        return loan;
    }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:51.700676
Transaction Length: 2
Severity: Medium
Contract: Shelf
Function name: lock(uint256)
PC address: 2627
Estimated Gas Usage: 7640 - 81359
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 15479
Offset: 16139
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop8/0x67C1d2552a0cE8572AAfFD0c9664EeA7edbBCeF3.sol:1513

function lock(uint loan) external owner(loan) note {
        if(address(subscriber) != address(0)) {
            subscriber.unlockEvent(loan);
        }
        NFTLike_2(shelf[loan].registry).transferFrom(msg.sender, address(this), shelf[loan].tokenId);
    }

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:01.713883
Transaction Length: 1
Severity: Low
Contract: Shelf
Function name: withdraw(uint256,uint256,address)
PC address: 4850
Estimated Gas Usage: 1674 - 2475
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x67C1d2552a0cE8572AAfFD0c9664EeA7edbBCeF3.sol:1289

title.ownerOf(loan)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:06.547742
Transaction Length: 2
Severity: Low
Contract: Shelf
Function name: withdraw(uint256,uint256,address)
PC address: 4850
Estimated Gas Usage: 1674 - 2475
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x67C1d2552a0cE8572AAfFD0c9664EeA7edbBCeF3.sol:1289

title.ownerOf(loan)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:03.210165
Transaction Length: 1
Severity: Low
Contract: Shelf
Function name: close(uint256)
PC address: 6219
Estimated Gas Usage: 1577 - 2378
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x67C1d2552a0cE8572AAfFD0c9664EeA7edbBCeF3.sol:1423

pile.debt(loan)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:12.357223
Transaction Length: 2
Severity: Low
Contract: Shelf
Function name: close(uint256)
PC address: 6219
Estimated Gas Usage: 1577 - 2378
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x67C1d2552a0cE8572AAfFD0c9664EeA7edbBCeF3.sol:1423

pile.debt(loan)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:36.755751
Transaction Length: 1
Severity: Low
Contract: Shelf
Function name: borrow(uint256,uint256)
PC address: 8042
Estimated Gas Usage: 1618 - 2419
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x67C1d2552a0cE8572AAfFD0c9664EeA7edbBCeF3.sol:1289

title.ownerOf(loan)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:17.730678
Transaction Length: 2
Severity: Low
Contract: Shelf
Function name: borrow(uint256,uint256)
PC address: 8042
Estimated Gas Usage: 1618 - 2419
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x67C1d2552a0cE8572AAfFD0c9664EeA7edbBCeF3.sol:1289

title.ownerOf(loan)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:38.303720
Transaction Length: 1
Severity: Low
Contract: Shelf
Function name: unlock(uint256)
PC address: 9574
Estimated Gas Usage: 1591 - 2392
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x67C1d2552a0cE8572AAfFD0c9664EeA7edbBCeF3.sol:1289

title.ownerOf(loan)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:24.023705
Transaction Length: 2
Severity: Low
Contract: Shelf
Function name: unlock(uint256)
PC address: 9574
Estimated Gas Usage: 1591 - 2392
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x67C1d2552a0cE8572AAfFD0c9664EeA7edbBCeF3.sol:1289

title.ownerOf(loan)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:39.663127
Transaction Length: 1
Severity: Low
Contract: Shelf
Function name: unlock(uint256)
PC address: 9832
Estimated Gas Usage: 3739 - 39432
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x67C1d2552a0cE8572AAfFD0c9664EeA7edbBCeF3.sol:1523

pile.debt(loan)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:31.073045
Transaction Length: 2
Severity: Low
Contract: Shelf
Function name: unlock(uint256)
PC address: 9832
Estimated Gas Usage: 3739 - 39432
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x67C1d2552a0cE8572AAfFD0c9664EeA7edbBCeF3.sol:1523

pile.debt(loan)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:42.250923
Transaction Length: 1
Severity: Low
Contract: Shelf
Function name: issue(address,uint256)
PC address: 12054
Estimated Gas Usage: 3994 - 40206
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x67C1d2552a0cE8572AAfFD0c9664EeA7edbBCeF3.sol:1414

title.issue(msg.sender)

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:43.358120
Transaction Length: 1
Severity: High
Contract: Shelf
Function name: safeSub(uint256,uint256)
PC address: 14144
Estimated Gas Usage: 399 - 494
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x67C1d2552a0cE8572AAfFD0c9664EeA7edbBCeF3.sol:545

x - y

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:45.603961
Transaction Length: 1
Severity: Low
Contract: Shelf
Function name: safeDiv(uint256,uint256)
PC address: 14283
Estimated Gas Usage: 325 - 420
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x67C1d2552a0cE8572AAfFD0c9664EeA7edbBCeF3.sol:553

x / y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.293532
Transaction Length: 1
Severity: High
Contract: Shelf
Function name: rdiv(uint256,uint256)
PC address: 14439
Estimated Gas Usage: 472 - 567
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x67C1d2552a0cE8572AAfFD0c9664EeA7edbBCeF3.sol:549

x * y

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:47.231477
Transaction Length: 1
Severity: Low
Contract: Shelf
Function name: repay(uint256,uint256)
PC address: 14748
Estimated Gas Usage: 1639 - 2440
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x67C1d2552a0cE8572AAfFD0c9664EeA7edbBCeF3.sol:1289

title.ownerOf(loan)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:37.672075
Transaction Length: 2
Severity: Low
Contract: Shelf
Function name: repay(uint256,uint256)
PC address: 14748
Estimated Gas Usage: 1639 - 2440
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x67C1d2552a0cE8572AAfFD0c9664EeA7edbBCeF3.sol:1289

title.ownerOf(loan)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:48.656239
Transaction Length: 1
Severity: Low
Contract: Shelf
Function name: lock(uint256)
PC address: 15479
Estimated Gas Usage: 1545 - 2346
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x67C1d2552a0cE8572AAfFD0c9664EeA7edbBCeF3.sol:1289

title.ownerOf(loan)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:43.551328
Transaction Length: 2
Severity: Low
Contract: Shelf
Function name: lock(uint256)
PC address: 15479
Estimated Gas Usage: 1545 - 2346
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x67C1d2552a0cE8572AAfFD0c9664EeA7edbBCeF3.sol:1289

title.ownerOf(loan)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:50.660025
Transaction Length: 1
Severity: Low
Contract: Shelf
Function name: lock(uint256)
PC address: 16139
Estimated Gas Usage: 4797 - 41390
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x67C1d2552a0cE8572AAfFD0c9664EeA7edbBCeF3.sol:1517

NFTLike_2(shelf[loan].registry).transferFrom(msg.sender, address(this), shelf[loan].tokenId)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:50.932217
Transaction Length: 2
Severity: Low
Contract: Shelf
Function name: lock(uint256)
PC address: 16139
Estimated Gas Usage: 4797 - 41390
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x67C1d2552a0cE8572AAfFD0c9664EeA7edbBCeF3.sol:1517

NFTLike_2(shelf[loan].registry).transferFrom(msg.sender, address(this), shelf[loan].tokenId)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:22.390453
Transaction Length: 1
Severity: High
Contract: Shelf
Function name: rdiv(uint256,uint256)
PC address: 16964
Estimated Gas Usage: 586 - 681
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x67C1d2552a0cE8572AAfFD0c9664EeA7edbBCeF3.sol:541

x + y

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x49c97ca4bc305fc0e9d3dcb3b1647e5551dc1159.sol
Total states:35650
173.313195
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.244181
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1004
Estimated Gas Usage: 417 - 512
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x49c97ca4bc305fc0e9d3dcb3b1647e5551dc1159.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.390132
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1006
Estimated Gas Usage: 417 - 512
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x49c97ca4bc305fc0e9d3dcb3b1647e5551dc1159.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.326238
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1089
Estimated Gas Usage: 593 - 688
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x49c97ca4bc305fc0e9d3dcb3b1647e5551dc1159.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:22.827223
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1091
Estimated Gas Usage: 593 - 688
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x49c97ca4bc305fc0e9d3dcb3b1647e5551dc1159.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.732308
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1149
Estimated Gas Usage: 440 - 535
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x49c97ca4bc305fc0e9d3dcb3b1647e5551dc1159.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.572312
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1151
Estimated Gas Usage: 440 - 535
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x49c97ca4bc305fc0e9d3dcb3b1647e5551dc1159.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.263273
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1234
Estimated Gas Usage: 616 - 711
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x49c97ca4bc305fc0e9d3dcb3b1647e5551dc1159.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:22.394570
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1236
Estimated Gas Usage: 616 - 711
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x49c97ca4bc305fc0e9d3dcb3b1647e5551dc1159.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.966731
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeBP(uint256)
PC address: 2585
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x49c97ca4bc305fc0e9d3dcb3b1647e5551dc1159.sol:784

uint[] public bonusRangeBP

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.388010
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3595
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x49c97ca4bc305fc0e9d3dcb3b1647e5551dc1159.sol:1226

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:04.170469
Transaction Length: 2
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3595
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x49c97ca4bc305fc0e9d3dcb3b1647e5551dc1159.sol:1226

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:38.479620
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeStart(uint256)
PC address: 6017
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x49c97ca4bc305fc0e9d3dcb3b1647e5551dc1159.sol:783

uint[] public bonusRangeStart

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:34.600842
Transaction Length: 1
Severity: Low
Contract: LidStaking
Function name: stakeHandlers(uint256)
PC address: 6118
Estimated Gas Usage: 790 - 885
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x49c97ca4bc305fc0e9d3dcb3b1647e5551dc1159.sol:961

IStakeHandler[] public stakeHandlers

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.696947
Transaction Length: 2
Severity: High
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6315
Estimated Gas Usage: 1699 - 2124
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x49c97ca4bc305fc0e9d3dcb3b1647e5551dc1159.sol:1111

stakeHandlers.length-1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:07.927138
Transaction Length: 2
Severity: Low
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6326
Estimated Gas Usage: 1709 - 2134
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x49c97ca4bc305fc0e9d3dcb3b1647e5551dc1159.sol:1111

stakeHandlers[stakeHandlers.length-1]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:34.708051
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: calculateRatePerEth(uint256,uint256,uint256)
PC address: 6866
Estimated Gas Usage: 955 - 1050
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x49c97ca4bc305fc0e9d3dcb3b1647e5551dc1159.sol:162

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.448451
Transaction Length: 1
Severity: High
Contract: LidStaking
Function name: findTaxAmount(uint256,uint256)
PC address: 13348
Estimated Gas Usage: 474 - 569
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x49c97ca4bc305fc0e9d3dcb3b1647e5551dc1159.sol:162

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:34.791296
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPoolBPs(uint256)
PC address: 15440
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x49c97ca4bc305fc0e9d3dcb3b1647e5551dc1159.sol:1227

uint[] public tokenPoolBPs

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x174ce5ccf640fe3958076cbeb88bc05c98e1727d2.sol
Total states:2352
5.337982
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.502187
Transaction Length: 1
Severity: High
Contract: Fund
Function name: Game(uint256)
PC address: 1956
Estimated Gas Usage: 1144 - 1569
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x174ce5ccf640fe3958076cbeb88bc05c98e1727d2.sol:83

_turns * priceAction

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x073ac467787c6a4ec93163dbe043b4a03bd60caf.sol
Total states:77
3.255088
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x46c468ff21a7c8402714aad00a979de608caac19.sol
Total states:3742
75.678176
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.956223
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: initialize(uint256,uint256,address[],uint256[],address)
PC address: 798
Estimated Gas Usage: 439 - 534
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x46c468ff21a7c8402714aad00a979de608caac19.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.237768
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: initialize(uint256,uint256,address[],uint256[],address)
PC address: 800
Estimated Gas Usage: 439 - 534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x46c468ff21a7c8402714aad00a979de608caac19.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.340135
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: initialize(uint256,uint256,address[],uint256[],address)
PC address: 883
Estimated Gas Usage: 615 - 710
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x46c468ff21a7c8402714aad00a979de608caac19.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:20.946230
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: initialize(uint256,uint256,address[],uint256[],address)
PC address: 885
Estimated Gas Usage: 615 - 710
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x46c468ff21a7c8402714aad00a979de608caac19.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:30.801994
Transaction Length: 1
Severity: Medium
Contract: LidTeamLock
Function name: startRelease()
PC address: 1036
Estimated Gas Usage: 20796 - 150675
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 4542
Offset: 4906
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop8/0x46c468ff21a7c8402714aad00a979de608caac19.sol:698

function startRelease() external {

        require(releaseStart == 0, "Has already started.");

        require(address(this).balance != 0, "Must have some ether deposited.");

        require(lidToken.balanceOf(address(this)) != 0, "Must have some lid deposited.");

        startingLid = lidToken.balanceOf(address(this));

        startingEth = address(this).balance;

        releaseStart = now.add(24 hours);

    }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:00.634859
Transaction Length: 2
Severity: Medium
Contract: LidTeamLock
Function name: startRelease()
PC address: 1036
Estimated Gas Usage: 20796 - 150675
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 4542
Offset: 4906
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop8/0x46c468ff21a7c8402714aad00a979de608caac19.sol:698

function startRelease() external {

        require(releaseStart == 0, "Has already started.");

        require(address(this).balance != 0, "Must have some ether deposited.");

        require(lidToken.balanceOf(address(this)) != 0, "Must have some lid deposited.");

        startingLid = lidToken.balanceOf(address(this));

        startingEth = address(this).balance;

        releaseStart = now.add(24 hours);

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:32.035153
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 1184
Estimated Gas Usage: 407 - 502
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x46c468ff21a7c8402714aad00a979de608caac19.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:34.833356
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 1186
Estimated Gas Usage: 407 - 502
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x46c468ff21a7c8402714aad00a979de608caac19.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:40.516943
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 1269
Estimated Gas Usage: 583 - 678
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x46c468ff21a7c8402714aad00a979de608caac19.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:53.107015
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 1271
Estimated Gas Usage: 583 - 678
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x46c468ff21a7c8402714aad00a979de608caac19.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.743530
Transaction Length: 1
Severity: Low
Contract: LidTeamLock
Function name: teamMemberBPs(uint256)
PC address: 1645
Estimated Gas Usage: 746 - 841
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x46c468ff21a7c8402714aad00a979de608caac19.sol:572

uint[] public teamMemberBPs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:11.729798
Transaction Length: 1
Severity: Low
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 5051
Estimated Gas Usage: 1070 - 1165
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x46c468ff21a7c8402714aad00a979de608caac19.sol:724

teamMemberAddresses[0]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:12.171247
Transaction Length: 1
Severity: Low
Contract: LidTeamLock
Function name: teamMemberAddresses(uint256)
PC address: 5622
Estimated Gas Usage: 678 - 773
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x46c468ff21a7c8402714aad00a979de608caac19.sol:570

address payable[] public teamMemberAddresses

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:29.786008
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: startRelease()
PC address: 6670
Estimated Gas Usage: 15736 - 125615
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x46c468ff21a7c8402714aad00a979de608caac19.sol:186

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x02708519CE8e710dB13F7C534DDF994cFa0B0Ca4.sol
Total states:475
5.953094
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x4a10ee6cb6508a3f38278153f846ec8f7885570d.sol
Total states:165
1239.130393
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:47.581901
Transaction Length: 1
Severity: High
Contract: Core
Function name: whitelistTokens(address[])
PC address: 1027
Estimated Gas Usage: 408 - 503
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x4a10ee6cb6508a3f38278153f846ec8f7885570d.sol:9

ma solidity 0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:51.297678
Transaction Length: 1
Severity: High
Contract: Core
Function name: whitelistTokens(address[])
PC address: 1029
Estimated Gas Usage: 408 - 503
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x4a10ee6cb6508a3f38278153f846ec8f7885570d.sol:3



*/



//pragma solidity 0.5.17;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:22.691759
Transaction Length: 1
Severity: High
Contract: Core
Function name: whitelistPeak(address,uint256[],bool)
PC address: 1236
Estimated Gas Usage: 418 - 513
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x4a10ee6cb6508a3f38278153f846ec8f7885570d.sol:9

ma solidity 0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:27.227605
Transaction Length: 1
Severity: High
Contract: Core
Function name: whitelistPeak(address,uint256[],bool)
PC address: 1238
Estimated Gas Usage: 418 - 513
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x4a10ee6cb6508a3f38278153f846ec8f7885570d.sol:3



*/



//pragma solidity 0.5.17;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.176959
Transaction Length: 1
Severity: High
Contract: Core
Function name: currentSystemState()
PC address: 2874
Estimated Gas Usage: 2273 - 37167
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x4a10ee6cb6508a3f38278153f846ec8f7885570d.sol:9

solidity 0.5.17

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.903776
Transaction Length: 1
Severity: High
Contract: Core
Function name: currentSystemState()
PC address: 2877
Estimated Gas Usage: 2322 - 37309
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x4a10ee6cb6508a3f38278153f846ec8f7885570d.sol:5

*/



//pragma solidity 0.5.17;
pragma soli

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.626242
Transaction Length: 1
Severity: High
Contract: Core
Function name: totalSystemAssets()
PC address: 2898
Estimated Gas Usage: 2322 - 37309
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x4a10ee6cb6508a3f38278153f846ec8f7885570d.sol:662

oracle.getPriceFeed()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.178709
Transaction Length: 1
Severity: High
Contract: Core
Function name: totalSystemAssets()
PC address: 2923
Estimated Gas Usage: 2322 - 37309
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x4a10ee6cb6508a3f38278153f846ec8f7885570d.sol:3

9

*/



//pragma sol

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.488741
Transaction Length: 1
Severity: High
Contract: Core
Function name: totalSystemAssets()
PC address: 2929
Estimated Gas Usage: 2322 - 37309
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x4a10ee6cb6508a3f38278153f846ec8f7885570d.sol:10

=0.5 <0.7.17;


--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.685391
Transaction Length: 1
Severity: High
Contract: Core
Function name: totalSystemAssets()
PC address: 2949
Estimated Gas Usage: 2380 - 37460
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x4a10ee6cb6508a3f38278153f846ec8f7885570d.sol:20

s the amount of token

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.832442
Transaction Length: 1
Severity: High
Contract: Core
Function name: totalSystemAssets()
PC address: 2951
Estimated Gas Usage: 2380 - 37460
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x4a10ee6cb6508a3f38278153f846ec8f7885570d.sol:19

/**
     * @dev Returns the amount of tokens

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:50.319085
Transaction Length: 1
Severity: High
Contract: Core
Function name: dusdToUsd(uint256,bool)
PC address: 14363
Estimated Gas Usage: 2389 - 37376
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x4a10ee6cb6508a3f38278153f846ec8f7885570d.sol:185

div(a, b, "SafeMath: division by zero")

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x41c6ff92688c283e3a9aaa2779ad25c571c0bd8d.sol
Total states:443
0.381916
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x9d21FDB292e69F3EF3d5De96D92248d314003fca.sol
Total states:5429
23.201078
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x038c12e33625736d28b55c137f974ef47315eacf2.sol
Total states:736
1.455852
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x22bed6e0df579e2c0adc6f325d9d898bc378a60f.sol
Total states:1076
14.935665
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0xDf625D21ab9aE7C74A1864265D6116EeaE9E94B2.sol
Total states:2203
46.093101
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.374059
Transaction Length: 1
Severity: High
Contract: EUSDReserves
Function name: migrateReserves(address,address[])
PC address: 305
Estimated Gas Usage: 352 - 447
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xDf625D21ab9aE7C74A1864265D6116EeaE9E94B2.sol:5

olidity 0.5.17;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.545861
Transaction Length: 1
Severity: High
Contract: EUSDReserves
Function name: migrateReserves(address,address[])
PC address: 307
Estimated Gas Usage: 352 - 447
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xDf625D21ab9aE7C74A1864265D6116EeaE9E94B2.sol:3

*/

//pragma solidity 0.5.17;
pragma

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x06d711011C81DF55ec4429F6C59F24BD4f89A6a0.sol
Total states:3053
25.170878
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.708412
Transaction Length: 1
Severity: High
Contract: MainnetIStableXToIStableXAssimilator
Function name: viewNumeraireAmountAndBalance(address,uint256)
PC address: 2164
Estimated Gas Usage: 3761 - 72885
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x06d711011C81DF55ec4429F6C59F24BD4f89A6a0.sol:936

_amount * precision

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:05.624855
Transaction Length: 1
Severity: Low
Contract: MainnetIStableXToIStableXAssimilator
Function name: outputRawAndGetBalance(address,uint256)
PC address: 2440
Estimated Gas Usage: 1179 - 1745
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x06d711011C81DF55ec4429F6C59F24BD4f89A6a0.sol:866

istablex.transfer(_dst, _amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:07.121016
Transaction Length: 1
Severity: Low
Contract: MainnetIStableXToIStableXAssimilator
Function name: intakeRawAndGetBalance(uint256)
PC address: 4216
Estimated Gas Usage: 1131 - 1792
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x06d711011C81DF55ec4429F6C59F24BD4f89A6a0.sol:826

istablex.transferFrom(msg.sender, address(this), _amount)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.452025
Transaction Length: 1
Severity: High
Contract: MainnetIStableXToIStableXAssimilator
Function name: intakeRawAndGetBalance(uint256)
PC address: 4795
Estimated Gas Usage: 5436 - 109312
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x06d711011C81DF55ec4429F6C59F24BD4f89A6a0.sol:834

_balance * _index

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.461005
Transaction Length: 1
Severity: High
Contract: MainnetIStableXToIStableXAssimilator
Function name: viewNumeraireBalance(address)
PC address: 5305
Estimated Gas Usage: 3721 - 72845
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x06d711011C81DF55ec4429F6C59F24BD4f89A6a0.sol:926

_balance * _index

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:13.524463
Transaction Length: 1
Severity: Low
Contract: MainnetIStableXToIStableXAssimilator
Function name: outputRaw(address,uint256)
PC address: 5527
Estimated Gas Usage: 1169 - 1735
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x06d711011C81DF55ec4429F6C59F24BD4f89A6a0.sol:882

istablex.transfer(_dst, _amount)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.850452
Transaction Length: 1
Severity: High
Contract: MainnetIStableXToIStableXAssimilator
Function name: outputRaw(address,uint256)
PC address: 5899
Estimated Gas Usage: 3816 - 73035
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x06d711011C81DF55ec4429F6C59F24BD4f89A6a0.sol:888

_amount * _index

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:17.029401
Transaction Length: 1
Severity: High
Contract: MainnetIStableXToIStableXAssimilator
Function name: viewNumeraireAmount(uint256)
PC address: 6131
Estimated Gas Usage: 2100 - 36662
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x06d711011C81DF55ec4429F6C59F24BD4f89A6a0.sol:916

_amount * _index

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:21.038672
Transaction Length: 1
Severity: Low
Contract: MainnetIStableXToIStableXAssimilator
Function name: intakeRaw(uint256)
PC address: 6404
Estimated Gas Usage: 1210 - 1871
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x06d711011C81DF55ec4429F6C59F24BD4f89A6a0.sol:842

istablex.transferFrom(msg.sender, address(this), _amount)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0xa0472ae3158c9ece329ce2324d0aa73db1d8639a.sol
Total states:52177
1031.864293
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.024432
Transaction Length: 1
Severity: High
Contract: Module
Function name: getModuleAddress(string)
PC address: 416
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xa0472ae3158c9ece329ce2324d0aa73db1d8639a.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.110434
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(string,string,uint8)
PC address: 1000
Estimated Gas Usage: 409 - 504
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xa0472ae3158c9ece329ce2324d0aa73db1d8639a.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.261990
Transaction Length: 1
Severity: High
Contract: PoolToken_CurveFi_renBTC
Function name: initialize(string,string,uint8)
PC address: 1000
Estimated Gas Usage: 409 - 504
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xa0472ae3158c9ece329ce2324d0aa73db1d8639a.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.599549
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(string,string,uint8)
PC address: 1151
Estimated Gas Usage: 751 - 3528
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xa0472ae3158c9ece329ce2324d0aa73db1d8639a.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.401101
Transaction Length: 1
Severity: High
Contract: PoolToken_CurveFi_renBTC
Function name: initialize(string,string,uint8)
PC address: 1151
Estimated Gas Usage: 751 - 3528
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xa0472ae3158c9ece329ce2324d0aa73db1d8639a.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.332824
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[],uint256)
PC address: 2226
Estimated Gas Usage: 429 - 524
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xa0472ae3158c9ece329ce2324d0aa73db1d8639a.sol:5

openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.921535
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[],uint256)
PC address: 2228
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xa0472ae3158c9ece329ce2324d0aa73db1d8639a.sol:3

*/

// File: @openzeppelin\upgrades\

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.123911
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[])
PC address: 2357
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xa0472ae3158c9ece329ce2324d0aa73db1d8639a.sol:5

openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:14.163107
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[])
PC address: 2359
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xa0472ae3158c9ece329ce2324d0aa73db1d8639a.sol:3

*/

// File: @openzeppelin\upgrades\

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:22.698774
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: getModuleAddress(string)
PC address: 2526
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xa0472ae3158c9ece329ce2324d0aa73db1d8639a.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:26.966121
Transaction Length: 1
Severity: High
Contract: PoolToken_CurveFi_renBTC
Function name: getModuleAddress(string)
PC address: 2526
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xa0472ae3158c9ece329ce2324d0aa73db1d8639a.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:20.009133
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(address,string,string)
PC address: 3179
Estimated Gas Usage: 485 - 580
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xa0472ae3158c9ece329ce2324d0aa73db1d8639a.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:22.878770
Transaction Length: 1
Severity: High
Contract: PoolToken_CurveFi_renBTC
Function name: initialize(address,string,string)
PC address: 3179
Estimated Gas Usage: 485 - 580
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xa0472ae3158c9ece329ce2324d0aa73db1d8639a.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.447416
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3249
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xa0472ae3158c9ece329ce2324d0aa73db1d8639a.sol:212

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:38.307860
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(address,string,string)
PC address: 3330
Estimated Gas Usage: 827 - 3604
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xa0472ae3158c9ece329ce2324d0aa73db1d8639a.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:44.252572
Transaction Length: 1
Severity: High
Contract: PoolToken_CurveFi_renBTC
Function name: initialize(address,string,string)
PC address: 3330
Estimated Gas Usage: 827 - 3604
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xa0472ae3158c9ece329ce2324d0aa73db1d8639a.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.336785
Transaction Length: 1
Severity: Low
Contract: DistributionToken
Function name: distributions(uint256)
PC address: 3405
Estimated Gas Usage: 724 - 819
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xa0472ae3158c9ece329ce2324d0aa73db1d8639a.sol:1000

Distribution[] public distributions

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.848658
Transaction Length: 2
Severity: High
Contract: ERC20Burnable
Function name: increaseAllowance(address,uint256)
PC address: 3429
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xa0472ae3158c9ece329ce2324d0aa73db1d8639a.sol:212

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.217323
Transaction Length: 2
Severity: High
Contract: ERC20Mintable
Function name: increaseAllowance(address,uint256)
PC address: 4214
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xa0472ae3158c9ece329ce2324d0aa73db1d8639a.sol:212

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:30.809230
Transaction Length: 1
Severity: Low
Contract: PoolToken
Function name: distributions(uint256)
PC address: 6392
Estimated Gas Usage: 768 - 863
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xa0472ae3158c9ece329ce2324d0aa73db1d8639a.sol:1000

Distribution[] public distributions

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:33.230515
Transaction Length: 1
Severity: Low
Contract: PoolToken_CurveFi_renBTC
Function name: distributions(uint256)
PC address: 6392
Estimated Gas Usage: 768 - 863
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xa0472ae3158c9ece329ce2324d0aa73db1d8639a.sol:1000

Distribution[] public distributions

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.918302
Transaction Length: 2
Severity: High
Contract: DistributionToken
Function name: increaseAllowance(address,uint256)
PC address: 6759
Estimated Gas Usage: 1104 - 1579
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xa0472ae3158c9ece329ce2324d0aa73db1d8639a.sol:212

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0xc1d86836920ad83617fb13de7da6ea66105580d9.sol
Total states:24490
93.251142
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.097238
Transaction Length: 0
Severity: High
Contract: LexAIR
Function name: constructor
PC address: 110
Estimated Gas Usage: 257 - 3030
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xc1d86836920ad83617fb13de7da6ea66105580d9.sol:10

█████╗

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.112468
Transaction Length: 0
Severity: High
Contract: LexAIR
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xc1d86836920ad83617fb13de7da6ea66105580d9.sol:9

█╔██╗ 
███████╗█

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.934191
Transaction Length: 1
Severity: High
Contract: LexAIR
Function name: updateMessage(string)
PC address: 275
Estimated Gas Usage: 319 - 414
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xc1d86836920ad83617fb13de7da6ea66105580d9.sol:3

*/

/*
██╗     ████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.181107
Transaction Length: 1
Severity: High
Contract: LexAIR
Function name: deregister(address[],bytes32)
PC address: 394
Estimated Gas Usage: 341 - 436
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xc1d86836920ad83617fb13de7da6ea66105580d9.sol:6

     ████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.249987
Transaction Length: 1
Severity: High
Contract: LexAIR
Function name: deregister(address[],bytes32)
PC address: 396
Estimated Gas Usage: 341 - 436
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xc1d86836920ad83617fb13de7da6ea66105580d9.sol:3

*/

/*
██╗     █████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:16.480439
Transaction Length: 1
Severity: High
Contract: LexAIR
Function name: register(address[],bytes32)
PC address: 735
Estimated Gas Usage: 318 - 413
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xc1d86836920ad83617fb13de7da6ea66105580d9.sol:6

     ████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:19.810131
Transaction Length: 1
Severity: High
Contract: LexAIR
Function name: register(address[],bytes32)
PC address: 737
Estimated Gas Usage: 318 - 413
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xc1d86836920ad83617fb13de7da6ea66105580d9.sol:3

*/

/*
██╗     █████

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0xd95d27f343b053af7776c3f388d8cc882682b0d7.sol
Total states:46134
123.605245
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.858902
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3244
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xd95d27f343b053af7776c3f388d8cc882682b0d7.sol:145

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.439284
Transaction Length: 1
Severity: Low
Contract: LockupContract
Function name: lockedAllocationData(address,uint256)
PC address: 3295
Estimated Gas Usage: 821 - 1106
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xd95d27f343b053af7776c3f388d8cc882682b0d7.sol:891

mapping(address => uint256[]) public lockedAllocationData

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.580978
Transaction Length: 1
Severity: Low
Contract: CLIContribution
Function name: contributions(uint256)
PC address: 3504
Estimated Gas Usage: 791 - 886
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xd95d27f343b053af7776c3f388d8cc882682b0d7.sol:1565

Contribution[] public contributions

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.282268
Transaction Length: 2
Severity: High
Contract: LockupContract
Function name: getUnlockedBalance(address,uint256,uint256)
PC address: 3578
Estimated Gas Usage: 2951 - 4089
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xd95d27f343b053af7776c3f388d8cc882682b0d7.sol:958

uint256[] memory  addressLockupData = lockedAllocationData[_address]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.808619
Transaction Length: 2
Severity: High
Contract: LockupContract
Function name: getUnlockedBalance(address,uint256,uint256)
PC address: 3603
Estimated Gas Usage: 2951 - 4089
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xd95d27f343b053af7776c3f388d8cc882682b0d7.sol:958

uint256[] memory  addressLockupData = lockedAllocationData[_address]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.431186
Transaction Length: 2
Severity: High
Contract: LockupContract
Function name: getUnlockedBalance(address,uint256,uint256)
PC address: 3605
Estimated Gas Usage: 2951 - 4089
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xd95d27f343b053af7776c3f388d8cc882682b0d7.sol:958

uint256[] memory  addressLockupData = lockedAllocationData[_address]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.961204
Transaction Length: 2
Severity: High
Contract: ERC20Mintable
Function name: increaseAllowance(address,uint256)
PC address: 3847
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xd95d27f343b053af7776c3f388d8cc882682b0d7.sol:145

a + b

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:01.784006
Transaction Length: 1
Severity: Low
Contract: CLIAllocator
Function name: unlockManuallyLockedBalances(address)
PC address: 4785
Estimated Gas Usage: 5545 - 76368
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0xd95d27f343b053af7776c3f388d8cc882682b0d7.sol:1318

lockupContract.setManuallyLockedForAddress(
            _holder,
            0
        )

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.218075
Transaction Length: 1
Severity: High
Contract: LockupContract
Function name: allocationLog(address,uint256,uint256,uint256,uint256,uint256)
PC address: 5243
Estimated Gas Usage: 13852 - 89787
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xd95d27f343b053af7776c3f388d8cc882682b0d7.sol:2

ification at Ether

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:04.714111
Transaction Length: 1
Severity: High
Contract: LockupContract
Function name: allocationLog(address,uint256,uint256,uint256,uint256,uint256)
PC address: 5255
Estimated Gas Usage: 24473 - 140693
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xd95d27f343b053af7776c3f388d8cc882682b0d7.sol:938

lockedAllocationData[_address].push(_amount)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.553914
Transaction Length: 1
Severity: High
Contract: LockupContract
Function name: allocationLog(address,uint256,uint256,uint256,uint256,uint256)
PC address: 5348
Estimated Gas Usage: 24473 - 140693
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xd95d27f343b053af7776c3f388d8cc882682b0d7.sol:2

ification at Ether

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:10.285252
Transaction Length: 1
Severity: High
Contract: LockupContract
Function name: allocationLog(address,uint256,uint256,uint256,uint256,uint256)
PC address: 5360
Estimated Gas Usage: 35094 - 191599
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xd95d27f343b053af7776c3f388d8cc882682b0d7.sol:939

lockedAllocationData[_address].push(_lockPeriodInSeconds)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.326587
Transaction Length: 1
Severity: High
Contract: LockupContract
Function name: allocationLog(address,uint256,uint256,uint256,uint256,uint256)
PC address: 5453
Estimated Gas Usage: 35094 - 191599
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xd95d27f343b053af7776c3f388d8cc882682b0d7.sol:2

ification at Ether

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.113981
Transaction Length: 2
Severity: High
Contract: CLIContribution
Function name: forward()
PC address: 6542
Estimated Gas Usage: 776 - 1249
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xd95d27f343b053af7776c3f388d8cc882682b0d7.sol:145

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0xb07eb3426d742cda9120931e7028d54f9df34a3e.sol
Total states:9587
803.291978
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.033770
Transaction Length: 1
Severity: High
Contract: DmmController
Function name: addMarket(address,string,string,uint8,uint256,uint256,uint256)
PC address: 2260
Estimated Gas Usage: 442 - 537
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xb07eb3426d742cda9120931e7028d54f9df34a3e.sol:3



*/



// File: @openzeppelin/cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:15.040095
Transaction Length: 1
Severity: High
Contract: DmmController
Function name: addMarket(address,string,string,uint8,uint256,uint256,uint256)
PC address: 2411
Estimated Gas Usage: 784 - 3561
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xb07eb3426d742cda9120931e7028d54f9df34a3e.sol:3



*/



// File: @openzeppelin/cont

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:08:17.677308
Transaction Length: 1
Severity: Low
Contract: DmmController
Function name: dmmTokenIds(uint256)
PC address: 19840
Estimated Gas Usage: 789 - 884
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xb07eb3426d742cda9120931e7028d54f9df34a3e.sol:3114

uint[] public dmmTokenIds

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x9403d608515f7346EC44B998984d7741Fd0D9bd4.sol
Total states:28040
191.74874
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:03.191847
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3645
Estimated Gas Usage: 1025 - 1500
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x9403d608515f7346EC44B998984d7741Fd0D9bd4.sol:60

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:47.186224
Transaction Length: 2
Severity: High
Contract: ERC20Burnable
Function name: increaseAllowance(address,uint256)
PC address: 3818
Estimated Gas Usage: 1025 - 1500
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x9403d608515f7346EC44B998984d7741Fd0D9bd4.sol:60

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:33.522862
Transaction Length: 2
Severity: High
Contract: ERC20Pausable
Function name: increaseAllowance(address,uint256)
PC address: 6145
Estimated Gas Usage: 1511 - 2316
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x9403d608515f7346EC44B998984d7741Fd0D9bd4.sol:60

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0xce3c68e8691e6bfd9065e824ec1b93335c5e055b.sol
Total states:2324
2.01955
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x41558a69571f1f5b48e6199b72d6c57d2009156a.sol
Total states:1218
1.998984
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.562638
Transaction Length: 1
Severity: Low
Contract: AgnosticPrivateSale
Function name: allUsers(uint256)
PC address: 2785
Estimated Gas Usage: 723 - 818
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x41558a69571f1f5b48e6199b72d6c57d2009156a.sol:160

address[] public allUsers

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.780595
Transaction Length: 1
Severity: High
Contract: AgnosticPrivateSale
Function name: contribute()
PC address: 4583
Estimated Gas Usage: 2864 - 38511
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x41558a69571f1f5b48e6199b72d6c57d2009156a.sol:32

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x5fac3cec29d29efea78850b01b1c69d268b76933.sol
Total states:17103
70.747033
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol
Total states:77467
1750.361999
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.981993
Transaction Length: 1
Severity: High
Contract: Module
Function name: getModuleAddress(string)
PC address: 416
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:3



*/



// File: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.157128
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(string,string,uint8)
PC address: 1000
Estimated Gas Usage: 409 - 504
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:3



*/



// File: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.680315
Transaction Length: 1
Severity: High
Contract: VaultPoolToken
Function name: initialize(string,string,uint8)
PC address: 1049
Estimated Gas Usage: 409 - 504
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:3



*/



// File: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.914069
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(string,string,uint8)
PC address: 1151
Estimated Gas Usage: 751 - 3528
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:3



*/



// File: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.008588
Transaction Length: 1
Severity: High
Contract: VaultPoolToken
Function name: initialize(string,string,uint8)
PC address: 1200
Estimated Gas Usage: 751 - 3528
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:3



*/



// File: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.910822
Transaction Length: 1
Severity: High
Contract: VaultProtocol
Function name: getModuleAddress(string)
PC address: 1909
Estimated Gas Usage: 407 - 502
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:3



*/



// File: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:20.210330
Transaction Length: 1
Severity: High
Contract: VaultProtocol
Function name: quickWithdraw(address,address[],uint256[])
PC address: 2190
Estimated Gas Usage: 462 - 557
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:9

e: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:26.328035
Transaction Length: 1
Severity: High
Contract: VaultProtocol
Function name: quickWithdraw(address,address[],uint256[])
PC address: 2192
Estimated Gas Usage: 462 - 557
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:3



*/



// File: @openzeppelin\contr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.655103
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[],uint256)
PC address: 2226
Estimated Gas Usage: 429 - 524
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:9

e: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.528450
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[],uint256)
PC address: 2228
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:3



*/



// File: @openzeppelin\contr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:41.760062
Transaction Length: 1
Severity: High
Contract: VaultProtocol
Function name: quickWithdraw(address,address[],uint256[])
PC address: 2338
Estimated Gas Usage: 795 - 3572
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:9

e: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:54.406198
Transaction Length: 1
Severity: High
Contract: VaultProtocol
Function name: quickWithdraw(address,address[],uint256[])
PC address: 2340
Estimated Gas Usage: 795 - 3572
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:3



*/



// File: @openzeppelin\contr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:14.872521
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[])
PC address: 2357
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:9

e: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:18.224037
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[])
PC address: 2359
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:3



*/



// File: @openzeppelin\contr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:29.330308
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: getModuleAddress(string)
PC address: 2526
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:3



*/



// File: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:18.355855
Transaction Length: 1
Severity: High
Contract: VaultProtocol
Function name: withdrawFromVault(address,address[],uint256[])
PC address: 2630
Estimated Gas Usage: 419 - 514
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:9

e: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:24.758519
Transaction Length: 1
Severity: High
Contract: VaultProtocol
Function name: withdrawFromVault(address,address[],uint256[])
PC address: 2632
Estimated Gas Usage: 419 - 514
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:3



*/



// File: @openzeppelin\contr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:02.351228
Transaction Length: 1
Severity: High
Contract: VaultPoolToken
Function name: getModuleAddress(string)
PC address: 2653
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:3



*/



// File: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:43.729717
Transaction Length: 1
Severity: High
Contract: VaultProtocol
Function name: withdrawFromVault(address,address[],uint256[])
PC address: 2778
Estimated Gas Usage: 752 - 3529
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:9

e: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:57.282871
Transaction Length: 1
Severity: High
Contract: VaultProtocol
Function name: withdrawFromVault(address,address[],uint256[])
PC address: 2780
Estimated Gas Usage: 752 - 3529
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:3



*/



// File: @openzeppelin\contr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:43.998109
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(address,string,string)
PC address: 3179
Estimated Gas Usage: 485 - 580
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:3



*/



// File: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.299117
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3249
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:225

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:50.857511
Transaction Length: 1
Severity: High
Contract: VaultProtocol
Function name: initialize(address,address[])
PC address: 3258
Estimated Gas Usage: 418 - 513
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:9

e: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:55.823866
Transaction Length: 1
Severity: High
Contract: VaultProtocol
Function name: initialize(address,address[])
PC address: 3260
Estimated Gas Usage: 418 - 513
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:3



*/



// File: @openzeppelin\contr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:03.732029
Transaction Length: 1
Severity: High
Contract: VaultPoolToken
Function name: initialize(address,string,string)
PC address: 3306
Estimated Gas Usage: 485 - 580
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:3



*/



// File: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:03.379872
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(address,string,string)
PC address: 3330
Estimated Gas Usage: 827 - 3604
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:3



*/



// File: @openzeppelin\cont

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.374801
Transaction Length: 1
Severity: Low
Contract: DistributionToken
Function name: distributions(uint256)
PC address: 3405
Estimated Gas Usage: 724 - 819
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:2410

Distribution[] public distributions

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:38.433246
Transaction Length: 2
Severity: Low
Contract: DistributionToken
Function name: distributions(uint256)
PC address: 3405
Estimated Gas Usage: 724 - 819
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:2410

Distribution[] public distributions

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.267287
Transaction Length: 2
Severity: High
Contract: ERC20Burnable
Function name: increaseAllowance(address,uint256)
PC address: 3429
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:225

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:23.236766
Transaction Length: 1
Severity: High
Contract: VaultPoolToken
Function name: initialize(address,string,string)
PC address: 3457
Estimated Gas Usage: 827 - 3604
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:3



*/



// File: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:15.709504
Transaction Length: 2
Severity: High
Contract: ERC20Mintable
Function name: increaseAllowance(address,uint256)
PC address: 4214
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:225

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:41.172786
Transaction Length: 1
Severity: Low
Contract: PoolToken
Function name: distributions(uint256)
PC address: 6392
Estimated Gas Usage: 768 - 863
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:2410

Distribution[] public distributions

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:32.531022
Transaction Length: 2
Severity: High
Contract: DistributionToken
Function name: increaseAllowance(address,uint256)
PC address: 6759
Estimated Gas Usage: 1104 - 1579
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:225

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:03:08.078603
Transaction Length: 1
Severity: Low
Contract: VaultPoolToken
Function name: distributions(uint256)
PC address: 7232
Estimated Gas Usage: 768 - 863
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:2410

Distribution[] public distributions

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.278285
Transaction Length: 1
Severity: Low
Contract: VaultProtocol
Function name: totalClaimableAmount(address)
PC address: 13517
Estimated Gas Usage: 1314 - 1409
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x2039f75baf0fbf1f7710c01ab98ebc6a3af8529c.sol:4104

claimableTokens[indReg]

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0xa67bc34f4d8a6483864cac1a2b4fb22f7d7fcae1.sol
Total states:1308
1.050953
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x00df274ab9feb22e99131318d099c8adf42645c0.sol
Total states:4068
43.556155
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:08.023419
Transaction Length: 1
Severity: Low
Contract: TENSv1Router
Function name: fallback
PC address: 2275
Estimated Gas Usage: 7941 - 29735
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x00df274ab9feb22e99131318d099c8adf42645c0.sol:2246

_WETH.deposit.value(msg.value)()

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:08.902186
Transaction Length: 1
Severity: Low
Contract: TENSv1Router
Function name: refreshApproval()
PC address: 4601
Estimated Gas Usage: 1943 - 3169
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x00df274ab9feb22e99131318d099c8adf42645c0.sol:2227

IUniswapV2Pair(_tensWETHPair).approve(address(_tensVault), uint(-1))

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x3082f7838cd70ef3d2344499ff428eb42a5f5092.sol
Total states:5454
140.417051
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.395173
Transaction Length: 2
Severity: High
Contract: Instafinex_V1
Function name: depositEther()
PC address: 7357
Estimated Gas Usage: 1209 - 1684
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x3082f7838cd70ef3d2344499ff428eb42a5f5092.sol:143

balanceEthForAddress[msg.sender] + msg.value

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x9745c690b1e581349c4e694751d0ae38fe37e32b.sol
Total states:5739
10.93471
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0xaacc072e98a0b72b3b0613dd0e866dfd1d9257d9.sol
Total states:1880
94.748501
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.290182
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShip(address[])
PC address: 360
Estimated Gas Usage: 342 - 437
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xaacc072e98a0b72b3b0613dd0e866dfd1d9257d9.sol:5

penzeppelin-solidity/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.667028
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShip(address[])
PC address: 362
Estimated Gas Usage: 342 - 437
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xaacc072e98a0b72b3b0613dd0e866dfd1d9257d9.sol:3

*/

// File: openzeppelin-solidity/c

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:37.125111
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShipWithHowMany(address[],uint256)
PC address: 776
Estimated Gas Usage: 341 - 436
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xaacc072e98a0b72b3b0613dd0e866dfd1d9257d9.sol:5

penzeppelin-solidity/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:39.989871
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShipWithHowMany(address[],uint256)
PC address: 778
Estimated Gas Usage: 341 - 436
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xaacc072e98a0b72b3b0613dd0e866dfd1d9257d9.sol:3

*/

// File: openzeppelin-solidity/c

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:29.624497
Transaction Length: 1
Severity: Low
Contract: BeneficiaryOperations
Function name: allOperations(uint256)
PC address: 1715
Estimated Gas Usage: 701 - 796
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xaacc072e98a0b72b3b0613dd0e866dfd1d9257d9.sol:386

bytes32[] public allOperations

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:29.518985
Transaction Length: 1
Severity: Low
Contract: BeneficiaryOperations
Function name: beneficiaries(uint256)
PC address: 4636
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xaacc072e98a0b72b3b0613dd0e866dfd1d9257d9.sol:385

address[] public beneficiaries

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x2d916e99e53b31ae968991472b15b90e1355e7b9.sol
Total states:1556
3.944011
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x7b837cecbf1c8487d0ae1535837b9f17af5e59a7.sol
Total states:825
80.35606
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.405903
Transaction Length: 1
Severity: High
Contract: MultiMintRaffle
Function name: mint(address[],uint256[])
PC address: 405
Estimated Gas Usage: 384 - 479
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x7b837cecbf1c8487d0ae1535837b9f17af5e59a7.sol:5

olidity 0.5.11;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.347261
Transaction Length: 1
Severity: High
Contract: MultiMintRaffle
Function name: mint(address[],uint256[])
PC address: 407
Estimated Gas Usage: 384 - 479
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x7b837cecbf1c8487d0ae1535837b9f17af5e59a7.sol:3

*/

//pragma solidity 0.5.11;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:14.632376
Transaction Length: 1
Severity: High
Contract: MultiMintRaffle
Function name: mint(address[],uint256[])
PC address: 553
Estimated Gas Usage: 717 - 3494
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x7b837cecbf1c8487d0ae1535837b9f17af5e59a7.sol:5

olidity 0.5.11;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:29.426507
Transaction Length: 1
Severity: High
Contract: MultiMintRaffle
Function name: mint(address[],uint256[])
PC address: 555
Estimated Gas Usage: 717 - 3494
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x7b837cecbf1c8487d0ae1535837b9f17af5e59a7.sol:3

*/

//pragma solidity 0.5.11;
pragma

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol
Total states:18028
488.153713
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:07:49.962608
Transaction Length: 1
Severity: Low
Contract: MainnetDaiToDaiAssimilator
Function name: outputRawAndGetBalance(address,uint256)
PC address: 2058
Estimated Gas Usage: 1179 - 1745
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol:890

dai.transfer(_dst, _amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:07:51.438459
Transaction Length: 1
Severity: Low
Contract: MainnetDaiToDaiAssimilator
Function name: intakeRawAndGetBalance(uint256)
PC address: 3225
Estimated Gas Usage: 1131 - 1792
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol:852

dai.transferFrom(msg.sender, address(this), _amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:07:53.299806
Transaction Length: 1
Severity: Low
Contract: MainnetDaiToDaiAssimilator
Function name: outputRaw(address,uint256)
PC address: 4162
Estimated Gas Usage: 1169 - 1735
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol:905

dai.transfer(_dst, _amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:08:04.227445
Transaction Length: 1
Severity: Low
Contract: MainnetDaiToDaiAssimilator
Function name: intakeRaw(uint256)
PC address: 4650
Estimated Gas Usage: 1210 - 1871
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol:867

dai.transferFrom(msg.sender, address(this), _amount)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x65dca332673a212e45df020c1bd55a1b9eee8b70.sol
Total states:149
2.712745
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol
Total states:1134
8.294529
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.412392
Transaction Length: 1
Severity: Low
Contract: LoihiStorage
Function name: reserves(uint256)
PC address: 1334
Estimated Gas Usage: 767 - 862
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol:181

address[] public reserves

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.824856
Transaction Length: 1
Severity: Low
Contract: LoihiStorage
Function name: numeraires(uint256)
PC address: 1491
Estimated Gas Usage: 700 - 795
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol:180

address[] public numeraires

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.295503
Transaction Length: 1
Severity: Low
Contract: LoihiStorage
Function name: derivatives(uint256)
PC address: 1596
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol:179

address[] public derivatives

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0xBA940b56CF4D6fd48DB5C574145618F111647039.sol
Total states:1387
1.660885
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.790495
Transaction Length: 1
Severity: Low
Contract: KYFToken
Function name: kyfInstancesArray(uint256)
PC address: 1788
Estimated Gas Usage: 723 - 818
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xBA940b56CF4D6fd48DB5C574145618F111647039.sol:78

address[] public kyfInstancesArray

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x6d97f6e0fe7f9afa29666c991a7a560b2703910a.sol
Total states:11840
12.683414
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.221176
Transaction Length: 1
Severity: Low
Contract: WBTCexPro
Function name: userLotteryTicker(address,uint256)
PC address: 8334
Estimated Gas Usage: 886 - 1171
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x6d97f6e0fe7f9afa29666c991a7a560b2703910a.sol:1082

mapping(address => uint256[]) public userLotteryTicker

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:02.216162
Transaction Length: 1
Severity: Low
Contract: WBTCexPro
Function name: lotteryPool(uint256)
PC address: 9271
Estimated Gas Usage: 746 - 841
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x6d97f6e0fe7f9afa29666c991a7a560b2703910a.sol:1084

LotteryTicket[] public  lotteryPool

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:03.143963
Transaction Length: 1
Severity: Low
Contract: WBTCexPro
Function name: getUserDepositInfo(address,uint256)
PC address: 12807
Estimated Gas Usage: 894 - 1179
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x6d97f6e0fe7f9afa29666c991a7a560b2703910a.sol:1796

user.deposits[index]

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0xabb81635e0ccc014c4c73cb0e90696b1785844b4.sol
Total states:15108
535.749797
==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:02:02.833833
Transaction Length: 1
Severity: Medium
Contract: etherATM
Function name: fallback()
PC address: 125
Estimated Gas Usage: 27331 - 176743
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 468
Offset: 905
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop8/0xabb81635e0ccc014c4c73cb0e90696b1785844b4.sol:14

contract etherATM {

    struct Person {

        address payable etherAddress;

        uint256 amount;

    }



    Person[] public persons;



    uint256 public payoutIdx = 0;

    uint256 public collectedFees;

    uint256 public balance = 0;



    address payable owner;



    modifier onlyowner {

        if (msg.sender == owner) _;

    }



    constructor() public {

        owner = 0xF51a48488be6AbEFFb56d4B1B666C19F2F66Cf1e;

    }



    function enter() public payable {

        

        uint256 amount;

        if (msg.value > 0.05 ether) {

            amount = msg.value;

        }

        else{

            msg.sender.transfer(msg.value);

        }



        uint256 idx = persons.length;

        persons.length += 1;

        persons[idx].etherAddress = msg.sender;

        persons[idx].amount = amount;



        if (idx != 0) {

            collectedFees += 0;

            owner.transfer(collectedFees + amount);

            collectedFees = 0;

            balance += amount;

        } else {

            owner.transfer(amount);

            balance += amount;

        }



        while (balance > (persons[payoutIdx].amount / 100) * 180) {

            uint256 transactionAmount = (persons[payoutIdx].amount / 100) * 180;

            persons[payoutIdx].etherAddress.transfer(transactionAmount);

            balance -= transactionAmount;

            payoutIdx += 1;

        }

    }



    function() external {

        enter();

    }



    function setOwner(address payable _owner) internal onlyowner {

        owner = _owner;

    }

}

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:06:45.686816
Transaction Length: 2
Severity: Medium
Contract: etherATM
Function name: fallback()
PC address: 125
Estimated Gas Usage: 38067 - 227479
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 468
Offset: 771
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop8/0xabb81635e0ccc014c4c73cb0e90696b1785844b4.sol:14

contract etherATM {

    struct Person {

        address payable etherAddress;

        uint256 amount;

    }



    Person[] public persons;



    uint256 public payoutIdx = 0;

    uint256 public collectedFees;

    uint256 public balance = 0;



    address payable owner;



    modifier onlyowner {

        if (msg.sender == owner) _;

    }



    constructor() public {

        owner = 0xF51a48488be6AbEFFb56d4B1B666C19F2F66Cf1e;

    }



    function enter() public payable {

        

        uint256 amount;

        if (msg.value > 0.05 ether) {

            amount = msg.value;

        }

        else{

            msg.sender.transfer(msg.value);

        }



        uint256 idx = persons.length;

        persons.length += 1;

        persons[idx].etherAddress = msg.sender;

        persons[idx].amount = amount;



        if (idx != 0) {

            collectedFees += 0;

            owner.transfer(collectedFees + amount);

            collectedFees = 0;

            balance += amount;

        } else {

            owner.transfer(amount);

            balance += amount;

        }



        while (balance > (persons[payoutIdx].amount / 100) * 180) {

            uint256 transactionAmount = (persons[payoutIdx].amount / 100) * 180;

            persons[payoutIdx].etherAddress.transfer(transactionAmount);

            balance -= transactionAmount;

            payoutIdx += 1;

        }

    }



    function() external {

        enter();

    }



    function setOwner(address payable _owner) internal onlyowner {

        owner = _owner;

    }

}

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:14.289893
Transaction Length: 1
Severity: Medium
Contract: etherATM
Function name: enter()
PC address: 394
Estimated Gas Usage: 27307 - 176719
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 468
Offset: 905
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop8/0xabb81635e0ccc014c4c73cb0e90696b1785844b4.sol:58

function enter() public payable {

        

        uint256 amount;

        if (msg.value > 0.05 ether) {

            amount = msg.value;

        }

        else{

            msg.sender.transfer(msg.value);

        }



        uint256 idx = persons.length;

        persons.length += 1;

        persons[idx].etherAddress = msg.sender;

        persons[idx].amount = amount;



        if (idx != 0) {

            collectedFees += 0;

            owner.transfer(collectedFees + amount);

            collectedFees = 0;

            balance += amount;

        } else {

            owner.transfer(amount);

            balance += amount;

        }



        while (balance > (persons[payoutIdx].amount / 100) * 180) {

            uint256 transactionAmount = (persons[payoutIdx].amount / 100) * 180;

            persons[payoutIdx].etherAddress.transfer(transactionAmount);

            balance -= transactionAmount;

            payoutIdx += 1;

        }

    }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:06:46.829715
Transaction Length: 2
Severity: Medium
Contract: etherATM
Function name: enter()
PC address: 394
Estimated Gas Usage: 38170 - 227582
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 468
Offset: 771
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop8/0xabb81635e0ccc014c4c73cb0e90696b1785844b4.sol:58

function enter() public payable {

        

        uint256 amount;

        if (msg.value > 0.05 ether) {

            amount = msg.value;

        }

        else{

            msg.sender.transfer(msg.value);

        }



        uint256 idx = persons.length;

        persons.length += 1;

        persons[idx].etherAddress = msg.sender;

        persons[idx].amount = amount;



        if (idx != 0) {

            collectedFees += 0;

            owner.transfer(collectedFees + amount);

            collectedFees = 0;

            balance += amount;

        } else {

            owner.transfer(amount);

            balance += amount;

        }



        while (balance > (persons[payoutIdx].amount / 100) * 180) {

            uint256 transactionAmount = (persons[payoutIdx].amount / 100) * 180;

            persons[payoutIdx].etherAddress.transfer(transactionAmount);

            balance -= transactionAmount;

            payoutIdx += 1;

        }

    }

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:13.827658
Transaction Length: 1
Severity: Low
Contract: etherATM
Function name: persons(uint256)
PC address: 1258
Estimated Gas Usage: 656 - 751
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xabb81635e0ccc014c4c73cb0e90696b1785844b4.sol:26

Person[] public persons

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0xa3062fcbcde2540a9f24b04c76220a5a0db851e4.sol
Total states:2673
114.500877
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.195955
Transaction Length: 1
Severity: High
Contract: PaymentMaster
Function name: multiHandlerSweep(address[],address)
PC address: 295
Estimated Gas Usage: 319 - 414
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xa3062fcbcde2540a9f24b04c76220a5a0db851e4.sol:9

e: openzeppelin-solid

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.213302
Transaction Length: 1
Severity: High
Contract: PaymentMaster
Function name: multiHandlerSweep(address[],address)
PC address: 297
Estimated Gas Usage: 319 - 414
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xa3062fcbcde2540a9f24b04c76220a5a0db851e4.sol:3



*/



// File: openzeppelin-solidi

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:05.673395
Transaction Length: 1
Severity: Low
Contract: PaymentHandler
Function name: fallback()
PC address: 597
Estimated Gas Usage: 4310 - 74284
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0xa3062fcbcde2540a9f24b04c76220a5a0db851e4.sol:296

master.firePaymentReceivedEvent(address(this), msg.sender, msg.value)

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:05.678132
Transaction Length: 1
Severity: Medium
Contract: PaymentHandler
Function name: fallback()
PC address: 620
Estimated Gas Usage: 5043 - 109017
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 217
Offset: 597
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop8/0xa3062fcbcde2540a9f24b04c76220a5a0db851e4.sol:236

contract PaymentHandler {



	// Keep track of the parent master contract - cannot be changed once set

	PaymentMaster public master;



	/**

	 * General constructor called by the master

	 */

	constructor(PaymentMaster _master) public {

		master = _master;

	}



	/**

	 * Helper function to return the parent master's address

	 */

	function getMasterAddress() public view returns (address) {

		return address(master);

	}



	/**

	 * Default payable function - forwards to the owner and triggers event

	 */

	function() external payable {

		// Get the parent master's owner address - explicity convert to payable

		address payable ownerAddress = address(uint160(master.owner()));



		// Forward the funds to the owner

		ownerAddress.transfer(msg.value);



		// Trigger the event notification in the parent master

		master.firePaymentReceivedEvent(address(this), msg.sender, msg.value);

	}



	/**

	 * Sweep any tokens to the owner of the master

	 */

	function sweepTokens(IERC20 token) public {

		// Get the owner address

		address ownerAddress = master.owner();



		// Get the current balance

		uint balance = token.balanceOf(address(this));



		// Transfer to the owner

		token.transfer(ownerAddress, balance);

	}



}

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:03.913553
Transaction Length: 1
Severity: Medium
Contract: PaymentHandler
Function name: sweepTokens(address)
PC address: 875
Estimated Gas Usage: 5654 - 109765
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 1090
Offset: 1306
Offset: 1530
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop8/0xa3062fcbcde2540a9f24b04c76220a5a0db851e4.sol:308

function sweepTokens(IERC20 token) public {

		// Get the owner address

		address ownerAddress = master.owner();



		// Get the current balance

		uint balance = token.balanceOf(address(this));



		// Transfer to the owner

		token.transfer(ownerAddress, balance);

	}

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:43.177970
Transaction Length: 1
Severity: High
Contract: PaymentMaster
Function name: getHandlerList()
PC address: 932
Estimated Gas Usage: 1227 - 2074
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xa3062fcbcde2540a9f24b04c76220a5a0db851e4.sol:423

function getHandlerList() public view returns (address[] memory) {

			// Return the entire list

      return handlerList;

  }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:52.088137
Transaction Length: 1
Severity: High
Contract: PaymentMaster
Function name: getHandlerList()
PC address: 972
Estimated Gas Usage: 1377 - 2600
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xa3062fcbcde2540a9f24b04c76220a5a0db851e4.sol:423

function getHandlerList() public view returns (address[] memory) {

			// Return the entire list

      return handlerList;

  }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:01:48.258863
Transaction Length: 1
Severity: Medium
Contract: PaymentMaster
Function name: sweepTokens(address)
PC address: 1130
Estimated Gas Usage: 5292 - 109073
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 2955
Offset: 3142
Offset: 3335
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop8/0xa3062fcbcde2540a9f24b04c76220a5a0db851e4.sol:503

function sweepTokens(IERC20 token) public {

		// Get the current balance

		uint balance = token.balanceOf(address(this));



		// Transfer to the owner

		token.transfer(this.owner(), balance);

	}

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:00:03.802985
Transaction Length: 1
Severity: Medium
Contract: PaymentHandler
Function name: sweepTokens(address)
PC address: 1530
Estimated Gas Usage: 4827 - 74752
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../contracts/m_loop/loop8/0xa3062fcbcde2540a9f24b04c76220a5a0db851e4.sol:324

token.transfer(ownerAddress, balance)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:27.493953
Transaction Length: 1
Severity: Low
Contract: PaymentMaster
Function name: handlerList(uint256)
PC address: 1950
Estimated Gas Usage: 656 - 751
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xa3062fcbcde2540a9f24b04c76220a5a0db851e4.sol:367

address[] public handlerList

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:01:43.983313
Transaction Length: 1
Severity: Medium
Contract: PaymentMaster
Function name: sweepTokens(address)
PC address: 3335
Estimated Gas Usage: 4467 - 74062
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../contracts/m_loop/loop8/0xa3062fcbcde2540a9f24b04c76220a5a0db851e4.sol:513

token.transfer(this.owner(), balance)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0xD85e2772912213e0c584d80B2694c79D6a09E39A2.sol
Total states:1634
1.359534
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.566788
Transaction Length: 1
Severity: Low
Contract: KYFToken
Function name: kyfInstancesArray(uint256)
PC address: 1854
Estimated Gas Usage: 701 - 796
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xD85e2772912213e0c584d80B2694c79D6a09E39A2.sol:182

address[] public kyfInstancesArray

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0xedd190d250c752BAf6c96D77E2A678b1b0C2B42E.sol
Total states:21331
236.612015
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.045646
Transaction Length: 0
Severity: High
Contract: ERC721Full
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xedd190d250c752BAf6c96D77E2A678b1b0C2B42E.sol:12

ecific functions.
 *
 * This module is used

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.034405
Transaction Length: 0
Severity: High
Contract: ERC721Metadata
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xedd190d250c752BAf6c96D77E2A678b1b0C2B42E.sol:12

ecific functions.
 *
 * This module is used

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.084524
Transaction Length: 0
Severity: High
Contract: GenesisKingdomToken
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xedd190d250c752BAf6c96D77E2A678b1b0C2B42E.sol:12

ecific functions.
 *
 * This module is used

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.928069
Transaction Length: 1
Severity: High
Contract: ERC721
Function name: safeTransferFrom(address,address,uint256,bytes)
PC address: 1136
Estimated Gas Usage: 477 - 572
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xedd190d250c752BAf6c96D77E2A678b1b0C2B42E.sol:3

*/

//pragma solidity^0.7;
pragma s

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.064013
Transaction Length: 1
Severity: High
Contract: ERC721Enumerable
Function name: safeTransferFrom(address,address,uint256,bytes)
PC address: 1177
Estimated Gas Usage: 499 - 594
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xedd190d250c752BAf6c96D77E2A678b1b0C2B42E.sol:3

*/

//pragma solidity^0.7;
pragma s

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.096871
Transaction Length: 1
Severity: High
Contract: ERC721Pausable
Function name: safeTransferFrom(address,address,uint256,bytes)
PC address: 1417
Estimated Gas Usage: 477 - 572
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xedd190d250c752BAf6c96D77E2A678b1b0C2B42E.sol:3

*/

//pragma solidity^0.7;
pragma s

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.378294
Transaction Length: 1
Severity: High
Contract: ERC721Whitelist
Function name: safeTransferFrom(address,address,uint256,bytes)
PC address: 1452
Estimated Gas Usage: 433 - 528
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xedd190d250c752BAf6c96D77E2A678b1b0C2B42E.sol:3

*/

//pragma solidity^0.7;
pragma s

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x8e1d3ab094c1ee517b34cb2defd0ee9fe7658cea.sol
Total states:3260
17.54063
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x9A280F81B0C6959061715370Ec0eb7720Ce1F002.sol
Total states:17674
721.270966
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.410034
Transaction Length: 1
Severity: High
Contract: Module
Function name: getModuleAddress(string)
PC address: 416
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x9A280F81B0C6959061715370Ec0eb7720Ce1F002.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.274018
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 511
Estimated Gas Usage: 364 - 459
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x9A280F81B0C6959061715370Ec0eb7720Ce1F002.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.305819
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 513
Estimated Gas Usage: 364 - 459
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x9A280F81B0C6959061715370Ec0eb7720Ce1F002.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.902995
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 596
Estimated Gas Usage: 540 - 635
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x9A280F81B0C6959061715370Ec0eb7720Ce1F002.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:23.552617
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 598
Estimated Gas Usage: 540 - 635
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x9A280F81B0C6959061715370Ec0eb7720Ce1F002.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:37.811765
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 681
Estimated Gas Usage: 716 - 811
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x9A280F81B0C6959061715370Ec0eb7720Ce1F002.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:00.536674
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 683
Estimated Gas Usage: 716 - 811
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x9A280F81B0C6959061715370Ec0eb7720Ce1F002.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:20.972739
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 766
Estimated Gas Usage: 892 - 987
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x9A280F81B0C6959061715370Ec0eb7720Ce1F002.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:55.098607
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 768
Estimated Gas Usage: 892 - 987
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x9A280F81B0C6959061715370Ec0eb7720Ce1F002.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:29.169311
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: getModuleAddress(string)
PC address: 1453
Estimated Gas Usage: 451 - 546
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x9A280F81B0C6959061715370Ec0eb7720Ce1F002.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.181089
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SUSD
Function name: handleDeposit(address[],uint256[])
PC address: 1722
Estimated Gas Usage: 452 - 547
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x9A280F81B0C6959061715370Ec0eb7720Ce1F002.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.944459
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SUSD
Function name: handleDeposit(address[],uint256[])
PC address: 1724
Estimated Gas Usage: 452 - 547
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x9A280F81B0C6959061715370Ec0eb7720Ce1F002.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:15.413617
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SUSD
Function name: handleDeposit(address[],uint256[])
PC address: 1870
Estimated Gas Usage: 785 - 3562
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x9A280F81B0C6959061715370Ec0eb7720Ce1F002.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:30.555828
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SUSD
Function name: handleDeposit(address[],uint256[])
PC address: 1872
Estimated Gas Usage: 785 - 3562
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x9A280F81B0C6959061715370Ec0eb7720Ce1F002.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:39.467759
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SUSD
Function name: getModuleAddress(string)
PC address: 2154
Estimated Gas Usage: 407 - 502
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x9A280F81B0C6959061715370Ec0eb7720Ce1F002.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:15.366737
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SUSD
Function name: withdraw(address,uint256[])
PC address: 2519
Estimated Gas Usage: 397 - 492
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x9A280F81B0C6959061715370Ec0eb7720Ce1F002.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:19.804129
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SUSD
Function name: withdraw(address,uint256[])
PC address: 2521
Estimated Gas Usage: 397 - 492
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x9A280F81B0C6959061715370Ec0eb7720Ce1F002.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:51.687709
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SUSD
Function name: supportedTokens()
PC address: 3026
Estimated Gas Usage: 1250 - 2097
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x9A280F81B0C6959061715370Ec0eb7720Ce1F002.sol:1597

function supportedTokens() public view returns(address[] memory){
        return _registeredTokens;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:26.017090
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SUSD
Function name: supportedTokens()
PC address: 3066
Estimated Gas Usage: 1400 - 2623
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x9A280F81B0C6959061715370Ec0eb7720Ce1F002.sol:1597

function supportedTokens() public view returns(address[] memory){
        return _registeredTokens;
    }

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0xcd31795D0b132f3B796f794500386250d53FD967.sol
Total states:18665
154.101801
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.026046
Transaction Length: 1
Severity: High
Contract: AdamantX
Function name: bulkTransfer(address[],uint256[])
PC address: 757
Estimated Gas Usage: 408 - 503
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xcd31795D0b132f3B796f794500386250d53FD967.sol:5

olidity ^0.5.13;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.933515
Transaction Length: 1
Severity: High
Contract: AdamantX
Function name: bulkTransfer(address[],uint256[])
PC address: 759
Estimated Gas Usage: 408 - 503
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xcd31795D0b132f3B796f794500386250d53FD967.sol:3

*/

//pragma solidity ^0.5.13;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.219439
Transaction Length: 1
Severity: High
Contract: AdamantX
Function name: bulkTransfer(address[],uint256[])
PC address: 842
Estimated Gas Usage: 584 - 679
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xcd31795D0b132f3B796f794500386250d53FD967.sol:5

olidity ^0.5.13;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:27.859226
Transaction Length: 1
Severity: High
Contract: AdamantX
Function name: bulkTransfer(address[],uint256[])
PC address: 844
Estimated Gas Usage: 584 - 679
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xcd31795D0b132f3B796f794500386250d53FD967.sol:3

*/

//pragma solidity ^0.5.13;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:44.112859
Transaction Length: 1
Severity: High
Contract: AdamantX
Function name: transferAndCall(address,uint256,bytes)
PC address: 1417
Estimated Gas Usage: 511 - 606
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xcd31795D0b132f3B796f794500386250d53FD967.sol:3

*/

//pragma solidity ^0.5.13;
prag

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:52.554392
Transaction Length: 1
Severity: Low
Contract: AdamantX
Function name: unfreeze(uint256)
PC address: 6430
Estimated Gas Usage: 1375 - 1660
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xcd31795D0b132f3B796f794500386250d53FD967.sol:212

_burnedAmount * FLOAT_SCALAR / info.totalFrozen

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:27.714168
Transaction Length: 2
Severity: Low
Contract: AdamantX
Function name: unfreeze(uint256)
PC address: 6430
Estimated Gas Usage: 1375 - 1660
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xcd31795D0b132f3B796f794500386250d53FD967.sol:212

_burnedAmount * FLOAT_SCALAR / info.totalFrozen

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol
Total states:36163
250.47796
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.213328
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1004
Estimated Gas Usage: 417 - 512
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.230221
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1006
Estimated Gas Usage: 417 - 512
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.996123
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1089
Estimated Gas Usage: 593 - 688
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:22.681852
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1091
Estimated Gas Usage: 593 - 688
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.130023
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1261
Estimated Gas Usage: 462 - 557
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.232716
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1263
Estimated Gas Usage: 462 - 557
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.798049
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1346
Estimated Gas Usage: 638 - 733
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:19.639908
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1348
Estimated Gas Usage: 638 - 733
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:15.558415
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleAccess
Function name: interpolate(uint256,uint256,uint256,uint256,uint256)
PC address: 2313
Estimated Gas Usage: 997 - 1848
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol:162

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.797362
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeBP(uint256)
PC address: 2585
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol:784

uint[] public bonusRangeBP

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.577288
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3691
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol:1266

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:04.351837
Transaction Length: 2
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3691
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol:1266

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:36.343145
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeStart(uint256)
PC address: 6017
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol:783

uint[] public bonusRangeStart

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:57.539895
Transaction Length: 1
Severity: Low
Contract: LidStaking
Function name: stakeHandlers(uint256)
PC address: 6118
Estimated Gas Usage: 790 - 885
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol:962

IStakeHandler[] public stakeHandlers

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.678018
Transaction Length: 2
Severity: High
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6315
Estimated Gas Usage: 1699 - 2124
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol:1112

stakeHandlers.length-1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:08.258907
Transaction Length: 2
Severity: Low
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6326
Estimated Gas Usage: 1709 - 2134
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol:1112

stakeHandlers[stakeHandlers.length-1]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:32.351609
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: calculateRatePerEth(uint256,uint256,uint256)
PC address: 6866
Estimated Gas Usage: 955 - 1050
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol:162

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:23.494420
Transaction Length: 1
Severity: High
Contract: LidStaking
Function name: findTaxAmount(uint256,uint256)
PC address: 13348
Estimated Gas Usage: 474 - 569
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol:162

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:32.345560
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPoolBPs(uint256)
PC address: 15346
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol:1267

uint[] public tokenPoolBPs

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0xba2aba582f22bbccd7dd49f65e904a17cd5d1cd5.sol
Total states:18680
149.523549
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.743714
Transaction Length: 1
Severity: High
Contract: DEFICOMMUNITY2
Function name: bulkTransfer(address[],uint256[])
PC address: 757
Estimated Gas Usage: 408 - 503
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xba2aba582f22bbccd7dd49f65e904a17cd5d1cd5.sol:5

olidity ^0.5.13;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.685383
Transaction Length: 1
Severity: High
Contract: DEFICOMMUNITY2
Function name: bulkTransfer(address[],uint256[])
PC address: 759
Estimated Gas Usage: 408 - 503
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xba2aba582f22bbccd7dd49f65e904a17cd5d1cd5.sol:3

*/

//pragma solidity ^0.5.13;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.422252
Transaction Length: 1
Severity: High
Contract: DEFICOMMUNITY2
Function name: bulkTransfer(address[],uint256[])
PC address: 842
Estimated Gas Usage: 584 - 679
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xba2aba582f22bbccd7dd49f65e904a17cd5d1cd5.sol:5

olidity ^0.5.13;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:26.560684
Transaction Length: 1
Severity: High
Contract: DEFICOMMUNITY2
Function name: bulkTransfer(address[],uint256[])
PC address: 844
Estimated Gas Usage: 584 - 679
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xba2aba582f22bbccd7dd49f65e904a17cd5d1cd5.sol:3

*/

//pragma solidity ^0.5.13;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:45.601946
Transaction Length: 1
Severity: High
Contract: DEFICOMMUNITY2
Function name: transferAndCall(address,uint256,bytes)
PC address: 1417
Estimated Gas Usage: 511 - 606
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xba2aba582f22bbccd7dd49f65e904a17cd5d1cd5.sol:3

*/

//pragma solidity ^0.5.13;
prag

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:52.203780
Transaction Length: 1
Severity: Low
Contract: DEFICOMMUNITY2
Function name: unfreeze(uint256)
PC address: 6429
Estimated Gas Usage: 1375 - 1660
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xba2aba582f22bbccd7dd49f65e904a17cd5d1cd5.sol:212

_burnedAmount * FLOAT_SCALAR / info.totalFrozen

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:23.600753
Transaction Length: 2
Severity: Low
Contract: DEFICOMMUNITY2
Function name: unfreeze(uint256)
PC address: 6429
Estimated Gas Usage: 1375 - 1660
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xba2aba582f22bbccd7dd49f65e904a17cd5d1cd5.sol:212

_burnedAmount * FLOAT_SCALAR / info.totalFrozen

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x92c780cc0c885320cc4582f7eef3618f4b2756d2.sol
Total states:6045
19.189996
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.841541
Transaction Length: 1
Severity: High
Contract: Ethertime
Function name: createLottery(string,uint256,uint256,uint256,uint8,bool)
PC address: 2893
Estimated Gas Usage: 406 - 501
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x92c780cc0c885320cc4582f7eef3618f4b2756d2.sol:3



*/



//pragma solidity >=0.5.0 <

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x91aa1d4294fd16629fe64c570574a550827b832f.sol
Total states:198
565.672994
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.342880
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: convertOddToCvpAndSendToPayout(address[])
PC address: 726
Estimated Gas Usage: 386 - 481
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x91aa1d4294fd16629fe64c570574a550827b832f.sol:6

/powerpool.finance/



--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.711643
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: convertOddToCvpAndSendToPayout(address[])
PC address: 728
Estimated Gas Usage: 386 - 481
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x91aa1d4294fd16629fe64c570574a550827b832f.sol:3

*/

/*
https://powerpool.finance/

 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:52.686536
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: getFeeAmounts()
PC address: 1057
Estimated Gas Usage: 1317 - 2164
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x91aa1d4294fd16629fe64c570574a550827b832f.sol:1125

function getFeeAmounts() public view returns(uint256[] memory) {
        return feeAmounts;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:04.088537
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: getFeeAmounts()
PC address: 1097
Estimated Gas Usage: 1467 - 2690
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x91aa1d4294fd16629fe64c570574a550827b832f.sol:1125

function getFeeAmounts() public view returns(uint256[] memory) {
        return feeAmounts;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:32.414646
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: setTokensSettings(address[],address[],bool[])
PC address: 1437
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x91aa1d4294fd16629fe64c570574a550827b832f.sol:6

/powerpool.finance/



--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:35.403253
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: setTokensSettings(address[],address[],bool[])
PC address: 1439
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x91aa1d4294fd16629fe64c570574a550827b832f.sol:3

*/

/*
https://powerpool.finance/

 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:41.498386
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: setTokensSettings(address[],address[],bool[])
PC address: 1522
Estimated Gas Usage: 539 - 634
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x91aa1d4294fd16629fe64c570574a550827b832f.sol:6

/powerpool.finance/



--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:52.513760
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: setTokensSettings(address[],address[],bool[])
PC address: 1524
Estimated Gas Usage: 539 - 634
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x91aa1d4294fd16629fe64c570574a550827b832f.sol:3

*/

/*
https://powerpool.finance/

 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:06.252740
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: setTokensSettings(address[],address[],bool[])
PC address: 1607
Estimated Gas Usage: 715 - 810
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x91aa1d4294fd16629fe64c570574a550827b832f.sol:6

/powerpool.finance/



--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:28.852018
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: setTokensSettings(address[],address[],bool[])
PC address: 1609
Estimated Gas Usage: 715 - 810
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x91aa1d4294fd16629fe64c570574a550827b832f.sol:3

*/

/*
https://powerpool.finance/

 

--------------------

==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:12.070421
Transaction Length: 1
Severity: Medium
Contract: EthPiptSwap
Function name: convertOddToCvpAndSendToPayout(address[])
PC address: 3682
Estimated Gas Usage: 596 - 3373
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../contracts/m_loop/loop8/0x91aa1d4294fd16629fe64c570574a550827b832f.sol:968

tx.origin

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:33.400692
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: getFeeAmounts()
PC address: 6820
Estimated Gas Usage: 3172 - 38537
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x91aa1d4294fd16629fe64c570574a550827b832f.sol:1126

return feeAmounts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:18.354602
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: swapEthToPipt(uint256)
PC address: 8415
Estimated Gas Usage: 3079 - 38351
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x91aa1d4294fd16629fe64c570574a550827b832f.sol:6

werpool.finance

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:45.159695
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: swapEthToPipt(uint256)
PC address: 8418
Estimated Gas Usage: 3172 - 38537
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x91aa1d4294fd16629fe64c570574a550827b832f.sol:3



/*
https://powerpool.finance/

          

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:51.426611
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: swapEthToPipt(uint256)
PC address: 8439
Estimated Gas Usage: 3172 - 38537
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x91aa1d4294fd16629fe64c570574a550827b832f.sol:863

pipt.getCurrentTokens()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:24.873846
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: swapEthToPipt(uint256)
PC address: 8464
Estimated Gas Usage: 3172 - 38537
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x91aa1d4294fd16629fe64c570574a550827b832f.sol:2


*/

/*
https://power

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:57.858910
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: swapEthToPipt(uint256)
PC address: 8470
Estimated Gas Usage: 3172 - 38537
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x91aa1d4294fd16629fe64c570574a550827b832f.sol:8

r wrr
        

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:08:39.080563
Transaction Length: 1
Severity: Low
Contract: EthPiptSwap
Function name: feeLevels(uint256)
PC address: 8962
Estimated Gas Usage: 679 - 774
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x91aa1d4294fd16629fe64c570574a550827b832f.sol:810

uint256[] public feeLevels

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:09:05.389801
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: swapPiptToEth(uint256)
PC address: 9157
Estimated Gas Usage: 2307 - 37201
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x91aa1d4294fd16629fe64c570574a550827b832f.sol:6

werpool.finance

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:30.927441
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: calcEthFee(uint256)
PC address: 22976
Estimated Gas Usage: 3172 - 38537
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x91aa1d4294fd16629fe64c570574a550827b832f.sol:359

sub(a, b, "SafeMath: subtraction overflow")

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x3a0d9acb7405f7f28d34edf26411d6f2fe36d4c9.sol
Total states:861
0.627538
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol
Total states:4294
340.467816
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.522187
Transaction Length: 1
Severity: High
Contract: Median
Function name: kiss(address[])
PC address: 492
Estimated Gas Usage: 364 - 459
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol:5

.sol

// Copyright (C

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.460374
Transaction Length: 1
Severity: High
Contract: MedianUSDTUSD
Function name: kiss(address[])
PC address: 492
Estimated Gas Usage: 364 - 459
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol:5

.sol

// Copyright (C

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.188954
Transaction Length: 1
Severity: High
Contract: Median
Function name: kiss(address[])
PC address: 494
Estimated Gas Usage: 364 - 459
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol:3

*/

/// median.sol

// Copyright (C)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.279175
Transaction Length: 1
Severity: High
Contract: MedianUSDTUSD
Function name: kiss(address[])
PC address: 494
Estimated Gas Usage: 364 - 459
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol:3

*/

/// median.sol

// Copyright (C)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.135075
Transaction Length: 1
Severity: High
Contract: Median
Function name: diss(address[])
PC address: 701
Estimated Gas Usage: 341 - 436
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol:5

.sol

// Copyright (C

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.030688
Transaction Length: 1
Severity: High
Contract: MedianUSDTUSD
Function name: diss(address[])
PC address: 701
Estimated Gas Usage: 341 - 436
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol:5

.sol

// Copyright (C

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.750733
Transaction Length: 1
Severity: High
Contract: Median
Function name: diss(address[])
PC address: 703
Estimated Gas Usage: 341 - 436
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol:3

*/

/// median.sol

// Copyright (C)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.748388
Transaction Length: 1
Severity: High
Contract: MedianUSDTUSD
Function name: diss(address[])
PC address: 703
Estimated Gas Usage: 341 - 436
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol:3

*/

/// median.sol

// Copyright (C)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:17.221761
Transaction Length: 1
Severity: High
Contract: Median
Function name: poke(uint256[],uint256[],uint8[],bytes32[],bytes32[])
PC address: 1147
Estimated Gas Usage: 385 - 480
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol:5

.sol

// Copyright (C

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:18.732618
Transaction Length: 1
Severity: High
Contract: MedianUSDTUSD
Function name: poke(uint256[],uint256[],uint8[],bytes32[],bytes32[])
PC address: 1147
Estimated Gas Usage: 385 - 480
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol:5

.sol

// Copyright (C

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:20.144838
Transaction Length: 1
Severity: High
Contract: Median
Function name: poke(uint256[],uint256[],uint8[],bytes32[],bytes32[])
PC address: 1149
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol:3

*/

/// median.sol

// Copyright (C)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:21.588064
Transaction Length: 1
Severity: High
Contract: MedianUSDTUSD
Function name: poke(uint256[],uint256[],uint8[],bytes32[],bytes32[])
PC address: 1149
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol:3

*/

/// median.sol

// Copyright (C)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:25.733780
Transaction Length: 1
Severity: High
Contract: Median
Function name: poke(uint256[],uint256[],uint8[],bytes32[],bytes32[])
PC address: 1232
Estimated Gas Usage: 561 - 656
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol:5

.sol

// Copyright (C

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:26.955933
Transaction Length: 1
Severity: High
Contract: MedianUSDTUSD
Function name: poke(uint256[],uint256[],uint8[],bytes32[],bytes32[])
PC address: 1232
Estimated Gas Usage: 561 - 656
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol:5

.sol

// Copyright (C

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:35.216056
Transaction Length: 1
Severity: High
Contract: Median
Function name: poke(uint256[],uint256[],uint8[],bytes32[],bytes32[])
PC address: 1234
Estimated Gas Usage: 561 - 656
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol:3

*/

/// median.sol

// Copyright (C)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:38.204375
Transaction Length: 1
Severity: High
Contract: MedianUSDTUSD
Function name: poke(uint256[],uint256[],uint8[],bytes32[],bytes32[])
PC address: 1234
Estimated Gas Usage: 561 - 656
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol:3

*/

/// median.sol

// Copyright (C)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:49.904886
Transaction Length: 1
Severity: High
Contract: Median
Function name: poke(uint256[],uint256[],uint8[],bytes32[],bytes32[])
PC address: 1317
Estimated Gas Usage: 737 - 832
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol:5

.sol

// Copyright (C

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:51.737484
Transaction Length: 1
Severity: High
Contract: MedianUSDTUSD
Function name: poke(uint256[],uint256[],uint8[],bytes32[],bytes32[])
PC address: 1317
Estimated Gas Usage: 737 - 832
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol:5

.sol

// Copyright (C

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:12.903851
Transaction Length: 1
Severity: High
Contract: Median
Function name: poke(uint256[],uint256[],uint8[],bytes32[],bytes32[])
PC address: 1319
Estimated Gas Usage: 737 - 832
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol:3

*/

/// median.sol

// Copyright (C)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:11.097150
Transaction Length: 1
Severity: High
Contract: MedianUSDTUSD
Function name: poke(uint256[],uint256[],uint8[],bytes32[],bytes32[])
PC address: 1319
Estimated Gas Usage: 737 - 832
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol:3

*/

/// median.sol

// Copyright (C)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:34.049088
Transaction Length: 1
Severity: High
Contract: Median
Function name: poke(uint256[],uint256[],uint8[],bytes32[],bytes32[])
PC address: 1402
Estimated Gas Usage: 913 - 1008
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol:5

.sol

// Copyright (C

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:34.977992
Transaction Length: 1
Severity: High
Contract: MedianUSDTUSD
Function name: poke(uint256[],uint256[],uint8[],bytes32[],bytes32[])
PC address: 1402
Estimated Gas Usage: 913 - 1008
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol:5

.sol

// Copyright (C

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:00.525379
Transaction Length: 1
Severity: High
Contract: Median
Function name: poke(uint256[],uint256[],uint8[],bytes32[],bytes32[])
PC address: 1404
Estimated Gas Usage: 913 - 1008
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol:3

*/

/// median.sol

// Copyright (C)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:03.612811
Transaction Length: 1
Severity: High
Contract: MedianUSDTUSD
Function name: poke(uint256[],uint256[],uint8[],bytes32[],bytes32[])
PC address: 1404
Estimated Gas Usage: 913 - 1008
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol:3

*/

/// median.sol

// Copyright (C)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:34.182412
Transaction Length: 1
Severity: High
Contract: Median
Function name: drop(address[])
PC address: 1721
Estimated Gas Usage: 429 - 524
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol:5

.sol

// Copyright (C

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:34.042229
Transaction Length: 1
Severity: High
Contract: MedianUSDTUSD
Function name: drop(address[])
PC address: 1721
Estimated Gas Usage: 429 - 524
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol:5

.sol

// Copyright (C

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:38.071851
Transaction Length: 1
Severity: High
Contract: Median
Function name: drop(address[])
PC address: 1723
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol:3

*/

/// median.sol

// Copyright (C)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:37.745161
Transaction Length: 1
Severity: High
Contract: MedianUSDTUSD
Function name: drop(address[])
PC address: 1723
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol:3

*/

/// median.sol

// Copyright (C)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:42.389508
Transaction Length: 1
Severity: High
Contract: Median
Function name: lift(address[])
PC address: 1842
Estimated Gas Usage: 340 - 435
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol:5

.sol

// Copyright (C

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:42.938406
Transaction Length: 1
Severity: High
Contract: MedianUSDTUSD
Function name: lift(address[])
PC address: 1842
Estimated Gas Usage: 340 - 435
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol:5

.sol

// Copyright (C

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:46.152905
Transaction Length: 1
Severity: High
Contract: Median
Function name: lift(address[])
PC address: 1844
Estimated Gas Usage: 340 - 435
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol:3

*/

/// median.sol

// Copyright (C)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:46.310059
Transaction Length: 1
Severity: High
Contract: MedianUSDTUSD
Function name: lift(address[])
PC address: 1844
Estimated Gas Usage: 340 - 435
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A.sol:3

*/

/// median.sol

// Copyright (C)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0xf251cb9129fdb7e9ca5cad097de3ea70cab9d8f9.sol
Total states:24375
548.6436
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.833007
Transaction Length: 1
Severity: High
Contract: OUSD
Function name: initialize(string,string,address)
PC address: 559
Estimated Gas Usage: 364 - 459
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xf251cb9129fdb7e9ca5cad097de3ea70cab9d8f9.sol:3

*/

//pragma solidity 0.5.11;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.254250
Transaction Length: 1
Severity: High
Contract: OUSD
Function name: initialize(string,string,address)
PC address: 644
Estimated Gas Usage: 540 - 635
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xf251cb9129fdb7e9ca5cad097de3ea70cab9d8f9.sol:3

*/

//pragma solidity 0.5.11;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.283028
Transaction Length: 1
Severity: High
Contract: Vault
Function name: mintMultiple(address[],uint256[])
PC address: 776
Estimated Gas Usage: 409 - 504
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xf251cb9129fdb7e9ca5cad097de3ea70cab9d8f9.sol:5

olidity 0.5.11;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.249796
Transaction Length: 1
Severity: High
Contract: Vault
Function name: mintMultiple(address[],uint256[])
PC address: 778
Estimated Gas Usage: 409 - 504
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xf251cb9129fdb7e9ca5cad097de3ea70cab9d8f9.sol:3

*/

//pragma solidity 0.5.11;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.554821
Transaction Length: 1
Severity: High
Contract: Vault
Function name: mintMultiple(address[],uint256[])
PC address: 861
Estimated Gas Usage: 585 - 680
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xf251cb9129fdb7e9ca5cad097de3ea70cab9d8f9.sol:5

olidity 0.5.11;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:26.960665
Transaction Length: 1
Severity: High
Contract: Vault
Function name: mintMultiple(address[],uint256[])
PC address: 863
Estimated Gas Usage: 585 - 680
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xf251cb9129fdb7e9ca5cad097de3ea70cab9d8f9.sol:3

*/

//pragma solidity 0.5.11;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:42.957439
Transaction Length: 1
Severity: High
Contract: Vault
Function name: priceUSDRedeem(string)
PC address: 1274
Estimated Gas Usage: 452 - 547
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xf251cb9129fdb7e9ca5cad097de3ea70cab9d8f9.sol:3

*/

//pragma solidity 0.5.11;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:42.666996
Transaction Length: 1
Severity: High
Contract: Vault
Function name: getAllAssets()
PC address: 1374
Estimated Gas Usage: 1229 - 2076
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xf251cb9129fdb7e9ca5cad097de3ea70cab9d8f9.sol:2112

function getAllAssets() external view returns (address[] memory) {
        return allAssets;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:54.427570
Transaction Length: 1
Severity: High
Contract: Vault
Function name: getAllAssets()
PC address: 1414
Estimated Gas Usage: 1379 - 2602
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xf251cb9129fdb7e9ca5cad097de3ea70cab9d8f9.sol:2112

function getAllAssets() external view returns (address[] memory) {
        return allAssets;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:18.615625
Transaction Length: 1
Severity: High
Contract: Vault
Function name: setStrategyWeights(address[],uint256[])
PC address: 1762
Estimated Gas Usage: 385 - 480
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xf251cb9129fdb7e9ca5cad097de3ea70cab9d8f9.sol:5

olidity 0.5.11;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:21.851328
Transaction Length: 1
Severity: High
Contract: Vault
Function name: setStrategyWeights(address[],uint256[])
PC address: 1764
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xf251cb9129fdb7e9ca5cad097de3ea70cab9d8f9.sol:3

*/

//pragma solidity 0.5.11;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:27.042754
Transaction Length: 1
Severity: High
Contract: Vault
Function name: setStrategyWeights(address[],uint256[])
PC address: 1847
Estimated Gas Usage: 561 - 656
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xf251cb9129fdb7e9ca5cad097de3ea70cab9d8f9.sol:5

olidity 0.5.11;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:41.662726
Transaction Length: 1
Severity: High
Contract: Vault
Function name: setStrategyWeights(address[],uint256[])
PC address: 1849
Estimated Gas Usage: 561 - 656
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xf251cb9129fdb7e9ca5cad097de3ea70cab9d8f9.sol:3

*/

//pragma solidity 0.5.11;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:56.205080
Transaction Length: 1
Severity: High
Contract: Vault
Function name: priceUSDMint(string)
PC address: 2283
Estimated Gas Usage: 430 - 525
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xf251cb9129fdb7e9ca5cad097de3ea70cab9d8f9.sol:3

*/

//pragma solidity 0.5.11;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.133002
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3244
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xf251cb9129fdb7e9ca5cad097de3ea70cab9d8f9.sol:44

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.721627
Transaction Length: 2
Severity: High
Contract: InitializableToken
Function name: increaseAllowance(address,uint256)
PC address: 3922
Estimated Gas Usage: 992 - 1467
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xf251cb9129fdb7e9ca5cad097de3ea70cab9d8f9.sol:44

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.950814
Transaction Length: 2
Severity: High
Contract: OUSD
Function name: increaseAllowance(address,uint256)
PC address: 7848
Estimated Gas Usage: 981 - 1456
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xf251cb9129fdb7e9ca5cad097de3ea70cab9d8f9.sol:44

a + b

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:01:28.557600
Transaction Length: 1
Severity: Low
Contract: Vault
Function name: priceUSDRedeem(string)
PC address: 16328
Estimated Gas Usage: 2266 - 6736
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0xf251cb9129fdb7e9ca5cad097de3ea70cab9d8f9.sol:2209

IMinMaxOracle(priceProvider).priceMax(symbol)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:06:12.611267
Transaction Length: 1
Severity: Low
Contract: Vault
Function name: priceUSDMint(string)
PC address: 20534
Estimated Gas Usage: 2244 - 6714
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0xf251cb9129fdb7e9ca5cad097de3ea70cab9d8f9.sol:2187

IMinMaxOracle(priceProvider).priceMin(symbol)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0xA768ACDe6B95720ba926E4a615ACA733e51F6FD1.sol
Total states:3409
250.719445
==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:32.115233
Transaction Length: 1
Severity: High
Contract: Math
Function name: safeSub(uint256,uint256)
PC address: 820
Estimated Gas Usage: 309 - 404
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xA768ACDe6B95720ba926E4a615ACA733e51F6FD1.sol:109

x - y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:30.584550
Transaction Length: 1
Severity: High
Contract: Memberlist
Function name: updateMembers(address[],uint256)
PC address: 827
Estimated Gas Usage: 407 - 502
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xA768ACDe6B95720ba926E4a615ACA733e51F6FD1.sol:5

d using https://dapp.

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:33.429139
Transaction Length: 1
Severity: High
Contract: Memberlist
Function name: updateMembers(address[],uint256)
PC address: 829
Estimated Gas Usage: 407 - 502
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xA768ACDe6B95720ba926E4a615ACA733e51F6FD1.sol:3

*/

// Verified using https://dapp.t

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:34.183096
Transaction Length: 1
Severity: Low
Contract: Math
Function name: safeDiv(uint256,uint256)
PC address: 959
Estimated Gas Usage: 324 - 419
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xA768ACDe6B95720ba926E4a615ACA733e51F6FD1.sol:117

x / y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.127568
Transaction Length: 1
Severity: High
Contract: Math
Function name: rdiv(uint256,uint256)
PC address: 985
Estimated Gas Usage: 382 - 477
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xA768ACDe6B95720ba926E4a615ACA733e51F6FD1.sol:113

x * y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:21.738200
Transaction Length: 1
Severity: High
Contract: Math
Function name: rdiv(uint256,uint256)
PC address: 1128
Estimated Gas Usage: 496 - 591
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xA768ACDe6B95720ba926E4a615ACA733e51F6FD1.sol:105

x + y

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:40.133438
Transaction Length: 1
Severity: High
Contract: Memberlist
Function name: safeSub(uint256,uint256)
PC address: 2809
Estimated Gas Usage: 332 - 427
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xA768ACDe6B95720ba926E4a615ACA733e51F6FD1.sol:109

x - y

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:54.064484
Transaction Length: 1
Severity: Low
Contract: Memberlist
Function name: safeDiv(uint256,uint256)
PC address: 2948
Estimated Gas Usage: 347 - 442
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xA768ACDe6B95720ba926E4a615ACA733e51F6FD1.sol:117

x / y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.275460
Transaction Length: 1
Severity: High
Contract: Memberlist
Function name: rdiv(uint256,uint256)
PC address: 2998
Estimated Gas Usage: 450 - 545
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xA768ACDe6B95720ba926E4a615ACA733e51F6FD1.sol:113

x * y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.962400
Transaction Length: 1
Severity: High
Contract: Memberlist
Function name: rdiv(uint256,uint256)
PC address: 3141
Estimated Gas Usage: 564 - 659
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xA768ACDe6B95720ba926E4a615ACA733e51F6FD1.sol:105

x + y

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x1905ad9f818cabf6e0ca2a22c8bbcb8b2f12fb85.sol
Total states:4628
11.412133
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:02.354775
Transaction Length: 1
Severity: Low
Contract: HypeStake
Function name: ADDFUNDS(uint256)
PC address: 6904
Estimated Gas Usage: 1663 - 2654
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x1905ad9f818cabf6e0ca2a22c8bbcb8b2f12fb85.sol:756

IERC20(Hype).transferFromStake(msg.sender, address(this), tokens)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:05.885296
Transaction Length: 1
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 7447
Estimated Gas Usage: 2451 - 3442
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x1905ad9f818cabf6e0ca2a22c8bbcb8b2f12fb85.sol:660

IERC20(Hype).transferFromStake(msg.sender, address(this), tokens)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:02.463051
Transaction Length: 2
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 7447
Estimated Gas Usage: 2472 - 3463
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x1905ad9f818cabf6e0ca2a22c8bbcb8b2f12fb85.sol:660

IERC20(Hype).transferFromStake(msg.sender, address(this), tokens)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.994863
Transaction Length: 1
Severity: High
Contract: HypeStake
Function name: ADDFUNDS(uint256)
PC address: 9273
Estimated Gas Usage: 3425 - 38602
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x1905ad9f818cabf6e0ca2a22c8bbcb8b2f12fb85.sol:220

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0xed2ACF1E3776585b3568Cd88Da08f5be3d894a88.sol
Total states:1503
10.998886
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.095126
Transaction Length: 0
Severity: High
Contract: ERC20
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xed2ACF1E3776585b3568Cd88Da08f5be3d894a88.sol:15

/**
    * 可选方法
    */
    function 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.171072
Transaction Length: 0
Severity: High
Contract: BtswapToken
Function name: constructor
PC address: 1203
Estimated Gas Usage: 1750 - 36312
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xed2ACF1E3776585b3568Cd88Da08f5be3d894a88.sol:86

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0xef7920e4808e92724f438c572a38bc459463e09d.sol
Total states:3219
57.962018
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.368816
Transaction Length: 1
Severity: High
Contract: MerkleRedeem
Function name: merkleRoots(uint256,uint256)
PC address: 1293
Estimated Gas Usage: 601 - 979
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xef7920e4808e92724f438c572a38bc459463e09d.sol:338

1 + _end

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:02.705212
Transaction Length: 1
Severity: High
Contract: MerkleRedeem
Function name: merkleRoots(uint256,uint256)
PC address: 1294
Estimated Gas Usage: 601 - 979
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xef7920e4808e92724f438c572a38bc459463e09d.sol:338

1 + _end - _begin

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.190685
Transaction Length: 1
Severity: High
Contract: MerkleRedeem
Function name: merkleRoots(uint256,uint256)
PC address: 1332
Estimated Gas Usage: 697 - 3379
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xef7920e4808e92724f438c572a38bc459463e09d.sol:2

or verification

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:09.085795
Transaction Length: 1
Severity: Low
Contract: MerkleRedeem
Function name: _verifiedTokens(uint256)
PC address: 1830
Estimated Gas Usage: 872 - 967
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xef7920e4808e92724f438c572a38bc459463e09d.sol:124

address[] public _verifiedTokens

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x3032Ab3Fa8C01d786D29dAdE018d7f2017918e12.sol
Total states:4414
5.854566
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x51DB1Da6635578B9186B26871038F18351CDD527.sol
Total states:8668
150.654479
==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:01.674157
Transaction Length: 1
Severity: Medium
Contract: RewardDecayAggregator
Function name: claimReward()
PC address: 108
Estimated Gas Usage: 4540 - 74419
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 470
Offset: 470
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop8/0x51DB1Da6635578B9186B26871038F18351CDD527.sol:1455

function claimReward() public {
        for (uint256 i = 0; i < rewarders.length; i++) {
            rewarders[i].getRewardEx(msg.sender);
        }
    }

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:01.612955
Transaction Length: 1
Severity: Low
Contract: RewardDecayAggregator
Function name: claimReward()
PC address: 470
Estimated Gas Usage: 3660 - 39353
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x51DB1Da6635578B9186B26871038F18351CDD527.sol:1457

rewarders[i].getRewardEx(msg.sender)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:02.722744
Transaction Length: 1
Severity: Low
Contract: RewardDecayAggregator
Function name: rewarders(uint256)
PC address: 870
Estimated Gas Usage: 278 - 373
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x51DB1Da6635578B9186B26871038F18351CDD527.sol:1448

StakingRewardsDecay[2] public rewarders

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:01.472151
Transaction Length: 1
Severity: Low
Contract: StakingRewardsDecayHolder
Function name: withdraw(uint256,address)
PC address: 1090
Estimated Gas Usage: 1894 - 4952
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x51DB1Da6635578B9186B26871038F18351CDD527.sol:938

address(rewarder).call(
                abi.encodeWithSelector(rewarder.withdraw.selector, msg.sender, amount, gem)
            )

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.156245
Transaction Length: 1
Severity: High
Contract: StakingRewardsDecay
Function name: initAllEpochs(uint256[],uint256,uint256)
PC address: 1382
Estimated Gas Usage: 452 - 547
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x51DB1Da6635578B9186B26871038F18351CDD527.sol:5

lattened sources of s

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.122680
Transaction Length: 1
Severity: High
Contract: StakingRewardsDecay
Function name: initAllEpochs(uint256[],uint256,uint256)
PC address: 1384
Estimated Gas Usage: 452 - 547
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x51DB1Da6635578B9186B26871038F18351CDD527.sol:3

*/

// hevm: flattened sources of sr

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:15.676346
Transaction Length: 1
Severity: Low
Contract: StakingRewardsDecayHolder
Function name: stake(uint256,address)
PC address: 1969
Estimated Gas Usage: 1615 - 2606
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0x51DB1Da6635578B9186B26871038F18351CDD527.sol:928

rewarder.stake(msg.sender, amount, gem)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:36.104648
Transaction Length: 1
Severity: Low
Contract: StakingRewardsDecay
Function name: getEpochRewardRate(uint256)
PC address: 10020
Estimated Gas Usage: 814 - 909
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x51DB1Da6635578B9186B26871038F18351CDD527.sol:1128

epochs[epochIdx]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:36.538462
Transaction Length: 1
Severity: Low
Contract: StakingRewardsDecay
Function name: getEpochStartTime(uint256)
PC address: 10062
Estimated Gas Usage: 705 - 800
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x51DB1Da6635578B9186B26871038F18351CDD527.sol:1132

epochs[epochIdx]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:04.940225
Transaction Length: 1
Severity: Low
Contract: StakingRewardsDecay
Function name: getEpochFinishTime(uint256)
PC address: 11918
Estimated Gas Usage: 748 - 843
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x51DB1Da6635578B9186B26871038F18351CDD527.sol:1136

epochs[epochIdx]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:18.662790
Transaction Length: 1
Severity: Low
Contract: StakingRewardsDecay
Function name: epochs(uint256)
PC address: 12771
Estimated Gas Usage: 723 - 818
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x51DB1Da6635578B9186B26871038F18351CDD527.sol:1007

EpochData[] public epochs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:18.875957
Transaction Length: 1
Severity: Low
Contract: StakingRewardsDecay
Function name: getStartTime()
PC address: 12880
Estimated Gas Usage: 666 - 761
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x51DB1Da6635578B9186B26871038F18351CDD527.sol:1054

epochs[0]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:30.999924
Transaction Length: 1
Severity: Low
Contract: StakingRewardsDecay
Function name: getRewardPerHour()
PC address: 15597
Estimated Gas Usage: 1563 - 1658
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x51DB1Da6635578B9186B26871038F18351CDD527.sol:1279

epochs[calcCurrentEpoch()]

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol
Total states:48552
310.708675
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.513371
Transaction Length: 1
Severity: Low
Contract: Getters
Function name: expiringCouponsAtIndex(uint256,uint256)
PC address: 2821
Estimated Gas Usage: 1090 - 1375
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:1167

_state.epochs[epoch].coupons.expiring[i]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.931352
Transaction Length: 1
Severity: High
Contract: Getters
Function name: totalNet()
PC address: 4239
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:9

solidity ^0.5.1

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.788254
Transaction Length: 1
Severity: High
Contract: Getters
Function name: totalNet()
PC address: 4242
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:5

*/



//pragma solidity ^0.5.17;	
pragma so

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.374301
Transaction Length: 1
Severity: High
Contract: Getters
Function name: totalNet()
PC address: 4254
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:1079

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.342369
Transaction Length: 1
Severity: High
Contract: Comptroller
Function name: totalNet()
PC address: 4439
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:9

solidity ^0.5.1

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.079266
Transaction Length: 1
Severity: High
Contract: Permission
Function name: totalNet()
PC address: 4439
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:9

solidity ^0.5.1

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.595773
Transaction Length: 1
Severity: High
Contract: Regulator
Function name: totalNet()
PC address: 4439
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:9

solidity ^0.5.1

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.688249
Transaction Length: 1
Severity: High
Contract: Setters
Function name: totalNet()
PC address: 4439
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:9

solidity ^0.5.1

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.208225
Transaction Length: 1
Severity: High
Contract: Comptroller
Function name: totalNet()
PC address: 4442
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:5

*/



//pragma solidity ^0.5.17;	
pragma so

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.947474
Transaction Length: 1
Severity: High
Contract: Permission
Function name: totalNet()
PC address: 4442
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:5

*/



//pragma solidity ^0.5.17;	
pragma so

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.466867
Transaction Length: 1
Severity: High
Contract: Regulator
Function name: totalNet()
PC address: 4442
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:5

*/



//pragma solidity ^0.5.17;	
pragma so

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.555254
Transaction Length: 1
Severity: High
Contract: Setters
Function name: totalNet()
PC address: 4442
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:5

*/



//pragma solidity ^0.5.17;	
pragma so

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.793909
Transaction Length: 1
Severity: High
Contract: Comptroller
Function name: totalNet()
PC address: 4454
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:1079

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.522402
Transaction Length: 1
Severity: High
Contract: Permission
Function name: totalNet()
PC address: 4454
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:1079

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.042374
Transaction Length: 1
Severity: High
Contract: Regulator
Function name: totalNet()
PC address: 4454
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:1079

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.130146
Transaction Length: 1
Severity: High
Contract: Setters
Function name: totalNet()
PC address: 4454
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:1079

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.011715
Transaction Length: 1
Severity: High
Contract: Market
Function name: totalNet()
PC address: 5431
Estimated Gas Usage: 2863 - 37757
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:9

solidity ^0.5.1

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.870969
Transaction Length: 1
Severity: High
Contract: Market
Function name: totalNet()
PC address: 5434
Estimated Gas Usage: 2863 - 37757
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:5

*/



//pragma solidity ^0.5.17;	
pragma so

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.463260
Transaction Length: 1
Severity: High
Contract: Market
Function name: totalNet()
PC address: 5446
Estimated Gas Usage: 2863 - 37757
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:1079

dollar().totalSupply()

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.485987
Transaction Length: 1
Severity: High
Contract: Getters
Function name: totalNet()
PC address: 5728
Estimated Gas Usage: 2775 - 37669
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:60

unterpart to Solidity's

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.705124
Transaction Length: 1
Severity: High
Contract: Bonding
Function name: totalNet()
PC address: 5823
Estimated Gas Usage: 2753 - 37647
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:9

solidity ^0.5.1

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.589920
Transaction Length: 1
Severity: High
Contract: Bonding
Function name: totalNet()
PC address: 5826
Estimated Gas Usage: 2753 - 37647
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:5

*/



//pragma solidity ^0.5.17;	
pragma so

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.166600
Transaction Length: 1
Severity: High
Contract: Bonding
Function name: totalNet()
PC address: 5838
Estimated Gas Usage: 2753 - 37647
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:1079

dollar().totalSupply()

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.889232
Transaction Length: 1
Severity: High
Contract: Comptroller
Function name: totalNet()
PC address: 6018
Estimated Gas Usage: 2775 - 37669
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:78

or.
     *
     * Requi

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.633699
Transaction Length: 1
Severity: High
Contract: Permission
Function name: totalNet()
PC address: 6018
Estimated Gas Usage: 2775 - 37669
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:78

or.
     *
     * Requi

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:06.143847
Transaction Length: 1
Severity: High
Contract: Regulator
Function name: totalNet()
PC address: 6018
Estimated Gas Usage: 2775 - 37669
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:78

or.
     *
     * Requi

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.244119
Transaction Length: 1
Severity: High
Contract: Setters
Function name: totalNet()
PC address: 6018
Estimated Gas Usage: 2775 - 37669
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:78

or.
     *
     * Requi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.144990
Transaction Length: 1
Severity: High
Contract: Market
Function name: couponPremium(uint256)
PC address: 6118
Estimated Gas Usage: 2510 - 37404
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:9

solidity ^0.5.1

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.779034
Transaction Length: 1
Severity: High
Contract: Market
Function name: couponPremium(uint256)
PC address: 6121
Estimated Gas Usage: 2510 - 37404
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:5

*/



//pragma solidity ^0.5.17;	
pragma so

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.031313
Transaction Length: 1
Severity: High
Contract: Market
Function name: couponPremium(uint256)
PC address: 6133
Estimated Gas Usage: 2510 - 37404
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:2026

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.537909
Transaction Length: 1
Severity: High
Contract: Implementation
Function name: totalNet()
PC address: 8520
Estimated Gas Usage: 2819 - 37713
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:9

solidity ^0.5.1

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.402162
Transaction Length: 1
Severity: High
Contract: Implementation
Function name: totalNet()
PC address: 8523
Estimated Gas Usage: 2819 - 37713
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:5

*/



//pragma solidity ^0.5.17;	
pragma so

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.979963
Transaction Length: 1
Severity: High
Contract: Implementation
Function name: totalNet()
PC address: 8535
Estimated Gas Usage: 2819 - 37713
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:1079

dollar().totalSupply()

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.237779
Transaction Length: 1
Severity: High
Contract: Bonding
Function name: totalNet()
PC address: 10194
Estimated Gas Usage: 2753 - 37647
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:87

= 0) {
            retu

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:14.679813
Transaction Length: 1
Severity: Low
Contract: Market
Function name: purchaseCoupons(uint256)
PC address: 10433
Estimated Gas Usage: 703 - 1362
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:1678

result[i]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.304134
Transaction Length: 1
Severity: High
Contract: Implementation
Function name: couponPremium(uint256)
PC address: 10604
Estimated Gas Usage: 2533 - 37427
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:9

solidity ^0.5.1

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.566944
Transaction Length: 1
Severity: High
Contract: Implementation
Function name: couponPremium(uint256)
PC address: 10607
Estimated Gas Usage: 2533 - 37427
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:5

*/



//pragma solidity ^0.5.17;	
pragma so

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.909244
Transaction Length: 1
Severity: High
Contract: Implementation
Function name: couponPremium(uint256)
PC address: 10619
Estimated Gas Usage: 2533 - 37427
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:2026

dollar().totalSupply()

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.559267
Transaction Length: 1
Severity: High
Contract: Market
Function name: totalNet()
PC address: 12218
Estimated Gas Usage: 2863 - 37757
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:108

(uint256 a, uint256 b) 

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:06.083879
Transaction Length: 1
Severity: High
Contract: Implementation
Function name: totalNet()
PC address: 24849
Estimated Gas Usage: 2819 - 37713
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x57eb1f2d8dff0360c0a4320cc42e7c4d0a4773ba.sol:142

* Requirements:
     * 

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x4277803927cfF19dE354757B7364ffBC2533caC0.sol
Total states:5461
8.665481
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.044322
Transaction Length: 0
Severity: High
Contract: Oracle
Function name: constructor
PC address: 104
Estimated Gas Usage: 257 - 3030
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x4277803927cfF19dE354757B7364ffBC2533caC0.sol:12

rnal view returns (ui

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.055249
Transaction Length: 0
Severity: High
Contract: Oracle
Function name: constructor
PC address: 106
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x4277803927cfF19dE354757B7364ffBC2533caC0.sol:12

ion latestRound() external view returns (uin

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:06.090781
Transaction Length: 1
Severity: Low
Contract: Oracle
Function name: refs(uint256)
PC address: 1299
Estimated Gas Usage: 723 - 818
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x4277803927cfF19dE354757B7364ffBC2533caC0.sol:256

AggregatorInterface[] public refs

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x7b4a7fd41c688a7cb116534e341e44126ef5a0fd.sol
Total states:131
15.682203
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x02Fc38369890Aff2EC94B28863AE0DacdB2Dbae3.sol
Total states:381
0.499688
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0xcb46298767fb5d44c18313976c30d3eeb5071862.sol
Total states:77
3.343577
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x689744e7ebd5155ab5a945e1c863ce413c7a8013.sol
Total states:1308
1.114344
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0xbfe2be7731b7bc4e6efc32e57143e1ee95f6e92a.sol
Total states:15386
128.24922
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:03.342342
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3645
Estimated Gas Usage: 1025 - 1500
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xbfe2be7731b7bc4e6efc32e57143e1ee95f6e92a.sol:56

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:36.706951
Transaction Length: 2
Severity: High
Contract: ERC20Pausable
Function name: increaseAllowance(address,uint256)
PC address: 5504
Estimated Gas Usage: 1070 - 1545
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xbfe2be7731b7bc4e6efc32e57143e1ee95f6e92a.sol:56

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x1E79a835bfb3f015201792871B2D01E8C03ed8Ef.sol
Total states:13276
736.376772
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.150276
Transaction Length: 1
Severity: High
Contract: AriaCoin
Function name: dropToken(address[],uint256[])
PC address: 2006
Estimated Gas Usage: 385 - 480
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x1E79a835bfb3f015201792871B2D01E8C03ed8Ef.sol:5

olidity ^0.5.0;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.265504
Transaction Length: 1
Severity: High
Contract: AriaCoin
Function name: dropToken(address[],uint256[])
PC address: 2008
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x1E79a835bfb3f015201792871B2D01E8C03ed8Ef.sol:3

*/

//pragma solidity ^0.5.0;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:19.286457
Transaction Length: 1
Severity: High
Contract: AriaCoin
Function name: dropToken(address[],uint256[])
PC address: 2154
Estimated Gas Usage: 718 - 3495
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x1E79a835bfb3f015201792871B2D01E8C03ed8Ef.sol:5

olidity ^0.5.0;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:31.696991
Transaction Length: 1
Severity: High
Contract: AriaCoin
Function name: dropToken(address[],uint256[])
PC address: 2156
Estimated Gas Usage: 718 - 3495
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x1E79a835bfb3f015201792871B2D01E8C03ed8Ef.sol:3

*/

//pragma solidity ^0.5.0;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:54.988488
Transaction Length: 1
Severity: High
Contract: AriaCoin
Function name: approveAndCall(address,uint256,bytes)
PC address: 2382
Estimated Gas Usage: 467 - 562
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x1E79a835bfb3f015201792871B2D01E8C03ed8Ef.sol:3

*/

//pragma solidity ^0.5.0;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:39.772603
Transaction Length: 1
Severity: High
Contract: AriaCoin
Function name: approveAndCall(address,uint256,bytes)
PC address: 9900
Estimated Gas Usage: 1597 - 7903
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x1E79a835bfb3f015201792871B2D01E8C03ed8Ef.sol:30

require(b <= a, errorMessage)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0xD239FAF120B6015971Fc92f288560262A96b4789.sol
Total states:13229
46.50404
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:00.027178
Transaction Length: 0
Severity: Low
Contract: UrnHandler
Function name: constructor
PC address: 223
Estimated Gas Usage: 1003 - 4059
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0xD239FAF120B6015971Fc92f288560262A96b4789.sol:82

VatLike(vat).hope(msg.sender)

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:08.590840
Transaction Length: 1
Severity: Medium
Contract: GetCdps
Function name: getCdpsAsc(address,address)
PC address: 416
Estimated Gas Usage: 4549 - 83031
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 909
Offset: 1280
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop8/0xD239FAF120B6015971Fc92f288560262A96b4789.sol:348

function getCdpsAsc(address manager, address guy) external view returns (uint[] memory ids, address[] memory urns, bytes32[] memory ilks) {
        uint count = DssCdpManager(manager).count(guy);
        ids = new uint[](count);
        urns = new address[](count);
        ilks = new bytes32[](count);
        uint i = 0;
        uint id = DssCdpManager(manager).first(guy);

        while (id > 0) {
            ids[i] = id;
            urns[i] = DssCdpManager(manager).urns(id);
            ilks[i] = DssCdpManager(manager).ilks(id);
            (,id) = DssCdpManager(manager).list(id);
            i++;
        }
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:36.541536
Transaction Length: 1
Severity: High
Contract: GetCdps
Function name: getCdpsDesc(address,address)
PC address: 623
Estimated Gas Usage: 4144 - 75057
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xD239FAF120B6015971Fc92f288560262A96b4789.sol:365

function getCdpsDesc(address manager, address guy) external view returns (uint[] memory ids, address[] memory urns, bytes32[] memory ilks) {
        uint count = DssCdpManager(manager).count(guy);
        ids = new uint[](count);
        urns = new address[](count);
        ilks = new bytes32[](count);
        uint i = 0;
        uint id = DssCdpManager(manager).last(guy);

        while (id > 0) {
            ids[i] = id;
            urns[i] = DssCdpManager(manager).urns(id);
            ilks[i] = DssCdpManager(manager).ilks(id);
            (id,) = DssCdpManager(manager).list(id);
            i++;
        }
    }

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:14.337048
Transaction Length: 1
Severity: Low
Contract: GetCdps
Function name: getCdpsAsc(address,address)
PC address: 1558
Estimated Gas Usage: 5749 - 117572
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xD239FAF120B6015971Fc92f288560262A96b4789.sol:358

urns[i]

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0xe167b66d5F8692f6fF9de36137B9155345384c3C.sol
Total states:21448
41.841434
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x05977619e19fbc2f94bde352a78353b54dd918df.sol
Total states:3816
24.424589
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.822600
Transaction Length: 1
Severity: High
Contract: Core
Function name: whitelistTokens(address[])
PC address: 826
Estimated Gas Usage: 386 - 481
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x05977619e19fbc2f94bde352a78353b54dd918df.sol:9

ma solidity 0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.821366
Transaction Length: 1
Severity: High
Contract: Core
Function name: whitelistTokens(address[])
PC address: 828
Estimated Gas Usage: 386 - 481
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x05977619e19fbc2f94bde352a78353b54dd918df.sol:3



*/



//pragma solidity 0.5.17;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.107164
Transaction Length: 1
Severity: High
Contract: Core
Function name: whitelistPeak(address,uint256[],uint256,bool)
PC address: 1109
Estimated Gas Usage: 418 - 513
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x05977619e19fbc2f94bde352a78353b54dd918df.sol:9

ma solidity 0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.164443
Transaction Length: 1
Severity: High
Contract: Core
Function name: whitelistPeak(address,uint256[],uint256,bool)
PC address: 1111
Estimated Gas Usage: 418 - 513
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x05977619e19fbc2f94bde352a78353b54dd918df.sol:3



*/



//pragma solidity 0.5.17;
pr

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:19.248669
Transaction Length: 1
Severity: Low
Contract: Core
Function name: systemCoins(uint256)
PC address: 6871
Estimated Gas Usage: 723 - 818
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x05977619e19fbc2f94bde352a78353b54dd918df.sol:504

address[] public systemCoins

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:19.646931
Transaction Length: 1
Severity: Low
Contract: Core
Function name: peaksAddresses(uint256)
PC address: 6933
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x05977619e19fbc2f94bde352a78353b54dd918df.sol:522

address[] public peaksAddresses

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:20.480132
Transaction Length: 1
Severity: Low
Contract: Core
Function name: feed(uint256)
PC address: 8445
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x05977619e19fbc2f94bde352a78353b54dd918df.sol:505

uint[] public feed

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0xfd64dad84bdd0c735dec910936f301c74fc4bcdd.sol
Total states:13416
31.679703
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:06.925135
Transaction Length: 1
Severity: Low
Contract: AEther
Function name: seize(address,address,uint256)
PC address: 11731
Estimated Gas Usage: 7680 - 28861
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0xfd64dad84bdd0c735dec910936f301c74fc4bcdd.sol:1820

controller.seizeAllowed(address(this), msg.sender, liquidator, borrower, seizeTokens)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:05.178350
Transaction Length: 1
Severity: Low
Contract: AEther
Function name: transfer(address,uint256)
PC address: 18184
Estimated Gas Usage: 7688 - 28774
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0xfd64dad84bdd0c735dec910936f301c74fc4bcdd.sol:813

controller.transferAllowed(address(this), src, dst, tokens)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:06.335099
Transaction Length: 2
Severity: Low
Contract: AEther
Function name: transfer(address,uint256)
PC address: 18184
Estimated Gas Usage: 7685 - 28771
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop8/0xfd64dad84bdd0c735dec910936f301c74fc4bcdd.sol:813

controller.transferAllowed(address(this), src, dst, tokens)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x26c1869825d4d31e19d653026c85ed44b626c2bb.sol
Total states:1734
5.420073
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x0fe5fb1e6bc1c5103bf411abee17dc88e1781688.sol
Total states:6382
42.358206
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.354533
Transaction Length: 1
Severity: High
Contract: SmartChain
Function name: drawPool(address[],uint256[])
PC address: 2587
Estimated Gas Usage: 384 - 479
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x0fe5fb1e6bc1c5103bf411abee17dc88e1781688.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.156806
Transaction Length: 1
Severity: High
Contract: SmartChain
Function name: drawPool(address[],uint256[])
PC address: 2589
Estimated Gas Usage: 384 - 479
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x0fe5fb1e6bc1c5103bf411abee17dc88e1781688.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:14.738330
Transaction Length: 1
Severity: High
Contract: SmartChain
Function name: drawPool(address[],uint256[])
PC address: 2672
Estimated Gas Usage: 560 - 655
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x0fe5fb1e6bc1c5103bf411abee17dc88e1781688.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:27.896810
Transaction Length: 1
Severity: High
Contract: SmartChain
Function name: drawPool(address[],uint256[])
PC address: 2674
Estimated Gas Usage: 560 - 655
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x0fe5fb1e6bc1c5103bf411abee17dc88e1781688.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:05.117921
Transaction Length: 1
Severity: Low
Contract: SmartChain
Function name: ref_bonuses(uint256)
PC address: 11790
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0x0fe5fb1e6bc1c5103bf411abee17dc88e1781688.sol:227

uint8[] public ref_bonuses

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0xa78aa407b45183fd7ca8598311dfa57181b38a4a.sol
Total states:2324
2.168306
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0xFFC8A0D94D51a0477723bAeCCfC2026102bF3Ad1.sol
Total states:18680
146.86074
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.809810
Transaction Length: 1
Severity: High
Contract: unichat
Function name: bulkTransfer(address[],uint256[])
PC address: 757
Estimated Gas Usage: 408 - 503
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xFFC8A0D94D51a0477723bAeCCfC2026102bF3Ad1.sol:5

olidity ^0.5.13;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.685201
Transaction Length: 1
Severity: High
Contract: unichat
Function name: bulkTransfer(address[],uint256[])
PC address: 759
Estimated Gas Usage: 408 - 503
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xFFC8A0D94D51a0477723bAeCCfC2026102bF3Ad1.sol:3

*/

//pragma solidity ^0.5.13;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.288365
Transaction Length: 1
Severity: High
Contract: unichat
Function name: bulkTransfer(address[],uint256[])
PC address: 842
Estimated Gas Usage: 584 - 679
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xFFC8A0D94D51a0477723bAeCCfC2026102bF3Ad1.sol:5

olidity ^0.5.13;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:26.165459
Transaction Length: 1
Severity: High
Contract: unichat
Function name: bulkTransfer(address[],uint256[])
PC address: 844
Estimated Gas Usage: 584 - 679
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xFFC8A0D94D51a0477723bAeCCfC2026102bF3Ad1.sol:3

*/

//pragma solidity ^0.5.13;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:40.391093
Transaction Length: 1
Severity: High
Contract: unichat
Function name: transferAndCall(address,uint256,bytes)
PC address: 1417
Estimated Gas Usage: 511 - 606
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xFFC8A0D94D51a0477723bAeCCfC2026102bF3Ad1.sol:3

*/

//pragma solidity ^0.5.13;
prag

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:49.086535
Transaction Length: 1
Severity: Low
Contract: unichat
Function name: unfreeze(uint256)
PC address: 6428
Estimated Gas Usage: 1375 - 1660
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xFFC8A0D94D51a0477723bAeCCfC2026102bF3Ad1.sol:212

_burnedAmount * FLOAT_SCALAR / info.totalFrozen

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:24.022760
Transaction Length: 2
Severity: Low
Contract: unichat
Function name: unfreeze(uint256)
PC address: 6428
Estimated Gas Usage: 1375 - 1660
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xFFC8A0D94D51a0477723bAeCCfC2026102bF3Ad1.sol:212

_burnedAmount * FLOAT_SCALAR / info.totalFrozen

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x8baf22bf5788be6bc099deffc0ae6c5206631dd6.sol
Total states:149
2.657043
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x1c254696bc3e231fddbc4970bce2f8c6cd5f78f0.sol
Total states:265
1.757055
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.130066
Transaction Length: 0
Severity: High
Contract: MultisigVaultERC20
Function name: constructor
PC address: 120
Estimated Gas Usage: 287 - 3153
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x1c254696bc3e231fddbc4970bce2f8c6cd5f78f0.sol:12

ess them see `ERC20De

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0xf03abaada6f3069aaf3a923769b8d931154c2dd4.sol
Total states:6637
122.242015
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.122899
Transaction Length: 1
Severity: High
Contract: yNFTETHPool
Function name: stakeMultiple(uint256[])
PC address: 1950
Estimated Gas Usage: 429 - 524
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xf03abaada6f3069aaf3a923769b8d931154c2dd4.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.785493
Transaction Length: 1
Severity: High
Contract: yNFTETHPool
Function name: stakeMultiple(uint256[])
PC address: 1952
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xf03abaada6f3069aaf3a923769b8d931154c2dd4.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:06.751974
Transaction Length: 1
Severity: High
Contract: yNFTETHPool
Function name: withdrawMultiple(uint256[])
PC address: 2419
Estimated Gas Usage: 429 - 524
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xf03abaada6f3069aaf3a923769b8d931154c2dd4.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:10.284367
Transaction Length: 1
Severity: High
Contract: yNFTETHPool
Function name: withdrawMultiple(uint256[])
PC address: 2421
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xf03abaada6f3069aaf3a923769b8d931154c2dd4.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.890766
Transaction Length: 1
Severity: High
Contract: LPTokenWrapper
Function name: calculateCoverValue(uint256,uint256,uint256)
PC address: 6226
Estimated Gas Usage: 414 - 509
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xf03abaada6f3069aaf3a923769b8d931154c2dd4.sol:160

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.677260
Transaction Length: 1
Severity: High
Contract: yNFTETHPool
Function name: calculateCoverValue(uint256,uint256,uint256)
PC address: 12448
Estimated Gas Usage: 438 - 533
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xf03abaada6f3069aaf3a923769b8d931154c2dd4.sol:160

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0xfebfd5c75c32a23739eb1935c80248436248e296.sol
Total states:52525
1007.154629
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.914953
Transaction Length: 1
Severity: High
Contract: AccessChecker
Function name: getModuleAddress(string)
PC address: 416
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xfebfd5c75c32a23739eb1935c80248436248e296.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.965615
Transaction Length: 1
Severity: High
Contract: Module
Function name: getModuleAddress(string)
PC address: 416
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xfebfd5c75c32a23739eb1935c80248436248e296.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.047025
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(string,string,uint8)
PC address: 1000
Estimated Gas Usage: 409 - 504
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xfebfd5c75c32a23739eb1935c80248436248e296.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.769066
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(string,string,uint8)
PC address: 1151
Estimated Gas Usage: 751 - 3528
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xfebfd5c75c32a23739eb1935c80248436248e296.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.695753
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[],uint256)
PC address: 2226
Estimated Gas Usage: 429 - 524
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xfebfd5c75c32a23739eb1935c80248436248e296.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.420373
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[],uint256)
PC address: 2228
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xfebfd5c75c32a23739eb1935c80248436248e296.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.194019
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[])
PC address: 2357
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xfebfd5c75c32a23739eb1935c80248436248e296.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:15.543483
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[])
PC address: 2359
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xfebfd5c75c32a23739eb1935c80248436248e296.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.881482
Transaction Length: 1
Severity: High
Contract: SavingsModule
Function name: deposit(address,address[],uint256[])
PC address: 2437
Estimated Gas Usage: 507 - 602
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xfebfd5c75c32a23739eb1935c80248436248e296.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.530796
Transaction Length: 1
Severity: High
Contract: SavingsModule
Function name: deposit(address,address[],uint256[])
PC address: 2439
Estimated Gas Usage: 507 - 602
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xfebfd5c75c32a23739eb1935c80248436248e296.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:38.595995
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: getModuleAddress(string)
PC address: 2526
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xfebfd5c75c32a23739eb1935c80248436248e296.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:19.237426
Transaction Length: 1
Severity: High
Contract: SavingsModule
Function name: deposit(address,address[],uint256[])
PC address: 2585
Estimated Gas Usage: 840 - 3617
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xfebfd5c75c32a23739eb1935c80248436248e296.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:31.780341
Transaction Length: 1
Severity: High
Contract: SavingsModule
Function name: deposit(address,address[],uint256[])
PC address: 2587
Estimated Gas Usage: 840 - 3617
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xfebfd5c75c32a23739eb1935c80248436248e296.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:28.277868
Transaction Length: 1
Severity: High
Contract: SavingsModule
Function name: getModuleAddress(string)
PC address: 2950
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xfebfd5c75c32a23739eb1935c80248436248e296.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:24.303430
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(address,string,string)
PC address: 3179
Estimated Gas Usage: 485 - 580
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xfebfd5c75c32a23739eb1935c80248436248e296.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.102109
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3249
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xfebfd5c75c32a23739eb1935c80248436248e296.sol:34

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:45.669941
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(address,string,string)
PC address: 3330
Estimated Gas Usage: 827 - 3604
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xfebfd5c75c32a23739eb1935c80248436248e296.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.355327
Transaction Length: 1
Severity: Low
Contract: DistributionToken
Function name: distributions(uint256)
PC address: 3405
Estimated Gas Usage: 724 - 819
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xfebfd5c75c32a23739eb1935c80248436248e296.sol:1314

Distribution[] public distributions

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.346551
Transaction Length: 2
Severity: High
Contract: ERC20Burnable
Function name: increaseAllowance(address,uint256)
PC address: 3429
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xfebfd5c75c32a23739eb1935c80248436248e296.sol:34

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.243574
Transaction Length: 2
Severity: High
Contract: ERC20Mintable
Function name: increaseAllowance(address,uint256)
PC address: 4214
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xfebfd5c75c32a23739eb1935c80248436248e296.sol:34

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:42.157254
Transaction Length: 1
Severity: Low
Contract: PoolToken
Function name: distributions(uint256)
PC address: 6392
Estimated Gas Usage: 768 - 863
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xfebfd5c75c32a23739eb1935c80248436248e296.sol:1314

Distribution[] public distributions

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.962419
Transaction Length: 2
Severity: High
Contract: DistributionToken
Function name: increaseAllowance(address,uint256)
PC address: 6759
Estimated Gas Usage: 1104 - 1579
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0xfebfd5c75c32a23739eb1935c80248436248e296.sol:34

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:58.713024
Transaction Length: 1
Severity: Low
Contract: SavingsModule
Function name: registeredPoolTokens()
PC address: 14663
Estimated Gas Usage: 1220 - 1691
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop8/0xfebfd5c75c32a23739eb1935c80248436248e296.sol:2230

registeredProtocols[i]

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x4febc44f05f6ce0dae0ba90c0c700ed18178063b.sol
Total states:28391
190.26409
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:01.287996
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3645
Estimated Gas Usage: 1025 - 1500
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x4febc44f05f6ce0dae0ba90c0c700ed18178063b.sol:52

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:46.378600
Transaction Length: 2
Severity: High
Contract: ERC20Burnable
Function name: increaseAllowance(address,uint256)
PC address: 3818
Estimated Gas Usage: 1025 - 1500
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x4febc44f05f6ce0dae0ba90c0c700ed18178063b.sol:52

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:36.317957
Transaction Length: 2
Severity: High
Contract: ERC20Pausable
Function name: increaseAllowance(address,uint256)
PC address: 6493
Estimated Gas Usage: 1556 - 2361
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x4febc44f05f6ce0dae0ba90c0c700ed18178063b.sol:52

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0xf10ed760794d40fd7142daaa66ec4c4676301296.sol
Total states:25097
72.664461
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x6393445CfF2Cfe22a44c72243d26B3e1175D594F.sol
Total states:1567
62.218903
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.405361
Transaction Length: 1
Severity: High
Contract: CsmClaim
Function name: addPendingClaims(address[])
PC address: 491
Estimated Gas Usage: 386 - 481
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x6393445CfF2Cfe22a44c72243d26B3e1175D594F.sol:5

olidity >=0.5.0 <0.7.

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.760068
Transaction Length: 1
Severity: High
Contract: CsmClaim
Function name: addPendingClaims(address[])
PC address: 493
Estimated Gas Usage: 386 - 481
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop8/0x6393445CfF2Cfe22a44c72243d26B3e1175D594F.sol:3

*/

//pragma solidity >=0.5.0 <0.7.0

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x067e398605E84F2D0aEEC1806e62768C5110DCc6.sol
Total states:1499
22.750381
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x5cf9242493be1411b93d064ca2e468961bbb5924.sol
Total states:3260
15.756663
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x07e79aefdc3a44603a1ccc3e89310a0806fb278b.sol
Total states:475
6.562682
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x9e1d0964d519CCb470151Dd85E78fc798C75dEB7.sol
Total states:3620
5.910636
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x5eda5792125e4ad108454e6d607db156f10f7ec3.sol
Total states:77
3.292688
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x9f18363ff3ab60fdf7dcaca8564a48ea0790b9b3.sol
Total states:9900
17.866009
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop8/0x8b8e3c7b02c08bd00739ef67f458bb6089cc0f50.sol
Total states:426
0.766902
The analysis was completed successfully. No issues were detected.
