$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x92a33631c630fff26291925bb510203dd6f4e9e2.sol
Total states:1320
57.359606
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.847867
Transaction Length: 1
Severity: High
Contract: usingProvable
Function name: __callback(bytes32,string)
PC address: 181
Estimated Gas Usage: 323 - 418
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x92a33631c630fff26291925bb510203dd6f4e9e2.sol:3

*/

//pragma solidity 0.5.17;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.738336
Transaction Length: 1
Severity: High
Contract: usingProvable
Function name: __callback(bytes32,string,bytes)
PC address: 378
Estimated Gas Usage: 345 - 440
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x92a33631c630fff26291925bb510203dd6f4e9e2.sol:3

*/

//pragma solidity 0.5.17;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:24.647654
Transaction Length: 1
Severity: High
Contract: usingProvable
Function name: __callback(bytes32,string,bytes)
PC address: 529
Estimated Gas Usage: 687 - 3464
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x92a33631c630fff26291925bb510203dd6f4e9e2.sol:3

*/

//pragma solidity 0.5.17;
pragm

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:00.629368
Transaction Length: 0
Severity: Low
Contract: YeldOracle
Function name: constructor
PC address: 744
Estimated Gas Usage: 35872 - 161864
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop3/0x92a33631c630fff26291925bb510203dd6f4e9e2.sol:1334

IYeldContract(yDAI).rebalance()

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:00.776870
Transaction Length: 0
Severity: Low
Contract: YeldOracle
Function name: constructor
PC address: 904
Estimated Gas Usage: 37843 - 198446
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop3/0x92a33631c630fff26291925bb510203dd6f4e9e2.sol:1335

IYeldContract(yTether).rebalance()

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:00.803439
Transaction Length: 0
Severity: Low
Contract: YeldOracle
Function name: constructor
PC address: 1064
Estimated Gas Usage: 39814 - 235028
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop3/0x92a33631c630fff26291925bb510203dd6f4e9e2.sol:1336

IYeldContract(yTrueUSD).rebalance()

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:00.830524
Transaction Length: 0
Severity: Low
Contract: YeldOracle
Function name: constructor
PC address: 1224
Estimated Gas Usage: 41785 - 271610
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop3/0x92a33631c630fff26291925bb510203dd6f4e9e2.sol:1337

IYeldContract(yUSDC).rebalance()

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x8bbb6c4b6de838df0e6ceed5d32c20b44ee8ea02.sol
Total states:11825
27.347708
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.045164
Transaction Length: 0
Severity: High
Contract: Token
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x8bbb6c4b6de838df0e6ceed5d32c20b44ee8ea02.sol:8

Public License as published by
// the Free 

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x11f623c38b442425ec82fbc590e2d38ce777f6fe.sol
Total states:426
0.761706
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xecf073f91101ce5628669c487aee8f5822a101b1.sol
Total states:9507
92.294351
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.071976
Transaction Length: 0
Severity: High
Contract: ERC721BaseCollection
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xecf073f91101ce5628669c487aee8f5822a101b1.sol:12

t (an owner) that can be granted exclusive 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.065919
Transaction Length: 0
Severity: High
Contract: ERC721Collection
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xecf073f91101ce5628669c487aee8f5822a101b1.sol:12

t (an owner) that can be granted exclusive 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.054876
Transaction Length: 0
Severity: High
Contract: ERC721Full
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xecf073f91101ce5628669c487aee8f5822a101b1.sol:12

t (an owner) that can be granted exclusive 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.048827
Transaction Length: 0
Severity: High
Contract: ERC721Metadata
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xecf073f91101ce5628669c487aee8f5822a101b1.sol:12

t (an owner) that can be granted exclusive 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.927485
Transaction Length: 1
Severity: High
Contract: ERC721
Function name: safeTransferFrom(address,address,uint256,bytes)
PC address: 1136
Estimated Gas Usage: 477 - 572
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xecf073f91101ce5628669c487aee8f5822a101b1.sol:3

*/

// File: @openzeppelin/contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.261738
Transaction Length: 1
Severity: High
Contract: ERC721Enumerable
Function name: safeTransferFrom(address,address,uint256,bytes)
PC address: 1379
Estimated Gas Usage: 477 - 572
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xecf073f91101ce5628669c487aee8f5822a101b1.sol:3

*/

// File: @openzeppelin/contract

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x42ffe38063a1ff94091824e6c29160f70c026cb3.sol
Total states:723
6.337604
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x66be1bc6c6af47900bbd4f3711801be6c2c6cb32.sol
Total states:1115
2.749719
==== Unprotected Selfdestruct ====
SWC ID: 106
FOUND TIME: 0:00:00.019149
Transaction Length: 0
Severity: High
Contract: SafeSend
Function name: constructor
PC address: 74
Estimated Gas Usage: 139 - 2819
The contract can be killed by anyone.
Arbitrary senders can kill this contract but it is not possible to set the target address to whichthe contract balance is sent.
--------------------
In file: ../../contracts/m_loop/loop3/0x66be1bc6c6af47900bbd4f3711801be6c2c6cb32.sol:653

selfdestruct(to)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x248FEd766B4953B6847a397b291a9Df97B3C2a39.sol
Total states:31600
399.519167
==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:00.275129
Transaction Length: 1
Severity: Medium
Contract: VoteProxy
Function name: freeAll()
PC address: 349
Estimated Gas Usage: 9777 - 150153
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 1496
Offset: 1637
Offset: 1944
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop3/0x248FEd766B4953B6847a397b291a9Df97B3C2a39.sol:764

function freeAll() public auth {
        chief.free(chief.deposits(address(this)));
        gov.push(cold, gov.balanceOf(address(this)));
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.409296
Transaction Length: 1
Severity: High
Contract: DSChiefApprovals
Function name: etch(address[])
PC address: 707
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x248FEd766B4953B6847a397b291a9Df97B3C2a39.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.653710
Transaction Length: 1
Severity: High
Contract: DSChiefApprovals
Function name: etch(address[])
PC address: 709
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x248FEd766B4953B6847a397b291a9Df97B3C2a39.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.542050
Transaction Length: 1
Severity: High
Contract: VoteProxy
Function name: vote(address[])
PC address: 717
Estimated Gas Usage: 384 - 479
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x248FEd766B4953B6847a397b291a9Df97B3C2a39.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.786728
Transaction Length: 1
Severity: High
Contract: VoteProxy
Function name: vote(address[])
PC address: 719
Estimated Gas Usage: 384 - 479
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x248FEd766B4953B6847a397b291a9Df97B3C2a39.sol:3

*/

/**
 *Submitted for verification

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:00.198488
Transaction Length: 0
Severity: Low
Contract: VoteProxy
Function name: constructor
PC address: 1065
Estimated Gas Usage: 33385 - 208626
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop3/0x248FEd766B4953B6847a397b291a9Df97B3C2a39.sol:745

gov.approve(address(chief), uint256(-1))

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.995660
Transaction Length: 1
Severity: High
Contract: DSChief
Function name: etch(address[])
PC address: 1231
Estimated Gas Usage: 386 - 481
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x248FEd766B4953B6847a397b291a9Df97B3C2a39.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.874328
Transaction Length: 1
Severity: High
Contract: DSChief
Function name: etch(address[])
PC address: 1233
Estimated Gas Usage: 386 - 481
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x248FEd766B4953B6847a397b291a9Df97B3C2a39.sol:3

*/

/**
 *Submitted for verification

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:00.257038
Transaction Length: 0
Severity: Low
Contract: VoteProxy
Function name: constructor
PC address: 1391
Estimated Gas Usage: 35933 - 246491
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop3/0x248FEd766B4953B6847a397b291a9Df97B3C2a39.sol:746

iou.approve(address(chief), uint256(-1))

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:00.295613
Transaction Length: 0
Severity: Medium
Contract: VoteProxy
Function name: constructor
PC address: 1467
Estimated Gas Usage: 37224 - 284272
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 418
Offset: 676
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop3/0x248FEd766B4953B6847a397b291a9Df97B3C2a39.sol:731

contract VoteProxy {
    address public cold;
    address public hot;
    DSToken public gov;
    DSToken public iou;
    DSChief public chief;

    constructor(DSChief _chief, address _cold, address _hot) public {
        chief = _chief;
        cold = _cold;
        hot = _hot;

        gov = chief.GOV();
        iou = chief.IOU();
        gov.approve(address(chief), uint256(-1));
        iou.approve(address(chief), uint256(-1));
    }

    modifier auth() {
        require(msg.sender == hot || msg.sender == cold, "Sender must be a Cold or Hot Wallet");
        _;
    }

    function lock(uint256 wad) public auth {
        gov.pull(cold, wad);   // mkr from cold
        chief.lock(wad);       // mkr out, ious in
    }

    function free(uint256 wad) public auth {
        chief.free(wad);       // ious out, mkr in
        gov.push(cold, wad);   // mkr to cold
    }

    function freeAll() public auth {
        chief.free(chief.deposits(address(this)));
        gov.push(cold, gov.balanceOf(address(this)));
    }

    function vote(address[] memory yays) public auth returns (bytes32) {
        return chief.vote(yays);
    }

    function vote(bytes32 slate) public auth {
        chief.vote(slate);
    }
}

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x9a2715be834f8c29b6d5658e69975d9d5c08801a.sol
Total states:77
3.266578
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xf0dac6a8bca0698e5d4e42e1d06293ff6ae14c0c.sol
Total states:14026
80.830805
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.790528
Transaction Length: 2
Severity: High
Contract: RegularToken
Function name: transferFrom(address,address,uint256)
PC address: 2724
Estimated Gas Usage: 2054 - 2909
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xf0dac6a8bca0698e5d4e42e1d06293ff6ae14c0c.sol:1106

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:19.741122
Transaction Length: 2
Severity: Low
Contract: RegularToken
Function name: transferFrom(address,address,uint256)
PC address: 2737
Estimated Gas Usage: 2064 - 2919
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xf0dac6a8bca0698e5d4e42e1d06293ff6ae14c0c.sol:1107

assert(c >= a)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.857539
Transaction Length: 2
Severity: High
Contract: UnboundedRegularToken
Function name: transferFrom(address,address,uint256)
PC address: 2771
Estimated Gas Usage: 2065 - 2920
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xf0dac6a8bca0698e5d4e42e1d06293ff6ae14c0c.sol:1106

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:19.331163
Transaction Length: 2
Severity: Low
Contract: UnboundedRegularToken
Function name: transferFrom(address,address,uint256)
PC address: 2784
Estimated Gas Usage: 2075 - 2930
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xf0dac6a8bca0698e5d4e42e1d06293ff6ae14c0c.sol:1107

assert(c >= a)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.118084
Transaction Length: 2
Severity: High
Contract: ETPlanToken
Function name: transferFrom(address,address,uint256)
PC address: 3237
Estimated Gas Usage: 2110 - 2965
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xf0dac6a8bca0698e5d4e42e1d06293ff6ae14c0c.sol:1106

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:15.633584
Transaction Length: 2
Severity: Low
Contract: ETPlanToken
Function name: transferFrom(address,address,uint256)
PC address: 3250
Estimated Gas Usage: 2120 - 2975
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xf0dac6a8bca0698e5d4e42e1d06293ff6ae14c0c.sol:1107

assert(c >= a)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xA9dE0c76E1960e8B89D4B754d2D5C8b187e7B98B.sol
Total states:52549
1352.001923
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.833859
Transaction Length: 1
Severity: High
Contract: AccessChecker
Function name: getModuleAddress(string)
PC address: 416
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xA9dE0c76E1960e8B89D4B754d2D5C8b187e7B98B.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.551050
Transaction Length: 1
Severity: High
Contract: Module
Function name: getModuleAddress(string)
PC address: 416
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xA9dE0c76E1960e8B89D4B754d2D5C8b187e7B98B.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.072318
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(string,string,uint8)
PC address: 1000
Estimated Gas Usage: 409 - 504
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xA9dE0c76E1960e8B89D4B754d2D5C8b187e7B98B.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.399979
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(string,string,uint8)
PC address: 1151
Estimated Gas Usage: 751 - 3528
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xA9dE0c76E1960e8B89D4B754d2D5C8b187e7B98B.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.412926
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[],uint256)
PC address: 2226
Estimated Gas Usage: 429 - 524
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xA9dE0c76E1960e8B89D4B754d2D5C8b187e7B98B.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.151419
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[],uint256)
PC address: 2228
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xA9dE0c76E1960e8B89D4B754d2D5C8b187e7B98B.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.490577
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[])
PC address: 2357
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xA9dE0c76E1960e8B89D4B754d2D5C8b187e7B98B.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:14.567636
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[])
PC address: 2359
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xA9dE0c76E1960e8B89D4B754d2D5C8b187e7B98B.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:29.612446
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: getModuleAddress(string)
PC address: 2526
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xA9dE0c76E1960e8B89D4B754d2D5C8b187e7B98B.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.658179
Transaction Length: 1
Severity: High
Contract: InvestingModule
Function name: deposit(address,address[],uint256[])
PC address: 2654
Estimated Gas Usage: 419 - 514
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xA9dE0c76E1960e8B89D4B754d2D5C8b187e7B98B.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.854396
Transaction Length: 1
Severity: High
Contract: SavingsModule
Function name: deposit(address,address[],uint256[])
PC address: 2654
Estimated Gas Usage: 419 - 514
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xA9dE0c76E1960e8B89D4B754d2D5C8b187e7B98B.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.438022
Transaction Length: 1
Severity: High
Contract: InvestingModule
Function name: deposit(address,address[],uint256[])
PC address: 2656
Estimated Gas Usage: 419 - 514
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xA9dE0c76E1960e8B89D4B754d2D5C8b187e7B98B.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.618281
Transaction Length: 1
Severity: High
Contract: SavingsModule
Function name: deposit(address,address[],uint256[])
PC address: 2656
Estimated Gas Usage: 419 - 514
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xA9dE0c76E1960e8B89D4B754d2D5C8b187e7B98B.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:21.340730
Transaction Length: 1
Severity: High
Contract: InvestingModule
Function name: deposit(address,address[],uint256[])
PC address: 2802
Estimated Gas Usage: 752 - 3529
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xA9dE0c76E1960e8B89D4B754d2D5C8b187e7B98B.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:22.613754
Transaction Length: 1
Severity: High
Contract: SavingsModule
Function name: deposit(address,address[],uint256[])
PC address: 2802
Estimated Gas Usage: 752 - 3529
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xA9dE0c76E1960e8B89D4B754d2D5C8b187e7B98B.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:33.862805
Transaction Length: 1
Severity: High
Contract: InvestingModule
Function name: deposit(address,address[],uint256[])
PC address: 2804
Estimated Gas Usage: 752 - 3529
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xA9dE0c76E1960e8B89D4B754d2D5C8b187e7B98B.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:36.340396
Transaction Length: 1
Severity: High
Contract: SavingsModule
Function name: deposit(address,address[],uint256[])
PC address: 2804
Estimated Gas Usage: 752 - 3529
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xA9dE0c76E1960e8B89D4B754d2D5C8b187e7B98B.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:25.318187
Transaction Length: 1
Severity: High
Contract: InvestingModule
Function name: getModuleAddress(string)
PC address: 3167
Estimated Gas Usage: 451 - 546
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xA9dE0c76E1960e8B89D4B754d2D5C8b187e7B98B.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:48.213578
Transaction Length: 1
Severity: High
Contract: SavingsModule
Function name: getModuleAddress(string)
PC address: 3167
Estimated Gas Usage: 451 - 546
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xA9dE0c76E1960e8B89D4B754d2D5C8b187e7B98B.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:21.446815
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(address,string,string)
PC address: 3179
Estimated Gas Usage: 485 - 580
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xA9dE0c76E1960e8B89D4B754d2D5C8b187e7B98B.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.008480
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3249
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xA9dE0c76E1960e8B89D4B754d2D5C8b187e7B98B.sol:34

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:43.122241
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(address,string,string)
PC address: 3330
Estimated Gas Usage: 827 - 3604
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xA9dE0c76E1960e8B89D4B754d2D5C8b187e7B98B.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.394101
Transaction Length: 1
Severity: Low
Contract: DistributionToken
Function name: distributions(uint256)
PC address: 3405
Estimated Gas Usage: 724 - 819
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xA9dE0c76E1960e8B89D4B754d2D5C8b187e7B98B.sol:1328

Distribution[] public distributions

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.270021
Transaction Length: 2
Severity: High
Contract: ERC20Burnable
Function name: increaseAllowance(address,uint256)
PC address: 3429
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xA9dE0c76E1960e8B89D4B754d2D5C8b187e7B98B.sol:34

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.608617
Transaction Length: 2
Severity: High
Contract: ERC20Mintable
Function name: increaseAllowance(address,uint256)
PC address: 4214
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xA9dE0c76E1960e8B89D4B754d2D5C8b187e7B98B.sol:34

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:32.404088
Transaction Length: 1
Severity: Low
Contract: PoolToken
Function name: distributions(uint256)
PC address: 6392
Estimated Gas Usage: 768 - 863
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xA9dE0c76E1960e8B89D4B754d2D5C8b187e7B98B.sol:1328

Distribution[] public distributions

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.865767
Transaction Length: 2
Severity: High
Contract: DistributionToken
Function name: increaseAllowance(address,uint256)
PC address: 6759
Estimated Gas Usage: 1104 - 1579
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xA9dE0c76E1960e8B89D4B754d2D5C8b187e7B98B.sol:34

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:03:00.948671
Transaction Length: 1
Severity: Low
Contract: InvestingModule
Function name: registeredPoolTokens()
PC address: 16017
Estimated Gas Usage: 1175 - 1646
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xA9dE0c76E1960e8B89D4B754d2D5C8b187e7B98B.sol:2311

registeredProtocols[i]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:03:07.744346
Transaction Length: 1
Severity: Low
Contract: SavingsModule
Function name: registeredPoolTokens()
PC address: 16017
Estimated Gas Usage: 1175 - 1646
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xA9dE0c76E1960e8B89D4B754d2D5C8b187e7B98B.sol:2311

registeredProtocols[i]

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xd098df627426e1b54f924822373aee680860a295.sol
Total states:3216
96.33973
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:40.218818
Transaction Length: 1
Severity: High
Contract: InstaCompoundResolver
Function name: name()
PC address: 1708
Estimated Gas Usage: 682 - 870
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xd098df627426e1b54f924822373aee680860a295.sol:176

string public constant name = "Compound-Resolver-v1.1"

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x188C2274B04Ea392B21487b5De299e382Ff84246.sol
Total states:1930
57.824783
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x86890220b3aad958abf24ac7d67f9414ae4565a7.sol
Total states:2032
79.632593
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.289904
Transaction Length: 1
Severity: High
Contract: FundsMgr
Function name: withdrawAll(address[])
PC address: 202
Estimated Gas Usage: 296 - 391
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x86890220b3aad958abf24ac7d67f9414ae4565a7.sol:5

ontracts\interfaces\I

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.284182
Transaction Length: 1
Severity: High
Contract: FundsMgr
Function name: withdrawAll(address[])
PC address: 204
Estimated Gas Usage: 296 - 391
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x86890220b3aad958abf24ac7d67f9414ae4565a7.sol:3

*/

// File: contracts\interfaces\IE

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:03.918838
Transaction Length: 1
Severity: Medium
Contract: DfDepositMarket
Function name: getDiDai(uint256)
PC address: 215
Estimated Gas Usage: 4141 - 73975
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 1122
Offset: 1365
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop3/0x86890220b3aad958abf24ac7d67f9414ae4565a7.sol:648

function getDiDai(uint256 amount) public {
        require(msg.sender == tx.origin);
        require(amount > 0);
        IToken(DAI_ADDRESS).transferFrom(msg.sender, owner, amount);
        IToken(dDAI_ADDRESS).transfer(msg.sender, amount);
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.138900
Transaction Length: 1
Severity: High
Contract: DfDepositMarket
Function name: withdrawAll(address[])
PC address: 371
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x86890220b3aad958abf24ac7d67f9414ae4565a7.sol:5

ontracts\interfaces\I

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.094211
Transaction Length: 1
Severity: High
Contract: DfDepositMarket
Function name: withdrawAll(address[])
PC address: 373
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x86890220b3aad958abf24ac7d67f9414ae4565a7.sol:3

*/

// File: contracts\interfaces\IE

--------------------

==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.118012
Transaction Length: 1
Severity: Medium
Contract: DfDepositMarket
Function name: getDiDai(uint256)
PC address: 779
Estimated Gas Usage: 223 - 318
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../contracts/m_loop/loop3/0x86890220b3aad958abf24ac7d67f9414ae4565a7.sol:649

tx.origin

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:01.617385
Transaction Length: 1
Severity: Low
Contract: DfDepositMarket
Function name: getDiDai(uint256)
PC address: 1122
Estimated Gas Usage: 1643 - 2634
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop3/0x86890220b3aad958abf24ac7d67f9414ae4565a7.sol:651

IToken(DAI_ADDRESS).transferFrom(msg.sender, owner, amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:03.790694
Transaction Length: 1
Severity: Low
Contract: DfDepositMarket
Function name: getDiDai(uint256)
PC address: 1365
Estimated Gas Usage: 3318 - 38966
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop3/0x86890220b3aad958abf24ac7d67f9414ae4565a7.sol:652

IToken(dDAI_ADDRESS).transfer(msg.sender, amount)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xab1b7674a92a4b788855915e6bda60841c284189.sol
Total states:736
1.546786
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x331513bedb4ec777e950201a6ca6848d198bbbb1.sol
Total states:5597
269.989779
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.879924
Transaction Length: 1
Severity: High
Contract: ERC721Holder
Function name: onERC721Received(address,address,uint256,bytes)
PC address: 234
Estimated Gas Usage: 389 - 484
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x331513bedb4ec777e950201a6ca6848d198bbbb1.sol:3

*/

//pragma solidity^0.7;
pragma s

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.093780
Transaction Length: 1
Severity: High
Contract: CJOArtsGateway
Function name: onERC721Received(address,address,uint256,bytes)
PC address: 572
Estimated Gas Usage: 457 - 552
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x331513bedb4ec777e950201a6ca6848d198bbbb1.sol:3

*/

//pragma solidity^0.7;
pragma s

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:01:29.935960
Transaction Length: 1
Severity: Medium
Contract: CJOArtsGateway
Function name: deposit(uint256)
PC address: 1602
Estimated Gas Usage: 6115 - 76865
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 5445
Offset: 5889
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop3/0x331513bedb4ec777e950201a6ca6848d198bbbb1.sol:229

function deposit(uint256 _tokenId) public whenNotPaused() {
        address owner = assetContract.ownerOf(_tokenId);
        require(owner == msg.sender, "msg.sender must be _tokenId owner");
        assetContract.safeTransferFrom(owner, address(this), _tokenId);
        emit Deposit(owner, _tokenId);
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:38.784147
Transaction Length: 1
Severity: High
Contract: CJOArtsGateway
Function name: bulkDeposit(uint256[])
PC address: 1697
Estimated Gas Usage: 384 - 479
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x331513bedb4ec777e950201a6ca6848d198bbbb1.sol:5

olidity^0.7;
pragma s

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:42.146603
Transaction Length: 1
Severity: High
Contract: CJOArtsGateway
Function name: bulkDeposit(uint256[])
PC address: 1699
Estimated Gas Usage: 384 - 479
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x331513bedb4ec777e950201a6ca6848d198bbbb1.sol:3

*/

//pragma solidity^0.7;
pragma so

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:21.579281
Transaction Length: 1
Severity: High
Contract: CJOArtsGateway
Function name: bulkWithdraw(address[],uint256[],uint256[],bytes32[])
PC address: 1899
Estimated Gas Usage: 404 - 499
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x331513bedb4ec777e950201a6ca6848d198bbbb1.sol:5

olidity^0.7;
pragma s

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:25.229745
Transaction Length: 1
Severity: High
Contract: CJOArtsGateway
Function name: bulkWithdraw(address[],uint256[],uint256[],bytes32[])
PC address: 1901
Estimated Gas Usage: 404 - 499
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x331513bedb4ec777e950201a6ca6848d198bbbb1.sol:3

*/

//pragma solidity^0.7;
pragma so

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:29.884641
Transaction Length: 1
Severity: High
Contract: CJOArtsGateway
Function name: bulkWithdraw(address[],uint256[],uint256[],bytes32[])
PC address: 1984
Estimated Gas Usage: 580 - 675
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x331513bedb4ec777e950201a6ca6848d198bbbb1.sol:5

olidity^0.7;
pragma s

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:39.092899
Transaction Length: 1
Severity: High
Contract: CJOArtsGateway
Function name: bulkWithdraw(address[],uint256[],uint256[],bytes32[])
PC address: 1986
Estimated Gas Usage: 580 - 675
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x331513bedb4ec777e950201a6ca6848d198bbbb1.sol:3

*/

//pragma solidity^0.7;
pragma so

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:51.015754
Transaction Length: 1
Severity: High
Contract: CJOArtsGateway
Function name: bulkWithdraw(address[],uint256[],uint256[],bytes32[])
PC address: 2069
Estimated Gas Usage: 756 - 851
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x331513bedb4ec777e950201a6ca6848d198bbbb1.sol:5

olidity^0.7;
pragma s

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:06.543960
Transaction Length: 1
Severity: High
Contract: CJOArtsGateway
Function name: bulkWithdraw(address[],uint256[],uint256[],bytes32[])
PC address: 2071
Estimated Gas Usage: 756 - 851
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x331513bedb4ec777e950201a6ca6848d198bbbb1.sol:3

*/

//pragma solidity^0.7;
pragma so

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:25.004372
Transaction Length: 1
Severity: High
Contract: CJOArtsGateway
Function name: bulkWithdraw(address[],uint256[],uint256[],bytes32[])
PC address: 2154
Estimated Gas Usage: 932 - 1027
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x331513bedb4ec777e950201a6ca6848d198bbbb1.sol:5

olidity^0.7;
pragma s

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:48.795063
Transaction Length: 1
Severity: High
Contract: CJOArtsGateway
Function name: bulkWithdraw(address[],uint256[],uint256[],bytes32[])
PC address: 2156
Estimated Gas Usage: 932 - 1027
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x331513bedb4ec777e950201a6ca6848d198bbbb1.sol:3

*/

//pragma solidity^0.7;
pragma so

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:02:05.278073
Transaction Length: 1
Severity: Low
Contract: CJOArtsGateway
Function name: bulkDeposit(uint256[])
PC address: 5889
Estimated Gas Usage: 4470 - 40683
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop3/0x331513bedb4ec777e950201a6ca6848d198bbbb1.sol:232

assetContract.safeTransferFrom(owner, address(this), _tokenId)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xe2d8caf342f64878c17dd8f493247f323cdc6a48.sol
Total states:581
2.283444
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xcb56383ce19adfe53dbd93a7bebcc242bd3de47e.sol
Total states:7265
41.568058
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:00.310367
Transaction Length: 0
Severity: Low
Contract: DOSProxy
Function name: constructor
PC address: 1123
Estimated Gas Usage: 108718 - 549872
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop3/0xcb56383ce19adfe53dbd93a7bebcc242bd3de47e.sol:754

DOSPaymentInterface(addressBridge.getPaymentAddress()).setPaymentMethod(proxyFundsAddr, proxyFundsTokenAddr)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.610004
Transaction Length: 1
Severity: High
Contract: DOSProxy
Function name: triggerCallback(uint256,uint8,bytes,uint256[2])
PC address: 2574
Estimated Gas Usage: 512 - 607
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xcb56383ce19adfe53dbd93a7bebcc242bd3de47e.sol:3



*/



//pragma solidity ^0.5.0;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:19.928148
Transaction Length: 1
Severity: High
Contract: DOSProxy
Function name: query(address,uint256,string,string)
PC address: 3737
Estimated Gas Usage: 511 - 606
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xcb56383ce19adfe53dbd93a7bebcc242bd3de47e.sol:3



*/



//pragma solidity ^0.5.0;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:25.376194
Transaction Length: 1
Severity: High
Contract: DOSProxy
Function name: query(address,uint256,string,string)
PC address: 3822
Estimated Gas Usage: 687 - 782
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xcb56383ce19adfe53dbd93a7bebcc242bd3de47e.sol:3



*/



//pragma solidity ^0.5.0;
p

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:36.186737
Transaction Length: 1
Severity: Medium
Contract: DOSProxy
Function name: registerGroupPubKey(uint256,uint256[4])
PC address: 3935
Estimated Gas Usage: 5383 - 75564
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 22044
Offset: 22255
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop3/0xcb56383ce19adfe53dbd93a7bebcc242bd3de47e.sol:2224

function registerGroupPubKey(uint groupId, uint[4] calldata suggestedPubKey)

        external

        fromValidStakingNode

    {

        PendingGroup storage pgrp = pendingGroups[groupId];

        if (pgrp.groupId == 0) {

            emit LogNoPendingGroup(groupId);

            return;

        }



        require(pgrp.memberList[msg.sender] != address(0), "not-from-authorized-grp-member");



        bytes32 hashedPubKey = keccak256(abi.encodePacked(

            suggestedPubKey[0], suggestedPubKey[1], suggestedPubKey[2], suggestedPubKey[3]));

        pgrp.pubKeyCounts[hashedPubKey]++;

        emit LogPublicKeySuggested(groupId, pgrp.pubKeyCounts[hashedPubKey]);

        if (pgrp.pubKeyCounts[hashedPubKey] > groupSize / 2) {

            address[] memory memberArray = new address[](groupSize);

            uint idx = 0;

            address member = pgrp.memberList[HEAD_A];

            while (member != HEAD_A) {

                memberArray[idx++] = member;

                // Update nodeToGroupIdList[member] with new group id.

                insertToListHead(nodeToGroupIdList[member], groupId);

                member = pgrp.memberList[member];

            }



            workingGroupIds.push(groupId);

            workingGroups[groupId] = Group(

                groupId,

                BN256.G2Point([suggestedPubKey[0], suggestedPubKey[1]], [suggestedPubKey[2], suggestedPubKey[3]]),

                numPendingGroups * lifeDiversity,

                block.number,

                memberArray

            );

            // Update pendingGroupList

            (uint prev, bool removed) = removeIdFromList(pendingGroupList, groupId);

            // Reset pendingGroupTail if necessary.

            if (removed && pendingGroupTail == groupId) {

                pendingGroupTail = prev;

            }

            // Update pendingGroup

            delete pendingGroups[groupId];

            numPendingGroups--;

            emit LogPendingGroupRemoved(groupId);

            emit LogPublicKeyAccepted(groupId, suggestedPubKey, workingGroupIds.length);

        }

    }

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:05.743175
Transaction Length: 1
Severity: Low
Contract: DOSProxy
Function name: workingGroupIds(uint256)
PC address: 13380
Estimated Gas Usage: 790 - 885
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xcb56383ce19adfe53dbd93a7bebcc242bd3de47e.sol:584

uint[] public workingGroupIds

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:16.540016
Transaction Length: 1
Severity: Low
Contract: DOSProxy
Function name: getGroupPubKey(uint256)
PC address: 17393
Estimated Gas Usage: 862 - 3449
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xcb56383ce19adfe53dbd93a7bebcc242bd3de47e.sol:1916

workingGroupIds[idx]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:19.088059
Transaction Length: 1
Severity: Low
Contract: DOSProxy
Function name: expiredWorkingGroupIds(uint256)
PC address: 19254
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xcb56383ce19adfe53dbd93a7bebcc242bd3de47e.sol:586

uint[] public expiredWorkingGroupIds

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xd2abc20b2a7bfdf4c7e126a669d2c43293845c7d.sol
Total states:2918
88.120832
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.390187
Transaction Length: 1
Severity: High
Contract: GuardiansMigrationV1V2
Function name: getGuardiansV2AddressBatch(address[])
PC address: 312
Estimated Gas Usage: 318 - 413
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xd2abc20b2a7bfdf4c7e126a669d2c43293845c7d.sol:5

olidity 0.6.12;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.691698
Transaction Length: 1
Severity: High
Contract: GuardiansMigrationV1V2
Function name: getGuardiansV2AddressBatch(address[])
PC address: 314
Estimated Gas Usage: 318 - 413
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xd2abc20b2a7bfdf4c7e126a669d2c43293845c7d.sol:3

*/

//pragma solidity 0.6.12;
pragma

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x4611295e90392f7d3279a4df906721b7eab774d4.sol
Total states:3102
2.906278
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xa8e44bb386766f597a22fcdc14d82a9c700dfb70.sol
Total states:6543
1428.284453
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.535010
Transaction Length: 1
Severity: Low
Contract: hashelot_dayrings
Function name: stackPlayers(uint256)
PC address: 616
Estimated Gas Usage: 701 - 796
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xa8e44bb386766f597a22fcdc14d82a9c700dfb70.sol:30

address payable [] public stackPlayers

--------------------

==== Dependence on predictable environment variable ====
SWC ID: 120
FOUND TIME: 0:23:43.651316
Transaction Length: 2
Severity: Low
Contract: hashelot_dayrings
Function name: depositStack()
PC address: 1160
Estimated Gas Usage: 3031 - 3737
Sending of Ether depends on a predictable variable.
The contract sends Ether depending on the values of the following variables:
- block.number
- block.number
Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and/or can be manipulated by a malicious miner. Don't use them for random number generation or to make critical decisions.
--------------------
In file: ../../contracts/m_loop/loop3/0xa8e44bb386766f597a22fcdc14d82a9c700dfb70.sol:248

msg.sender.transfer(msg.value)

--------------------

==== Dependence on predictable environment variable ====
SWC ID: 120
FOUND TIME: 0:00:00.754035
Transaction Length: 1
Severity: Low
Contract: hashelot_dayrings
Function name: depositStack()
PC address: 1265
Estimated Gas Usage: 2470 - 2751
Sending of Ether depends on a predictable variable.
The contract sends Ether depending on the values of the following variables:
- block.number
Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and/or can be manipulated by a malicious miner. Don't use them for random number generation or to make critical decisions.
--------------------
In file: ../../contracts/m_loop/loop3/0xa8e44bb386766f597a22fcdc14d82a9c700dfb70.sol:260

msg.sender.transfer(playerChange)

--------------------

==== Dependence on predictable environment variable ====
SWC ID: 120
FOUND TIME: 0:22:43.939514
Transaction Length: 2
Severity: Low
Contract: hashelot_dayrings
Function name: closeBet()
PC address: 2822
Estimated Gas Usage: 6216 - 8336
Sending of Ether depends on a predictable variable.
The contract sends Ether depending on the values of the following variables:
- block.number
- block.number
Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and/or can be manipulated by a malicious miner. Don't use them for random number generation or to make critical decisions.
--------------------
In file: ../../contracts/m_loop/loop3/0xa8e44bb386766f597a22fcdc14d82a9c700dfb70.sol:156

owner.transfer(_ownerShare)

--------------------

==== Dependence on predictable environment variable ====
SWC ID: 120
FOUND TIME: 0:22:50.998620
Transaction Length: 2
Severity: Low
Contract: hashelot_dayrings
Function name: closeBet()
PC address: 2893
Estimated Gas Usage: 7020 - 43326
Sending of Ether depends on a predictable variable.
The contract sends Ether depending on the values of the following variables:
- block.number
- block.number
Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and/or can be manipulated by a malicious miner. Don't use them for random number generation or to make critical decisions.
--------------------
In file: ../../contracts/m_loop/loop3/0xa8e44bb386766f597a22fcdc14d82a9c700dfb70.sol:162

_winnerKey.transfer(_winnerShare)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x041997609e1c5acdfcca62b8a48e285d78d8bad9.sol
Total states:2324
1.780277
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x2fa51d35d6731eb4e0e26229f0180e2d249ea0a5.sol
Total states:822
10.167865
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x88d73c2ad07b026b5cba10c3186c9dd107f171a9.sol
Total states:1880
90.077223
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.300384
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShip(address[])
PC address: 360
Estimated Gas Usage: 342 - 437
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x88d73c2ad07b026b5cba10c3186c9dd107f171a9.sol:5

penzeppelin-solidity/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.740048
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShip(address[])
PC address: 362
Estimated Gas Usage: 342 - 437
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x88d73c2ad07b026b5cba10c3186c9dd107f171a9.sol:3

*/

// File: openzeppelin-solidity/c

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:35.750654
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShipWithHowMany(address[],uint256)
PC address: 776
Estimated Gas Usage: 341 - 436
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x88d73c2ad07b026b5cba10c3186c9dd107f171a9.sol:5

penzeppelin-solidity/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:38.510852
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShipWithHowMany(address[],uint256)
PC address: 778
Estimated Gas Usage: 341 - 436
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x88d73c2ad07b026b5cba10c3186c9dd107f171a9.sol:3

*/

// File: openzeppelin-solidity/c

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:28.574941
Transaction Length: 1
Severity: Low
Contract: BeneficiaryOperations
Function name: allOperations(uint256)
PC address: 1715
Estimated Gas Usage: 701 - 796
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x88d73c2ad07b026b5cba10c3186c9dd107f171a9.sol:386

bytes32[] public allOperations

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:24.807400
Transaction Length: 1
Severity: Low
Contract: BeneficiaryOperations
Function name: beneficiaries(uint256)
PC address: 4636
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x88d73c2ad07b026b5cba10c3186c9dd107f171a9.sol:385

address[] public beneficiaries

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xe892c56c86e3ae682b0aa644cbe87f2aca3bd907.sol
Total states:28391
175.664536
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:42.792605
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3645
Estimated Gas Usage: 1025 - 1500
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xe892c56c86e3ae682b0aa644cbe87f2aca3bd907.sol:52

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:53.518996
Transaction Length: 2
Severity: High
Contract: ERC20Burnable
Function name: increaseAllowance(address,uint256)
PC address: 3818
Estimated Gas Usage: 1025 - 1500
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xe892c56c86e3ae682b0aa644cbe87f2aca3bd907.sol:52

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:29.297305
Transaction Length: 2
Severity: High
Contract: ERC20Pausable
Function name: increaseAllowance(address,uint256)
PC address: 6493
Estimated Gas Usage: 1556 - 2361
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xe892c56c86e3ae682b0aa644cbe87f2aca3bd907.sol:52

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xb7bc7b0a32455f7e7a924f832ca4f0a0ac3b6b88.sol
Total states:2301
2.157229
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.039449
Transaction Length: 0
Severity: High
Contract: ERC20
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xb7bc7b0a32455f7e7a924f832ca4f0a0ac3b6b88.sol:12

ily result
 * in bugs, because programmers 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.041573
Transaction Length: 0
Severity: High
Contract: WarLordToken
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xb7bc7b0a32455f7e7a924f832ca4f0a0ac3b6b88.sol:12

ily result
 * in bugs, because programmers 

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x6ea6dbe9ae0f278bd35d53d8bc2e7a364c7d357d.sol
Total states:1759
5.790204
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xb7df11edd50afbcfcf93d0fa3fc8bf11ea36175a.sol
Total states:35650
161.67096
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.277481
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1004
Estimated Gas Usage: 417 - 512
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xb7df11edd50afbcfcf93d0fa3fc8bf11ea36175a.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.475911
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1006
Estimated Gas Usage: 417 - 512
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xb7df11edd50afbcfcf93d0fa3fc8bf11ea36175a.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.290020
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1089
Estimated Gas Usage: 593 - 688
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xb7df11edd50afbcfcf93d0fa3fc8bf11ea36175a.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:23.123830
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1091
Estimated Gas Usage: 593 - 688
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xb7df11edd50afbcfcf93d0fa3fc8bf11ea36175a.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.716269
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1149
Estimated Gas Usage: 440 - 535
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xb7df11edd50afbcfcf93d0fa3fc8bf11ea36175a.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.587427
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1151
Estimated Gas Usage: 440 - 535
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xb7df11edd50afbcfcf93d0fa3fc8bf11ea36175a.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.370189
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1234
Estimated Gas Usage: 616 - 711
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xb7df11edd50afbcfcf93d0fa3fc8bf11ea36175a.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:22.518365
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1236
Estimated Gas Usage: 616 - 711
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xb7df11edd50afbcfcf93d0fa3fc8bf11ea36175a.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.013234
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeBP(uint256)
PC address: 2585
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xb7df11edd50afbcfcf93d0fa3fc8bf11ea36175a.sol:784

uint[] public bonusRangeBP

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.384164
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3595
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xb7df11edd50afbcfcf93d0fa3fc8bf11ea36175a.sol:1226

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:04.078773
Transaction Length: 2
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3595
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xb7df11edd50afbcfcf93d0fa3fc8bf11ea36175a.sol:1226

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:37.068284
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeStart(uint256)
PC address: 6017
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xb7df11edd50afbcfcf93d0fa3fc8bf11ea36175a.sol:783

uint[] public bonusRangeStart

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:26.049792
Transaction Length: 1
Severity: Low
Contract: LidStaking
Function name: stakeHandlers(uint256)
PC address: 6118
Estimated Gas Usage: 790 - 885
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xb7df11edd50afbcfcf93d0fa3fc8bf11ea36175a.sol:961

IStakeHandler[] public stakeHandlers

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.682941
Transaction Length: 2
Severity: High
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6315
Estimated Gas Usage: 1699 - 2124
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xb7df11edd50afbcfcf93d0fa3fc8bf11ea36175a.sol:1111

stakeHandlers.length-1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:07.817517
Transaction Length: 2
Severity: Low
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6326
Estimated Gas Usage: 1709 - 2134
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xb7df11edd50afbcfcf93d0fa3fc8bf11ea36175a.sol:1111

stakeHandlers[stakeHandlers.length-1]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:33.454518
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: calculateRatePerEth(uint256,uint256,uint256)
PC address: 6866
Estimated Gas Usage: 955 - 1050
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xb7df11edd50afbcfcf93d0fa3fc8bf11ea36175a.sol:162

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.463241
Transaction Length: 1
Severity: High
Contract: LidStaking
Function name: findTaxAmount(uint256,uint256)
PC address: 13348
Estimated Gas Usage: 474 - 569
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xb7df11edd50afbcfcf93d0fa3fc8bf11ea36175a.sol:162

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:34.957635
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPoolBPs(uint256)
PC address: 15440
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xb7df11edd50afbcfcf93d0fa3fc8bf11ea36175a.sol:1227

uint[] public tokenPoolBPs

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xecb5054213ead4c5e2d3f2033b8e8afb41715ba1.sol
Total states:421
0.422475
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xbb2c91c764fc1cf07d5c02671e4eba4d829a957f.sol
Total states:149
2.703806
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xaf29a807c5631770b2a757868a6f0b201de009aa.sol
Total states:1687
1.583663
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xbe1bb41252ddea4781c04aec56f427dc582e9f9b.sol
Total states:2324
1.866552
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xfc04c4b64422af861d771d9bc6b014e38ad1e511.sol
Total states:14119
73.085662
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.947158
Transaction Length: 1
Severity: Low
Contract: InternalModule
Function name: _contractOwners(uint256)
PC address: 550
Estimated Gas Usage: 634 - 729
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xfc04c4b64422af861d771d9bc6b014e38ad1e511.sol:26

address payable[] public _contractOwners = [

        address(0xc99D13544297d5baD9e0b0Ca0E94A4E614312F33)

    ]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.080251
Transaction Length: 1
Severity: High
Contract: RecommendSmallTeam
Function name: Developer_WriteRelation(address,address[],bytes6[],bool)
PC address: 1161
Estimated Gas Usage: 441 - 536
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xfc04c4b64422af861d771d9bc6b014e38ad1e511.sol:9

ma solidity >=0.5.0 <

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.276286
Transaction Length: 1
Severity: High
Contract: RecommendSmallTeam
Function name: Developer_WriteRelation(address,address[],bytes6[],bool)
PC address: 1163
Estimated Gas Usage: 441 - 536
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xfc04c4b64422af861d771d9bc6b014e38ad1e511.sol:3



*/



//pragma solidity >=0.5.0 <0

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.890374
Transaction Length: 1
Severity: Low
Contract: KContract
Function name: _KContractOwners(uint256)
PC address: 1246
Estimated Gas Usage: 723 - 818
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xfc04c4b64422af861d771d9bc6b014e38ad1e511.sol:197

address payable[] public _KContractOwners = [

        address(0xc99D13544297d5baD9e0b0Ca0E94A4E614312F33)

    ]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.059394
Transaction Length: 1
Severity: Low
Contract: KDoctor
Function name: _KContractOwners(uint256)
PC address: 1246
Estimated Gas Usage: 723 - 818
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xfc04c4b64422af861d771d9bc6b014e38ad1e511.sol:197

address payable[] public _KContractOwners = [

        address(0xc99D13544297d5baD9e0b0Ca0E94A4E614312F33)

    ]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.463859
Transaction Length: 1
Severity: Low
Contract: KState
Function name: _KContractOwners(uint256)
PC address: 1246
Estimated Gas Usage: 723 - 818
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xfc04c4b64422af861d771d9bc6b014e38ad1e511.sol:197

address payable[] public _KContractOwners = [

        address(0xc99D13544297d5baD9e0b0Ca0E94A4E614312F33)

    ]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.514178
Transaction Length: 1
Severity: High
Contract: RecommendSmallTeam
Function name: Developer_WriteRelation(address,address[],bytes6[],bool)
PC address: 1246
Estimated Gas Usage: 617 - 712
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xfc04c4b64422af861d771d9bc6b014e38ad1e511.sol:9

ma solidity >=0.5.0 <

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:21.737550
Transaction Length: 1
Severity: High
Contract: RecommendSmallTeam
Function name: Developer_WriteRelation(address,address[],bytes6[],bool)
PC address: 1248
Estimated Gas Usage: 617 - 712
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xfc04c4b64422af861d771d9bc6b014e38ad1e511.sol:3



*/



//pragma solidity >=0.5.0 <0

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.518609
Transaction Length: 1
Severity: Low
Contract: Recommend
Function name: _KContractOwners(uint256)
PC address: 2647
Estimated Gas Usage: 723 - 818
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xfc04c4b64422af861d771d9bc6b014e38ad1e511.sol:197

address payable[] public _KContractOwners = [

        address(0xc99D13544297d5baD9e0b0Ca0E94A4E614312F33)

    ]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:34.191589
Transaction Length: 1
Severity: Low
Contract: RecommendSmallTeam
Function name: _KContractOwners(uint256)
PC address: 7120
Estimated Gas Usage: 767 - 862
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xfc04c4b64422af861d771d9bc6b014e38ad1e511.sol:197

address payable[] public _KContractOwners = [

        address(0xc99D13544297d5baD9e0b0Ca0E94A4E614312F33)

    ]

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x5ddb9fa8d6ec60bba1e8fbc22379f2e7a8e0ff34.sol
Total states:1880
99.977783
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.292490
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShip(address[])
PC address: 360
Estimated Gas Usage: 342 - 437
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x5ddb9fa8d6ec60bba1e8fbc22379f2e7a8e0ff34.sol:5

olidity ^0.5.9;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.688937
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShip(address[])
PC address: 362
Estimated Gas Usage: 342 - 437
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x5ddb9fa8d6ec60bba1e8fbc22379f2e7a8e0ff34.sol:3

*/

//pragma solidity ^0.5.9;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:37.376364
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShipWithHowMany(address[],uint256)
PC address: 776
Estimated Gas Usage: 341 - 436
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x5ddb9fa8d6ec60bba1e8fbc22379f2e7a8e0ff34.sol:5

olidity ^0.5.9;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:40.229379
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShipWithHowMany(address[],uint256)
PC address: 778
Estimated Gas Usage: 341 - 436
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x5ddb9fa8d6ec60bba1e8fbc22379f2e7a8e0ff34.sol:3

*/

//pragma solidity ^0.5.9;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.226397
Transaction Length: 0
Severity: High
Contract: TokenVesting
Function name: constructor
PC address: 937
Estimated Gas Usage: 7924 - 32078
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x5ddb9fa8d6ec60bba1e8fbc22379f2e7a8e0ff34.sol:112

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.177461
Transaction Length: 0
Severity: High
Contract: AkropolisTokenVesting
Function name: constructor
PC address: 1201
Estimated Gas Usage: 7908 - 31969
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x5ddb9fa8d6ec60bba1e8fbc22379f2e7a8e0ff34.sol:112

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:29.164856
Transaction Length: 1
Severity: Low
Contract: BeneficiaryOperations
Function name: allOperations(uint256)
PC address: 1715
Estimated Gas Usage: 701 - 796
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x5ddb9fa8d6ec60bba1e8fbc22379f2e7a8e0ff34.sol:571

bytes32[] public allOperations

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:32.548232
Transaction Length: 1
Severity: Low
Contract: BeneficiaryOperations
Function name: beneficiaries(uint256)
PC address: 4636
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x5ddb9fa8d6ec60bba1e8fbc22379f2e7a8e0ff34.sol:570

address[] public beneficiaries

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x9b935ca1f83ec7876b275a47ddae8603626860d5.sol
Total states:5597
286.893837
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.887147
Transaction Length: 1
Severity: High
Contract: ERC721Holder
Function name: onERC721Received(address,address,uint256,bytes)
PC address: 234
Estimated Gas Usage: 389 - 484
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x9b935ca1f83ec7876b275a47ddae8603626860d5.sol:3

*/

/**
 *Submitted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.068500
Transaction Length: 1
Severity: High
Contract: CJOFighterGateway
Function name: onERC721Received(address,address,uint256,bytes)
PC address: 572
Estimated Gas Usage: 457 - 552
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x9b935ca1f83ec7876b275a47ddae8603626860d5.sol:3

*/

/**
 *Submitted for verificatio

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:01:30.627596
Transaction Length: 1
Severity: Medium
Contract: CJOFighterGateway
Function name: deposit(uint256)
PC address: 1602
Estimated Gas Usage: 6115 - 76865
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 5445
Offset: 5889
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop3/0x9b935ca1f83ec7876b275a47ddae8603626860d5.sol:233

function deposit(uint256 _tokenId) public whenNotPaused() {
        address owner = assetContract.ownerOf(_tokenId);
        require(owner == msg.sender, "msg.sender must be _tokenId owner");
        assetContract.safeTransferFrom(owner, address(this), _tokenId);
        emit Deposit(owner, _tokenId);
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:39.064284
Transaction Length: 1
Severity: High
Contract: CJOFighterGateway
Function name: bulkDeposit(uint256[])
PC address: 1697
Estimated Gas Usage: 384 - 479
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x9b935ca1f83ec7876b275a47ddae8603626860d5.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:42.348042
Transaction Length: 1
Severity: High
Contract: CJOFighterGateway
Function name: bulkDeposit(uint256[])
PC address: 1699
Estimated Gas Usage: 384 - 479
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x9b935ca1f83ec7876b275a47ddae8603626860d5.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:24.252590
Transaction Length: 1
Severity: High
Contract: CJOFighterGateway
Function name: bulkWithdraw(address[],uint256[],uint256[],bytes32[])
PC address: 1899
Estimated Gas Usage: 404 - 499
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x9b935ca1f83ec7876b275a47ddae8603626860d5.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:27.717530
Transaction Length: 1
Severity: High
Contract: CJOFighterGateway
Function name: bulkWithdraw(address[],uint256[],uint256[],bytes32[])
PC address: 1901
Estimated Gas Usage: 404 - 499
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x9b935ca1f83ec7876b275a47ddae8603626860d5.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:32.524185
Transaction Length: 1
Severity: High
Contract: CJOFighterGateway
Function name: bulkWithdraw(address[],uint256[],uint256[],bytes32[])
PC address: 1984
Estimated Gas Usage: 580 - 675
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x9b935ca1f83ec7876b275a47ddae8603626860d5.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:43.258275
Transaction Length: 1
Severity: High
Contract: CJOFighterGateway
Function name: bulkWithdraw(address[],uint256[],uint256[],bytes32[])
PC address: 1986
Estimated Gas Usage: 580 - 675
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x9b935ca1f83ec7876b275a47ddae8603626860d5.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:57.619357
Transaction Length: 1
Severity: High
Contract: CJOFighterGateway
Function name: bulkWithdraw(address[],uint256[],uint256[],bytes32[])
PC address: 2069
Estimated Gas Usage: 756 - 851
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x9b935ca1f83ec7876b275a47ddae8603626860d5.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:15.679547
Transaction Length: 1
Severity: High
Contract: CJOFighterGateway
Function name: bulkWithdraw(address[],uint256[],uint256[],bytes32[])
PC address: 2071
Estimated Gas Usage: 756 - 851
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x9b935ca1f83ec7876b275a47ddae8603626860d5.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:34.712894
Transaction Length: 1
Severity: High
Contract: CJOFighterGateway
Function name: bulkWithdraw(address[],uint256[],uint256[],bytes32[])
PC address: 2154
Estimated Gas Usage: 932 - 1027
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x9b935ca1f83ec7876b275a47ddae8603626860d5.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:05.684214
Transaction Length: 1
Severity: High
Contract: CJOFighterGateway
Function name: bulkWithdraw(address[],uint256[],uint256[],bytes32[])
PC address: 2156
Estimated Gas Usage: 932 - 1027
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x9b935ca1f83ec7876b275a47ddae8603626860d5.sol:3

*/

/**
 *Submitted for verification

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:02:06.110367
Transaction Length: 1
Severity: Low
Contract: CJOFighterGateway
Function name: bulkDeposit(uint256[])
PC address: 5889
Estimated Gas Usage: 4470 - 40683
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop3/0x9b935ca1f83ec7876b275a47ddae8603626860d5.sol:236

assetContract.safeTransferFrom(owner, address(this), _tokenId)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x4690EB613F6CE73f628C00D65c9D710DEE205c91.sol
Total states:426
0.768032
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xf1a6bed23411d709069ddbd55a04700f9493476f.sol
Total states:10013
46.760464
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.516654
Transaction Length: 1
Severity: High
Contract: Liquidity
Function name: totalRewarded()
PC address: 1667
Estimated Gas Usage: 2933 - 37922
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xf1a6bed23411d709069ddbd55a04700f9493476f.sol:5

dity ^0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.430765
Transaction Length: 1
Severity: High
Contract: PoolGetters
Function name: totalRewarded()
PC address: 1667
Estimated Gas Usage: 2933 - 37922
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xf1a6bed23411d709069ddbd55a04700f9493476f.sol:5

dity ^0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.456952
Transaction Length: 1
Severity: High
Contract: PoolSetters
Function name: totalRewarded()
PC address: 1667
Estimated Gas Usage: 2933 - 37922
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xf1a6bed23411d709069ddbd55a04700f9493476f.sol:5

dity ^0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.276546
Transaction Length: 1
Severity: High
Contract: Liquidity
Function name: totalRewarded()
PC address: 1670
Estimated Gas Usage: 2933 - 37922
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xf1a6bed23411d709069ddbd55a04700f9493476f.sol:3



//pragma solidity ^0.5.17;
pragma solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.213625
Transaction Length: 1
Severity: High
Contract: PoolGetters
Function name: totalRewarded()
PC address: 1670
Estimated Gas Usage: 2933 - 37922
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xf1a6bed23411d709069ddbd55a04700f9493476f.sol:3



//pragma solidity ^0.5.17;
pragma solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.238733
Transaction Length: 1
Severity: High
Contract: PoolSetters
Function name: totalRewarded()
PC address: 1670
Estimated Gas Usage: 2933 - 37922
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xf1a6bed23411d709069ddbd55a04700f9493476f.sol:3



//pragma solidity ^0.5.17;
pragma solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.002832
Transaction Length: 1
Severity: High
Contract: Liquidity
Function name: totalRewarded()
PC address: 1682
Estimated Gas Usage: 2933 - 37922
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xf1a6bed23411d709069ddbd55a04700f9493476f.sol:1194

dollar().balanceOf(address(this))

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.909962
Transaction Length: 1
Severity: High
Contract: PoolGetters
Function name: totalRewarded()
PC address: 1682
Estimated Gas Usage: 2933 - 37922
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xf1a6bed23411d709069ddbd55a04700f9493476f.sol:1194

dollar().balanceOf(address(this))

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.936706
Transaction Length: 1
Severity: High
Contract: PoolSetters
Function name: totalRewarded()
PC address: 1682
Estimated Gas Usage: 2933 - 37922
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xf1a6bed23411d709069ddbd55a04700f9493476f.sol:1194

dollar().balanceOf(address(this))

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:03.038286
Transaction Length: 1
Severity: High
Contract: Liquidity
Function name: totalRewarded()
PC address: 2749
Estimated Gas Usage: 2933 - 37922
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xf1a6bed23411d709069ddbd55a04700f9493476f.sol:19

s library instead of th

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:02.951914
Transaction Length: 1
Severity: High
Contract: PoolGetters
Function name: totalRewarded()
PC address: 2749
Estimated Gas Usage: 2933 - 37922
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xf1a6bed23411d709069ddbd55a04700f9493476f.sol:19

s library instead of th

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:02.975788
Transaction Length: 1
Severity: High
Contract: PoolSetters
Function name: totalRewarded()
PC address: 2749
Estimated Gas Usage: 2933 - 37922
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xf1a6bed23411d709069ddbd55a04700f9493476f.sol:19

s library instead of th

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xdec090a12f2e280b089daa225892d9efa8ed0ee8.sol
Total states:77
2.938334
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x24Ad4499218F2eFfD3d9663420e319cb989f3C80.sol
Total states:90
1.55322
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol
Total states:43926
6792.63983
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.165334
Transaction Length: 1
Severity: High
Contract: ClaimIssuer
Function name: isClaimRevoked(bytes)
PC address: 754
Estimated Gas Usage: 408 - 503
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:3



*/



// File: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:48.526599
Transaction Length: 1
Severity: High
Contract: ClaimIssuer
Function name: isClaimValid(address,bytes32,uint256,bytes,bytes)
PC address: 1030
Estimated Gas Usage: 517 - 612
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:3



*/



// File: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.244384
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchSetAddressFrozen(address[],bool[])
PC address: 1082
Estimated Gas Usage: 386 - 481
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:9

e: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.954969
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchSetAddressFrozen(address[],bool[])
PC address: 1084
Estimated Gas Usage: 386 - 481
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:3



*/



// File: @onchain-id/solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.871911
Transaction Length: 1
Severity: High
Contract: ERC734
Function name: execute(address,uint256,bytes)
PC address: 1102
Estimated Gas Usage: 399 - 494
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:3



*/



// File: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:19.516423
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchSetAddressFrozen(address[],bool[])
PC address: 1167
Estimated Gas Usage: 562 - 657
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:9

e: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:51.130467
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchSetAddressFrozen(address[],bool[])
PC address: 1169
Estimated Gas Usage: 562 - 657
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:3



*/



// File: @onchain-id/solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:59.721336
Transaction Length: 1
Severity: High
Contract: ClaimIssuer
Function name: isClaimValid(address,bytes32,uint256,bytes,bytes)
PC address: 1181
Estimated Gas Usage: 859 - 3636
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:3



*/



// File: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.071485
Transaction Length: 1
Severity: High
Contract: Identity
Function name: addClaim(uint256,uint256,address,bytes,bytes,string)
PC address: 1396
Estimated Gas Usage: 450 - 545
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:3



*/



// File: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:14.129820
Transaction Length: 1
Severity: High
Contract: Identity
Function name: addClaim(uint256,uint256,address,bytes,bytes,string)
PC address: 1547
Estimated Gas Usage: 792 - 3569
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:3



*/



// File: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:29.478855
Transaction Length: 1
Severity: High
Contract: ERC734
Function name: getKeyPurposes(bytes32)
PC address: 1601
Estimated Gas Usage: 1442 - 2479
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:423

function getKeyPurposes(bytes32 _key)

    public

    view

    returns(uint256[] memory _purposes)

    {

        return (keys[_key].purposes);

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:43.453646
Transaction Length: 1
Severity: High
Contract: ERC734
Function name: getKeyPurposes(bytes32)
PC address: 1641
Estimated Gas Usage: 1592 - 3005
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:423

function getKeyPurposes(bytes32 _key)

    public

    view

    returns(uint256[] memory _purposes)

    {

        return (keys[_key].purposes);

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:33.153185
Transaction Length: 1
Severity: High
Contract: Identity
Function name: addClaim(uint256,uint256,address,bytes,bytes,string)
PC address: 1698
Estimated Gas Usage: 1134 - 6593
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:3



*/



// File: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:39.358726
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchForcedTransfer(address[],address[],uint256[])
PC address: 1826
Estimated Gas Usage: 452 - 547
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:9

e: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:42.499158
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchForcedTransfer(address[],address[],uint256[])
PC address: 1828
Estimated Gas Usage: 452 - 547
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:3



*/



// File: @onchain-id/solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:48.280923
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchForcedTransfer(address[],address[],uint256[])
PC address: 1911
Estimated Gas Usage: 628 - 723
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:9

e: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:04.025594
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchForcedTransfer(address[],address[],uint256[])
PC address: 1913
Estimated Gas Usage: 628 - 723
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:3



*/



// File: @onchain-id/solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:51.521385
Transaction Length: 1
Severity: High
Contract: Identity
Function name: execute(address,uint256,bytes)
PC address: 1947
Estimated Gas Usage: 421 - 516
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:3



*/



// File: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:36.354872
Transaction Length: 1
Severity: High
Contract: Identity
Function name: execute(address,uint256,bytes)
PC address: 1989
Estimated Gas Usage: 19184 - 83569
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:645

function execute(address _to, uint256 _value, bytes memory _data)

    public

    payable

    returns (uint256 executionId)

    {

        require(!executions[executionNonce].executed, "Already executed");

        executions[executionNonce].to = _to;

        executions[executionNonce].value = _value;

        executions[executionNonce].data = _data;



        emit ExecutionRequested(executionNonce, _to, _value, _data);



        if (keyHasPurpose(keccak256(abi.encode(msg.sender)), 2)) {

            approve(executionNonce, true);

        }



        executionNonce++;

        return executionNonce-1;

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:19.038958
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchForcedTransfer(address[],address[],uint256[])
PC address: 1996
Estimated Gas Usage: 804 - 899
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:9

e: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:46.638991
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchForcedTransfer(address[],address[],uint256[])
PC address: 1998
Estimated Gas Usage: 804 - 899
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:3



*/



// File: @onchain-id/solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:07.712198
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchUnfreezePartialTokens(address[],uint256[])
PC address: 2117
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:9

e: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:10.818723
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchUnfreezePartialTokens(address[],uint256[])
PC address: 2119
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:3



*/



// File: @onchain-id/solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:16.626386
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchUnfreezePartialTokens(address[],uint256[])
PC address: 2202
Estimated Gas Usage: 539 - 634
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:9

e: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:33.108348
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchUnfreezePartialTokens(address[],uint256[])
PC address: 2204
Estimated Gas Usage: 539 - 634
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:3



*/



// File: @onchain-id/solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:47:12.554684
Transaction Length: 1
Severity: High
Contract: Identity
Function name: getClaim(bytes32)
PC address: 2314
Estimated Gas Usage: 5415 - 8771
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:1325

function getClaim(bytes32 _claimId)

    public

    view

    returns(

        uint256 topic,

        uint256 scheme,

        address issuer,

        bytes memory signature,

        bytes memory data,

        string memory uri

    )

    {

        return (

            claims[_claimId].topic,

            claims[_claimId].scheme,

            claims[_claimId].issuer,

            claims[_claimId].signature,

            claims[_claimId].data,

            claims[_claimId].uri

        );

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:18:52.154491
Transaction Length: 1
Severity: High
Contract: Identity
Function name: getClaim(bytes32)
PC address: 2416
Estimated Gas Usage: 5569 - 9301
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:1325

function getClaim(bytes32 _claimId)

    public

    view

    returns(

        uint256 topic,

        uint256 scheme,

        address issuer,

        bytes memory signature,

        bytes memory data,

        string memory uri

    )

    {

        return (

            claims[_claimId].topic,

            claims[_claimId].scheme,

            claims[_claimId].issuer,

            claims[_claimId].signature,

            claims[_claimId].data,

            claims[_claimId].uri

        );

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:13:54.652700
Transaction Length: 1
Severity: High
Contract: Identity
Function name: getClaim(bytes32)
PC address: 2518
Estimated Gas Usage: 5723 - 9831
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:1325

function getClaim(bytes32 _claimId)

    public

    view

    returns(

        uint256 topic,

        uint256 scheme,

        address issuer,

        bytes memory signature,

        bytes memory data,

        string memory uri

    )

    {

        return (

            claims[_claimId].topic,

            claims[_claimId].scheme,

            claims[_claimId].issuer,

            claims[_claimId].signature,

            claims[_claimId].data,

            claims[_claimId].uri

        );

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:04.677110
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchTransfer(address[],uint256[])
PC address: 2673
Estimated Gas Usage: 430 - 525
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:9

e: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:08.688791
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchTransfer(address[],uint256[])
PC address: 2675
Estimated Gas Usage: 430 - 525
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:3



*/



// File: @onchain-id/solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:14.885093
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchTransfer(address[],uint256[])
PC address: 2758
Estimated Gas Usage: 606 - 701
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:9

e: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:35.094360
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchTransfer(address[],uint256[])
PC address: 2760
Estimated Gas Usage: 606 - 701
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:3



*/



// File: @onchain-id/solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.931348
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3044
Estimated Gas Usage: 989 - 1464
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:2017

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:10.455585
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchFreezePartialTokens(address[],uint256[])
PC address: 4219
Estimated Gas Usage: 450 - 545
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:9

e: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:14.190869
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchFreezePartialTokens(address[],uint256[])
PC address: 4221
Estimated Gas Usage: 450 - 545
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:3



*/



// File: @onchain-id/solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:20.779848
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchFreezePartialTokens(address[],uint256[])
PC address: 4304
Estimated Gas Usage: 626 - 721
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:9

e: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:38.546708
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchFreezePartialTokens(address[],uint256[])
PC address: 4306
Estimated Gas Usage: 626 - 721
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:3



*/



// File: @onchain-id/solidit

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:30.399279
Transaction Length: 1
Severity: Low
Contract: TransferManager
Function name: batchSetAddressFrozen(address[],bool[])
PC address: 5155
Estimated Gas Usage: 763 - 858
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:3724

freeze[i]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:03:58.386192
Transaction Length: 2
Severity: Low
Contract: TransferManager
Function name: batchSetAddressFrozen(address[],bool[])
PC address: 5155
Estimated Gas Usage: 763 - 858
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:3724

freeze[i]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:15.684562
Transaction Length: 1
Severity: High
Contract: ClaimIssuer
Function name: isClaimValid(address,bytes32,uint256,bytes,bytes)
PC address: 5311
Estimated Gas Usage: 1375 - 7681
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:1562

abi.encode(_identity, claimTopic, data)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:04:02.620485
Transaction Length: 1
Severity: Low
Contract: TransferManager
Function name: batchUnfreezePartialTokens(address[],uint256[])
PC address: 7908
Estimated Gas Usage: 740 - 835
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:3838

amounts[i]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:04:27.983184
Transaction Length: 2
Severity: Low
Contract: TransferManager
Function name: batchUnfreezePartialTokens(address[],uint256[])
PC address: 7908
Estimated Gas Usage: 740 - 835
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:3838

amounts[i]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:04:03.322933
Transaction Length: 1
Severity: Low
Contract: TransferManager
Function name: claimsNotInNewAddress(uint256)
PC address: 8404
Estimated Gas Usage: 702 - 797
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:3132

bytes32[] public claimsNotInNewAddress

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:04:30.398430
Transaction Length: 2
Severity: Low
Contract: TransferManager
Function name: claimsNotInNewAddress(uint256)
PC address: 8404
Estimated Gas Usage: 702 - 797
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:3132

bytes32[] public claimsNotInNewAddress

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:05:07.069204
Transaction Length: 1
Severity: Low
Contract: TransferManager
Function name: batchTransfer(address[],uint256[])
PC address: 8994
Estimated Gas Usage: 807 - 902
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:3316

_values[i]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:04:52.109420
Transaction Length: 2
Severity: Low
Contract: TransferManager
Function name: batchTransfer(address[],uint256[])
PC address: 8994
Estimated Gas Usage: 807 - 902
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:3316

_values[i]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:04.744278
Transaction Length: 1
Severity: High
Contract: Identity
Function name: execute(address,uint256,bytes)
PC address: 10576
Estimated Gas Usage: 19184 - 83569
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:661

executions[executionNonce].data = _data

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:36.477263
Transaction Length: 1
Severity: High
Contract: Identity
Function name: execute(address,uint256,bytes)
PC address: 12318
Estimated Gas Usage: 14140 - 58525
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:1065

contract Identity is ERC734, IERC735 {



    mapping (bytes32 => Claim) private claims;

    mapping (uint256 => bytes32[]) private claimsByTopic;



    /**

       * @notice Implementation of the addClaim function from the ERC-735 standard

       *  Require that the msg.sender has claim signer key.

       *

       * @param _topic The type of claim

       * @param _scheme The scheme with which this claim SHOULD be verified or how it should be processed.

       * @param _issuer The issuers identity contract address, or the address used to sign the above signature.

       * @param _signature Signature which is the proof that the claim issuer issued a claim of topic for this identity.

       * it MUST be a signed message of the following structure: keccak256(address identityHolder_address, uint256 _ topic, bytes data)

       * or keccak256(abi.encode(identityHolder_address, topic, data))

       * @param _data The hash of the claim data, sitting in another location, a bit-mask, call data, or actual data based on the claim scheme.

       * @param _uri The location of the claim, this can be HTTP links, swarm hashes, IPFS hashes, and such.

       *

       * @return Returns claimRequestId: COULD be send to the approve function, to approve or reject this claim.

       * triggers ClaimAdded event.

       */



    function addClaim(

        uint256 _topic,

        uint256 _scheme,

        address _issuer,

        bytes memory _signature,

        bytes memory _data,

        string memory _uri

    )

    public

    returns (bytes32 claimRequestId)

    {

        bytes32 claimId = keccak256(abi.encode(_issuer, _topic));



        if (msg.sender != address(this)) {

            require(keyHasPurpose(keccak256(abi.encode(msg.sender)), 3), "Permissions: Sender does not have claim signer key");

        }



        if (claims[claimId].issuer != _issuer) {

            claimsByTopic[_topic].push(claimId);

            claims[claimId].topic = _topic;

            claims[claimId].scheme = _scheme;

            claims[claimId].issuer = _issuer;

            claims[claimId].signature = _signature;

            claims[claimId].data = _data;

            claims[claimId].uri = _uri;



            emit ClaimAdded(

                claimId,

                _topic,

                _scheme,

                _issuer,

                _signature,

                _data,

                _uri

            );

        } else {

            claims[claimId].topic = _topic;

            claims[claimId].scheme = _scheme;

            claims[claimId].issuer = _issuer;

            claims[claimId].signature = _signature;

            claims[claimId].data = _data;

            claims[claimId].uri = _uri;



            emit ClaimChanged(

                claimId,

                _topic,

                _scheme,

                _issuer,

                _signature,

                _data,

                _uri

            );

        }



        return claimId;

    }



    /**

       * @notice Implementation of the removeClaim function from the ERC-735 standard

       * Require that the msg.sender has management key.

       * Can only be removed by the claim issuer, or the claim holder itself.

       *

       * @param _claimId The identity of the claim i.e. keccak256(address issuer_address + uint256 topic)

       *

       * @return Returns TRUE when the claim was removed.

       * triggers ClaimRemoved event

       */



    function removeClaim(bytes32 _claimId) public returns (bool success) {

        if (msg.sender != address(this)) {

            require(keyHasPurpose(keccak256(abi.encode(msg.sender)), 1), "Permissions: Sender does not have CLAIM key");

        }



        if (claims[_claimId].topic == 0) {

            revert("NonExisting: There is no claim with this ID");

        }



        uint claimIndex = 0;

        while (claimsByTopic[claims[_claimId].topic][claimIndex] != _claimId) {

            claimIndex++;

        }



        claimsByTopic[claims[_claimId].topic][claimIndex] = claimsByTopic[claims[_claimId].topic][claimsByTopic[claims[_claimId].topic].length - 1];

        claimsByTopic[claims[_claimId].topic].pop();



        emit ClaimRemoved(

            _claimId,

            claims[_claimId].topic,

            claims[_claimId].scheme,

            claims[_claimId].issuer,

            claims[_claimId].signature,

            claims[_claimId].data,

            claims[_claimId].uri

        );



        delete claims[_claimId];



        return true;

    }



    /**

        * @notice Implementation of the getClaim function from the ERC-735 standard.

        *

        * @param _claimId The identity of the claim i.e. keccak256(address issuer_address + uint256 topic)

        *

        * @return Returns all the parameters of the claim for the specified _claimId (topic, scheme, signature, issuer, data, uri) .

        */



    function getClaim(bytes32 _claimId)

    public

    view

    returns(

        uint256 topic,

        uint256 scheme,

        address issuer,

        bytes memory signature,

        bytes memory data,

        string memory uri

    )

    {

        return (

            claims[_claimId].topic,

            claims[_claimId].scheme,

            claims[_claimId].issuer,

            claims[_claimId].signature,

            claims[_claimId].data,

            claims[_claimId].uri

        );

    }



    /**

        * @notice Implementation of the getClaimIdsByTopic function from the ERC-735 standard.

        * used to get all the claims from the specified topic

        *

        * @param _topic The identity of the claim i.e. keccak256(address issuer_address + uint256 topic)

        *

        * @return Returns an array of claim IDs by topic.

        */



    function getClaimIdsByTopic(uint256 _topic)

    public

    view

    returns(bytes32[] memory claimIds)

    {

        return claimsByTopic[_topic];

    }

}

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:10.079334
Transaction Length: 1
Severity: High
Contract: Identity
Function name: execute(address,uint256,bytes)
PC address: 12332
Estimated Gas Usage: 19184 - 83569
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:1065

contract Identity is ERC734, IERC735 {



    mapping (bytes32 => Claim) private claims;

    mapping (uint256 => bytes32[]) private claimsByTopic;



    /**

       * @notice Implementation of the addClaim function from the ERC-735 standard

       *  Require that the msg.sender has claim signer key.

       *

       * @param _topic The type of claim

       * @param _scheme The scheme with which this claim SHOULD be verified or how it should be processed.

       * @param _issuer The issuers identity contract address, or the address used to sign the above signature.

       * @param _signature Signature which is the proof that the claim issuer issued a claim of topic for this identity.

       * it MUST be a signed message of the following structure: keccak256(address identityHolder_address, uint256 _ topic, bytes data)

       * or keccak256(abi.encode(identityHolder_address, topic, data))

       * @param _data The hash of the claim data, sitting in another location, a bit-mask, call data, or actual data based on the claim scheme.

       * @param _uri The location of the claim, this can be HTTP links, swarm hashes, IPFS hashes, and such.

       *

       * @return Returns claimRequestId: COULD be send to the approve function, to approve or reject this claim.

       * triggers ClaimAdded event.

       */



    function addClaim(

        uint256 _topic,

        uint256 _scheme,

        address _issuer,

        bytes memory _signature,

        bytes memory _data,

        string memory _uri

    )

    public

    returns (bytes32 claimRequestId)

    {

        bytes32 claimId = keccak256(abi.encode(_issuer, _topic));



        if (msg.sender != address(this)) {

            require(keyHasPurpose(keccak256(abi.encode(msg.sender)), 3), "Permissions: Sender does not have claim signer key");

        }



        if (claims[claimId].issuer != _issuer) {

            claimsByTopic[_topic].push(claimId);

            claims[claimId].topic = _topic;

            claims[claimId].scheme = _scheme;

            claims[claimId].issuer = _issuer;

            claims[claimId].signature = _signature;

            claims[claimId].data = _data;

            claims[claimId].uri = _uri;



            emit ClaimAdded(

                claimId,

                _topic,

                _scheme,

                _issuer,

                _signature,

                _data,

                _uri

            );

        } else {

            claims[claimId].topic = _topic;

            claims[claimId].scheme = _scheme;

            claims[claimId].issuer = _issuer;

            claims[claimId].signature = _signature;

            claims[claimId].data = _data;

            claims[claimId].uri = _uri;



            emit ClaimChanged(

                claimId,

                _topic,

                _scheme,

                _issuer,

                _signature,

                _data,

                _uri

            );

        }



        return claimId;

    }



    /**

       * @notice Implementation of the removeClaim function from the ERC-735 standard

       * Require that the msg.sender has management key.

       * Can only be removed by the claim issuer, or the claim holder itself.

       *

       * @param _claimId The identity of the claim i.e. keccak256(address issuer_address + uint256 topic)

       *

       * @return Returns TRUE when the claim was removed.

       * triggers ClaimRemoved event

       */



    function removeClaim(bytes32 _claimId) public returns (bool success) {

        if (msg.sender != address(this)) {

            require(keyHasPurpose(keccak256(abi.encode(msg.sender)), 1), "Permissions: Sender does not have CLAIM key");

        }



        if (claims[_claimId].topic == 0) {

            revert("NonExisting: There is no claim with this ID");

        }



        uint claimIndex = 0;

        while (claimsByTopic[claims[_claimId].topic][claimIndex] != _claimId) {

            claimIndex++;

        }



        claimsByTopic[claims[_claimId].topic][claimIndex] = claimsByTopic[claims[_claimId].topic][claimsByTopic[claims[_claimId].topic].length - 1];

        claimsByTopic[claims[_claimId].topic].pop();



        emit ClaimRemoved(

            _claimId,

            claims[_claimId].topic,

            claims[_claimId].scheme,

            claims[_claimId].issuer,

            claims[_claimId].signature,

            claims[_claimId].data,

            claims[_claimId].uri

        );



        delete claims[_claimId];



        return true;

    }



    /**

        * @notice Implementation of the getClaim function from the ERC-735 standard.

        *

        * @param _claimId The identity of the claim i.e. keccak256(address issuer_address + uint256 topic)

        *

        * @return Returns all the parameters of the claim for the specified _claimId (topic, scheme, signature, issuer, data, uri) .

        */



    function getClaim(bytes32 _claimId)

    public

    view

    returns(

        uint256 topic,

        uint256 scheme,

        address issuer,

        bytes memory signature,

        bytes memory data,

        string memory uri

    )

    {

        return (

            claims[_claimId].topic,

            claims[_claimId].scheme,

            claims[_claimId].issuer,

            claims[_claimId].signature,

            claims[_claimId].data,

            claims[_claimId].uri

        );

    }



    /**

        * @notice Implementation of the getClaimIdsByTopic function from the ERC-735 standard.

        * used to get all the claims from the specified topic

        *

        * @param _topic The identity of the claim i.e. keccak256(address issuer_address + uint256 topic)

        *

        * @return Returns an array of claim IDs by topic.

        */



    function getClaimIdsByTopic(uint256 _topic)

    public

    view

    returns(bytes32[] memory claimIds)

    {

        return claimsByTopic[_topic];

    }

}

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:05.610892
Transaction Length: 1
Severity: High
Contract: Identity
Function name: execute(address,uint256,bytes)
PC address: 12349
Estimated Gas Usage: 29324 - 133895
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:1065

contract Identity is ERC734, IERC735 {



    mapping (bytes32 => Claim) private claims;

    mapping (uint256 => bytes32[]) private claimsByTopic;



    /**

       * @notice Implementation of the addClaim function from the ERC-735 standard

       *  Require that the msg.sender has claim signer key.

       *

       * @param _topic The type of claim

       * @param _scheme The scheme with which this claim SHOULD be verified or how it should be processed.

       * @param _issuer The issuers identity contract address, or the address used to sign the above signature.

       * @param _signature Signature which is the proof that the claim issuer issued a claim of topic for this identity.

       * it MUST be a signed message of the following structure: keccak256(address identityHolder_address, uint256 _ topic, bytes data)

       * or keccak256(abi.encode(identityHolder_address, topic, data))

       * @param _data The hash of the claim data, sitting in another location, a bit-mask, call data, or actual data based on the claim scheme.

       * @param _uri The location of the claim, this can be HTTP links, swarm hashes, IPFS hashes, and such.

       *

       * @return Returns claimRequestId: COULD be send to the approve function, to approve or reject this claim.

       * triggers ClaimAdded event.

       */



    function addClaim(

        uint256 _topic,

        uint256 _scheme,

        address _issuer,

        bytes memory _signature,

        bytes memory _data,

        string memory _uri

    )

    public

    returns (bytes32 claimRequestId)

    {

        bytes32 claimId = keccak256(abi.encode(_issuer, _topic));



        if (msg.sender != address(this)) {

            require(keyHasPurpose(keccak256(abi.encode(msg.sender)), 3), "Permissions: Sender does not have claim signer key");

        }



        if (claims[claimId].issuer != _issuer) {

            claimsByTopic[_topic].push(claimId);

            claims[claimId].topic = _topic;

            claims[claimId].scheme = _scheme;

            claims[claimId].issuer = _issuer;

            claims[claimId].signature = _signature;

            claims[claimId].data = _data;

            claims[claimId].uri = _uri;



            emit ClaimAdded(

                claimId,

                _topic,

                _scheme,

                _issuer,

                _signature,

                _data,

                _uri

            );

        } else {

            claims[claimId].topic = _topic;

            claims[claimId].scheme = _scheme;

            claims[claimId].issuer = _issuer;

            claims[claimId].signature = _signature;

            claims[claimId].data = _data;

            claims[claimId].uri = _uri;



            emit ClaimChanged(

                claimId,

                _topic,

                _scheme,

                _issuer,

                _signature,

                _data,

                _uri

            );

        }



        return claimId;

    }



    /**

       * @notice Implementation of the removeClaim function from the ERC-735 standard

       * Require that the msg.sender has management key.

       * Can only be removed by the claim issuer, or the claim holder itself.

       *

       * @param _claimId The identity of the claim i.e. keccak256(address issuer_address + uint256 topic)

       *

       * @return Returns TRUE when the claim was removed.

       * triggers ClaimRemoved event

       */



    function removeClaim(bytes32 _claimId) public returns (bool success) {

        if (msg.sender != address(this)) {

            require(keyHasPurpose(keccak256(abi.encode(msg.sender)), 1), "Permissions: Sender does not have CLAIM key");

        }



        if (claims[_claimId].topic == 0) {

            revert("NonExisting: There is no claim with this ID");

        }



        uint claimIndex = 0;

        while (claimsByTopic[claims[_claimId].topic][claimIndex] != _claimId) {

            claimIndex++;

        }



        claimsByTopic[claims[_claimId].topic][claimIndex] = claimsByTopic[claims[_claimId].topic][claimsByTopic[claims[_claimId].topic].length - 1];

        claimsByTopic[claims[_claimId].topic].pop();



        emit ClaimRemoved(

            _claimId,

            claims[_claimId].topic,

            claims[_claimId].scheme,

            claims[_claimId].issuer,

            claims[_claimId].signature,

            claims[_claimId].data,

            claims[_claimId].uri

        );



        delete claims[_claimId];



        return true;

    }



    /**

        * @notice Implementation of the getClaim function from the ERC-735 standard.

        *

        * @param _claimId The identity of the claim i.e. keccak256(address issuer_address + uint256 topic)

        *

        * @return Returns all the parameters of the claim for the specified _claimId (topic, scheme, signature, issuer, data, uri) .

        */



    function getClaim(bytes32 _claimId)

    public

    view

    returns(

        uint256 topic,

        uint256 scheme,

        address issuer,

        bytes memory signature,

        bytes memory data,

        string memory uri

    )

    {

        return (

            claims[_claimId].topic,

            claims[_claimId].scheme,

            claims[_claimId].issuer,

            claims[_claimId].signature,

            claims[_claimId].data,

            claims[_claimId].uri

        );

    }



    /**

        * @notice Implementation of the getClaimIdsByTopic function from the ERC-735 standard.

        * used to get all the claims from the specified topic

        *

        * @param _topic The identity of the claim i.e. keccak256(address issuer_address + uint256 topic)

        *

        * @return Returns an array of claim IDs by topic.

        */



    function getClaimIdsByTopic(uint256 _topic)

    public

    view

    returns(bytes32[] memory claimIds)

    {

        return claimsByTopic[_topic];

    }

}

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:06:12.838164
Transaction Length: 1
Severity: Low
Contract: TransferManager
Function name: batchFreezePartialTokens(address[],uint256[])
PC address: 16383
Estimated Gas Usage: 827 - 922
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:3782

amounts[i]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:05:16.733161
Transaction Length: 2
Severity: Low
Contract: TransferManager
Function name: batchFreezePartialTokens(address[],uint256[])
PC address: 16383
Estimated Gas Usage: 827 - 922
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:3782

amounts[i]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:16.399956
Transaction Length: 2
Severity: High
Contract: TransferManager
Function name: increaseAllowance(address,uint256)
PC address: 18797
Estimated Gas Usage: 1012 - 1487
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x63c18e21eed171435b42b7e042f4dcf3602dbec5.sol:2017

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x3993f0c72ffd1f02a422a6d1db0740e6dd08e361.sol
Total states:2324
2.180637
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xF258A5DebC0694E7E85f8EBDc628017C3Fad2010.sol
Total states:4368
569.207077
==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.005503
Transaction Length: 0
Severity: Medium
Contract: Governance
Function name: constructor
PC address: 18
Estimated Gas Usage: 42 - 137
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../contracts/m_loop/loop3/0xF258A5DebC0694E7E85f8EBDc628017C3Fad2010.sol:639

tx.origin

--------------------

==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.030886
Transaction Length: 0
Severity: Medium
Contract: LPTokenWrapper
Function name: constructor
PC address: 241
Estimated Gas Usage: 16419 - 77504
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../contracts/m_loop/loop3/0xF258A5DebC0694E7E85f8EBDc628017C3Fad2010.sol:639

tx.origin

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.288564
Transaction Length: 0
Severity: High
Contract: UniswapReward
Function name: constructor
PC address: 516
Estimated Gas Usage: 37837 - 179912
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xF258A5DebC0694E7E85f8EBDc628017C3Fad2010.sol:796

now + 365 days

--------------------

==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.732233
Transaction Length: 0
Severity: Medium
Contract: UniswapReward
Function name: constructor
PC address: 580
Estimated Gas Usage: 78340 - 380745
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../contracts/m_loop/loop3/0xF258A5DebC0694E7E85f8EBDc628017C3Fad2010.sol:639

tx.origin

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.755749
Transaction Length: 1
Severity: High
Contract: LPTokenWrapper
Function name: stake(uint256,string)
PC address: 873
Estimated Gas Usage: 411 - 506
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xF258A5DebC0694E7E85f8EBDc628017C3Fad2010.sol:3

*/

/***
 *    ██████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.586443
Transaction Length: 1
Severity: High
Contract: UniswapReward
Function name: stake(uint256,string)
PC address: 2435
Estimated Gas Usage: 456 - 551
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xF258A5DebC0694E7E85f8EBDc628017C3Fad2010.sol:3

*/

/***
 *    ██████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:46.956259
Transaction Length: 1
Severity: High
Contract: UniswapReward
Function name: seize(address,uint256)
PC address: 13914
Estimated Gas Usage: 2651 - 5713
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xF258A5DebC0694E7E85f8EBDc628017C3Fad2010.sol:544

address(token).call(abi.encodeWithSelector(SELECTOR, to, value))

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:06:40.948171
Transaction Length: 1
Severity: Medium
Contract: UniswapReward
Function name: seize(address,uint256)
PC address: 13931
Estimated Gas Usage: 2976 - 7118
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../contracts/m_loop/loop3/0xF258A5DebC0694E7E85f8EBDc628017C3Fad2010.sol:544

address(token).call(abi.encodeWithSelector(SELECTOR, to, value))

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x8b12b81f7acd205efb32e581075b97fd1c5af476.sol
Total states:840
5.991438
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x27dcc3a6db94eca8850b133fb04ed56477f2e900.sol
Total states:2036
28.587203
==== Delegatecall Proxy ====
SWC ID: 112
FOUND TIME: 0:00:00.003848
Transaction Length: 1
Severity: Low
Contract: Proxy
Function name: fallback
PC address: 54
Estimated Gas Usage: 459 - 2951
The contract implements a delegatecall proxy.
The smart contract forwards the received calldata via delegatecall. Note that callerscan execute arbitrary functions in the callee contract and that the callee contract can access the storage of the calling contract. Make sure that the callee contract is audited properly.DELEGATECALL target: Concat(6_code(Proxy),
       6_code(Proxy),
       6_code(Proxy),
       6_code(Proxy),
       6_code(Proxy),
       6_code(Proxy),
       6_code(Proxy),
       6_code(Proxy),
       6_code(Proxy),
       6_code(Proxy),
       6_code(Proxy),
       6_code(Proxy),
       6_code(Proxy),
       6_code(Proxy),
       6_code(Proxy),
       6_code(Proxy),
       6_code(Proxy),
       6_code(Proxy),
       6_code(Proxy),
       6_code(Proxy),
       6_code(Proxy),
       6_code(Proxy),
       6_code(Proxy),
       6_code(Proxy),
       6_code(Proxy),
       6_code(Proxy),
       6_code(Proxy),
       6_code(Proxy),
       6_code(Proxy),
       6_code(Proxy),
       6_code(Proxy),
       6_code(Proxy))
--------------------
In file: ../../contracts/m_loop/loop3/0x27dcc3a6db94eca8850b133fb04ed56477f2e900.sol:606

delegatecall(gas, contractLogic, ptr, calldatasize, 0, 0)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:16.001552
Transaction Length: 1
Severity: Low
Contract: PaymentHandler
Function name: fallback
PC address: 559
Estimated Gas Usage: 4932 - 75189
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop3/0x27dcc3a6db94eca8850b133fb04ed56477f2e900.sol:567

master.firePaymentReceivedEvent(address(this), msg.sender, msg.value)

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:16.006484
Transaction Length: 1
Severity: Medium
Contract: PaymentHandler
Function name: fallback
PC address: 582
Estimated Gas Usage: 5665 - 109922
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 239
Offset: 1157
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop3/0x27dcc3a6db94eca8850b133fb04ed56477f2e900.sol:531

contract PaymentHandler {
	using SafeERC20 for IERC20;

	// a boolean to track whether a Proxied instance of this contract has been initialized
	bool public initialized = false;

	// Keep track of the parent master contract - cannot be changed once set
	PaymentMaster public master;

	/**
	 * General constructor called by the master
	 */
	function initialize(PaymentMaster _master) public {
		require(initialized == false, 'Contract is already initialized');
		initialized = true;
		master = _master;
	}

	/**
	 * Helper function to return the parent master's address
	 */
	function getMasterAddress() public view returns (address) {
		return address(master);
	}

	/**
	 * Default payable function - forwards to the owner and triggers event
	 */
	function() external payable {
		// Get the parent master's owner address - explicity convert to payable
		address payable ownerAddress = address(uint160(master.owner()));

		// Forward the funds to the owner
		Address.sendValue(ownerAddress, msg.value);

		// Trigger the event notification in the parent master
		master.firePaymentReceivedEvent(address(this), msg.sender, msg.value);
	}

	/**
	 * Sweep any tokens to the owner of the master
	 */
	function sweepTokens(IERC20 token) public {
		// Get the owner address
		address ownerAddress = master.owner();

		// Get the current balance
		uint balance = token.balanceOf(address(this));

		// Transfer to the owner
		token.safeTransfer(ownerAddress, balance);
	}

}

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:00.176783
Transaction Length: 1
Severity: Low
Contract: PaymentHandler
Function name: fallback
PC address: 1157
Estimated Gas Usage: 2622 - 37700
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop3/0x27dcc3a6db94eca8850b133fb04ed56477f2e900.sol:432

recipient.call.value(amount)("")

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:00:11.229151
Transaction Length: 1
Severity: Medium
Contract: PaymentHandler
Function name: fallback
PC address: 1157
Estimated Gas Usage: 2743 - 37821
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../contracts/m_loop/loop3/0x27dcc3a6db94eca8850b133fb04ed56477f2e900.sol:432

recipient.call.value(amount)("")

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xec62480b06268ef472d54af722ac1565bdf5e1b1.sol
Total states:360
0.401554
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.100156
Transaction Length: 0
Severity: High
Contract: RicardianLLC
Function name: constructor
PC address: 268
Estimated Gas Usage: 11863 - 55954
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xec62480b06268ef472d54af722ac1565bdf5e1b1.sol:7

═══╝██╔══██╗██

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x57805e5a227937bac2b0fdacaa30413ddac6b8e1.sol
Total states:951
25.760927
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x0228e1074bd0d089719e69f7c3bf0a97b6ab0c05.sol
Total states:138
294.250864
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.695445
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: convertOddToCvpAndSendToPayout(address[])
PC address: 663
Estimated Gas Usage: 386 - 481
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x0228e1074bd0d089719e69f7c3bf0a97b6ab0c05.sol:6

/powerpool.finance/



--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.564776
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: convertOddToCvpAndSendToPayout(address[])
PC address: 665
Estimated Gas Usage: 386 - 481
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x0228e1074bd0d089719e69f7c3bf0a97b6ab0c05.sol:3

*/

/*
https://powerpool.finance/

 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:58.896805
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: setTokensSettings(address[],address[],bool[])
PC address: 1266
Estimated Gas Usage: 385 - 480
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x0228e1074bd0d089719e69f7c3bf0a97b6ab0c05.sol:6

/powerpool.finance/



--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:01.849336
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: setTokensSettings(address[],address[],bool[])
PC address: 1268
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x0228e1074bd0d089719e69f7c3bf0a97b6ab0c05.sol:3

*/

/*
https://powerpool.finance/

 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:07.033697
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: setTokensSettings(address[],address[],bool[])
PC address: 1351
Estimated Gas Usage: 561 - 656
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x0228e1074bd0d089719e69f7c3bf0a97b6ab0c05.sol:6

/powerpool.finance/



--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:23.367157
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: setTokensSettings(address[],address[],bool[])
PC address: 1353
Estimated Gas Usage: 561 - 656
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x0228e1074bd0d089719e69f7c3bf0a97b6ab0c05.sol:3

*/

/*
https://powerpool.finance/

 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:37.902544
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: setTokensSettings(address[],address[],bool[])
PC address: 1436
Estimated Gas Usage: 737 - 832
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x0228e1074bd0d089719e69f7c3bf0a97b6ab0c05.sol:6

/powerpool.finance/



--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:01.682955
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: setTokensSettings(address[],address[],bool[])
PC address: 1438
Estimated Gas Usage: 737 - 832
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x0228e1074bd0d089719e69f7c3bf0a97b6ab0c05.sol:3

*/

/*
https://powerpool.finance/

 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:28.824929
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: swapEthToPiptByInputs(uint256[],uint256[],uint256)
PC address: 1600
Estimated Gas Usage: 405 - 500
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x0228e1074bd0d089719e69f7c3bf0a97b6ab0c05.sol:6

/powerpool.finance/



--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:33.088261
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: swapEthToPiptByInputs(uint256[],uint256[],uint256)
PC address: 1602
Estimated Gas Usage: 405 - 500
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x0228e1074bd0d089719e69f7c3bf0a97b6ab0c05.sol:3

*/

/*
https://powerpool.finance/

 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:44.694262
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: swapEthToPiptByInputs(uint256[],uint256[],uint256)
PC address: 1748
Estimated Gas Usage: 738 - 3515
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x0228e1074bd0d089719e69f7c3bf0a97b6ab0c05.sol:6

/powerpool.finance/



--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:55.653087
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: swapEthToPiptByInputs(uint256[],uint256[],uint256)
PC address: 1750
Estimated Gas Usage: 738 - 3515
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x0228e1074bd0d089719e69f7c3bf0a97b6ab0c05.sol:3

*/

/*
https://powerpool.finance/

 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:28.020021
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: getEthAndTokensIn(uint256,address[],uint256)
PC address: 2011
Estimated Gas Usage: 368 - 463
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x0228e1074bd0d089719e69f7c3bf0a97b6ab0c05.sol:6

/powerpool.finance/



--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:33.361469
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: getEthAndTokensIn(uint256,address[],uint256)
PC address: 2013
Estimated Gas Usage: 368 - 463
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x0228e1074bd0d089719e69f7c3bf0a97b6ab0c05.sol:3

*/

/*
https://powerpool.finance/

 

--------------------

==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:14.893866
Transaction Length: 1
Severity: Medium
Contract: EthPiptSwap
Function name: convertOddToCvpAndSendToPayout(address[])
PC address: 3691
Estimated Gas Usage: 596 - 3373
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../contracts/m_loop/loop3/0x0228e1074bd0d089719e69f7c3bf0a97b6ab0c05.sol:831

tx.origin

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:25.378831
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: swapEthToPipt(uint256)
PC address: 13565
Estimated Gas Usage: 3123 - 38395
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x0228e1074bd0d089719e69f7c3bf0a97b6ab0c05.sol:6

werpool.finance

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.961409
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: getAmountOut(uint256,uint256,uint256)
PC address: 18458
Estimated Gas Usage: 522 - 617
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x0228e1074bd0d089719e69f7c3bf0a97b6ab0c05.sol:289

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xd814e02e779a216c5abaa5789e624cc017fb0876.sol
Total states:2301
2.214144
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.056209
Transaction Length: 0
Severity: High
Contract: ERC20
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xd814e02e779a216c5abaa5789e624cc017fb0876.sol:22

al functions; to access them see `ERC20Deta

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.041686
Transaction Length: 0
Severity: High
Contract: TulipToken
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xd814e02e779a216c5abaa5789e624cc017fb0876.sol:22

al functions; to access them see `ERC20Deta

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xb70de327e77a8e7f873157fcf1c7d8d20e409db9.sol
Total states:3610
80.148128
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.960443
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: initialize(uint256,uint256,address[],uint256[],address)
PC address: 787
Estimated Gas Usage: 461 - 556
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xb70de327e77a8e7f873157fcf1c7d8d20e409db9.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.639073
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: initialize(uint256,uint256,address[],uint256[],address)
PC address: 789
Estimated Gas Usage: 461 - 556
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xb70de327e77a8e7f873157fcf1c7d8d20e409db9.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.847201
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: initialize(uint256,uint256,address[],uint256[],address)
PC address: 872
Estimated Gas Usage: 637 - 732
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xb70de327e77a8e7f873157fcf1c7d8d20e409db9.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:23.423972
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: initialize(uint256,uint256,address[],uint256[],address)
PC address: 874
Estimated Gas Usage: 637 - 732
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xb70de327e77a8e7f873157fcf1c7d8d20e409db9.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:32.339390
Transaction Length: 1
Severity: Medium
Contract: LidTeamLock
Function name: startRelease()
PC address: 1025
Estimated Gas Usage: 20818 - 150697
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 4521
Offset: 4885
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop3/0xb70de327e77a8e7f873157fcf1c7d8d20e409db9.sol:694

function startRelease() external {

        require(releaseStart == 0, "Has already started.");

        require(address(this).balance != 0, "Must have some ether deposited.");

        require(lidToken.balanceOf(address(this)) != 0, "Must have some lid deposited.");

        startingLid = lidToken.balanceOf(address(this));

        startingEth = address(this).balance;

        releaseStart = now.add(24 hours);

    }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:00.664235
Transaction Length: 2
Severity: Medium
Contract: LidTeamLock
Function name: startRelease()
PC address: 1025
Estimated Gas Usage: 20818 - 150697
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 4521
Offset: 4885
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop3/0xb70de327e77a8e7f873157fcf1c7d8d20e409db9.sol:694

function startRelease() external {

        require(releaseStart == 0, "Has already started.");

        require(address(this).balance != 0, "Must have some ether deposited.");

        require(lidToken.balanceOf(address(this)) != 0, "Must have some lid deposited.");

        startingLid = lidToken.balanceOf(address(this));

        startingEth = address(this).balance;

        releaseStart = now.add(24 hours);

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:33.507229
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 1163
Estimated Gas Usage: 407 - 502
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xb70de327e77a8e7f873157fcf1c7d8d20e409db9.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:36.371776
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 1165
Estimated Gas Usage: 407 - 502
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xb70de327e77a8e7f873157fcf1c7d8d20e409db9.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:41.856211
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 1248
Estimated Gas Usage: 583 - 678
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xb70de327e77a8e7f873157fcf1c7d8d20e409db9.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:56.094560
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 1250
Estimated Gas Usage: 583 - 678
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xb70de327e77a8e7f873157fcf1c7d8d20e409db9.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.777032
Transaction Length: 1
Severity: Low
Contract: LidTeamLock
Function name: teamMemberBPs(uint256)
PC address: 1624
Estimated Gas Usage: 679 - 774
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xb70de327e77a8e7f873157fcf1c7d8d20e409db9.sol:572

uint[] public teamMemberBPs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:16.535896
Transaction Length: 1
Severity: Low
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 5028
Estimated Gas Usage: 1070 - 1165
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xb70de327e77a8e7f873157fcf1c7d8d20e409db9.sol:720

teamMemberAddresses[0]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:16.996678
Transaction Length: 1
Severity: Low
Contract: LidTeamLock
Function name: teamMemberAddresses(uint256)
PC address: 5599
Estimated Gas Usage: 678 - 773
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xb70de327e77a8e7f873157fcf1c7d8d20e409db9.sol:570

address payable[] public teamMemberAddresses

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:31.352328
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: startRelease()
PC address: 6647
Estimated Gas Usage: 15758 - 125637
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xb70de327e77a8e7f873157fcf1c7d8d20e409db9.sol:186

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xbc1541c45d5ee6b9b2f1aa04f92195040c3e5b21.sol
Total states:92
1.06887
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x460a0f98f9a1eb9107550b1877204cc41ea6f149.sol
Total states:272
33.715097
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.049554
Transaction Length: 0
Severity: High
Contract: Staking
Function name: constructor
PC address: 205
Estimated Gas Usage: 16034 - 76459
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x460a0f98f9a1eb9107550b1877204cc41ea6f149.sol:54

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.768033
Transaction Length: 0
Severity: Low
Contract: Staking
Function name: constructor
PC address: 219
Estimated Gas Usage: 16044 - 76469
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x460a0f98f9a1eb9107550b1877204cc41ea6f149.sol:55

assert(c >= a)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xa605e1e5627cd55f31c10623e3b1697bcfef07622.sol
Total states:3572
4.518568
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.249488
Transaction Length: 0
Severity: High
Contract: TokenStake
Function name: constructor
PC address: 195
Estimated Gas Usage: 27403 - 131259
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xa605e1e5627cd55f31c10623e3b1697bcfef07622.sol:100

aprPercentage * thousand

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.984864
Transaction Length: 1
Severity: Low
Contract: TokenStake
Function name: claimStake(uint256)
PC address: 3101
Estimated Gas Usage: 1427 - 2042
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xa605e1e5627cd55f31c10623e3b1697bcfef07622.sol:168

_staker[account][id]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.730413
Transaction Length: 1
Severity: Low
Contract: TokenStake
Function name: _activeAddress(uint256)
PC address: 5732
Estimated Gas Usage: 893 - 988
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xa605e1e5627cd55f31c10623e3b1697bcfef07622.sol:87

address [] public _activeAddress

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:02.335641
Transaction Length: 1
Severity: Low
Contract: TokenStake
Function name: unlockStake(uint256)
PC address: 6835
Estimated Gas Usage: 1448 - 2063
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xa605e1e5627cd55f31c10623e3b1697bcfef07622.sol:151

_staker[msg.sender][stakeId]

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xd1e3dbd2476d374f97b93ad7f686eacbebd8f56d.sol
Total states:5597
273.292495
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.943817
Transaction Length: 1
Severity: High
Contract: ERC721Holder
Function name: onERC721Received(address,address,uint256,bytes)
PC address: 234
Estimated Gas Usage: 389 - 484
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xd1e3dbd2476d374f97b93ad7f686eacbebd8f56d.sol:3

*/

// File: contracts/roles/Roles.

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.035069
Transaction Length: 1
Severity: High
Contract: SPLCardGateway
Function name: onERC721Received(address,address,uint256,bytes)
PC address: 572
Estimated Gas Usage: 457 - 552
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xd1e3dbd2476d374f97b93ad7f686eacbebd8f56d.sol:3

*/

// File: contracts/roles/Roles.

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:01:26.029118
Transaction Length: 1
Severity: Medium
Contract: SPLCardGateway
Function name: deposit(uint256)
PC address: 1602
Estimated Gas Usage: 6114 - 76864
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 5456
Offset: 5900
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop3/0xd1e3dbd2476d374f97b93ad7f686eacbebd8f56d.sol:279

function deposit(uint256 _tokenId) public whenNotPaused() {
        address owner = assetContract.ownerOf(_tokenId);
        require(owner == msg.sender, "msg.sender must be _tokenId owner");
        assetContract.safeTransferFrom(msg.sender, address(this), _tokenId);
        emit Deposit(owner, _tokenId);
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:34.500867
Transaction Length: 1
Severity: High
Contract: SPLCardGateway
Function name: bulkDeposit(uint256[])
PC address: 1697
Estimated Gas Usage: 384 - 479
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xd1e3dbd2476d374f97b93ad7f686eacbebd8f56d.sol:5

ontracts/roles/Roles.

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:38.000050
Transaction Length: 1
Severity: High
Contract: SPLCardGateway
Function name: bulkDeposit(uint256[])
PC address: 1699
Estimated Gas Usage: 384 - 479
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xd1e3dbd2476d374f97b93ad7f686eacbebd8f56d.sol:3

*/

// File: contracts/roles/Roles.s

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:18.704588
Transaction Length: 1
Severity: High
Contract: SPLCardGateway
Function name: bulkWithdraw(address[],uint256[],uint256[],bytes32[])
PC address: 1899
Estimated Gas Usage: 404 - 499
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xd1e3dbd2476d374f97b93ad7f686eacbebd8f56d.sol:5

ontracts/roles/Roles.

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:22.317274
Transaction Length: 1
Severity: High
Contract: SPLCardGateway
Function name: bulkWithdraw(address[],uint256[],uint256[],bytes32[])
PC address: 1901
Estimated Gas Usage: 404 - 499
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xd1e3dbd2476d374f97b93ad7f686eacbebd8f56d.sol:3

*/

// File: contracts/roles/Roles.s

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:27.160614
Transaction Length: 1
Severity: High
Contract: SPLCardGateway
Function name: bulkWithdraw(address[],uint256[],uint256[],bytes32[])
PC address: 1984
Estimated Gas Usage: 580 - 675
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xd1e3dbd2476d374f97b93ad7f686eacbebd8f56d.sol:5

ontracts/roles/Roles.

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:36.668238
Transaction Length: 1
Severity: High
Contract: SPLCardGateway
Function name: bulkWithdraw(address[],uint256[],uint256[],bytes32[])
PC address: 1986
Estimated Gas Usage: 580 - 675
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xd1e3dbd2476d374f97b93ad7f686eacbebd8f56d.sol:3

*/

// File: contracts/roles/Roles.s

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:48.698213
Transaction Length: 1
Severity: High
Contract: SPLCardGateway
Function name: bulkWithdraw(address[],uint256[],uint256[],bytes32[])
PC address: 2069
Estimated Gas Usage: 756 - 851
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xd1e3dbd2476d374f97b93ad7f686eacbebd8f56d.sol:5

ontracts/roles/Roles.

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:07.756592
Transaction Length: 1
Severity: High
Contract: SPLCardGateway
Function name: bulkWithdraw(address[],uint256[],uint256[],bytes32[])
PC address: 2071
Estimated Gas Usage: 756 - 851
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xd1e3dbd2476d374f97b93ad7f686eacbebd8f56d.sol:3

*/

// File: contracts/roles/Roles.s

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:27.166184
Transaction Length: 1
Severity: High
Contract: SPLCardGateway
Function name: bulkWithdraw(address[],uint256[],uint256[],bytes32[])
PC address: 2154
Estimated Gas Usage: 932 - 1027
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xd1e3dbd2476d374f97b93ad7f686eacbebd8f56d.sol:5

ontracts/roles/Roles.

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:53.231976
Transaction Length: 1
Severity: High
Contract: SPLCardGateway
Function name: bulkWithdraw(address[],uint256[],uint256[],bytes32[])
PC address: 2156
Estimated Gas Usage: 932 - 1027
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xd1e3dbd2476d374f97b93ad7f686eacbebd8f56d.sol:3

*/

// File: contracts/roles/Roles.s

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:02:02.641436
Transaction Length: 1
Severity: Low
Contract: SPLCardGateway
Function name: bulkDeposit(uint256[])
PC address: 5900
Estimated Gas Usage: 4469 - 40682
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop3/0xd1e3dbd2476d374f97b93ad7f686eacbebd8f56d.sol:282

assetContract.safeTransferFrom(msg.sender, address(this), _tokenId)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x1770129cd23C680C1c52C8D3a9c3D527B73CE1de.sol
Total states:3409
250.40119
==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:30.517103
Transaction Length: 1
Severity: High
Contract: Math
Function name: safeSub(uint256,uint256)
PC address: 820
Estimated Gas Usage: 309 - 404
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x1770129cd23C680C1c52C8D3a9c3D527B73CE1de.sol:109

x - y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:30.339559
Transaction Length: 1
Severity: High
Contract: Memberlist
Function name: updateMembers(address[],uint256)
PC address: 827
Estimated Gas Usage: 407 - 502
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x1770129cd23C680C1c52C8D3a9c3D527B73CE1de.sol:5

d using https://dapp.

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:33.196682
Transaction Length: 1
Severity: High
Contract: Memberlist
Function name: updateMembers(address[],uint256)
PC address: 829
Estimated Gas Usage: 407 - 502
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x1770129cd23C680C1c52C8D3a9c3D527B73CE1de.sol:3

*/

// Verified using https://dapp.t

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:32.503638
Transaction Length: 1
Severity: Low
Contract: Math
Function name: safeDiv(uint256,uint256)
PC address: 959
Estimated Gas Usage: 324 - 419
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x1770129cd23C680C1c52C8D3a9c3D527B73CE1de.sol:117

x / y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.100797
Transaction Length: 1
Severity: High
Contract: Math
Function name: rdiv(uint256,uint256)
PC address: 985
Estimated Gas Usage: 382 - 477
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x1770129cd23C680C1c52C8D3a9c3D527B73CE1de.sol:113

x * y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:19.982565
Transaction Length: 1
Severity: High
Contract: Math
Function name: rdiv(uint256,uint256)
PC address: 1128
Estimated Gas Usage: 496 - 591
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x1770129cd23C680C1c52C8D3a9c3D527B73CE1de.sol:105

x + y

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:39.985632
Transaction Length: 1
Severity: High
Contract: Memberlist
Function name: safeSub(uint256,uint256)
PC address: 2809
Estimated Gas Usage: 332 - 427
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x1770129cd23C680C1c52C8D3a9c3D527B73CE1de.sol:109

x - y

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:53.458383
Transaction Length: 1
Severity: Low
Contract: Memberlist
Function name: safeDiv(uint256,uint256)
PC address: 2948
Estimated Gas Usage: 347 - 442
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x1770129cd23C680C1c52C8D3a9c3D527B73CE1de.sol:117

x / y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.157656
Transaction Length: 1
Severity: High
Contract: Memberlist
Function name: rdiv(uint256,uint256)
PC address: 2998
Estimated Gas Usage: 450 - 545
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x1770129cd23C680C1c52C8D3a9c3D527B73CE1de.sol:113

x * y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.730972
Transaction Length: 1
Severity: High
Contract: Memberlist
Function name: rdiv(uint256,uint256)
PC address: 3141
Estimated Gas Usage: 564 - 659
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x1770129cd23C680C1c52C8D3a9c3D527B73CE1de.sol:105

x + y

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x0935a2cefdb728c13049498a4ea75fea7537b78b.sol
Total states:5283
10.635925
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.039629
Transaction Length: 0
Severity: High
Contract: ERC20
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x0935a2cefdb728c13049498a4ea75fea7537b78b.sol:19

//

// Provide liquidity to the LIQLO-ETH o

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x642bF34F2aeC4c28a8273C8f032c1b0a21EceDcf.sol
Total states:976
24.86744
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.722757
Transaction Length: 1
Severity: High
Contract: UniswapV2
Function name: allPairsLength()
PC address: 398
Estimated Gas Usage: 2192 - 37086
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x642bF34F2aeC4c28a8273C8f032c1b0a21EceDcf.sol:5

racts/lib/IERC2

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.366304
Transaction Length: 1
Severity: High
Contract: UniswapV2
Function name: allPairsLength()
PC address: 401
Estimated Gas Usage: 2192 - 37086
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x642bF34F2aeC4c28a8273C8f032c1b0a21EceDcf.sol:3



// File: contracts/lib/IERC20.sol

//prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.170722
Transaction Length: 1
Severity: High
Contract: UniswapV2
Function name: allPairsLength()
PC address: 413
Estimated Gas Usage: 2192 - 37086
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x642bF34F2aeC4c28a8273C8f032c1b0a21EceDcf.sol:154

factory.allPairsLength()

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:06.671531
Transaction Length: 1
Severity: High
Contract: UniswapV2
Function name: getPairs(uint256,uint256)
PC address: 2557
Estimated Gas Usage: 560 - 938
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x642bF34F2aeC4c28a8273C8f032c1b0a21EceDcf.sol:158

toIndex - fromIndex

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:02.280967
Transaction Length: 1
Severity: High
Contract: UniswapV2
Function name: allPairsLength()
PC address: 3659
Estimated Gas Usage: 2192 - 37086
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x642bF34F2aeC4c28a8273C8f032c1b0a21EceDcf.sol:44

e number of decimals us

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x8ad16ed35b1cfc6072af325005213fe8c29c7477.sol
Total states:35050
171.156094
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.107060
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1004
Estimated Gas Usage: 417 - 512
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x8ad16ed35b1cfc6072af325005213fe8c29c7477.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.199662
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1006
Estimated Gas Usage: 417 - 512
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x8ad16ed35b1cfc6072af325005213fe8c29c7477.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.076326
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1089
Estimated Gas Usage: 593 - 688
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x8ad16ed35b1cfc6072af325005213fe8c29c7477.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:26.484475
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1091
Estimated Gas Usage: 593 - 688
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x8ad16ed35b1cfc6072af325005213fe8c29c7477.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.937452
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1250
Estimated Gas Usage: 462 - 557
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x8ad16ed35b1cfc6072af325005213fe8c29c7477.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.847903
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1252
Estimated Gas Usage: 462 - 557
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x8ad16ed35b1cfc6072af325005213fe8c29c7477.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.037435
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1335
Estimated Gas Usage: 638 - 733
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x8ad16ed35b1cfc6072af325005213fe8c29c7477.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:19.007298
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1337
Estimated Gas Usage: 638 - 733
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x8ad16ed35b1cfc6072af325005213fe8c29c7477.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.845502
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeBP(uint256)
PC address: 2585
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x8ad16ed35b1cfc6072af325005213fe8c29c7477.sol:784

uint[] public bonusRangeBP

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.404271
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3621
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x8ad16ed35b1cfc6072af325005213fe8c29c7477.sol:1226

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:03.991987
Transaction Length: 2
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3621
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x8ad16ed35b1cfc6072af325005213fe8c29c7477.sol:1226

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:41.361075
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeStart(uint256)
PC address: 6017
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x8ad16ed35b1cfc6072af325005213fe8c29c7477.sol:783

uint[] public bonusRangeStart

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:33.686500
Transaction Length: 1
Severity: Low
Contract: LidStaking
Function name: stakeHandlers(uint256)
PC address: 6118
Estimated Gas Usage: 790 - 885
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x8ad16ed35b1cfc6072af325005213fe8c29c7477.sol:961

IStakeHandler[] public stakeHandlers

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.763670
Transaction Length: 2
Severity: High
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6315
Estimated Gas Usage: 1699 - 2124
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x8ad16ed35b1cfc6072af325005213fe8c29c7477.sol:1111

stakeHandlers.length-1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:08.173390
Transaction Length: 2
Severity: Low
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6326
Estimated Gas Usage: 1709 - 2134
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x8ad16ed35b1cfc6072af325005213fe8c29c7477.sol:1111

stakeHandlers[stakeHandlers.length-1]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:37.136725
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: calculateRatePerEth(uint256,uint256,uint256)
PC address: 6866
Estimated Gas Usage: 955 - 1050
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x8ad16ed35b1cfc6072af325005213fe8c29c7477.sol:162

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.481291
Transaction Length: 1
Severity: High
Contract: LidStaking
Function name: findTaxAmount(uint256,uint256)
PC address: 13348
Estimated Gas Usage: 474 - 569
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x8ad16ed35b1cfc6072af325005213fe8c29c7477.sol:162

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:31.133965
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPoolBPs(uint256)
PC address: 15373
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x8ad16ed35b1cfc6072af325005213fe8c29c7477.sol:1227

uint[] public tokenPoolBPs

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x4fe07232cbee71a97178559d5900f311b91ac618.sol
Total states:92
1.123952
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xd9d4962722a4777BC3565e562f01F698bFc0b906.sol
Total states:5978
10828.280723
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.152813
Transaction Length: 0
Severity: High
Contract: Ether5
Function name: constructor
PC address: 287
Estimated Gas Usage: 66753 - 330473
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xd9d4962722a4777BC3565e562f01F698bFc0b906.sol:216

now + poolTime

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x408853127724fbb2686362c516d8ba162063e333.sol
Total states:80555
297.11136
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.030500
Transaction Length: 0
Severity: High
Contract: TokenAccessList
Function name: constructor
PC address: 108
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x408853127724fbb2686362c516d8ba162063e333.sol:16

ping (address => bool) bearer;
    }

    /

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.762115
Transaction Length: 1
Severity: High
Contract: TokenFactory
Function name: createToken(string,string,uint8,string)
PC address: 347
Estimated Gas Usage: 319 - 414
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x408853127724fbb2686362c516d8ba162063e333.sol:3

*/

//pragma solidity ^0.5.8;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.298224
Transaction Length: 1
Severity: High
Contract: TokenAccessList
Function name: disableWalletList(address[])
PC address: 362
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x408853127724fbb2686362c516d8ba162063e333.sol:5

olidity ^0.5.8;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.648335
Transaction Length: 1
Severity: High
Contract: TokenAccessList
Function name: disableWalletList(address[])
PC address: 364
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x408853127724fbb2686362c516d8ba162063e333.sol:3

*/

//pragma solidity ^0.5.8;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.865904
Transaction Length: 1
Severity: High
Contract: TokenFactory
Function name: identifier()
PC address: 435
Estimated Gas Usage: 495 - 590
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x408853127724fbb2686362c516d8ba162063e333.sol:3

*/

//pragma solidity ^0.5.8;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:14.442971
Transaction Length: 1
Severity: High
Contract: TokenFactory
Function name: identifier()
PC address: 536
Estimated Gas Usage: 704 - 799
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x408853127724fbb2686362c516d8ba162063e333.sol:3

*/

//pragma solidity ^0.5.8;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:27.642112
Transaction Length: 1
Severity: High
Contract: TokenFactory
Function name: addAccessList(address,string,uint256,address)
PC address: 877
Estimated Gas Usage: 440 - 535
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x408853127724fbb2686362c516d8ba162063e333.sol:3

*/

//pragma solidity ^0.5.8;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:17.552912
Transaction Length: 1
Severity: High
Contract: TokenAccessList
Function name: enableWalletList(address[])
PC address: 878
Estimated Gas Usage: 362 - 457
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x408853127724fbb2686362c516d8ba162063e333.sol:5

olidity ^0.5.8;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:20.930084
Transaction Length: 1
Severity: High
Contract: TokenAccessList
Function name: enableWalletList(address[])
PC address: 880
Estimated Gas Usage: 362 - 457
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x408853127724fbb2686362c516d8ba162063e333.sol:3

*/

//pragma solidity ^0.5.8;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:31.779586
Transaction Length: 1
Severity: High
Contract: TokenFactory
Function name: createAccessList(string)
PC address: 1158
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x408853127724fbb2686362c516d8ba162063e333.sol:3

*/

//pragma solidity ^0.5.8;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:35.449326
Transaction Length: 1
Severity: High
Contract: TokenFactory
Function name: addToken(string,string,uint8,string,uint256,address,address)
PC address: 1455
Estimated Gas Usage: 362 - 457
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x408853127724fbb2686362c516d8ba162063e333.sol:3

*/

//pragma solidity ^0.5.8;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:38.524159
Transaction Length: 1
Severity: High
Contract: TokenFactory
Function name: addToken(string,string,uint8,string,uint256,address,address)
PC address: 1543
Estimated Gas Usage: 538 - 633
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x408853127724fbb2686362c516d8ba162063e333.sol:3

*/

//pragma solidity ^0.5.8;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:48.209642
Transaction Length: 1
Severity: High
Contract: TokenFactory
Function name: addToken(string,string,uint8,string,uint256,address,address)
PC address: 1644
Estimated Gas Usage: 747 - 842
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x408853127724fbb2686362c516d8ba162063e333.sol:3

*/

//pragma solidity ^0.5.8;
pragm

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:27.862947
Transaction Length: 1
Severity: High
Contract: TokenAccessList
Function name: identifier()
PC address: 2134
Estimated Gas Usage: 1331 - 2178
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x408853127724fbb2686362c516d8ba162063e333.sol:995

string public identifier

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:27.437448
Transaction Length: 1
Severity: High
Contract: TokenAccessList
Function name: identifier()
PC address: 2186
Estimated Gas Usage: 1190 - 1568
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x408853127724fbb2686362c516d8ba162063e333.sol:995

string public identifier

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.351244
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3044
Estimated Gas Usage: 989 - 1464
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x408853127724fbb2686362c516d8ba162063e333.sol:331

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.362472
Transaction Length: 2
Severity: High
Contract: ERC20Mintable
Function name: increaseAllowance(address,uint256)
PC address: 3626
Estimated Gas Usage: 989 - 1464
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x408853127724fbb2686362c516d8ba162063e333.sol:331

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.403151
Transaction Length: 2
Severity: High
Contract: ERC20BurnableAdmin
Function name: increaseAllowance(address,uint256)
PC address: 3881
Estimated Gas Usage: 989 - 1464
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x408853127724fbb2686362c516d8ba162063e333.sol:331

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.098579
Transaction Length: 2
Severity: High
Contract: ERC20Operator
Function name: increaseAllowance(address,uint256)
PC address: 4057
Estimated Gas Usage: 1011 - 1486
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x408853127724fbb2686362c516d8ba162063e333.sol:331

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.694668
Transaction Length: 2
Severity: High
Contract: ERC20CapEnabler
Function name: increaseAllowance(address,uint256)
PC address: 4836
Estimated Gas Usage: 967 - 1442
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x408853127724fbb2686362c516d8ba162063e333.sol:331

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x41456fa30c9f98d6bebbb767e9fffce1ebacf433.sol
Total states:1225
3.040633
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x24f15537229590f33c1bdf6f2fe3d55eed26ca6d.sol
Total states:35615
159.927647
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.095339
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1004
Estimated Gas Usage: 417 - 512
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x24f15537229590f33c1bdf6f2fe3d55eed26ca6d.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.156982
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1006
Estimated Gas Usage: 417 - 512
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x24f15537229590f33c1bdf6f2fe3d55eed26ca6d.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.890358
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1089
Estimated Gas Usage: 593 - 688
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x24f15537229590f33c1bdf6f2fe3d55eed26ca6d.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:25.660100
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1091
Estimated Gas Usage: 593 - 688
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x24f15537229590f33c1bdf6f2fe3d55eed26ca6d.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.788513
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1261
Estimated Gas Usage: 462 - 557
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x24f15537229590f33c1bdf6f2fe3d55eed26ca6d.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.859490
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1263
Estimated Gas Usage: 462 - 557
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x24f15537229590f33c1bdf6f2fe3d55eed26ca6d.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.281112
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1346
Estimated Gas Usage: 638 - 733
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x24f15537229590f33c1bdf6f2fe3d55eed26ca6d.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:19.157039
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1348
Estimated Gas Usage: 638 - 733
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x24f15537229590f33c1bdf6f2fe3d55eed26ca6d.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.774665
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeBP(uint256)
PC address: 2585
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x24f15537229590f33c1bdf6f2fe3d55eed26ca6d.sol:784

uint[] public bonusRangeBP

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.371624
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3707
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x24f15537229590f33c1bdf6f2fe3d55eed26ca6d.sol:1226

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:03.739609
Transaction Length: 2
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3707
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x24f15537229590f33c1bdf6f2fe3d55eed26ca6d.sol:1226

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:39.704424
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeStart(uint256)
PC address: 6017
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x24f15537229590f33c1bdf6f2fe3d55eed26ca6d.sol:783

uint[] public bonusRangeStart

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:26.144844
Transaction Length: 1
Severity: Low
Contract: LidStaking
Function name: stakeHandlers(uint256)
PC address: 6118
Estimated Gas Usage: 790 - 885
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x24f15537229590f33c1bdf6f2fe3d55eed26ca6d.sol:961

IStakeHandler[] public stakeHandlers

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.666502
Transaction Length: 2
Severity: High
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6315
Estimated Gas Usage: 1699 - 2124
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x24f15537229590f33c1bdf6f2fe3d55eed26ca6d.sol:1111

stakeHandlers.length-1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:07.465421
Transaction Length: 2
Severity: Low
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6326
Estimated Gas Usage: 1709 - 2134
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x24f15537229590f33c1bdf6f2fe3d55eed26ca6d.sol:1111

stakeHandlers[stakeHandlers.length-1]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:35.960160
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: calculateRatePerEth(uint256,uint256,uint256)
PC address: 6866
Estimated Gas Usage: 955 - 1050
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x24f15537229590f33c1bdf6f2fe3d55eed26ca6d.sol:162

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.330266
Transaction Length: 1
Severity: High
Contract: LidStaking
Function name: findTaxAmount(uint256,uint256)
PC address: 13348
Estimated Gas Usage: 474 - 569
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x24f15537229590f33c1bdf6f2fe3d55eed26ca6d.sol:162

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:30.696387
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPoolBPs(uint256)
PC address: 15577
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x24f15537229590f33c1bdf6f2fe3d55eed26ca6d.sol:1227

uint[] public tokenPoolBPs

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xdd6a801e7b0f30bcae4bb4f490bcf9784a6f9690.sol
Total states:24218
66.780118
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.892793
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3244
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xdd6a801e7b0f30bcae4bb4f490bcf9784a6f9690.sol:121

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.521099
Transaction Length: 1
Severity: High
Contract: DynamicSwap
Function name: swapExactAmountOut(address,address,uint256,uint256,uint256)
PC address: 10892
Estimated Gas Usage: 2277 - 37169
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xdd6a801e7b0f30bcae4bb4f490bcf9784a6f9690.sol:140

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.336044
Transaction Length: 2
Severity: High
Contract: DynamicSwap
Function name: increaseAllowance(address,uint256)
PC address: 11821
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xdd6a801e7b0f30bcae4bb4f490bcf9784a6f9690.sol:121

a + b

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:08.282673
Transaction Length: 1
Severity: High
Contract: DynamicSwap
Function name: getInExactOut(int256,int256,int256)
PC address: 12781
Estimated Gas Usage: 484 - 579
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xdd6a801e7b0f30bcae4bb4f490bcf9784a6f9690.sol:229

a - b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:21.182799
Transaction Length: 1
Severity: High
Contract: DynamicSwap
Function name: getOutExactIn(int256,int256,int256)
PC address: 14894
Estimated Gas Usage: 550 - 645
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xdd6a801e7b0f30bcae4bb4f490bcf9784a6f9690.sol:235

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.518408
Transaction Length: 1
Severity: High
Contract: DynamicSwap
Function name: getInExactOut(int256,int256,int256)
PC address: 16019
Estimated Gas Usage: 734 - 829
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xdd6a801e7b0f30bcae4bb4f490bcf9784a6f9690.sol:215

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x68AEA07c99D571aa6C1681CD91f10BA73E0Ac6B3.sol
Total states:22614
786.40886
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.926498
Transaction Length: 1
Severity: High
Contract: Module
Function name: getModuleAddress(string)
PC address: 416
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x68AEA07c99D571aa6C1681CD91f10BA73E0Ac6B3.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.210936
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 511
Estimated Gas Usage: 364 - 459
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x68AEA07c99D571aa6C1681CD91f10BA73E0Ac6B3.sol:5

openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.861176
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 513
Estimated Gas Usage: 364 - 459
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x68AEA07c99D571aa6C1681CD91f10BA73E0Ac6B3.sol:3

*/

// File: @openzeppelin\upgrades\

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.585029
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 596
Estimated Gas Usage: 540 - 635
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x68AEA07c99D571aa6C1681CD91f10BA73E0Ac6B3.sol:5

openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:15.515960
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 598
Estimated Gas Usage: 540 - 635
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x68AEA07c99D571aa6C1681CD91f10BA73E0Ac6B3.sol:3

*/

// File: @openzeppelin\upgrades\

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:30.164425
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 681
Estimated Gas Usage: 716 - 811
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x68AEA07c99D571aa6C1681CD91f10BA73E0Ac6B3.sol:5

openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:47.907944
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 683
Estimated Gas Usage: 716 - 811
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x68AEA07c99D571aa6C1681CD91f10BA73E0Ac6B3.sol:3

*/

// File: @openzeppelin\upgrades\

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:07.863097
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 766
Estimated Gas Usage: 892 - 987
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x68AEA07c99D571aa6C1681CD91f10BA73E0Ac6B3.sol:5

openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:48.949933
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 768
Estimated Gas Usage: 892 - 987
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x68AEA07c99D571aa6C1681CD91f10BA73E0Ac6B3.sol:3

*/

// File: @openzeppelin\upgrades\

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.146882
Transaction Length: 1
Severity: High
Contract: StakingPoolBase
Function name: stake(uint256,bytes)
PC address: 876
Estimated Gas Usage: 414 - 509
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x68AEA07c99D571aa6C1681CD91f10BA73E0Ac6B3.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.312007
Transaction Length: 1
Severity: High
Contract: StakingPool
Function name: stake(uint256,bytes)
PC address: 1086
Estimated Gas Usage: 436 - 531
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x68AEA07c99D571aa6C1681CD91f10BA73E0Ac6B3.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:27.215554
Transaction Length: 1
Severity: High
Contract: StakingPoolBase
Function name: stakeFor(address,uint256,bytes)
PC address: 1105
Estimated Gas Usage: 469 - 564
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x68AEA07c99D571aa6C1681CD91f10BA73E0Ac6B3.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.536952
Transaction Length: 1
Severity: High
Contract: StakingPool
Function name: stakeFor(address,uint256,bytes)
PC address: 1315
Estimated Gas Usage: 491 - 586
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x68AEA07c99D571aa6C1681CD91f10BA73E0Ac6B3.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:21.542123
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: getModuleAddress(string)
PC address: 1453
Estimated Gas Usage: 451 - 546
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x68AEA07c99D571aa6C1681CD91f10BA73E0Ac6B3.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:20.067866
Transaction Length: 1
Severity: High
Contract: StakingPoolBase
Function name: getPersonalStakeUnlockedTimestamps(address)
PC address: 1667
Estimated Gas Usage: 2628 - 4231
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x68AEA07c99D571aa6C1681CD91f10BA73E0Ac6B3.sol:1518

function getPersonalStakeUnlockedTimestamps(address _address) external view returns (uint256[] memory) {
    uint256[] memory timestamps;
    (timestamps,,) = getPersonalStakes(_address);

    return timestamps;
  }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:10.058736
Transaction Length: 1
Severity: High
Contract: StakingPool
Function name: getPersonalStakeUnlockedTimestamps(address)
PC address: 1877
Estimated Gas Usage: 2584 - 4187
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x68AEA07c99D571aa6C1681CD91f10BA73E0Ac6B3.sol:1518

function getPersonalStakeUnlockedTimestamps(address _address) external view returns (uint256[] memory) {
    uint256[] memory timestamps;
    (timestamps,,) = getPersonalStakes(_address);

    return timestamps;
  }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:33.810555
Transaction Length: 1
Severity: High
Contract: StakingPool
Function name: getPersonalStakeUnlockedTimestamps(address)
PC address: 1917
Estimated Gas Usage: 2734 - 4713
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x68AEA07c99D571aa6C1681CD91f10BA73E0Ac6B3.sol:1518

function getPersonalStakeUnlockedTimestamps(address _address) external view returns (uint256[] memory) {
    uint256[] memory timestamps;
    (timestamps,,) = getPersonalStakes(_address);

    return timestamps;
  }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.715162
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3249
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x68AEA07c99D571aa6C1681CD91f10BA73E0Ac6B3.sol:212

a + b

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:54.577477
Transaction Length: 1
Severity: Low
Contract: StakingPoolBase
Function name: stakeFor(address,uint256,bytes)
PC address: 13457
Estimated Gas Usage: 2998 - 7001
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop3/0x68AEA07c99D571aa6C1681CD91f10BA73E0Ac6B3.sol:1378

stakingToken.transferFrom(_address, address(this), _amount)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x78005e1a9f97e5883c18fdd3831eaac2b12b925b.sol
Total states:3610
84.095781
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.965989
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: initialize(uint256,uint256,address[],uint256[],address)
PC address: 787
Estimated Gas Usage: 461 - 556
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x78005e1a9f97e5883c18fdd3831eaac2b12b925b.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.507612
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: initialize(uint256,uint256,address[],uint256[],address)
PC address: 789
Estimated Gas Usage: 461 - 556
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x78005e1a9f97e5883c18fdd3831eaac2b12b925b.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:14.876233
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: initialize(uint256,uint256,address[],uint256[],address)
PC address: 872
Estimated Gas Usage: 637 - 732
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x78005e1a9f97e5883c18fdd3831eaac2b12b925b.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:24.828052
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: initialize(uint256,uint256,address[],uint256[],address)
PC address: 874
Estimated Gas Usage: 637 - 732
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x78005e1a9f97e5883c18fdd3831eaac2b12b925b.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:34.002548
Transaction Length: 1
Severity: Medium
Contract: LidTeamLock
Function name: startRelease()
PC address: 1025
Estimated Gas Usage: 20818 - 150697
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 4521
Offset: 4885
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop3/0x78005e1a9f97e5883c18fdd3831eaac2b12b925b.sol:694

function startRelease() external {

        require(releaseStart == 0, "Has already started.");

        require(address(this).balance != 0, "Must have some ether deposited.");

        require(lidToken.balanceOf(address(this)) != 0, "Must have some lid deposited.");

        startingLid = lidToken.balanceOf(address(this));

        startingEth = address(this).balance;

        releaseStart = now.add(24 hours);

    }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:00.655057
Transaction Length: 2
Severity: Medium
Contract: LidTeamLock
Function name: startRelease()
PC address: 1025
Estimated Gas Usage: 20818 - 150697
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 4521
Offset: 4885
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop3/0x78005e1a9f97e5883c18fdd3831eaac2b12b925b.sol:694

function startRelease() external {

        require(releaseStart == 0, "Has already started.");

        require(address(this).balance != 0, "Must have some ether deposited.");

        require(lidToken.balanceOf(address(this)) != 0, "Must have some lid deposited.");

        startingLid = lidToken.balanceOf(address(this));

        startingEth = address(this).balance;

        releaseStart = now.add(24 hours);

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:35.421478
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 1163
Estimated Gas Usage: 407 - 502
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x78005e1a9f97e5883c18fdd3831eaac2b12b925b.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:38.470331
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 1165
Estimated Gas Usage: 407 - 502
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x78005e1a9f97e5883c18fdd3831eaac2b12b925b.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:44.206102
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 1248
Estimated Gas Usage: 583 - 678
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x78005e1a9f97e5883c18fdd3831eaac2b12b925b.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:57.388426
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 1250
Estimated Gas Usage: 583 - 678
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x78005e1a9f97e5883c18fdd3831eaac2b12b925b.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.778390
Transaction Length: 1
Severity: Low
Contract: LidTeamLock
Function name: teamMemberBPs(uint256)
PC address: 1624
Estimated Gas Usage: 679 - 774
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x78005e1a9f97e5883c18fdd3831eaac2b12b925b.sol:572

uint[] public teamMemberBPs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:20.477751
Transaction Length: 1
Severity: Low
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 5028
Estimated Gas Usage: 1070 - 1165
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x78005e1a9f97e5883c18fdd3831eaac2b12b925b.sol:720

teamMemberAddresses[0]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:20.935720
Transaction Length: 1
Severity: Low
Contract: LidTeamLock
Function name: teamMemberAddresses(uint256)
PC address: 5599
Estimated Gas Usage: 678 - 773
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x78005e1a9f97e5883c18fdd3831eaac2b12b925b.sol:570

address payable[] public teamMemberAddresses

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:32.954745
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: startRelease()
PC address: 6647
Estimated Gas Usage: 15758 - 125637
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x78005e1a9f97e5883c18fdd3831eaac2b12b925b.sol:186

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol
Total states:53090
307.297645
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.046653
Transaction Length: 1
Severity: High
Contract: Getters
Function name: totalNet()
PC address: 4280
Estimated Gas Usage: 2753 - 37647
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:5

dity ^0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.903098
Transaction Length: 1
Severity: High
Contract: Getters
Function name: totalNet()
PC address: 4283
Estimated Gas Usage: 2753 - 37647
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:3



//pragma solidity ^0.5.17;
pragma solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.486086
Transaction Length: 1
Severity: High
Contract: Getters
Function name: totalNet()
PC address: 4295
Estimated Gas Usage: 2753 - 37647
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:1004

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.525317
Transaction Length: 1
Severity: High
Contract: Comptroller
Function name: totalNet()
PC address: 4480
Estimated Gas Usage: 2753 - 37647
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:5

dity ^0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.261585
Transaction Length: 1
Severity: High
Contract: Permission
Function name: totalNet()
PC address: 4480
Estimated Gas Usage: 2753 - 37647
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:5

dity ^0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.074103
Transaction Length: 1
Severity: High
Contract: Regulator
Function name: totalNet()
PC address: 4480
Estimated Gas Usage: 2753 - 37647
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:5

dity ^0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.013810
Transaction Length: 1
Severity: High
Contract: Setters
Function name: totalNet()
PC address: 4480
Estimated Gas Usage: 2753 - 37647
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:5

dity ^0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.334161
Transaction Length: 1
Severity: High
Contract: Comptroller
Function name: totalNet()
PC address: 4483
Estimated Gas Usage: 2753 - 37647
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:3



//pragma solidity ^0.5.17;
pragma solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.122628
Transaction Length: 1
Severity: High
Contract: Permission
Function name: totalNet()
PC address: 4483
Estimated Gas Usage: 2753 - 37647
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:3



//pragma solidity ^0.5.17;
pragma solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.931489
Transaction Length: 1
Severity: High
Contract: Regulator
Function name: totalNet()
PC address: 4483
Estimated Gas Usage: 2753 - 37647
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:3



//pragma solidity ^0.5.17;
pragma solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.946922
Transaction Length: 1
Severity: High
Contract: Setters
Function name: totalNet()
PC address: 4483
Estimated Gas Usage: 2753 - 37647
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:3



//pragma solidity ^0.5.17;
pragma solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.942987
Transaction Length: 1
Severity: High
Contract: Comptroller
Function name: totalNet()
PC address: 4495
Estimated Gas Usage: 2753 - 37647
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:1004

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.735245
Transaction Length: 1
Severity: High
Contract: Permission
Function name: totalNet()
PC address: 4495
Estimated Gas Usage: 2753 - 37647
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:1004

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.514459
Transaction Length: 1
Severity: High
Contract: Regulator
Function name: totalNet()
PC address: 4495
Estimated Gas Usage: 2753 - 37647
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:1004

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.489755
Transaction Length: 1
Severity: High
Contract: Setters
Function name: totalNet()
PC address: 4495
Estimated Gas Usage: 2753 - 37647
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:1004

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.464397
Transaction Length: 1
Severity: High
Contract: Market
Function name: totalNet()
PC address: 5472
Estimated Gas Usage: 2841 - 37735
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:5

dity ^0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.309558
Transaction Length: 1
Severity: High
Contract: Market
Function name: totalNet()
PC address: 5475
Estimated Gas Usage: 2841 - 37735
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:3



//pragma solidity ^0.5.17;
pragma solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.900742
Transaction Length: 1
Severity: High
Contract: Market
Function name: totalNet()
PC address: 5487
Estimated Gas Usage: 2841 - 37735
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:1004

dollar().totalSupply()

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:04.591594
Transaction Length: 1
Severity: High
Contract: Getters
Function name: totalNet()
PC address: 5571
Estimated Gas Usage: 2753 - 37647
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:57

rpart to Solidity's `-`

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.102825
Transaction Length: 1
Severity: High
Contract: Comptroller
Function name: totalNet()
PC address: 5861
Estimated Gas Usage: 2753 - 37647
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:76

     *
     * Requireme

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:04.786451
Transaction Length: 1
Severity: High
Contract: Permission
Function name: totalNet()
PC address: 5861
Estimated Gas Usage: 2753 - 37647
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:76

     *
     * Requireme

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:04.624666
Transaction Length: 1
Severity: High
Contract: Regulator
Function name: totalNet()
PC address: 5861
Estimated Gas Usage: 2753 - 37647
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:76

     *
     * Requireme

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:04.535682
Transaction Length: 1
Severity: High
Contract: Setters
Function name: totalNet()
PC address: 5861
Estimated Gas Usage: 2753 - 37647
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:76

     *
     * Requireme

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.233680
Transaction Length: 1
Severity: High
Contract: Bonding
Function name: totalNet()
PC address: 5864
Estimated Gas Usage: 2863 - 37757
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:5

dity ^0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.145574
Transaction Length: 1
Severity: High
Contract: Bonding
Function name: totalNet()
PC address: 5867
Estimated Gas Usage: 2863 - 37757
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:3



//pragma solidity ^0.5.17;
pragma solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.695529
Transaction Length: 1
Severity: High
Contract: Bonding
Function name: totalNet()
PC address: 5879
Estimated Gas Usage: 2863 - 37757
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:1004

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.553908
Transaction Length: 1
Severity: High
Contract: Market
Function name: couponPremium(uint256)
PC address: 6079
Estimated Gas Usage: 2510 - 37404
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:5

dity ^0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.204227
Transaction Length: 1
Severity: High
Contract: Market
Function name: couponPremium(uint256)
PC address: 6082
Estimated Gas Usage: 2510 - 37404
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:3



//pragma solidity ^0.5.17;
pragma solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.434572
Transaction Length: 1
Severity: High
Contract: Market
Function name: couponPremium(uint256)
PC address: 6094
Estimated Gas Usage: 2510 - 37404
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:1935

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.972205
Transaction Length: 1
Severity: High
Contract: Implementation
Function name: totalNet()
PC address: 7850
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:5

dity ^0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.846506
Transaction Length: 1
Severity: High
Contract: Implementation
Function name: totalNet()
PC address: 7853
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:3



//pragma solidity ^0.5.17;
pragma solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.424990
Transaction Length: 1
Severity: High
Contract: Implementation
Function name: totalNet()
PC address: 7865
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:1004

dollar().totalSupply()

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:04.759024
Transaction Length: 1
Severity: High
Contract: Bonding
Function name: totalNet()
PC address: 10022
Estimated Gas Usage: 2863 - 37757
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:84

 {
            return 0

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:15.321948
Transaction Length: 1
Severity: Low
Contract: Market
Function name: purchaseCoupons(uint256)
PC address: 10459
Estimated Gas Usage: 703 - 1362
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:1601

result[i]

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.021645
Transaction Length: 1
Severity: High
Contract: Market
Function name: totalNet()
PC address: 12260
Estimated Gas Usage: 2841 - 37735
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:105

t256 a, uint256 b) inte

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.514932
Transaction Length: 1
Severity: High
Contract: Implementation
Function name: totalNet()
PC address: 23486
Estimated Gas Usage: 2775 - 37669
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xBe3c2149729a7c001FEfc5b9c1EF829d242dE0CC.sol:139

quirements:
     * - Th

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xdbb4d5b3671d418a58c201713cbda6958969430f.sol
Total states:1133
0.828877
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x9d7242f7f2514e0cc5e691dc6d3c789ea184bf8c.sol
Total states:1367
3.476938
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x87b9382164968b2a17d324986b455bd4d76f19c7.sol
Total states:1225
3.775268
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xb7964456b82918de574be07ea5a9fc5640287e52.sol
Total states:5739
11.171715
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x41560ff6352d5e32c41deeb29fa36291bb70efb0.sol
Total states:3568
14.368393
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.572785
Transaction Length: 1
Severity: Low
Contract: Authorizable
Function name: authorities(uint256)
PC address: 472
Estimated Gas Usage: 805 - 900
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x41560ff6352d5e32c41deeb29fa36291bb70efb0.sol:2356

address[] public authorities

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.404710
Transaction Length: 1
Severity: Low
Contract: ERC20BridgeProxy
Function name: authorities(uint256)
PC address: 1015
Estimated Gas Usage: 827 - 922
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x41560ff6352d5e32c41deeb29fa36291bb70efb0.sol:2356

address[] public authorities

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xb9c806a415a6f0a735c76418e9a21da2c2d92788.sol
Total states:1255
1.204423
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.056118
Transaction Length: 0
Severity: High
Contract: Token2021
Function name: constructor
PC address: 296
Estimated Gas Usage: 16197 - 79630
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xb9c806a415a6f0a735c76418e9a21da2c2d92788.sol:11

ance(address owner, address spender) extern

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xac2b08a05bb78b6d804ad329fa388ace3e09e4dc.sol
Total states:35615
155.116516
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.045083
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1004
Estimated Gas Usage: 417 - 512
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xac2b08a05bb78b6d804ad329fa388ace3e09e4dc.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.873179
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1006
Estimated Gas Usage: 417 - 512
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xac2b08a05bb78b6d804ad329fa388ace3e09e4dc.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.373688
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1089
Estimated Gas Usage: 593 - 688
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xac2b08a05bb78b6d804ad329fa388ace3e09e4dc.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:23.308927
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1091
Estimated Gas Usage: 593 - 688
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xac2b08a05bb78b6d804ad329fa388ace3e09e4dc.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.800790
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1261
Estimated Gas Usage: 462 - 557
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xac2b08a05bb78b6d804ad329fa388ace3e09e4dc.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.732306
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1263
Estimated Gas Usage: 462 - 557
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xac2b08a05bb78b6d804ad329fa388ace3e09e4dc.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.092375
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1346
Estimated Gas Usage: 638 - 733
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xac2b08a05bb78b6d804ad329fa388ace3e09e4dc.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:18.700248
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1348
Estimated Gas Usage: 638 - 733
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xac2b08a05bb78b6d804ad329fa388ace3e09e4dc.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.753558
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeBP(uint256)
PC address: 2585
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xac2b08a05bb78b6d804ad329fa388ace3e09e4dc.sol:784

uint[] public bonusRangeBP

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.372414
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3707
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xac2b08a05bb78b6d804ad329fa388ace3e09e4dc.sol:1226

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:03.733033
Transaction Length: 2
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3707
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xac2b08a05bb78b6d804ad329fa388ace3e09e4dc.sol:1226

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:36.892655
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeStart(uint256)
PC address: 6017
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xac2b08a05bb78b6d804ad329fa388ace3e09e4dc.sol:783

uint[] public bonusRangeStart

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:23.723393
Transaction Length: 1
Severity: Low
Contract: LidStaking
Function name: stakeHandlers(uint256)
PC address: 6118
Estimated Gas Usage: 790 - 885
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xac2b08a05bb78b6d804ad329fa388ace3e09e4dc.sol:961

IStakeHandler[] public stakeHandlers

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.659825
Transaction Length: 2
Severity: High
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6315
Estimated Gas Usage: 1699 - 2124
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xac2b08a05bb78b6d804ad329fa388ace3e09e4dc.sol:1111

stakeHandlers.length-1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:07.591257
Transaction Length: 2
Severity: Low
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6326
Estimated Gas Usage: 1709 - 2134
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xac2b08a05bb78b6d804ad329fa388ace3e09e4dc.sol:1111

stakeHandlers[stakeHandlers.length-1]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:33.158122
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: calculateRatePerEth(uint256,uint256,uint256)
PC address: 6866
Estimated Gas Usage: 955 - 1050
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xac2b08a05bb78b6d804ad329fa388ace3e09e4dc.sol:162

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.427255
Transaction Length: 1
Severity: High
Contract: LidStaking
Function name: findTaxAmount(uint256,uint256)
PC address: 13348
Estimated Gas Usage: 474 - 569
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xac2b08a05bb78b6d804ad329fa388ace3e09e4dc.sol:162

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:31.058008
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPoolBPs(uint256)
PC address: 15577
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0xac2b08a05bb78b6d804ad329fa388ace3e09e4dc.sol:1227

uint[] public tokenPoolBPs

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x9c0999b1edbb8dcebbc12ac0d2f3c6118d7657a8.sol
Total states:1225
2.842057
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x0a81056b72db5694d3f50f9bf7110b60d8af995e.sol
Total states:212
0.751787
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x043b963e1b2214ec90046167ea29c2c8bdd7c0ec.sol
Total states:1999
2.886934
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x1Bc55bcAf89f514CE5a8336bEC7429a99e804910.sol
Total states:3409
248.128783
==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:31.548182
Transaction Length: 1
Severity: High
Contract: Math
Function name: safeSub(uint256,uint256)
PC address: 820
Estimated Gas Usage: 309 - 404
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x1Bc55bcAf89f514CE5a8336bEC7429a99e804910.sol:109

x - y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:30.285222
Transaction Length: 1
Severity: High
Contract: Memberlist
Function name: updateMembers(address[],uint256)
PC address: 827
Estimated Gas Usage: 407 - 502
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x1Bc55bcAf89f514CE5a8336bEC7429a99e804910.sol:5

d using https://dapp.

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:33.148647
Transaction Length: 1
Severity: High
Contract: Memberlist
Function name: updateMembers(address[],uint256)
PC address: 829
Estimated Gas Usage: 407 - 502
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x1Bc55bcAf89f514CE5a8336bEC7429a99e804910.sol:3

*/

// Verified using https://dapp.t

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:33.623493
Transaction Length: 1
Severity: Low
Contract: Math
Function name: safeDiv(uint256,uint256)
PC address: 959
Estimated Gas Usage: 324 - 419
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x1Bc55bcAf89f514CE5a8336bEC7429a99e804910.sol:117

x / y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.088253
Transaction Length: 1
Severity: High
Contract: Math
Function name: rdiv(uint256,uint256)
PC address: 985
Estimated Gas Usage: 382 - 477
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x1Bc55bcAf89f514CE5a8336bEC7429a99e804910.sol:113

x * y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:21.123383
Transaction Length: 1
Severity: High
Contract: Math
Function name: rdiv(uint256,uint256)
PC address: 1128
Estimated Gas Usage: 496 - 591
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x1Bc55bcAf89f514CE5a8336bEC7429a99e804910.sol:105

x + y

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:39.865234
Transaction Length: 1
Severity: High
Contract: Memberlist
Function name: safeSub(uint256,uint256)
PC address: 2809
Estimated Gas Usage: 332 - 427
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x1Bc55bcAf89f514CE5a8336bEC7429a99e804910.sol:109

x - y

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:53.669432
Transaction Length: 1
Severity: Low
Contract: Memberlist
Function name: safeDiv(uint256,uint256)
PC address: 2948
Estimated Gas Usage: 347 - 442
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x1Bc55bcAf89f514CE5a8336bEC7429a99e804910.sol:117

x / y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.293692
Transaction Length: 1
Severity: High
Contract: Memberlist
Function name: rdiv(uint256,uint256)
PC address: 2998
Estimated Gas Usage: 450 - 545
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x1Bc55bcAf89f514CE5a8336bEC7429a99e804910.sol:113

x * y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.964385
Transaction Length: 1
Severity: High
Contract: Memberlist
Function name: rdiv(uint256,uint256)
PC address: 3141
Estimated Gas Usage: 564 - 659
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x1Bc55bcAf89f514CE5a8336bEC7429a99e804910.sol:105

x + y

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xc2a9aa6aa4d9aded3d7b3463d9860e360a0ccb30.sol
Total states:426
0.808441
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xd9ce2f076e405b346ed9d9653abf9924d7e0f679.sol
Total states:1367
3.256543
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x03bF758A70c0f1d7515eaE6962FbF990Ce76f8f2.sol
Total states:3164
7.976335
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.307267
Transaction Length: 1
Severity: High
Contract: OptionsPrice
Function name: calOptionsPriceRatio(uint256,uint256,uint256)
PC address: 2920
Estimated Gas Usage: 374 - 469
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x03bF758A70c0f1d7515eaE6962FbF990Ce76f8f2.sol:655

selfOccupied*2

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xe8d36d84c58ba104c346726641d0deca05ad237c.sol
Total states:5754
1418.821791
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.799277
Transaction Length: 1
Severity: High
Contract: DMGBurnerV1
Function name: enableTokens(address[])
PC address: 580
Estimated Gas Usage: 340 - 435
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xe8d36d84c58ba104c346726641d0deca05ad237c.sol:5

olidity ^0.5.0;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.019568
Transaction Length: 1
Severity: High
Contract: DMGBurnerV1
Function name: enableTokens(address[])
PC address: 582
Estimated Gas Usage: 340 - 435
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xe8d36d84c58ba104c346726641d0deca05ad237c.sol:3

*/

//pragma solidity ^0.5.0;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:33.974328
Transaction Length: 1
Severity: High
Contract: DMGBurnerV1
Function name: burnDmg(address,uint256,address[])
PC address: 806
Estimated Gas Usage: 422 - 517
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xe8d36d84c58ba104c346726641d0deca05ad237c.sol:5

olidity ^0.5.0;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:38.871146
Transaction Length: 1
Severity: High
Contract: DMGBurnerV1
Function name: burnDmg(address,uint256,address[])
PC address: 808
Estimated Gas Usage: 422 - 517
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xe8d36d84c58ba104c346726641d0deca05ad237c.sol:3

*/

//pragma solidity ^0.5.0;
pragma

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xecbc624bebc96fcae982f417dd1ac12b38b52c51.sol
Total states:426
0.820082
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xecb5054213ead4c5e2d3f2033b8e8afb41715ba12.sol
Total states:421
0.394176
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x8dd4b9c337fafb5ae3dc52c3be95c9a96ee62567.sol
Total states:20932
55.343781
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.945246
Transaction Length: 1
Severity: High
Contract: AskoTeamLock
Function name: initialize(uint256,uint256,uint256,address[],address)
PC address: 794
Estimated Gas Usage: 487 - 582
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x8dd4b9c337fafb5ae3dc52c3be95c9a96ee62567.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.033574
Transaction Length: 1
Severity: High
Contract: AskoTeamLock
Function name: initialize(uint256,uint256,uint256,address[],address)
PC address: 796
Estimated Gas Usage: 487 - 582
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x8dd4b9c337fafb5ae3dc52c3be95c9a96ee62567.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.473442
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3249
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x8dd4b9c337fafb5ae3dc52c3be95c9a96ee62567.sol:186

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.764640
Transaction Length: 2
Severity: High
Contract: ERC20Burnable
Function name: increaseAllowance(address,uint256)
PC address: 3429
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x8dd4b9c337fafb5ae3dc52c3be95c9a96ee62567.sol:186

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.758793
Transaction Length: 1
Severity: Low
Contract: AskoTeamLock
Function name: teamMembers(uint256)
PC address: 3688
Estimated Gas Usage: 722 - 817
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x8dd4b9c337fafb5ae3dc52c3be95c9a96ee62567.sol:1187

address[] public teamMembers

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xcfd4a2d1a84c754555321822aa2e72d56f5476da.sol
Total states:6297
13.617042
==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:00:05.600118
Transaction Length: 1
Severity: Medium
Contract: ContributionTrigger
Function name: depositeToken(address,address,uint256)
PC address: 8332
Estimated Gas Usage: 1239 - 1805
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../contracts/m_loop/loop3/0xcfd4a2d1a84c754555321822aa2e72d56f5476da.sol:456

_token.transfer(_to, _amount)

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:00:03.402216
Transaction Length: 1
Severity: Medium
Contract: ContributionTrigger
Function name: depositeToken(address,address,uint256)
PC address: 8727
Estimated Gas Usage: 1272 - 1933
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../contracts/m_loop/loop3/0xcfd4a2d1a84c754555321822aa2e72d56f5476da.sol:459

_token.transferFrom(_from, _to, _amount)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x1fda8eee35eaa3e7925f0e1db467e81f4dccb0ac.sol
Total states:10013
48.720145
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.595816
Transaction Length: 1
Severity: High
Contract: Liquidity
Function name: totalRewarded()
PC address: 1667
Estimated Gas Usage: 2933 - 37922
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x1fda8eee35eaa3e7925f0e1db467e81f4dccb0ac.sol:9

ency file: @ope

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.709824
Transaction Length: 1
Severity: High
Contract: PoolGetters
Function name: totalRewarded()
PC address: 1667
Estimated Gas Usage: 2933 - 37922
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x1fda8eee35eaa3e7925f0e1db467e81f4dccb0ac.sol:9

ency file: @ope

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.445000
Transaction Length: 1
Severity: High
Contract: PoolSetters
Function name: totalRewarded()
PC address: 1667
Estimated Gas Usage: 2933 - 37922
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x1fda8eee35eaa3e7925f0e1db467e81f4dccb0ac.sol:9

ency file: @ope

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.307870
Transaction Length: 1
Severity: High
Contract: Liquidity
Function name: totalRewarded()
PC address: 1670
Estimated Gas Usage: 2933 - 37922
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x1fda8eee35eaa3e7925f0e1db467e81f4dccb0ac.sol:5

*/



// Dependency file: @openzeppelin/con

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.196149
Transaction Length: 1
Severity: High
Contract: PoolGetters
Function name: totalRewarded()
PC address: 1670
Estimated Gas Usage: 2933 - 37922
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x1fda8eee35eaa3e7925f0e1db467e81f4dccb0ac.sol:5

*/



// Dependency file: @openzeppelin/con

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.243294
Transaction Length: 1
Severity: High
Contract: PoolSetters
Function name: totalRewarded()
PC address: 1670
Estimated Gas Usage: 2933 - 37922
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x1fda8eee35eaa3e7925f0e1db467e81f4dccb0ac.sol:5

*/



// Dependency file: @openzeppelin/con

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.060736
Transaction Length: 1
Severity: High
Contract: Liquidity
Function name: totalRewarded()
PC address: 1682
Estimated Gas Usage: 2933 - 37922
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x1fda8eee35eaa3e7925f0e1db467e81f4dccb0ac.sol:2623

dollar().balanceOf(address(this))

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.126632
Transaction Length: 1
Severity: High
Contract: PoolGetters
Function name: totalRewarded()
PC address: 1682
Estimated Gas Usage: 2933 - 37922
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x1fda8eee35eaa3e7925f0e1db467e81f4dccb0ac.sol:2623

dollar().balanceOf(address(this))

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.937464
Transaction Length: 1
Severity: High
Contract: PoolSetters
Function name: totalRewarded()
PC address: 1682
Estimated Gas Usage: 2933 - 37922
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x1fda8eee35eaa3e7925f0e1db467e81f4dccb0ac.sol:2623

dollar().balanceOf(address(this))

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:03.139056
Transaction Length: 1
Severity: High
Contract: Liquidity
Function name: totalRewarded()
PC address: 2749
Estimated Gas Usage: 2933 - 37922
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x1fda8eee35eaa3e7925f0e1db467e81f4dccb0ac.sol:35

 *

 * Using this libra

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:03.225278
Transaction Length: 1
Severity: High
Contract: PoolGetters
Function name: totalRewarded()
PC address: 2749
Estimated Gas Usage: 2933 - 37922
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x1fda8eee35eaa3e7925f0e1db467e81f4dccb0ac.sol:35

 *

 * Using this libra

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:02.964126
Transaction Length: 1
Severity: High
Contract: PoolSetters
Function name: totalRewarded()
PC address: 2749
Estimated Gas Usage: 2933 - 37922
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x1fda8eee35eaa3e7925f0e1db467e81f4dccb0ac.sol:35

 *

 * Using this libra

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xb040c6d5025305acc66c3c6f922114fcc1d10e34.sol
Total states:8715
13.98771
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.155836
Transaction Length: 0
Severity: High
Contract: CLIPricingStrategy
Function name: constructor
PC address: 130
Estimated Gas Usage: 317 - 3276
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xb040c6d5025305acc66c3c6f922114fcc1d10e34.sol:13

ferent criterias
/// 

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xef0ff94b152c00ed4620b149ee934f2f4a526387.sol
Total states:11731
77.624595
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.997950
Transaction Length: 1
Severity: High
Contract: GAMMA
Function name: transferBatch(address[],uint256[])
PC address: 1197
Estimated Gas Usage: 385 - 480
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xef0ff94b152c00ed4620b149ee934f2f4a526387.sol:5

olidity 0.5.17;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.288593
Transaction Length: 1
Severity: High
Contract: GAMMA
Function name: transferBatch(address[],uint256[])
PC address: 1199
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xef0ff94b152c00ed4620b149ee934f2f4a526387.sol:3

*/

//pragma solidity 0.5.17;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.651599
Transaction Length: 1
Severity: High
Contract: GAMMA
Function name: transferBatch(address[],uint256[])
PC address: 1282
Estimated Gas Usage: 561 - 656
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xef0ff94b152c00ed4620b149ee934f2f4a526387.sol:5

olidity 0.5.17;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:23.020803
Transaction Length: 1
Severity: High
Contract: GAMMA
Function name: transferBatch(address[],uint256[])
PC address: 1284
Estimated Gas Usage: 561 - 656
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xef0ff94b152c00ed4620b149ee934f2f4a526387.sol:3

*/

//pragma solidity 0.5.17;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:34.355097
Transaction Length: 1
Severity: High
Contract: GAMMA
Function name: mint(uint256,string,bool)
PC address: 1886
Estimated Gas Usage: 412 - 507
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xef0ff94b152c00ed4620b149ee934f2f4a526387.sol:3

*/

//pragma solidity 0.5.17;
pragm

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:14.971183
Transaction Length: 2
Severity: High
Contract: GAMMA
Function name: transferFrom(address,address,uint256)
PC address: 8394
Estimated Gas Usage: 35665 - 160730
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xef0ff94b152c00ed4620b149ee934f2f4a526387.sol:72

tokenId - 1

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:17.254310
Transaction Length: 2
Severity: High
Contract: GAMMA
Function name: transferFrom(address,address,uint256)
PC address: 8482
Estimated Gas Usage: 35665 - 160730
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xef0ff94b152c00ed4620b149ee934f2f4a526387.sol:73

tokenId - 1

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xd51153899a050485b12ea2f9e4accf58e6107ea5.sol
Total states:11782
1142.715206
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.976177
Transaction Length: 1
Severity: High
Contract: LexTokenLiteFactory
Function name: LaunchLexTokenLite(string,string,uint8,address,address,uint256,uint256,bytes32,bool)
PC address: 377
Estimated Gas Usage: 316 - 411
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xd51153899a050485b12ea2f9e4accf58e6107ea5.sol:3

*/

//pragma solidity 0.5.17;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.668665
Transaction Length: 1
Severity: High
Contract: LexTokenLiteFactory
Function name: LaunchLexTokenLite(string,string,uint8,address,address,uint256,uint256,bytes32,bool)
PC address: 528
Estimated Gas Usage: 661 - 3438
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xd51153899a050485b12ea2f9e4accf58e6107ea5.sol:3

*/

//pragma solidity 0.5.17;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.134625
Transaction Length: 1
Severity: High
Contract: LexTokenLite
Function name: transferBatch(address[],uint256[])
PC address: 1100
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xd51153899a050485b12ea2f9e4accf58e6107ea5.sol:5

olidity 0.5.17;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.940852
Transaction Length: 1
Severity: High
Contract: LexTokenLite
Function name: transferBatch(address[],uint256[])
PC address: 1102
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xd51153899a050485b12ea2f9e4accf58e6107ea5.sol:3

*/

//pragma solidity 0.5.17;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.555024
Transaction Length: 1
Severity: High
Contract: LexTokenLite
Function name: transferBatch(address[],uint256[])
PC address: 1185
Estimated Gas Usage: 539 - 634
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xd51153899a050485b12ea2f9e4accf58e6107ea5.sol:5

olidity 0.5.17;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:24.863421
Transaction Length: 1
Severity: High
Contract: LexTokenLite
Function name: transferBatch(address[],uint256[])
PC address: 1187
Estimated Gas Usage: 539 - 634
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xd51153899a050485b12ea2f9e4accf58e6107ea5.sol:3

*/

//pragma solidity 0.5.17;
pragma

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:05:32.693462
Transaction Length: 1
Severity: Low
Contract: LexTokenLiteFactory
Function name: LaunchLexTokenLite(string,string,uint8,address,address,uint256,uint256,bytes32,bool)
PC address: 1599
Estimated Gas Usage: 35144 - 43715
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop3/0xd51153899a050485b12ea2f9e4accf58e6107ea5.sol:256

lexLite.init(
            _name, 
            _symbol,
            _decimals, 
            _owner, 
            _resolver,
            ownerSupply, 
            _totalSupplyCap, 
            _message, 
            _transferable)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:01:37.257660
Transaction Length: 1
Severity: Low
Contract: LexTokenLiteFactory
Function name: LaunchLexTokenLite(string,string,uint8,address,address,uint256,uint256,bytes32,bool)
PC address: 1701
Estimated Gas Usage: 36230 - 78611
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop3/0xd51153899a050485b12ea2f9e4accf58e6107ea5.sol:267

lexDAO.call.value(msg.value)("")

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:41.301665
Transaction Length: 1
Severity: High
Contract: LexTokenLite
Function name: mintBatch(address[],uint256[])
PC address: 1710
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xd51153899a050485b12ea2f9e4accf58e6107ea5.sol:5

olidity 0.5.17;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:44.146175
Transaction Length: 1
Severity: High
Contract: LexTokenLite
Function name: mintBatch(address[],uint256[])
PC address: 1712
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xd51153899a050485b12ea2f9e4accf58e6107ea5.sol:3

*/

//pragma solidity 0.5.17;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:50.838981
Transaction Length: 1
Severity: High
Contract: LexTokenLite
Function name: mintBatch(address[],uint256[])
PC address: 1795
Estimated Gas Usage: 539 - 634
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xd51153899a050485b12ea2f9e4accf58e6107ea5.sol:5

olidity 0.5.17;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:03.787718
Transaction Length: 1
Severity: High
Contract: LexTokenLite
Function name: mintBatch(address[],uint256[])
PC address: 1797
Estimated Gas Usage: 539 - 634
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xd51153899a050485b12ea2f9e4accf58e6107ea5.sol:3

*/

//pragma solidity 0.5.17;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:18.118889
Transaction Length: 1
Severity: High
Contract: LexTokenLite
Function name: init(string,string,uint8,address,address,uint256,uint256,bytes32,bool)
PC address: 2095
Estimated Gas Usage: 451 - 546
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xd51153899a050485b12ea2f9e4accf58e6107ea5.sol:3

*/

//pragma solidity 0.5.17;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:23.003001
Transaction Length: 1
Severity: High
Contract: LexTokenLite
Function name: init(string,string,uint8,address,address,uint256,uint256,bytes32,bool)
PC address: 2180
Estimated Gas Usage: 627 - 722
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0xd51153899a050485b12ea2f9e4accf58e6107ea5.sol:3

*/

//pragma solidity 0.5.17;
pragm

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0xd6bb3f3f860df5eb3f5384614c0cc23f6b11bddd.sol
Total states:426
0.773461
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol
Total states:49005
313.938138
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.475633
Transaction Length: 1
Severity: Low
Contract: Getters
Function name: expiringCouponsAtIndex(uint256,uint256)
PC address: 2821
Estimated Gas Usage: 1090 - 1375
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:1181

_state.epochs[epoch].coupons.expiring[i]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.782730
Transaction Length: 1
Severity: High
Contract: Getters
Function name: totalNet()
PC address: 4187
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:5

 file: @openzep

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.702989
Transaction Length: 1
Severity: High
Contract: Getters
Function name: totalNet()
PC address: 4190
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:3



// Dependency file: @openzeppelin/contrac

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.256435
Transaction Length: 1
Severity: High
Contract: Getters
Function name: totalNet()
PC address: 4202
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:1096

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.630390
Transaction Length: 1
Severity: High
Contract: Comptroller
Function name: totalNet()
PC address: 4387
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:5

 file: @openzep

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.759194
Transaction Length: 1
Severity: High
Contract: Permission
Function name: totalNet()
PC address: 4387
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:5

 file: @openzep

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.910199
Transaction Length: 1
Severity: High
Contract: Regulator
Function name: totalNet()
PC address: 4387
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:5

 file: @openzep

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.775085
Transaction Length: 1
Severity: High
Contract: Setters
Function name: totalNet()
PC address: 4387
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:5

 file: @openzep

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.533922
Transaction Length: 1
Severity: High
Contract: Comptroller
Function name: totalNet()
PC address: 4390
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:3



// Dependency file: @openzeppelin/contrac

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.625527
Transaction Length: 1
Severity: High
Contract: Permission
Function name: totalNet()
PC address: 4390
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:3



// Dependency file: @openzeppelin/contrac

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.781554
Transaction Length: 1
Severity: High
Contract: Regulator
Function name: totalNet()
PC address: 4390
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:3



// Dependency file: @openzeppelin/contrac

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.658374
Transaction Length: 1
Severity: High
Contract: Setters
Function name: totalNet()
PC address: 4390
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:3



// Dependency file: @openzeppelin/contrac

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.096109
Transaction Length: 1
Severity: High
Contract: Comptroller
Function name: totalNet()
PC address: 4402
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:1096

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.203508
Transaction Length: 1
Severity: High
Contract: Permission
Function name: totalNet()
PC address: 4402
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:1096

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.360622
Transaction Length: 1
Severity: High
Contract: Regulator
Function name: totalNet()
PC address: 4402
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:1096

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.224054
Transaction Length: 1
Severity: High
Contract: Setters
Function name: totalNet()
PC address: 4402
Estimated Gas Usage: 2775 - 37669
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:1096

dollar().totalSupply()

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.321444
Transaction Length: 1
Severity: High
Contract: Getters
Function name: totalNet()
PC address: 5627
Estimated Gas Usage: 2775 - 37669
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:56

rt to Solidity's `-` op

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.345634
Transaction Length: 1
Severity: High
Contract: Bonding
Function name: totalNet()
PC address: 5771
Estimated Gas Usage: 2753 - 37647
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:5

 file: @openzep

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.313950
Transaction Length: 1
Severity: High
Contract: Bonding
Function name: totalNet()
PC address: 5774
Estimated Gas Usage: 2753 - 37647
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:3



// Dependency file: @openzeppelin/contrac

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.839625
Transaction Length: 1
Severity: High
Contract: Bonding
Function name: totalNet()
PC address: 5786
Estimated Gas Usage: 2753 - 37647
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:1096

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.592929
Transaction Length: 1
Severity: High
Contract: Market
Function name: totalNet()
PC address: 5827
Estimated Gas Usage: 2863 - 37757
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:5

 file: @openzep

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.529527
Transaction Length: 1
Severity: High
Contract: Market
Function name: totalNet()
PC address: 5830
Estimated Gas Usage: 2863 - 37757
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:3



// Dependency file: @openzeppelin/contrac

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.077074
Transaction Length: 1
Severity: High
Contract: Market
Function name: totalNet()
PC address: 5842
Estimated Gas Usage: 2863 - 37757
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:1096

dollar().totalSupply()

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.155824
Transaction Length: 1
Severity: High
Contract: Comptroller
Function name: totalNet()
PC address: 5917
Estimated Gas Usage: 2775 - 37669
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:75

  *
     * Requirements

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:06.306096
Transaction Length: 1
Severity: High
Contract: Permission
Function name: totalNet()
PC address: 5917
Estimated Gas Usage: 2775 - 37669
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:75

  *
     * Requirements

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.459303
Transaction Length: 1
Severity: High
Contract: Regulator
Function name: totalNet()
PC address: 5917
Estimated Gas Usage: 2775 - 37669
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:75

  *
     * Requirements

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.323807
Transaction Length: 1
Severity: High
Contract: Setters
Function name: totalNet()
PC address: 5917
Estimated Gas Usage: 2775 - 37669
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:75

  *
     * Requirements

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.779251
Transaction Length: 1
Severity: High
Contract: Market
Function name: couponPremium(uint256)
PC address: 7042
Estimated Gas Usage: 2555 - 37449
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:5

 file: @openzep

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.309880
Transaction Length: 1
Severity: High
Contract: Market
Function name: couponPremium(uint256)
PC address: 7045
Estimated Gas Usage: 2555 - 37449
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:3



// Dependency file: @openzeppelin/contrac

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.692152
Transaction Length: 1
Severity: High
Contract: Market
Function name: couponPremium(uint256)
PC address: 7057
Estimated Gas Usage: 2555 - 37449
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:2091

dollar().totalSupply()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.572443
Transaction Length: 1
Severity: High
Contract: Implementation
Function name: totalNet()
PC address: 8733
Estimated Gas Usage: 2797 - 37691
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:5

 file: @openzep

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.494973
Transaction Length: 1
Severity: High
Contract: Implementation
Function name: totalNet()
PC address: 8736
Estimated Gas Usage: 2797 - 37691
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:3



// Dependency file: @openzeppelin/contrac

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.047003
Transaction Length: 1
Severity: High
Contract: Implementation
Function name: totalNet()
PC address: 8748
Estimated Gas Usage: 2797 - 37691
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:1096

dollar().totalSupply()

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:04.848566
Transaction Length: 1
Severity: High
Contract: Bonding
Function name: totalNet()
PC address: 10093
Estimated Gas Usage: 2753 - 37647
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:84

            return 0;
 

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:14.512038
Transaction Length: 1
Severity: Low
Contract: Market
Function name: purchaseCoupons(uint256)
PC address: 10671
Estimated Gas Usage: 681 - 1340
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:1711

result[i]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.307803
Transaction Length: 1
Severity: High
Contract: Implementation
Function name: couponPremium(uint256)
PC address: 11345
Estimated Gas Usage: 2533 - 37427
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:5

 file: @openzep

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.688482
Transaction Length: 1
Severity: High
Contract: Implementation
Function name: couponPremium(uint256)
PC address: 11348
Estimated Gas Usage: 2533 - 37427
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:3



// Dependency file: @openzeppelin/contrac

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.048920
Transaction Length: 1
Severity: High
Contract: Implementation
Function name: couponPremium(uint256)
PC address: 11360
Estimated Gas Usage: 2533 - 37427
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:2091

dollar().totalSupply()

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.121519
Transaction Length: 1
Severity: High
Contract: Market
Function name: totalNet()
PC address: 13211
Estimated Gas Usage: 2863 - 37757
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:104

6 a, uint256 b) interna

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:06.095310
Transaction Length: 1
Severity: High
Contract: Implementation
Function name: totalNet()
PC address: 25502
Estimated Gas Usage: 2797 - 37691
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop3/0x101acb5951f56885316c3e932a3e47eac2f74c4a.sol:138

rements:
     * - The d

--------------------

