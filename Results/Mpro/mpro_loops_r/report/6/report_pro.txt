$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x9f49a6d5e83ec8bccc1cb14a2b0401cce0cd8790.sol
Total states:425
1.664964
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x5e17e1c81dd8906485cf44d7abb51ad2c9fe11a9.sol
Total states:180
8.085444
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xDAF819c2437a82f9e01f6586207ebF961a7f0970.sol
Total states:8980
124.789904
==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:00.467107
Transaction Length: 1
Severity: Medium
Contract: FeeTo
Function name: claim(address)
PC address: 347
Estimated Gas Usage: 4387 - 74597
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 1668
Offset: 1891
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../new/0xDAF819c2437a82f9e01f6586207ebF961a7f0970.sol:98

function claim(address pair) public returns (uint value) {
        PairAllowState storage pairAllowState = pairAllowStates[pair];
        TokenAllowState storage token0AllowState = tokenAllowStates[IUniswapV2Pair(pair).token0()];
        TokenAllowState storage token1AllowState = tokenAllowStates[IUniswapV2Pair(pair).token1()];

        // we may claim only if each of the following five conditions are true:
        // 1) token0 is currently allowed
        // 2) token1 is currently allowed
        // 3) renounce was not called since the last time token0 was disallowed
        // 4) renounce was not called since the last time token1 was disallowed
        // 5) feeHandler is not the 0 address
        if (
            token0AllowState.allowed &&
            token1AllowState.allowed &&
            token0AllowState.disallowCount == pairAllowState.token0DisallowCount &&
            token1AllowState.disallowCount == pairAllowState.token1DisallowCount &&
            feeRecipient != address(0)
        ) {
            value = IUniswapV2Pair(pair).balanceOf(address(this));
            if (value > 0) {
                // transfer tokens to the handler (assert because transfer cannot fail with value as balanceOf)
                assert(IUniswapV2Pair(pair).transfer(feeRecipient, value));
            }
        }
    }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:22.193982
Transaction Length: 2
Severity: Medium
Contract: FeeTo
Function name: claim(address)
PC address: 347
Estimated Gas Usage: 5747 - 76947
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 1668
Offset: 1891
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../new/0xDAF819c2437a82f9e01f6586207ebF961a7f0970.sol:98

function claim(address pair) public returns (uint value) {
        PairAllowState storage pairAllowState = pairAllowStates[pair];
        TokenAllowState storage token0AllowState = tokenAllowStates[IUniswapV2Pair(pair).token0()];
        TokenAllowState storage token1AllowState = tokenAllowStates[IUniswapV2Pair(pair).token1()];

        // we may claim only if each of the following five conditions are true:
        // 1) token0 is currently allowed
        // 2) token1 is currently allowed
        // 3) renounce was not called since the last time token0 was disallowed
        // 4) renounce was not called since the last time token1 was disallowed
        // 5) feeHandler is not the 0 address
        if (
            token0AllowState.allowed &&
            token1AllowState.allowed &&
            token0AllowState.disallowCount == pairAllowState.token0DisallowCount &&
            token1AllowState.disallowCount == pairAllowState.token1DisallowCount &&
            feeRecipient != address(0)
        ) {
            value = IUniswapV2Pair(pair).balanceOf(address(this));
            if (value > 0) {
                // transfer tokens to the handler (assert because transfer cannot fail with value as balanceOf)
                assert(IUniswapV2Pair(pair).transfer(feeRecipient, value));
            }
        }
    }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:24.413861
Transaction Length: 2
Severity: Medium
Contract: FeeTo
Function name: renounce(address)
PC address: 435
Estimated Gas Usage: 4863 - 75403
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 3041
Offset: 3264
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../new/0xDAF819c2437a82f9e01f6586207ebF961a7f0970.sol:63

function renounce(address pair) public returns (uint value) {
        PairAllowState storage pairAllowState = pairAllowStates[pair];
        TokenAllowState storage token0AllowState = tokenAllowStates[IUniswapV2Pair(pair).token0()];
        TokenAllowState storage token1AllowState = tokenAllowStates[IUniswapV2Pair(pair).token1()];

        // we must renounce if any of the following four conditions are true:
        // 1) token0 is currently disallowed
        // 2) token1 is currently disallowed
        // 3) token0 was disallowed at least once since the last time renounce was called
        // 4) token1 was disallowed at least once since the last time renounce was called
        if (
            token0AllowState.allowed == false ||
            token1AllowState.allowed == false ||
            token0AllowState.disallowCount > pairAllowState.token0DisallowCount ||
            token1AllowState.disallowCount > pairAllowState.token1DisallowCount
        ) {
            value = IUniswapV2Pair(pair).balanceOf(address(this));
            if (value > 0) {
                // burn balance into the pair, effectively redistributing underlying tokens pro-rata back to LPs
                // (assert because transfer cannot fail with value as balanceOf)
                assert(IUniswapV2Pair(pair).transfer(pair, value));
                IUniswapV2Pair(pair).burn(pair);
            }

            // if token0 is allowed, we can now update the pair's disallow count to match the token's
            if (token0AllowState.allowed) {
                pairAllowState.token0DisallowCount = token0AllowState.disallowCount;
            }
            // if token1 is allowed, we can now update the pair's disallow count to match the token's
            if (token1AllowState.allowed) {
                pairAllowState.token1DisallowCount = token1AllowState.disallowCount;
            }
        }
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.296154
Transaction Length: 1
Severity: High
Contract: FeeTo
Function name: updateTokenAllowStates(address[],bool)
PC address: 726
Estimated Gas Usage: 318 - 413
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xDAF819c2437a82f9e01f6586207ebF961a7f0970.sol:5

olidity ^0.5.16;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.654089
Transaction Length: 1
Severity: High
Contract: FeeTo
Function name: updateTokenAllowStates(address[],bool)
PC address: 728
Estimated Gas Usage: 318 - 413
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xDAF819c2437a82f9e01f6586207ebF961a7f0970.sol:3

*/

//pragma solidity ^0.5.16;
pragm

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xf0cbba291d9809569d0a74ea56cd20253a421f8d.sol
Total states:77
3.226162
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xe32f474bd16fcde5a303e3dafdfdba0f98279a40.sol
Total states:5004
25.512131
==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:12.534751
Transaction Length: 1
Severity: Medium
Contract: KOREv2Router
Function name: refreshApproval()
PC address: 1203
Estimated Gas Usage: 7875 - 113921
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 5671
Offset: 5994
Offset: 6317
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../new/0xe32f474bd16fcde5a303e3dafdfdba0f98279a40.sol:840

function refreshApproval() public {
        IUniswapV2Pair(_koreWETHPair).approve(address(_koreVault), uint(-1));
        IERC20(_koreToken).approve(_wKoreToken, uint(-1));
        IERC20(_wKoreToken).approve(address(_koreVault), uint(-1));
    }

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:08.492761
Transaction Length: 1
Severity: Low
Contract: KOREv2Router
Function name: fallback
PC address: 2301
Estimated Gas Usage: 7975 - 29769
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0xe32f474bd16fcde5a303e3dafdfdba0f98279a40.sol:878

_WETH.deposit.value(msg.value)()

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:09.538014
Transaction Length: 1
Severity: Low
Contract: KOREv2Router
Function name: refreshApproval()
PC address: 5671
Estimated Gas Usage: 1958 - 3184
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0xe32f474bd16fcde5a303e3dafdfdba0f98279a40.sol:841

IUniswapV2Pair(_koreWETHPair).approve(address(_koreVault), uint(-1))

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:10.732231
Transaction Length: 1
Severity: Low
Contract: KOREv2Router
Function name: refreshApproval()
PC address: 5994
Estimated Gas Usage: 4506 - 41049
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0xe32f474bd16fcde5a303e3dafdfdba0f98279a40.sol:842

IERC20(_koreToken).approve(_wKoreToken, uint(-1))

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:12.370519
Transaction Length: 1
Severity: Low
Contract: KOREv2Router
Function name: refreshApproval()
PC address: 6317
Estimated Gas Usage: 7054 - 78914
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0xe32f474bd16fcde5a303e3dafdfdba0f98279a40.sol:843

IERC20(_wKoreToken).approve(address(_koreVault), uint(-1))

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xb791B258c49451fFD3A5Eab293ab71cBb99FfCa1.sol
Total states:6948
19.116964
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.040970
Transaction Length: 0
Severity: High
Contract: Token
Function name: constructor
PC address: 215
Estimated Gas Usage: 11082 - 52027
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xb791B258c49451fFD3A5Eab293ab71cBb99FfCa1.sol:111

now + 30 minutes

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xf389039010dc743c0461ce0d0f436d7a125c5102.sol
Total states:1308
1.053983
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x5bcd68ed6d3f307f7f595a05bdf47faa18d0ece0.sol
Total states:1007
5.572546
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xea5D932C80A45948d07bD2298e79E17b2910d6A4.sol
Total states:4368
599.703346
==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.005633
Transaction Length: 0
Severity: Medium
Contract: Governance
Function name: constructor
PC address: 18
Estimated Gas Usage: 42 - 137
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../new/0xea5D932C80A45948d07bD2298e79E17b2910d6A4.sol:639

tx.origin

--------------------

==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.030511
Transaction Length: 0
Severity: Medium
Contract: LPTokenWrapper
Function name: constructor
PC address: 241
Estimated Gas Usage: 16419 - 77504
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../new/0xea5D932C80A45948d07bD2298e79E17b2910d6A4.sol:639

tx.origin

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.311325
Transaction Length: 0
Severity: High
Contract: UniswapReward
Function name: constructor
PC address: 516
Estimated Gas Usage: 37837 - 179912
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xea5D932C80A45948d07bD2298e79E17b2910d6A4.sol:796

now + 365 days

--------------------

==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.987105
Transaction Length: 0
Severity: Medium
Contract: UniswapReward
Function name: constructor
PC address: 580
Estimated Gas Usage: 78340 - 380745
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../new/0xea5D932C80A45948d07bD2298e79E17b2910d6A4.sol:639

tx.origin

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.792641
Transaction Length: 1
Severity: High
Contract: LPTokenWrapper
Function name: stake(uint256,string)
PC address: 873
Estimated Gas Usage: 411 - 506
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xea5D932C80A45948d07bD2298e79E17b2910d6A4.sol:3

*/

/***
 *    ██████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.202427
Transaction Length: 1
Severity: High
Contract: UniswapReward
Function name: stake(uint256,string)
PC address: 2435
Estimated Gas Usage: 456 - 551
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xea5D932C80A45948d07bD2298e79E17b2910d6A4.sol:3

*/

/***
 *    ██████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:56.326937
Transaction Length: 1
Severity: High
Contract: UniswapReward
Function name: seize(address,uint256)
PC address: 13914
Estimated Gas Usage: 2651 - 5713
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xea5D932C80A45948d07bD2298e79E17b2910d6A4.sol:544

address(token).call(abi.encodeWithSelector(SELECTOR, to, value))

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:06:59.801050
Transaction Length: 1
Severity: Medium
Contract: UniswapReward
Function name: seize(address,uint256)
PC address: 13931
Estimated Gas Usage: 2976 - 7118
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../new/0xea5D932C80A45948d07bD2298e79E17b2910d6A4.sol:544

address(token).call(abi.encodeWithSelector(SELECTOR, to, value))

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol
Total states:35277
197.236824
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.152217
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1004
Estimated Gas Usage: 417 - 512
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.353567
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1006
Estimated Gas Usage: 417 - 512
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.056678
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1089
Estimated Gas Usage: 593 - 688
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:22.880820
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1091
Estimated Gas Usage: 593 - 688
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.926083
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1184
Estimated Gas Usage: 484 - 579
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.347002
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1186
Estimated Gas Usage: 484 - 579
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.774591
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1269
Estimated Gas Usage: 660 - 755
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:20.036307
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1271
Estimated Gas Usage: 660 - 755
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.711450
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleAccess
Function name: interpolate(uint256,uint256,uint256,uint256,uint256)
PC address: 2313
Estimated Gas Usage: 997 - 1848
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:162

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.815908
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeBP(uint256)
PC address: 2585
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:784

uint[] public bonusRangeBP

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.395010
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3192
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:1266

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:03.835312
Transaction Length: 2
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3192
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:1266

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:37.717896
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeStart(uint256)
PC address: 6017
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:783

uint[] public bonusRangeStart

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:21.334374
Transaction Length: 1
Severity: Low
Contract: LidStaking
Function name: stakeHandlers(uint256)
PC address: 6118
Estimated Gas Usage: 790 - 885
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:962

IStakeHandler[] public stakeHandlers

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.685508
Transaction Length: 2
Severity: High
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6315
Estimated Gas Usage: 1699 - 2124
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:1112

stakeHandlers.length-1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:07.872537
Transaction Length: 2
Severity: Low
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6326
Estimated Gas Usage: 1709 - 2134
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:1112

stakeHandlers[stakeHandlers.length-1]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:33.821740
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: calculateRatePerEth(uint256,uint256,uint256)
PC address: 6866
Estimated Gas Usage: 955 - 1050
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:162

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:31.247283
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPoolBPs(uint256)
PC address: 13062
Estimated Gas Usage: 722 - 817
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:1267

uint[] public tokenPoolBPs

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.405717
Transaction Length: 1
Severity: High
Contract: LidStaking
Function name: findTaxAmount(uint256,uint256)
PC address: 13348
Estimated Gas Usage: 474 - 569
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:162

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x974aa2a41cbd088acde4ee67721e3809cd8b665c.sol
Total states:2324
1.827397
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x18C480a97c5F36d6bB185741ad5df9ab9361050A.sol
Total states:5938
21.711918
==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:03.641629
Transaction Length: 1
Severity: Medium
Contract: RewardProxyActions
Function name: claimReward(address)
PC address: 144
Estimated Gas Usage: 5139 - 108825
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 250
Offset: 409
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../new/0x18C480a97c5F36d6bB185741ad5df9ab9361050A.sol:1271

function claimReward(address rewarder) public {
        uint256 reward = StakingRewards(rewarder).getReward();
        IERC20(StakingRewards(rewarder).gov()).transfer(msg.sender, reward);
    }

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:00:01.602824
Transaction Length: 1
Severity: Medium
Contract: RewardProxyActions
Function name: claimReward(address)
PC address: 250
Estimated Gas Usage: 1019 - 1395
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../new/0x18C480a97c5F36d6bB185741ad5df9ab9361050A.sol:1272

StakingRewards(rewarder).getReward()

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:03.541675
Transaction Length: 1
Severity: Low
Contract: RewardProxyActions
Function name: claimReward(address)
PC address: 630
Estimated Gas Usage: 4314 - 73814
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0x18C480a97c5F36d6bB185741ad5df9ab9361050A.sol:1273

IERC20(StakingRewards(rewarder).gov()).transfer(msg.sender, reward)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xcb13fe86e4f8139d56f694c9a452d03e00f708ef2.sol
Total states:976
23.502515
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.669181
Transaction Length: 1
Severity: High
Contract: UniswapV2
Function name: allPairsLength()
PC address: 398
Estimated Gas Usage: 2192 - 37086
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcb13fe86e4f8139d56f694c9a452d03e00f708ef2.sol:5

racts/lib/IERC2

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.318933
Transaction Length: 1
Severity: High
Contract: UniswapV2
Function name: allPairsLength()
PC address: 401
Estimated Gas Usage: 2192 - 37086
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcb13fe86e4f8139d56f694c9a452d03e00f708ef2.sol:3



// File: contracts/lib/IERC20.sol

//prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.142220
Transaction Length: 1
Severity: High
Contract: UniswapV2
Function name: allPairsLength()
PC address: 413
Estimated Gas Usage: 2192 - 37086
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcb13fe86e4f8139d56f694c9a452d03e00f708ef2.sol:154

factory.allPairsLength()

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:06.387298
Transaction Length: 1
Severity: High
Contract: UniswapV2
Function name: getPairs(uint256,uint256)
PC address: 2557
Estimated Gas Usage: 560 - 938
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0xcb13fe86e4f8139d56f694c9a452d03e00f708ef2.sol:158

toIndex - fromIndex

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:02.198523
Transaction Length: 1
Severity: High
Contract: UniswapV2
Function name: allPairsLength()
PC address: 3659
Estimated Gas Usage: 2192 - 37086
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0xcb13fe86e4f8139d56f694c9a452d03e00f708ef2.sol:44

e number of decimals us

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x8b60794127b20c2f4dc58db2da7e6f68ed4fafdf.sol
Total states:23598
65.287304
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.548820
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3244
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x8b60794127b20c2f4dc58db2da7e6f68ed4fafdf.sol:121

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.869821
Transaction Length: 1
Severity: High
Contract: DynamicSwap
Function name: swapExactAmountOut(address,address,uint256,uint256,uint256)
PC address: 11813
Estimated Gas Usage: 2280 - 37172
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x8b60794127b20c2f4dc58db2da7e6f68ed4fafdf.sol:140

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.826515
Transaction Length: 2
Severity: High
Contract: DynamicSwap
Function name: increaseAllowance(address,uint256)
PC address: 12742
Estimated Gas Usage: 1037 - 1512
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x8b60794127b20c2f4dc58db2da7e6f68ed4fafdf.sol:121

a + b

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:09.817615
Transaction Length: 1
Severity: High
Contract: DynamicSwap
Function name: getInExactOut(address,int256,int256,int256)
PC address: 14595
Estimated Gas Usage: 538 - 633
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0x8b60794127b20c2f4dc58db2da7e6f68ed4fafdf.sol:229

a - b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:20.816586
Transaction Length: 1
Severity: High
Contract: DynamicSwap
Function name: getOutExactIn(address,int256,int256,int256)
PC address: 15815
Estimated Gas Usage: 583 - 678
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x8b60794127b20c2f4dc58db2da7e6f68ed4fafdf.sol:235

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.537652
Transaction Length: 1
Severity: High
Contract: DynamicSwap
Function name: getInExactOut(address,int256,int256,int256)
PC address: 16940
Estimated Gas Usage: 788 - 883
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x8b60794127b20c2f4dc58db2da7e6f68ed4fafdf.sol:215

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x8d4192005ed871056f53df7840c3b6d5866e3339.sol
Total states:49731
147.498457
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.068092
Transaction Length: 0
Severity: High
Contract: ManagerUpgradeable
Function name: constructor
PC address: 104
Estimated Gas Usage: 257 - 3030
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x8d4192005ed871056f53df7840c3b6d5866e3339.sol:14

sert(c / a == b);
   

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.083758
Transaction Length: 0
Severity: High
Contract: ManagerUpgradeable
Function name: constructor
PC address: 106
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x8d4192005ed871056f53df7840c3b6d5866e3339.sol:13

 c = a * b;
        assert(c / a == b);
    

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.076502
Transaction Length: 0
Severity: High
Contract: DFKProxy
Function name: constructor
PC address: 110
Estimated Gas Usage: 257 - 3030
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x8d4192005ed871056f53df7840c3b6d5866e3339.sol:14

sert(c / a == b);
   

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.091831
Transaction Length: 0
Severity: High
Contract: DFKProxy
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x8d4192005ed871056f53df7840c3b6d5866e3339.sol:13

 c = a * b;
        assert(c / a == b);
    

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.149937
Transaction Length: 0
Severity: High
Contract: DFKImplement
Function name: constructor
PC address: 130
Estimated Gas Usage: 317 - 3276
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x8d4192005ed871056f53df7840c3b6d5866e3339.sol:14

sert(c / a == b);
   

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:42.279651
Transaction Length: 1
Severity: Low
Contract: DFKProxy
Function name: withdrawProfit(address)
PC address: 2525
Estimated Gas Usage: 1560 - 2361
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0x8d4192005ed871056f53df7840c3b6d5866e3339.sol:370

impl.withdrawProfit(to)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:44.619989
Transaction Length: 1
Severity: Low
Contract: DFKProxy
Function name: stakingDeposit(uint256)
PC address: 3290
Estimated Gas Usage: 1514 - 2315
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0x8d4192005ed871056f53df7840c3b6d5866e3339.sol:359

impl.stakingDeposit(value)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:45.728801
Transaction Length: 1
Severity: Low
Contract: DFKProxy
Function name: resumeStaking()
PC address: 3592
Estimated Gas Usage: 1472 - 2178
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0x8d4192005ed871056f53df7840c3b6d5866e3339.sol:431

impl.resumeStaking()

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:47.872526
Transaction Length: 1
Severity: Low
Contract: DFKProxy
Function name: withdrawStaking(address,uint256)
PC address: 4544
Estimated Gas Usage: 1628 - 2524
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0x8d4192005ed871056f53df7840c3b6d5866e3339.sol:375

impl.withdrawStaking(to,value)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.759549
Transaction Length: 2
Severity: High
Contract: DFKToken
Function name: increaseApproval(address,uint256)
PC address: 4989
Estimated Gas Usage: 1002 - 1477
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x8d4192005ed871056f53df7840c3b6d5866e3339.sol:31

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.045947
Transaction Length: 2
Severity: High
Contract: StandardToken
Function name: increaseApproval(address,uint256)
PC address: 4989
Estimated Gas Usage: 1002 - 1477
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x8d4192005ed871056f53df7840c3b6d5866e3339.sol:31

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:29.886226
Transaction Length: 2
Severity: Low
Contract: DFKToken
Function name: increaseApproval(address,uint256)
PC address: 5002
Estimated Gas Usage: 1012 - 1487
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x8d4192005ed871056f53df7840c3b6d5866e3339.sol:32

assert(c >= a)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:29.653811
Transaction Length: 2
Severity: Low
Contract: StandardToken
Function name: increaseApproval(address,uint256)
PC address: 5002
Estimated Gas Usage: 1012 - 1487
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x8d4192005ed871056f53df7840c3b6d5866e3339.sol:32

assert(c >= a)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:49.507760
Transaction Length: 1
Severity: Low
Contract: DFKProxy
Function name: profit2Staking(uint256)
PC address: 7128
Estimated Gas Usage: 1537 - 2338
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0x8d4192005ed871056f53df7840c3b6d5866e3339.sol:365

impl.profit2Staking(value)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:50.513270
Transaction Length: 1
Severity: Low
Contract: DFKProxy
Function name: pauseStaking()
PC address: 7905
Estimated Gas Usage: 1471 - 2177
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0x8d4192005ed871056f53df7840c3b6d5866e3339.sol:425

impl.pauseStaking()

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:51.947476
Transaction Length: 1
Severity: Low
Contract: DFKProxy
Function name: withdrawAll(address)
PC address: 8160
Estimated Gas Usage: 1621 - 2422
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0x8d4192005ed871056f53df7840c3b6d5866e3339.sol:380

impl.withdrawAll(to)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x1e54c640eacb49ff1aa2d9c478246540a468e86c.sol
Total states:5682
260.526008
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.486724
Transaction Length: 1
Severity: High
Contract: Staker
Function name: stake()
PC address: 2691
Estimated Gas Usage: 598 - 693
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x1e54c640eacb49ff1aa2d9c478246540a468e86c.sol:174

creationTime + 2 hours

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.127687
Transaction Length: 1
Severity: High
Contract: Staker
Function name: stake()
PC address: 15322
Estimated Gas Usage: 7881 - 113077
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x1e54c640eacb49ff1aa2d9c478246540a468e86c.sol:27

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xd573051e50f97fd8fb7eec96e96f872996a36fa8.sol
Total states:34465
233.450156
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x096835f967D22EC35b78F887c3e9b936b84A3aF7.sol
Total states:359
0.710184
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.464378
Transaction Length: 1
Severity: Low
Contract: GemForRewardChecker
Function name: checkers(uint256)
PC address: 468
Estimated Gas Usage: 634 - 729
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x096835f967D22EC35b78F887c3e9b936b84A3aF7.sol:13

address[] public checkers

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xd848f9b61affaaa2e5a7402e87d27eaa0cc27b6f.sol
Total states:9842
835.612046
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.678767
Transaction Length: 1
Severity: High
Contract: VAPE
Function name: multiTransfer(address[],uint256[])
PC address: 623
Estimated Gas Usage: 341 - 436
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xd848f9b61affaaa2e5a7402e87d27eaa0cc27b6f.sol:5

olidity ^0.5.0;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.597729
Transaction Length: 1
Severity: High
Contract: VAPE
Function name: multiTransfer(address[],uint256[])
PC address: 625
Estimated Gas Usage: 341 - 436
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xd848f9b61affaaa2e5a7402e87d27eaa0cc27b6f.sol:3

*/

//pragma solidity ^0.5.0;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:15.813944
Transaction Length: 1
Severity: High
Contract: VAPE
Function name: multiTransfer(address[],uint256[])
PC address: 771
Estimated Gas Usage: 674 - 3451
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xd848f9b61affaaa2e5a7402e87d27eaa0cc27b6f.sol:5

olidity ^0.5.0;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:32.406617
Transaction Length: 1
Severity: High
Contract: VAPE
Function name: multiTransfer(address[],uint256[])
PC address: 773
Estimated Gas Usage: 674 - 3451
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xd848f9b61affaaa2e5a7402e87d27eaa0cc27b6f.sol:3

*/

//pragma solidity ^0.5.0;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:25.468907
Transaction Length: 1
Severity: High
Contract: VAPE
Function name: symbol()
PC address: 1411
Estimated Gas Usage: 528 - 1658
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xd848f9b61affaaa2e5a7402e87d27eaa0cc27b6f.sol:103

string public constant symbol = "VAPE"

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:23.446286
Transaction Length: 1
Severity: High
Contract: VAPE
Function name: approveAndCall(address,uint256,bytes)
PC address: 1756
Estimated Gas Usage: 444 - 539
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xd848f9b61affaaa2e5a7402e87d27eaa0cc27b6f.sol:3

*/

//pragma solidity ^0.5.0;
pragm

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:16.297563
Transaction Length: 1
Severity: Low
Contract: VAPE
Function name: multiTransfer(address[],uint256[])
PC address: 2361
Estimated Gas Usage: 1028 - 6859
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xd848f9b61affaaa2e5a7402e87d27eaa0cc27b6f.sol:140

amounts[i]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:03:46.906542
Transaction Length: 2
Severity: Low
Contract: VAPE
Function name: multiTransfer(address[],uint256[])
PC address: 2361
Estimated Gas Usage: 1040 - 6871
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xd848f9b61affaaa2e5a7402e87d27eaa0cc27b6f.sol:140

amounts[i]

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:08:13.708062
Transaction Length: 1
Severity: Medium
Contract: VAPE
Function name: approveAndCall(address,uint256,bytes)
PC address: 5473
Estimated Gas Usage: 8291 - 32458
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../new/0xd848f9b61affaaa2e5a7402e87d27eaa0cc27b6f.sol:154

ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xd7E6cf7a09DFC8c820f606119e9E5e58e2E34C66.sol
Total states:3193
9.971941
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.864989
Transaction Length: 2
Severity: High
Contract: LPTokenWrapperWithSlash
Function name: stake(uint256)
PC address: 963
Estimated Gas Usage: 765 - 860
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xd7E6cf7a09DFC8c820f606119e9E5e58e2E34C66.sol:78

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x22dfed2edd99a1f1e6a7475f58e6435e0b6126eb.sol
Total states:2441
15587.499198
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.361301
Transaction Length: 1
Severity: High
Contract: MysticMolochSummoner
Function name: summonMoloch(address,address,address[],uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256)
PC address: 234
Estimated Gas Usage: 362 - 457
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x22dfed2edd99a1f1e6a7475f58e6435e0b6126eb.sol:9

ma solidity 0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.874077
Transaction Length: 1
Severity: High
Contract: MysticMolochSummoner
Function name: summonMoloch(address,address,address[],uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256)
PC address: 236
Estimated Gas Usage: 362 - 457
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x22dfed2edd99a1f1e6a7475f58e6435e0b6126eb.sol:3



*/



//pragma solidity 0.5.17;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:20.020177
Transaction Length: 1
Severity: High
Contract: MysticMolochSummoner
Function name: summonMoloch(address,address,address[],uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256)
PC address: 382
Estimated Gas Usage: 704 - 3481
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x22dfed2edd99a1f1e6a7475f58e6435e0b6126eb.sol:9

ma solidity 0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:32.861446
Transaction Length: 1
Severity: High
Contract: MysticMolochSummoner
Function name: summonMoloch(address,address,address[],uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256)
PC address: 384
Estimated Gas Usage: 704 - 3481
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x22dfed2edd99a1f1e6a7475f58e6435e0b6126eb.sol:3



*/



//pragma solidity 0.5.17;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:11.082234
Transaction Length: 1
Severity: High
Contract: MysticMolochSummoner
Function name: summonMoloch(address,address,address[],uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256)
PC address: 1068
Estimated Gas Usage: 34153 - 42115
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x22dfed2edd99a1f1e6a7475f58e6435e0b6126eb.sol:2112

baal.init(

            _depositToken,

            _stakeToken,

            _summoner,

            _summonerShares,

            _summonerDeposit,

            _proposalDeposit,

            _processingReward,

            _periodDuration,

            _votingPeriodLength,

            _gracePeriodLength,

            _dilutionBound

        )

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:05:24.659512
Transaction Length: 1
Severity: Low
Contract: MysticMolochSummoner
Function name: summonMoloch(address,address,address[],uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256)
PC address: 1152
Estimated Gas Usage: 35124 - 43555
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0x22dfed2edd99a1f1e6a7475f58e6435e0b6126eb.sol:2112

baal.init(

            _depositToken,

            _stakeToken,

            _summoner,

            _summonerShares,

            _summonerDeposit,

            _proposalDeposit,

            _processingReward,

            _periodDuration,

            _votingPeriodLength,

            _gracePeriodLength,

            _dilutionBound

        )

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:04:32.902811
Transaction Length: 1
Severity: Medium
Contract: MysticMolochSummoner
Function name: summonMoloch(address,address,address[],uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256)
PC address: 1391
Estimated Gas Usage: 36672 - 79481
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../new/0x22dfed2edd99a1f1e6a7475f58e6435e0b6126eb.sol:2140

IERC20(_depositToken).transferFrom(msg.sender, address(baal), _summonerDeposit)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.168799
Transaction Length: 1
Severity: High
Contract: MysticMoloch
Function name: withdrawBalances(address[],uint256[],bool)
PC address: 3302
Estimated Gas Usage: 408 - 503
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x22dfed2edd99a1f1e6a7475f58e6435e0b6126eb.sol:9

ma solidity 0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.808311
Transaction Length: 1
Severity: High
Contract: MysticMoloch
Function name: withdrawBalances(address[],uint256[],bool)
PC address: 3304
Estimated Gas Usage: 408 - 503
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x22dfed2edd99a1f1e6a7475f58e6435e0b6126eb.sol:3



*/



//pragma solidity 0.5.17;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:14.446258
Transaction Length: 1
Severity: High
Contract: MysticMoloch
Function name: withdrawBalances(address[],uint256[],bool)
PC address: 3387
Estimated Gas Usage: 584 - 679
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x22dfed2edd99a1f1e6a7475f58e6435e0b6126eb.sol:9

ma solidity 0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:25.233290
Transaction Length: 1
Severity: High
Contract: MysticMoloch
Function name: withdrawBalances(address[],uint256[],bool)
PC address: 3389
Estimated Gas Usage: 584 - 679
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x22dfed2edd99a1f1e6a7475f58e6435e0b6126eb.sol:3



*/



//pragma solidity 0.5.17;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:37.362284
Transaction Length: 1
Severity: High
Contract: MysticMoloch
Function name: submitActionProposal(address,address,uint256,uint256,bytes,bytes32)
PC address: 5178
Estimated Gas Usage: 550 - 645
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x22dfed2edd99a1f1e6a7475f58e6435e0b6126eb.sol:3



*/



//pragma solidity 0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:09.170808
Transaction Length: 1
Severity: High
Contract: MysticMoloch
Function name: init(address,address,address[],uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256)
PC address: 5488
Estimated Gas Usage: 451 - 546
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x22dfed2edd99a1f1e6a7475f58e6435e0b6126eb.sol:9

ma solidity 0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:14.518563
Transaction Length: 1
Severity: High
Contract: MysticMoloch
Function name: init(address,address,address[],uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256)
PC address: 5490
Estimated Gas Usage: 451 - 546
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x22dfed2edd99a1f1e6a7475f58e6435e0b6126eb.sol:3



*/



//pragma solidity 0.5.17;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:20.671418
Transaction Length: 1
Severity: High
Contract: MysticMoloch
Function name: init(address,address,address[],uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256)
PC address: 5573
Estimated Gas Usage: 627 - 722
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x22dfed2edd99a1f1e6a7475f58e6435e0b6126eb.sol:9

ma solidity 0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:28.041273
Transaction Length: 1
Severity: High
Contract: MysticMoloch
Function name: init(address,address,address[],uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256)
PC address: 5575
Estimated Gas Usage: 627 - 722
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x22dfed2edd99a1f1e6a7475f58e6435e0b6126eb.sol:3



*/



//pragma solidity 0.5.17;
pr

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:02.492699
Transaction Length: 1
Severity: Low
Contract: MysticMoloch
Function name: approvedTokens(uint256)
PC address: 9271
Estimated Gas Usage: 791 - 886
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x22dfed2edd99a1f1e6a7475f58e6435e0b6126eb.sol:346

address[] public approvedTokens

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:04.725823
Transaction Length: 1
Severity: Low
Contract: MysticMoloch
Function name: proposalQueue(uint256)
PC address: 12856
Estimated Gas Usage: 769 - 864
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x22dfed2edd99a1f1e6a7475f58e6435e0b6126eb.sol:366

uint256[] public proposalQueue

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:38.949513
Transaction Length: 1
Severity: High
Contract: MysticMoloch
Function name: submitWhitelistProposal(address,bytes32)
PC address: 24290
Estimated Gas Usage: 1106 - 4496
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x22dfed2edd99a1f1e6a7475f58e6435e0b6126eb.sol:618

_submitProposal(address(0), 0, 0, 0, tokenToWhitelist, 0, address(0), details, flags, "")

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 2:08:28.121175
Transaction Length: 1
Severity: High
Contract: MysticMoloch
Function name: getProposalFlags(uint256)
PC address: 25274
Estimated Gas Usage: 1106 - 4496
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x22dfed2edd99a1f1e6a7475f58e6435e0b6126eb.sol:1628

return proposals[proposalId].flags

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 2:08:35.945662
Transaction Length: 1
Severity: High
Contract: MysticMoloch
Function name: getProposalFlags(uint256)
PC address: 25295
Estimated Gas Usage: 1106 - 4496
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x22dfed2edd99a1f1e6a7475f58e6435e0b6126eb.sol:1628

return proposals[proposalId].flags

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 2:08:43.434991
Transaction Length: 1
Severity: High
Contract: MysticMoloch
Function name: getProposalFlags(uint256)
PC address: 25322
Estimated Gas Usage: 1106 - 4496
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x22dfed2edd99a1f1e6a7475f58e6435e0b6126eb.sol:1628

return proposals[proposalId].flags

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:33.854712
Transaction Length: 1
Severity: High
Contract: MysticMoloch
Function name: submitWhitelistProposal(address,bytes32)
PC address: 44536
Estimated Gas Usage: 1106 - 4496
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x22dfed2edd99a1f1e6a7475f58e6435e0b6126eb.sol:146

contract MysticMoloch is ReentrancyGuard { 

    using SafeMath for uint256;



    /***************

    GLOBAL CONSTANTS

    ***************/

    address public depositToken; // deposit token contract reference - default = wETH

    address public stakeToken; // stake token contract reference for guild voting shares 

    address public constant wETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; // canonical ether token wrapper contract reference for proposals

    

    uint256 public proposalDeposit; // default = 10 deposit token 

    uint256 public processingReward; // default = 0.1 - amount of deposit token to give to whoever processes a proposal

    uint256 public periodDuration; // default = 17280 = 4.8 hours in seconds (5 periods per day)

    uint256 public votingPeriodLength; // default = 35 periods (7 days)

    uint256 public gracePeriodLength; // default = 35 periods (7 days)

    uint256 public dilutionBound; // default = 3 - maximum multiplier a YES voter will be obligated to pay in case of mass ragequit

    uint256 public summoningTime; // needed to determine the current period

    

    // HARD-CODED LIMITS

    // These numbers are quite arbitrary; they are small enough to avoid overflows when doing calculations

    // with periods or shares, yet big enough to not limit reasonable use cases.

    uint256 constant MAX_GUILD_BOUND = 10**36; // maximum bound for guild accounting

    uint256 constant MAX_TOKEN_WHITELIST_COUNT = 400; // maximum number of whitelisted tokens

    uint256 constant MAX_TOKEN_GUILDBANK_COUNT = 200; // maximum number of tokens with non-zero balance in guildbank



    // BANK TOKEN DETAILS

    string public constant name = "Moloch DAO v2x Bank";

    string public constant symbol = "MOL-V2X";

    uint8 public constant decimals = 18;



    // **************

    // EVENT TRACKING

    // **************

    event SubmitProposal(address indexed applicant, uint256 sharesRequested, uint256 lootRequested, uint256 tributeOffered, address tributeToken, uint256 paymentRequested, address paymentToken, bytes32 details, uint8[7] flags, bytes data, uint256 proposalId, address indexed delegateKey, address indexed memberAddress);

    event CancelProposal(uint256 indexed proposalId, address applicantAddress);

    event SponsorProposal(address indexed delegateKey, address indexed memberAddress, uint256 proposalId, uint256 proposalIndex, uint256 startingPeriod);

    event SubmitVote(uint256 proposalId, uint256 indexed proposalIndex, address indexed delegateKey, address indexed memberAddress, uint8 uintVote);

    event ProcessProposal(uint256 indexed proposalIndex, uint256 indexed proposalId, bool didPass);

    event ProcessActionProposal(uint256 indexed proposalIndex, uint256 indexed proposalId, bool didPass);

    event ProcessWhitelistProposal(uint256 indexed proposalIndex, uint256 indexed proposalId, bool didPass);

    event ProcessGuildKickProposal(uint256 indexed proposalIndex, uint256 indexed proposalId, bool didPass);

    event UpdateDelegateKey(address indexed memberAddress, address newDelegateKey);

    event Approval(address indexed owner, address indexed spender, uint256 amount); // guild token (loot) allowance tracking

    event Transfer(address indexed from, address indexed to, uint256 amount); // guild token mint, burn & (loot) transfer tracking

    event Ragequit(address indexed memberAddress, uint256 sharesToBurn, uint256 lootToBurn);

    event TokensCollected(address indexed token, uint256 amountToCollect);

    event Withdraw(address indexed memberAddress, address token, uint256 amount);

    

    // *******************

    // INTERNAL ACCOUNTING

    // *******************

    address public constant GUILD = address(0xdead);

    address public constant ESCROW = address(0xdeaf);

    address public constant TOTAL = address(0xdeed);

    

    uint256 public proposalCount; // total proposals submitted

    uint256 public totalShares; // total shares across all members

    uint256 public totalLoot; // total loot across all members

    uint256 public totalGuildBankTokens; // total tokens with non-zero balance in guild bank



    mapping(uint256 => bytes) public actions; // proposalId => action data

    mapping(address => uint256) private balances; // guild token balances

    mapping(address => mapping(address => uint256)) private allowances; // guild token (loot) allowances

    mapping(address => mapping(address => uint256)) private userTokenBalances; // userTokenBalances[userAddress][tokenAddress]



    enum Vote {

        Null, // default value, counted as abstention

        Yes,

        No

    }

    

    struct Member {

        address delegateKey; // the key responsible for submitting proposals & voting - defaults to member address unless updated

        uint8 exists; // always true (1) once a member has been created

        uint256 shares; // the # of voting shares assigned to this member

        uint256 loot; // the loot amount available to this member (combined with shares on ragekick) - transferable by guild token

        uint256 highestIndexYesVote; // highest proposal index # on which the member voted YES

        uint256 jailed; // set to proposalIndex of a passing guild kick proposal for this member, prevents voting on & sponsoring proposals

    }

    

    struct Proposal {

        address applicant; // the applicant who wishes to become a member - this key will be used for withdrawals (doubles as target for alt. proposals)

        address proposer; // the account that submitted the proposal (can be non-member)

        address sponsor; // the member that sponsored the proposal (moving it into the queue)

        address tributeToken; // tribute token contract reference

        address paymentToken; // payment token contract reference

        uint8[7] flags; // [sponsored, processed, didPass, cancelled, whitelist, guildkick, action]

        uint256 sharesRequested; // the # of shares the applicant is requesting

        uint256 lootRequested; // the amount of loot the applicant is requesting

        uint256 paymentRequested; // amount of tokens requested as payment

        uint256 tributeOffered; // amount of tokens offered as tribute

        uint256 startingPeriod; // the period in which voting can start for this proposal

        uint256 yesVotes; // the total number of YES votes for this proposal

        uint256 noVotes; // the total number of NO votes for this proposal

        uint256 maxTotalSharesAndLootAtYesVote; // the maximum # of total shares encountered at a yes vote on this proposal

        bytes32 details; // proposal details to add context for members 

        mapping(address => Vote) votesByMember; // the votes on this proposal by each member

    }



    mapping(address => bool) public tokenWhitelist;

    address[] public approvedTokens;



    mapping(address => bool) public proposedToWhitelist;

    mapping(address => bool) public proposedToKick;

    

    mapping(address => Member) public members;

    mapping(address => address) public memberAddressByDelegateKey;

    

    mapping(uint256 => Proposal) public proposals;



    uint256[] public proposalQueue;

    

    bool public initialized;



    modifier onlyDelegate {

        require(members[memberAddressByDelegateKey[msg.sender]].shares > 0, "!delegate");

        _;

    }



    function init(

        address _depositToken,

        address _stakeToken,

        address[] calldata _summoner,

        uint256[] calldata _summonerShares,

        uint256 _summonerDeposit,

        uint256 _proposalDeposit,

        uint256 _processingReward,

        uint256 _periodDuration,

        uint256 _votingPeriodLength,

        uint256 _gracePeriodLength,

        uint256 _dilutionBound

    ) external {

        require(!initialized, "initialized");

        require(_depositToken != _stakeToken, "depositToken == stakeToken");

        require(_summoner.length == _summonerShares.length, "summoner != summonerShares");

        require(_proposalDeposit >= _processingReward, "_processingReward > _proposalDeposit");

        

        for (uint256 i = 0; i < _summoner.length; i++) {

            registerMember(_summoner[i], _summonerShares[i]);

            mintGuildToken(_summoner[i], _summonerShares[i]);

            totalShares = totalShares.add(_summonerShares[i]);

        }

        

        require(totalShares <= MAX_GUILD_BOUND, "guild maxed");

        

        tokenWhitelist[_depositToken] = true;

        approvedTokens.push(_depositToken);

        

        if (_summonerDeposit > 0) {

            totalGuildBankTokens += 1;

            unsafeAddToBalance(GUILD, _depositToken, _summonerDeposit);

        }

        

        depositToken = _depositToken;

        stakeToken = _stakeToken;

        proposalDeposit = _proposalDeposit;

        processingReward = _processingReward;

        periodDuration = _periodDuration;

        votingPeriodLength = _votingPeriodLength;

        gracePeriodLength = _gracePeriodLength;

        dilutionBound = _dilutionBound;

        summoningTime = now;

        initialized = true;

        

        _initReentrancyGuard();

    }

    

    /*****************

    PROPOSAL FUNCTIONS

    *****************/

    function submitProposal(

        address applicant,

        uint256 sharesRequested,

        uint256 lootRequested,

        uint256 tributeOffered,

        address tributeToken,

        uint256 paymentRequested,

        address paymentToken,

        bytes32 details

    ) payable external nonReentrant returns (uint256 proposalId) {

        require(sharesRequested.add(lootRequested) <= MAX_GUILD_BOUND, "guild maxed");

        require(tokenWhitelist[tributeToken], "tributeToken != whitelist");

        require(tokenWhitelist[paymentToken], "paymentToken != whitelist");

        require(applicant != GUILD && applicant != ESCROW && applicant != TOTAL, "applicant unreservable");

        require(members[applicant].jailed == 0, "applicant jailed");



        if (tributeOffered > 0 && userTokenBalances[GUILD][tributeToken] == 0) {

            require(totalGuildBankTokens < MAX_TOKEN_GUILDBANK_COUNT, "guildbank maxed");

        }

        

        // collect tribute from proposer & store it in the Moloch until the proposal is processed - if ether, wrap into wETH

        if (tributeToken == wETH && msg.value > 0) {

            require(msg.value == tributeOffered, "!ETH");

            IWETH(wETH).deposit();

            (bool success, ) = wETH.call.value(msg.value)("");

            require(success, "!transfer");

            IWETH(wETH).transfer(address(this), msg.value);

        } else {

            require(IERC20(tributeToken).transferFrom(msg.sender, address(this), tributeOffered), "!transfer");

        }

        

        unsafeAddToBalance(ESCROW, tributeToken, tributeOffered);



        uint8[7] memory flags; // [sponsored, processed, didPass, cancelled, whitelist, guildkick, action]



        _submitProposal(applicant, sharesRequested, lootRequested, tributeOffered, tributeToken, paymentRequested, paymentToken, details, flags, "");

        

        return proposalCount - 1; // return proposalId - contracts calling submit might want it

    }

    

    function submitActionProposal( // stages arbitrary function calls for member vote - based on Raid Guild 'Minion'

        address actionTo,

        address actionToken,

        uint256 actionTokenAmount,

        uint256 actionValue,

        bytes calldata data,

        bytes32 details

    ) external returns (uint256 proposalId) {

        

        uint8[7] memory flags; // [sponsored, processed, didPass, cancelled, whitelist, guildkick, action]

        flags[6] = 1; // guild action

        

        _submitProposal(actionTo, 0, 0, actionValue, address(0), actionTokenAmount, actionToken, details, flags, data);

        

        return proposalCount - 1;

    }

    

    function submitWhitelistProposal(address tokenToWhitelist, bytes32 details) external returns (uint256 proposalId) {

        require(tokenToWhitelist != address(0), "!token");

        require(tokenToWhitelist != stakeToken, "tokenToWhitelist == stakeToken");

        require(!tokenWhitelist[tokenToWhitelist], "whitelisted");

        require(approvedTokens.length < MAX_TOKEN_WHITELIST_COUNT, "whitelist maxed");



        uint8[7] memory flags; // [sponsored, processed, didPass, cancelled, whitelist, guildkick, action]

        flags[4] = 1; // whitelist



        _submitProposal(address(0), 0, 0, 0, tokenToWhitelist, 0, address(0), details, flags, "");

        

        return proposalCount - 1;

    }

    

    function submitGuildKickProposal(address memberToKick, bytes32 details) external returns (uint256 proposalId) {

        Member memory member = members[memberToKick];



        require(member.shares > 0 || member.loot > 0, "!share||loot");

        require(members[memberToKick].jailed == 0, "jailed");



        uint8[7] memory flags; // [sponsored, processed, didPass, cancelled, whitelist, guildkick, action]

        flags[5] = 1; // guild kick



        _submitProposal(memberToKick, 0, 0, 0, address(0), 0, address(0), details, flags, "");

        

        return proposalCount - 1;

    }

    

    function _submitProposal(

        address applicant,

        uint256 sharesRequested,

        uint256 lootRequested,

        uint256 tributeOffered,

        address tributeToken,

        uint256 paymentRequested,

        address paymentToken,

        bytes32 details,

        uint8[7] memory flags,

        bytes memory data

    ) internal {

        Proposal memory proposal = Proposal({

            applicant : applicant,

            proposer : msg.sender,

            sponsor : address(0),

            tributeToken : tributeToken,

            paymentToken : paymentToken,

            flags : flags,

            sharesRequested : sharesRequested,

            lootRequested : lootRequested,

            paymentRequested : paymentRequested,

            tributeOffered : tributeOffered,

            startingPeriod : 0,

            yesVotes : 0,

            noVotes : 0,

            maxTotalSharesAndLootAtYesVote : 0,

            details : details

        });

        

        if (proposal.flags[6] == 1) {

            actions[proposalCount] = data;

        }

        

        proposals[proposalCount] = proposal;

        address memberAddress = memberAddressByDelegateKey[msg.sender];

        // NOTE: argument order matters, avoid stack too deep

        emit SubmitProposal(applicant, sharesRequested, lootRequested, tributeOffered, tributeToken, paymentRequested, paymentToken, details, flags, data, proposalCount, msg.sender, memberAddress);

        

        proposalCount += 1;

    }



    function sponsorProposal(uint256 proposalId) external nonReentrant onlyDelegate {

        // collect proposal deposit from sponsor & store it in the Moloch until the proposal is processed

        require(IERC20(depositToken).transferFrom(msg.sender, address(this), proposalDeposit), "!transfer");

        unsafeAddToBalance(ESCROW, depositToken, proposalDeposit);



        Proposal storage proposal = proposals[proposalId];



        require(proposal.proposer != address(0), "!proposed");

        require(proposal.flags[0] == 0, "sponsored");

        require(proposal.flags[3] == 0, "cancelled");

        require(members[proposal.applicant].jailed == 0, "applicant jailed");



        if (proposal.tributeOffered > 0 && userTokenBalances[GUILD][proposal.tributeToken] == 0) {

            require(totalGuildBankTokens < MAX_TOKEN_GUILDBANK_COUNT, "guildbank maxed");

        }



        // whitelist proposal

        if (proposal.flags[4] == 1) {

            require(!tokenWhitelist[address(proposal.tributeToken)], "whitelisted");

            require(!proposedToWhitelist[address(proposal.tributeToken)], "whitelist proposed");

            require(approvedTokens.length < MAX_TOKEN_WHITELIST_COUNT, "whitelist maxed");

            proposedToWhitelist[address(proposal.tributeToken)] = true;



        // guild kick proposal

        } else if (proposal.flags[5] == 1) {

            require(!proposedToKick[proposal.applicant], "kick proposed");

            proposedToKick[proposal.applicant] = true;

        }



        // compute startingPeriod for proposal

        uint256 startingPeriod = max(

            getCurrentPeriod(),

            proposalQueue.length == 0 ? 0 : proposals[proposalQueue[proposalQueue.length - 1]].startingPeriod

        ) + 1;



        proposal.startingPeriod = startingPeriod;



        address memberAddress = memberAddressByDelegateKey[msg.sender];

        proposal.sponsor = memberAddress;



        proposal.flags[0] = 1; // sponsored



        // append proposal to the queue

        proposalQueue.push(proposalId);

        

        emit SponsorProposal(msg.sender, memberAddress, proposalId, proposalQueue.length - 1, startingPeriod);

    }



    // NOTE: In MolochV2 proposalIndex != proposalId

    function submitVote(uint256 proposalIndex, uint8 uintVote) external onlyDelegate {

        address memberAddress = memberAddressByDelegateKey[msg.sender];

        Member storage member = members[memberAddress];



        require(proposalIndex < proposalQueue.length, "!proposed");

        Proposal storage proposal = proposals[proposalQueue[proposalIndex]];



        require(uintVote < 3, "!<3");

        Vote vote = Vote(uintVote);



        require(getCurrentPeriod() >= proposal.startingPeriod, "pending");

        require(!hasVotingPeriodExpired(proposal.startingPeriod), "expired");

        require(proposal.votesByMember[memberAddress] == Vote.Null, "voted");

        require(vote == Vote.Yes || vote == Vote.No, "!Yes||No");



        proposal.votesByMember[memberAddress] = vote;



        if (vote == Vote.Yes) {

            proposal.yesVotes += member.shares;



            // set highest index (latest) yes vote - must be processed for member to ragequit

            if (proposalIndex > member.highestIndexYesVote) {

                member.highestIndexYesVote = proposalIndex;

            }



            // set maximum of total shares encountered at a yes vote - used to bound dilution for yes voters

            if (totalSupply() > proposal.maxTotalSharesAndLootAtYesVote) {

                proposal.maxTotalSharesAndLootAtYesVote = totalSupply();

            }



        } else if (vote == Vote.No) {

            proposal.noVotes += member.shares;

        }

     

        // NOTE: subgraph indexes by proposalId not proposalIndex since proposalIndex isn't set until it's been sponsored but proposal is created on submission

        emit SubmitVote(proposalQueue[proposalIndex], proposalIndex, msg.sender, memberAddress, uintVote);

    }



    function processProposal(uint256 proposalIndex) external {

        _validateProposalForProcessing(proposalIndex);



        uint256 proposalId = proposalQueue[proposalIndex];

        Proposal storage proposal = proposals[proposalId];



        require(proposal.flags[4] == 0 && proposal.flags[5] == 0 && proposal.flags[6] == 0, "!standard");



        proposal.flags[1] = 1; // processed



        bool didPass = _didPass(proposalIndex);



        // Make the proposal fail if the new total number of shares & loot exceeds the limit

        if (totalSupply().add(proposal.sharesRequested).add(proposal.lootRequested) > MAX_GUILD_BOUND) {

            didPass = false;

        }



        // Make the proposal fail if it is requesting more tokens as payment than the available guild bank balance

        if (proposal.paymentRequested > userTokenBalances[GUILD][proposal.paymentToken]) {

            didPass = false;

        }



        // Make the proposal fail if it would result in too many tokens with non-zero balance in guild bank

        if (proposal.tributeOffered > 0 && userTokenBalances[GUILD][proposal.tributeToken] == 0 && totalGuildBankTokens >= MAX_TOKEN_GUILDBANK_COUNT) {

            didPass = false;

        }



        // PROPOSAL PASSED

        if (didPass == true) {

            proposal.flags[2] = 1; // didPass



            // if the applicant is already a member, add to their existing shares & loot

            if (members[proposal.applicant].exists == 1) {

                members[proposal.applicant].shares = members[proposal.applicant].shares.add(proposal.sharesRequested);

                members[proposal.applicant].loot = members[proposal.applicant].loot.add(proposal.lootRequested);



            // if the applicant is a new member, create a new record for them

            } else {

                registerMember(proposal.applicant, proposal.sharesRequested);

            }



            // mint new guild token, shares & loot 

            mintGuildToken(proposal.applicant, proposal.sharesRequested.add(proposal.lootRequested));

            totalShares = totalShares.add(proposal.sharesRequested);

            totalLoot = totalLoot.add(proposal.lootRequested);



            // if the proposal tribute is the first token of its kind to make it into the guild bank, increment total guild bank tokens

            if (userTokenBalances[GUILD][proposal.tributeToken] == 0 && proposal.tributeOffered > 0) {

                totalGuildBankTokens += 1;

            }



            unsafeInternalTransfer(ESCROW, GUILD, proposal.tributeToken, proposal.tributeOffered);

            unsafeInternalTransfer(GUILD, proposal.applicant, proposal.paymentToken, proposal.paymentRequested);



            // if the proposal spends 100% of guild bank balance for a token, decrement total guild bank tokens

            if (userTokenBalances[GUILD][proposal.paymentToken] == 0 && proposal.paymentRequested > 0) {

                totalGuildBankTokens -= 1;

            }



        // PROPOSAL FAILED

        } else {

            // return all tokens to the proposer (not the applicant, because funds come from proposer)

            unsafeInternalTransfer(ESCROW, proposal.proposer, proposal.tributeToken, proposal.tributeOffered);

        }



        _returnDeposit(proposal.sponsor);

        

        emit ProcessProposal(proposalIndex, proposalId, didPass);

    }

    

    function processActionProposal(uint256 proposalIndex) external nonReentrant returns (bool, bytes memory) {

        _validateProposalForProcessing(proposalIndex);

        

        uint256 proposalId = proposalQueue[proposalIndex];

        bytes memory action = actions[proposalId];

        Proposal storage proposal = proposals[proposalId];

        

        require(proposal.flags[6] == 1, "!action");



        proposal.flags[1] = 1; // processed



        bool didPass = _didPass(proposalIndex);

        

        // Make the proposal fail if it is requesting more ether than the available local balance

        if (proposal.paymentToken == address(0) && proposal.tributeOffered > address(this).balance) {

            didPass = false;

        }

        

        // Make the proposal fail if it is requesting more stake token than the available local balance

        if (proposal.paymentToken == stakeToken && proposal.paymentRequested > IERC20(stakeToken).balanceOf(address(this))) {

            didPass = false;

        }

        

        // Make the proposal fail if it is requesting more tokens than the available guild bank balance

        if (proposal.paymentToken != address(0) && proposal.paymentToken != stakeToken && proposal.paymentRequested > userTokenBalances[GUILD][proposal.paymentToken]) {

            didPass = false;

        }



        if (didPass == true) {

            proposal.flags[2] = 1; // didPass

            (bool success, bytes memory retData) = proposal.applicant.call.value(proposal.tributeOffered)(action);

            if (proposal.paymentToken != address(0) && proposal.paymentToken != stakeToken) {

                unsafeSubtractFromBalance(GUILD, proposal.paymentToken, proposal.paymentRequested);

                // if the action proposal spends 100% of guild bank balance for a token, decrement total guild bank tokens

                if (userTokenBalances[GUILD][proposal.paymentToken] == 0 && proposal.paymentRequested > 0) {totalGuildBankTokens -= 1;}

            }

            return (success, retData);

        }

        

        emit ProcessActionProposal(proposalIndex, proposalId, didPass);

    }



    function processWhitelistProposal(uint256 proposalIndex) external {

        _validateProposalForProcessing(proposalIndex);



        uint256 proposalId = proposalQueue[proposalIndex];

        Proposal storage proposal = proposals[proposalId];



        require(proposal.flags[4] == 1, "!whitelist");



        proposal.flags[1] = 1; // processed



        bool didPass = _didPass(proposalIndex);



        if (approvedTokens.length >= MAX_TOKEN_WHITELIST_COUNT) {

            didPass = false;

        }



        if (didPass == true) {

            proposal.flags[2] = 1; // didPass



            tokenWhitelist[address(proposal.tributeToken)] = true;

            approvedTokens.push(proposal.tributeToken);

        }



        proposedToWhitelist[address(proposal.tributeToken)] = false;



        _returnDeposit(proposal.sponsor);

        

        emit ProcessWhitelistProposal(proposalIndex, proposalId, didPass);

    }



    function processGuildKickProposal(uint256 proposalIndex) external {

        _validateProposalForProcessing(proposalIndex);



        uint256 proposalId = proposalQueue[proposalIndex];

        Proposal storage proposal = proposals[proposalId];



        require(proposal.flags[5] == 1, "!kick");



        proposal.flags[1] = 1; // processed



        bool didPass = _didPass(proposalIndex);



        if (didPass == true) {

            proposal.flags[2] = 1; // didPass

            Member storage member = members[proposal.applicant];

            member.jailed = proposalIndex;



            // transfer shares to loot

            member.loot = member.loot.add(member.shares);

            totalShares = totalShares.sub(member.shares);

            totalLoot = totalLoot.add(member.shares);

            member.shares = 0; // revoke all shares

        }



        proposedToKick[proposal.applicant] = false;



        _returnDeposit(proposal.sponsor);

        

        emit ProcessGuildKickProposal(proposalIndex, proposalId, didPass);

    }



    function _didPass(uint256 proposalIndex) internal view returns (bool didPass) {

        Proposal memory proposal = proposals[proposalQueue[proposalIndex]];

        

        if (proposal.yesVotes > proposal.noVotes) {

            didPass = true;

        }

        

        // Make the proposal fail if the dilutionBound is exceeded

        if ((totalSupply().mul(dilutionBound)) < proposal.maxTotalSharesAndLootAtYesVote) {

            didPass = false;

        }



        // Make the proposal fail if the applicant is jailed

        // - for standard proposals, we don't want the applicant to get any shares/loot/payment

        // - for guild kick proposals, we should never be able to propose to kick a jailed member (or have two kick proposals active), so it doesn't matter

        if (members[proposal.applicant].jailed != 0) {

            didPass = false;

        }



        return didPass;

    }



    function _validateProposalForProcessing(uint256 proposalIndex) internal view {

        require(proposalIndex < proposalQueue.length, "!proposal");

        Proposal memory proposal = proposals[proposalQueue[proposalIndex]];



        require(getCurrentPeriod() >= proposal.startingPeriod + votingPeriodLength + gracePeriodLength, "!ready");

        require(proposal.flags[1] == 0, "processed");

        require(proposalIndex == 0 || proposals[proposalQueue[proposalIndex - 1]].flags[1] == 1, "prior !processed");

    }



    function _returnDeposit(address sponsor) internal {

        unsafeInternalTransfer(ESCROW, msg.sender, depositToken, processingReward);

        unsafeInternalTransfer(ESCROW, sponsor, depositToken, proposalDeposit - processingReward);

    }



    function ragequit(uint256 sharesToBurn, uint256 lootToBurn) external {

        require(members[msg.sender].exists == 1, "!member");

        

        _ragequit(msg.sender, sharesToBurn, lootToBurn);

    }



    function _ragequit(address memberAddress, uint256 sharesToBurn, uint256 lootToBurn) internal {

        uint256 initialTotalSharesAndLoot = totalSupply();



        Member storage member = members[memberAddress];



        require(member.shares >= sharesToBurn, "!shares");

        require(member.loot >= lootToBurn, "!loot");



        require(canRagequit(member.highestIndexYesVote), "!ragequit until highest index proposal member voted YES processes");



        uint256 sharesAndLootToBurn = sharesToBurn.add(lootToBurn);



        // burn guild token, shares & loot

        burnGuildToken(memberAddress, sharesAndLootToBurn);

        member.shares = member.shares.sub(sharesToBurn);

        member.loot = member.loot.sub(lootToBurn);

        totalShares = totalShares.sub(sharesToBurn);

        totalLoot = totalLoot.sub(lootToBurn);



        for (uint256 i = 0; i < approvedTokens.length; i++) {

            uint256 amountToRagequit = fairShare(userTokenBalances[GUILD][approvedTokens[i]], sharesAndLootToBurn, initialTotalSharesAndLoot);

            if (amountToRagequit > 0) { // gas optimization to allow a higher maximum token limit

                // deliberately not using safemath here to keep overflows from preventing the function execution (which would break ragekicks)

                // if a token overflows, it is because the supply was artificially inflated to oblivion, so we probably don't care about it anyways

                userTokenBalances[GUILD][approvedTokens[i]] -= amountToRagequit;

                userTokenBalances[memberAddress][approvedTokens[i]] += amountToRagequit;

            }

        }



        emit Ragequit(memberAddress, sharesToBurn, lootToBurn);

    }



    function ragekick(address memberToKick) external {

        Member storage member = members[memberToKick];



        require(member.jailed != 0, "!jailed");

        require(member.loot > 0, "!loot"); // note - should be impossible for jailed member to have shares

        require(canRagequit(member.highestIndexYesVote), "!ragequit until highest index proposal member voted YES processes");



        _ragequit(memberToKick, 0, member.loot);

    }

    

    function withdrawBalance(address token, uint256 amount) external nonReentrant {

        _withdrawBalance(token, amount);

    }



    function withdrawBalances(address[] calldata tokens, uint256[] calldata amounts, bool max) external nonReentrant {

        require(tokens.length == amounts.length, "tokens != amounts");



        for (uint256 i=0; i < tokens.length; i++) {

            uint256 withdrawAmount = amounts[i];

            if (max) { // withdraw the maximum balance

                withdrawAmount = userTokenBalances[msg.sender][tokens[i]];

            }



            _withdrawBalance(tokens[i], withdrawAmount);

        }

    }

    

    function _withdrawBalance(address token, uint256 amount) internal {

        require(userTokenBalances[msg.sender][token] >= amount, "!balance");

        

        require(IERC20(token).transfer(msg.sender, amount), "!transfer");

        unsafeSubtractFromBalance(msg.sender, token, amount);

        

        emit Withdraw(msg.sender, token, amount);

    }



    function collectTokens(address token) external {

        uint256 amountToCollect = IERC20(token).balanceOf(address(this)).sub(userTokenBalances[TOTAL][token]);

        // only collect if 1) there are tokens to collect & 2) token is whitelisted

        require(amountToCollect > 0, "!amount");

        require(tokenWhitelist[token], "!whitelisted");

        

        if (userTokenBalances[GUILD][token] == 0 && totalGuildBankTokens < MAX_TOKEN_GUILDBANK_COUNT) {totalGuildBankTokens += 1;}

        unsafeAddToBalance(GUILD, token, amountToCollect);



        emit TokensCollected(token, amountToCollect);

    }



    // NOTE: requires that delegate key which sent the original proposal cancels, msg.sender == proposal.proposer

    function cancelProposal(uint256 proposalId) external {

        Proposal storage proposal = proposals[proposalId];

        require(proposal.flags[0] == 0, "sponsored");

        require(proposal.flags[3] == 0, "cancelled");

        require(msg.sender == proposal.proposer, "!proposer");



        proposal.flags[3] = 1; // cancelled

        

        unsafeInternalTransfer(ESCROW, proposal.proposer, proposal.tributeToken, proposal.tributeOffered);

        

        emit CancelProposal(proposalId, msg.sender);

    }



    function updateDelegateKey(address newDelegateKey) external {

        require(members[msg.sender].shares > 0, "caller !shareholder");

        require(newDelegateKey != address(0), "newDelegateKey == 0");



        // skip checks if member is setting the delegate key to their member address

        if (newDelegateKey != msg.sender) {

            require(members[newDelegateKey].exists == 0, "!overwrite members");

            require(members[memberAddressByDelegateKey[newDelegateKey]].exists == 0, "!overwrite keys");

        }



        Member storage member = members[msg.sender];

        memberAddressByDelegateKey[member.delegateKey] = address(0);

        memberAddressByDelegateKey[newDelegateKey] = msg.sender;

        member.delegateKey = newDelegateKey;



        emit UpdateDelegateKey(msg.sender, newDelegateKey);

    }

    

    // can only ragequit if the latest proposal you voted YES on has been processed

    function canRagequit(uint256 highestIndexYesVote) public view returns (bool) {

        require(highestIndexYesVote < proposalQueue.length, "!proposal");

        

        return proposals[proposalQueue[highestIndexYesVote]].flags[1] == 1;

    }



    function hasVotingPeriodExpired(uint256 startingPeriod) public view returns (bool) {

        return getCurrentPeriod() >= startingPeriod + votingPeriodLength;

    }

    

    /***************

    GETTER FUNCTIONS

    ***************/

    function max(uint256 x, uint256 y) internal pure returns (uint256) {

        return x >= y ? x : y;

    }

    

    function getCurrentPeriod() public view returns (uint256) {

        return now.sub(summoningTime).div(periodDuration);

    }

    

    function getMemberProposalVote(address memberAddress, uint256 proposalIndex) external view returns (Vote) {

        require(members[memberAddress].exists == 1, "!member");

        require(proposalIndex < proposalQueue.length, "!proposed");

        

        return proposals[proposalQueue[proposalIndex]].votesByMember[memberAddress];

    }



    function getProposalFlags(uint256 proposalId) external view returns (uint8[7] memory) {

        return proposals[proposalId].flags;

    }

    

    function getProposalQueueLength() external view returns (uint256) {

        return proposalQueue.length;

    }

    

    function getTokenCount() external view returns (uint256) {

        return approvedTokens.length;

    }



    function getUserTokenBalance(address user, address token) external view returns (uint256) {

        return userTokenBalances[user][token];

    }

    

    /***************

    HELPER FUNCTIONS

    ***************/

    function() external payable {}

    

    function fairShare(uint256 balance, uint256 shares, uint256 totalSharesAndLoot) internal pure returns (uint256) {

        require(totalSharesAndLoot != 0);



        if (balance == 0) { return 0; }



        uint256 prod = balance * shares;



        if (prod / balance == shares) { // no overflow in multiplication above?

            return prod / totalSharesAndLoot;

        }



        return (balance / totalSharesAndLoot) * shares;

    }

    

    function registerMember(address newMember, uint256 shares) internal {

        // if new member is already taken by a member's delegateKey, reset it to their member address

        if (members[memberAddressByDelegateKey[newMember]].exists == 1) {

            address memberToOverride = memberAddressByDelegateKey[newMember];

            memberAddressByDelegateKey[memberToOverride] = memberToOverride;

            members[memberToOverride].delegateKey = memberToOverride;

        }

        

        members[newMember] = Member({

            delegateKey : newMember,

            exists : 1, // 'true'

            shares : shares,

            loot : 0,

            highestIndexYesVote : 0,

            jailed : 0

        });



        memberAddressByDelegateKey[newMember] = newMember;

    }

    

    function unsafeAddToBalance(address user, address token, uint256 amount) internal {

        userTokenBalances[user][token] += amount;

        userTokenBalances[TOTAL][token] += amount;

    }

    

    function unsafeInternalTransfer(address from, address to, address token, uint256 amount) internal {

        unsafeSubtractFromBalance(from, token, amount);

        unsafeAddToBalance(to, token, amount);

    }



    function unsafeSubtractFromBalance(address user, address token, uint256 amount) internal {

        userTokenBalances[user][token] -= amount;

        userTokenBalances[TOTAL][token] -= amount;

    }

    

    /********************

    GUILD TOKEN FUNCTIONS

    ********************/

    // GETTER FUNCTIONS

    function balanceOf(address account) external view returns (uint256) { 

        return balances[account];

    }

    

    function totalSupply() public view returns (uint256) { 

        return totalShares.add(totalLoot);

    }

    

    // BALANCE MGMT FUNCTIONS

    function allowance(address owner, address spender) external view returns (uint256) { // tracks guild token (loot) allowances 

        return allowances[owner][spender];

    }

    

    function approve(address spender, uint256 amount) external returns (bool) {

        if(amount != 0 && allowances[msg.sender][spender] != 0) {return false;}

        

        allowances[msg.sender][spender] = amount;

        

        emit Approval(msg.sender, spender, amount);

        

        return true;

    }

    

    function burnGuildToken(address memberAddress, uint256 amount) internal {

        balances[memberAddress] = balances[memberAddress].sub(amount);

        

        emit Transfer(memberAddress, address(0), amount);

    }

    

    function claimShares(uint256 amount) external nonReentrant {

        require(IERC20(stakeToken).transferFrom(msg.sender, address(this), amount), "!transfer"); // deposit stake token & claim shares (1:1)

        

        // if the sender is already a member, add to their existing shares 

        if (members[msg.sender].exists == 1) {

            members[msg.sender].shares = members[msg.sender].shares.add(amount);



        // if the sender is a new member, create a new record for them

        } else {

            registerMember(msg.sender, amount);

        }



        // mint new guild token & shares 

        mintGuildToken(msg.sender, amount);

        totalShares = totalShares.add(amount);

            

        require(totalShares <= MAX_GUILD_BOUND, "guild maxed");

    }

    

    function convertSharesToLoot(uint256 sharesToLoot) external {

        require(members[msg.sender].shares >= sharesToLoot, "!shares");

        

        members[msg.sender].shares = members[msg.sender].shares.sub(sharesToLoot);

        members[msg.sender].loot = members[msg.sender].loot.add(sharesToLoot);

        totalShares = totalShares.sub(sharesToLoot);

        totalLoot = totalLoot.add(sharesToLoot);

    }

    

    function mintGuildToken(address memberAddress, uint256 amount) internal {

        balances[memberAddress] = balances[memberAddress].add(amount);

        

        emit Transfer(address(0), memberAddress, amount);

    }



    // LOOT TRANSFER FUNCTIONS

    function transfer(address receiver, uint256 lootToTransfer) external returns (bool) {

        require(members[msg.sender].loot >= lootToTransfer, "!loot");

        

        members[msg.sender].loot = members[msg.sender].loot.sub(lootToTransfer);

        members[receiver].loot = members[receiver].loot.add(lootToTransfer);

        

        balances[msg.sender] = balances[msg.sender].sub(lootToTransfer);

        balances[receiver] = balances[receiver].add(lootToTransfer);

        

        emit Transfer(msg.sender, receiver, lootToTransfer);

        

        return true;

    }

    

    function transferFrom(address sender, address receiver, uint256 lootToTransfer) external returns (bool) {

        require(members[sender].loot >= lootToTransfer, "!loot");

        

        allowances[sender][msg.sender] = allowances[sender][msg.sender].sub(lootToTransfer);

        

        members[sender].loot = members[sender].loot.sub(lootToTransfer);

        members[receiver].loot = members[receiver].loot.add(lootToTransfer);

        

        balances[sender] = balances[sender].sub(lootToTransfer);

        balances[receiver] = balances[receiver].add(lootToTransfer);

        

        emit Transfer(sender, receiver, lootToTransfer);

        

        return true;

    }

}

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:44.911949
Transaction Length: 1
Severity: High
Contract: MysticMoloch
Function name: submitWhitelistProposal(address,bytes32)
PC address: 44572
Estimated Gas Usage: 1106 - 4496
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x22dfed2edd99a1f1e6a7475f58e6435e0b6126eb.sol:146

contract MysticMoloch is ReentrancyGuard { 

    using SafeMath for uint256;



    /***************

    GLOBAL CONSTANTS

    ***************/

    address public depositToken; // deposit token contract reference - default = wETH

    address public stakeToken; // stake token contract reference for guild voting shares 

    address public constant wETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; // canonical ether token wrapper contract reference for proposals

    

    uint256 public proposalDeposit; // default = 10 deposit token 

    uint256 public processingReward; // default = 0.1 - amount of deposit token to give to whoever processes a proposal

    uint256 public periodDuration; // default = 17280 = 4.8 hours in seconds (5 periods per day)

    uint256 public votingPeriodLength; // default = 35 periods (7 days)

    uint256 public gracePeriodLength; // default = 35 periods (7 days)

    uint256 public dilutionBound; // default = 3 - maximum multiplier a YES voter will be obligated to pay in case of mass ragequit

    uint256 public summoningTime; // needed to determine the current period

    

    // HARD-CODED LIMITS

    // These numbers are quite arbitrary; they are small enough to avoid overflows when doing calculations

    // with periods or shares, yet big enough to not limit reasonable use cases.

    uint256 constant MAX_GUILD_BOUND = 10**36; // maximum bound for guild accounting

    uint256 constant MAX_TOKEN_WHITELIST_COUNT = 400; // maximum number of whitelisted tokens

    uint256 constant MAX_TOKEN_GUILDBANK_COUNT = 200; // maximum number of tokens with non-zero balance in guildbank



    // BANK TOKEN DETAILS

    string public constant name = "Moloch DAO v2x Bank";

    string public constant symbol = "MOL-V2X";

    uint8 public constant decimals = 18;



    // **************

    // EVENT TRACKING

    // **************

    event SubmitProposal(address indexed applicant, uint256 sharesRequested, uint256 lootRequested, uint256 tributeOffered, address tributeToken, uint256 paymentRequested, address paymentToken, bytes32 details, uint8[7] flags, bytes data, uint256 proposalId, address indexed delegateKey, address indexed memberAddress);

    event CancelProposal(uint256 indexed proposalId, address applicantAddress);

    event SponsorProposal(address indexed delegateKey, address indexed memberAddress, uint256 proposalId, uint256 proposalIndex, uint256 startingPeriod);

    event SubmitVote(uint256 proposalId, uint256 indexed proposalIndex, address indexed delegateKey, address indexed memberAddress, uint8 uintVote);

    event ProcessProposal(uint256 indexed proposalIndex, uint256 indexed proposalId, bool didPass);

    event ProcessActionProposal(uint256 indexed proposalIndex, uint256 indexed proposalId, bool didPass);

    event ProcessWhitelistProposal(uint256 indexed proposalIndex, uint256 indexed proposalId, bool didPass);

    event ProcessGuildKickProposal(uint256 indexed proposalIndex, uint256 indexed proposalId, bool didPass);

    event UpdateDelegateKey(address indexed memberAddress, address newDelegateKey);

    event Approval(address indexed owner, address indexed spender, uint256 amount); // guild token (loot) allowance tracking

    event Transfer(address indexed from, address indexed to, uint256 amount); // guild token mint, burn & (loot) transfer tracking

    event Ragequit(address indexed memberAddress, uint256 sharesToBurn, uint256 lootToBurn);

    event TokensCollected(address indexed token, uint256 amountToCollect);

    event Withdraw(address indexed memberAddress, address token, uint256 amount);

    

    // *******************

    // INTERNAL ACCOUNTING

    // *******************

    address public constant GUILD = address(0xdead);

    address public constant ESCROW = address(0xdeaf);

    address public constant TOTAL = address(0xdeed);

    

    uint256 public proposalCount; // total proposals submitted

    uint256 public totalShares; // total shares across all members

    uint256 public totalLoot; // total loot across all members

    uint256 public totalGuildBankTokens; // total tokens with non-zero balance in guild bank



    mapping(uint256 => bytes) public actions; // proposalId => action data

    mapping(address => uint256) private balances; // guild token balances

    mapping(address => mapping(address => uint256)) private allowances; // guild token (loot) allowances

    mapping(address => mapping(address => uint256)) private userTokenBalances; // userTokenBalances[userAddress][tokenAddress]



    enum Vote {

        Null, // default value, counted as abstention

        Yes,

        No

    }

    

    struct Member {

        address delegateKey; // the key responsible for submitting proposals & voting - defaults to member address unless updated

        uint8 exists; // always true (1) once a member has been created

        uint256 shares; // the # of voting shares assigned to this member

        uint256 loot; // the loot amount available to this member (combined with shares on ragekick) - transferable by guild token

        uint256 highestIndexYesVote; // highest proposal index # on which the member voted YES

        uint256 jailed; // set to proposalIndex of a passing guild kick proposal for this member, prevents voting on & sponsoring proposals

    }

    

    struct Proposal {

        address applicant; // the applicant who wishes to become a member - this key will be used for withdrawals (doubles as target for alt. proposals)

        address proposer; // the account that submitted the proposal (can be non-member)

        address sponsor; // the member that sponsored the proposal (moving it into the queue)

        address tributeToken; // tribute token contract reference

        address paymentToken; // payment token contract reference

        uint8[7] flags; // [sponsored, processed, didPass, cancelled, whitelist, guildkick, action]

        uint256 sharesRequested; // the # of shares the applicant is requesting

        uint256 lootRequested; // the amount of loot the applicant is requesting

        uint256 paymentRequested; // amount of tokens requested as payment

        uint256 tributeOffered; // amount of tokens offered as tribute

        uint256 startingPeriod; // the period in which voting can start for this proposal

        uint256 yesVotes; // the total number of YES votes for this proposal

        uint256 noVotes; // the total number of NO votes for this proposal

        uint256 maxTotalSharesAndLootAtYesVote; // the maximum # of total shares encountered at a yes vote on this proposal

        bytes32 details; // proposal details to add context for members 

        mapping(address => Vote) votesByMember; // the votes on this proposal by each member

    }



    mapping(address => bool) public tokenWhitelist;

    address[] public approvedTokens;



    mapping(address => bool) public proposedToWhitelist;

    mapping(address => bool) public proposedToKick;

    

    mapping(address => Member) public members;

    mapping(address => address) public memberAddressByDelegateKey;

    

    mapping(uint256 => Proposal) public proposals;



    uint256[] public proposalQueue;

    

    bool public initialized;



    modifier onlyDelegate {

        require(members[memberAddressByDelegateKey[msg.sender]].shares > 0, "!delegate");

        _;

    }



    function init(

        address _depositToken,

        address _stakeToken,

        address[] calldata _summoner,

        uint256[] calldata _summonerShares,

        uint256 _summonerDeposit,

        uint256 _proposalDeposit,

        uint256 _processingReward,

        uint256 _periodDuration,

        uint256 _votingPeriodLength,

        uint256 _gracePeriodLength,

        uint256 _dilutionBound

    ) external {

        require(!initialized, "initialized");

        require(_depositToken != _stakeToken, "depositToken == stakeToken");

        require(_summoner.length == _summonerShares.length, "summoner != summonerShares");

        require(_proposalDeposit >= _processingReward, "_processingReward > _proposalDeposit");

        

        for (uint256 i = 0; i < _summoner.length; i++) {

            registerMember(_summoner[i], _summonerShares[i]);

            mintGuildToken(_summoner[i], _summonerShares[i]);

            totalShares = totalShares.add(_summonerShares[i]);

        }

        

        require(totalShares <= MAX_GUILD_BOUND, "guild maxed");

        

        tokenWhitelist[_depositToken] = true;

        approvedTokens.push(_depositToken);

        

        if (_summonerDeposit > 0) {

            totalGuildBankTokens += 1;

            unsafeAddToBalance(GUILD, _depositToken, _summonerDeposit);

        }

        

        depositToken = _depositToken;

        stakeToken = _stakeToken;

        proposalDeposit = _proposalDeposit;

        processingReward = _processingReward;

        periodDuration = _periodDuration;

        votingPeriodLength = _votingPeriodLength;

        gracePeriodLength = _gracePeriodLength;

        dilutionBound = _dilutionBound;

        summoningTime = now;

        initialized = true;

        

        _initReentrancyGuard();

    }

    

    /*****************

    PROPOSAL FUNCTIONS

    *****************/

    function submitProposal(

        address applicant,

        uint256 sharesRequested,

        uint256 lootRequested,

        uint256 tributeOffered,

        address tributeToken,

        uint256 paymentRequested,

        address paymentToken,

        bytes32 details

    ) payable external nonReentrant returns (uint256 proposalId) {

        require(sharesRequested.add(lootRequested) <= MAX_GUILD_BOUND, "guild maxed");

        require(tokenWhitelist[tributeToken], "tributeToken != whitelist");

        require(tokenWhitelist[paymentToken], "paymentToken != whitelist");

        require(applicant != GUILD && applicant != ESCROW && applicant != TOTAL, "applicant unreservable");

        require(members[applicant].jailed == 0, "applicant jailed");



        if (tributeOffered > 0 && userTokenBalances[GUILD][tributeToken] == 0) {

            require(totalGuildBankTokens < MAX_TOKEN_GUILDBANK_COUNT, "guildbank maxed");

        }

        

        // collect tribute from proposer & store it in the Moloch until the proposal is processed - if ether, wrap into wETH

        if (tributeToken == wETH && msg.value > 0) {

            require(msg.value == tributeOffered, "!ETH");

            IWETH(wETH).deposit();

            (bool success, ) = wETH.call.value(msg.value)("");

            require(success, "!transfer");

            IWETH(wETH).transfer(address(this), msg.value);

        } else {

            require(IERC20(tributeToken).transferFrom(msg.sender, address(this), tributeOffered), "!transfer");

        }

        

        unsafeAddToBalance(ESCROW, tributeToken, tributeOffered);



        uint8[7] memory flags; // [sponsored, processed, didPass, cancelled, whitelist, guildkick, action]



        _submitProposal(applicant, sharesRequested, lootRequested, tributeOffered, tributeToken, paymentRequested, paymentToken, details, flags, "");

        

        return proposalCount - 1; // return proposalId - contracts calling submit might want it

    }

    

    function submitActionProposal( // stages arbitrary function calls for member vote - based on Raid Guild 'Minion'

        address actionTo,

        address actionToken,

        uint256 actionTokenAmount,

        uint256 actionValue,

        bytes calldata data,

        bytes32 details

    ) external returns (uint256 proposalId) {

        

        uint8[7] memory flags; // [sponsored, processed, didPass, cancelled, whitelist, guildkick, action]

        flags[6] = 1; // guild action

        

        _submitProposal(actionTo, 0, 0, actionValue, address(0), actionTokenAmount, actionToken, details, flags, data);

        

        return proposalCount - 1;

    }

    

    function submitWhitelistProposal(address tokenToWhitelist, bytes32 details) external returns (uint256 proposalId) {

        require(tokenToWhitelist != address(0), "!token");

        require(tokenToWhitelist != stakeToken, "tokenToWhitelist == stakeToken");

        require(!tokenWhitelist[tokenToWhitelist], "whitelisted");

        require(approvedTokens.length < MAX_TOKEN_WHITELIST_COUNT, "whitelist maxed");



        uint8[7] memory flags; // [sponsored, processed, didPass, cancelled, whitelist, guildkick, action]

        flags[4] = 1; // whitelist



        _submitProposal(address(0), 0, 0, 0, tokenToWhitelist, 0, address(0), details, flags, "");

        

        return proposalCount - 1;

    }

    

    function submitGuildKickProposal(address memberToKick, bytes32 details) external returns (uint256 proposalId) {

        Member memory member = members[memberToKick];



        require(member.shares > 0 || member.loot > 0, "!share||loot");

        require(members[memberToKick].jailed == 0, "jailed");



        uint8[7] memory flags; // [sponsored, processed, didPass, cancelled, whitelist, guildkick, action]

        flags[5] = 1; // guild kick



        _submitProposal(memberToKick, 0, 0, 0, address(0), 0, address(0), details, flags, "");

        

        return proposalCount - 1;

    }

    

    function _submitProposal(

        address applicant,

        uint256 sharesRequested,

        uint256 lootRequested,

        uint256 tributeOffered,

        address tributeToken,

        uint256 paymentRequested,

        address paymentToken,

        bytes32 details,

        uint8[7] memory flags,

        bytes memory data

    ) internal {

        Proposal memory proposal = Proposal({

            applicant : applicant,

            proposer : msg.sender,

            sponsor : address(0),

            tributeToken : tributeToken,

            paymentToken : paymentToken,

            flags : flags,

            sharesRequested : sharesRequested,

            lootRequested : lootRequested,

            paymentRequested : paymentRequested,

            tributeOffered : tributeOffered,

            startingPeriod : 0,

            yesVotes : 0,

            noVotes : 0,

            maxTotalSharesAndLootAtYesVote : 0,

            details : details

        });

        

        if (proposal.flags[6] == 1) {

            actions[proposalCount] = data;

        }

        

        proposals[proposalCount] = proposal;

        address memberAddress = memberAddressByDelegateKey[msg.sender];

        // NOTE: argument order matters, avoid stack too deep

        emit SubmitProposal(applicant, sharesRequested, lootRequested, tributeOffered, tributeToken, paymentRequested, paymentToken, details, flags, data, proposalCount, msg.sender, memberAddress);

        

        proposalCount += 1;

    }



    function sponsorProposal(uint256 proposalId) external nonReentrant onlyDelegate {

        // collect proposal deposit from sponsor & store it in the Moloch until the proposal is processed

        require(IERC20(depositToken).transferFrom(msg.sender, address(this), proposalDeposit), "!transfer");

        unsafeAddToBalance(ESCROW, depositToken, proposalDeposit);



        Proposal storage proposal = proposals[proposalId];



        require(proposal.proposer != address(0), "!proposed");

        require(proposal.flags[0] == 0, "sponsored");

        require(proposal.flags[3] == 0, "cancelled");

        require(members[proposal.applicant].jailed == 0, "applicant jailed");



        if (proposal.tributeOffered > 0 && userTokenBalances[GUILD][proposal.tributeToken] == 0) {

            require(totalGuildBankTokens < MAX_TOKEN_GUILDBANK_COUNT, "guildbank maxed");

        }



        // whitelist proposal

        if (proposal.flags[4] == 1) {

            require(!tokenWhitelist[address(proposal.tributeToken)], "whitelisted");

            require(!proposedToWhitelist[address(proposal.tributeToken)], "whitelist proposed");

            require(approvedTokens.length < MAX_TOKEN_WHITELIST_COUNT, "whitelist maxed");

            proposedToWhitelist[address(proposal.tributeToken)] = true;



        // guild kick proposal

        } else if (proposal.flags[5] == 1) {

            require(!proposedToKick[proposal.applicant], "kick proposed");

            proposedToKick[proposal.applicant] = true;

        }



        // compute startingPeriod for proposal

        uint256 startingPeriod = max(

            getCurrentPeriod(),

            proposalQueue.length == 0 ? 0 : proposals[proposalQueue[proposalQueue.length - 1]].startingPeriod

        ) + 1;



        proposal.startingPeriod = startingPeriod;



        address memberAddress = memberAddressByDelegateKey[msg.sender];

        proposal.sponsor = memberAddress;



        proposal.flags[0] = 1; // sponsored



        // append proposal to the queue

        proposalQueue.push(proposalId);

        

        emit SponsorProposal(msg.sender, memberAddress, proposalId, proposalQueue.length - 1, startingPeriod);

    }



    // NOTE: In MolochV2 proposalIndex != proposalId

    function submitVote(uint256 proposalIndex, uint8 uintVote) external onlyDelegate {

        address memberAddress = memberAddressByDelegateKey[msg.sender];

        Member storage member = members[memberAddress];



        require(proposalIndex < proposalQueue.length, "!proposed");

        Proposal storage proposal = proposals[proposalQueue[proposalIndex]];



        require(uintVote < 3, "!<3");

        Vote vote = Vote(uintVote);



        require(getCurrentPeriod() >= proposal.startingPeriod, "pending");

        require(!hasVotingPeriodExpired(proposal.startingPeriod), "expired");

        require(proposal.votesByMember[memberAddress] == Vote.Null, "voted");

        require(vote == Vote.Yes || vote == Vote.No, "!Yes||No");



        proposal.votesByMember[memberAddress] = vote;



        if (vote == Vote.Yes) {

            proposal.yesVotes += member.shares;



            // set highest index (latest) yes vote - must be processed for member to ragequit

            if (proposalIndex > member.highestIndexYesVote) {

                member.highestIndexYesVote = proposalIndex;

            }



            // set maximum of total shares encountered at a yes vote - used to bound dilution for yes voters

            if (totalSupply() > proposal.maxTotalSharesAndLootAtYesVote) {

                proposal.maxTotalSharesAndLootAtYesVote = totalSupply();

            }



        } else if (vote == Vote.No) {

            proposal.noVotes += member.shares;

        }

     

        // NOTE: subgraph indexes by proposalId not proposalIndex since proposalIndex isn't set until it's been sponsored but proposal is created on submission

        emit SubmitVote(proposalQueue[proposalIndex], proposalIndex, msg.sender, memberAddress, uintVote);

    }



    function processProposal(uint256 proposalIndex) external {

        _validateProposalForProcessing(proposalIndex);



        uint256 proposalId = proposalQueue[proposalIndex];

        Proposal storage proposal = proposals[proposalId];



        require(proposal.flags[4] == 0 && proposal.flags[5] == 0 && proposal.flags[6] == 0, "!standard");



        proposal.flags[1] = 1; // processed



        bool didPass = _didPass(proposalIndex);



        // Make the proposal fail if the new total number of shares & loot exceeds the limit

        if (totalSupply().add(proposal.sharesRequested).add(proposal.lootRequested) > MAX_GUILD_BOUND) {

            didPass = false;

        }



        // Make the proposal fail if it is requesting more tokens as payment than the available guild bank balance

        if (proposal.paymentRequested > userTokenBalances[GUILD][proposal.paymentToken]) {

            didPass = false;

        }



        // Make the proposal fail if it would result in too many tokens with non-zero balance in guild bank

        if (proposal.tributeOffered > 0 && userTokenBalances[GUILD][proposal.tributeToken] == 0 && totalGuildBankTokens >= MAX_TOKEN_GUILDBANK_COUNT) {

            didPass = false;

        }



        // PROPOSAL PASSED

        if (didPass == true) {

            proposal.flags[2] = 1; // didPass



            // if the applicant is already a member, add to their existing shares & loot

            if (members[proposal.applicant].exists == 1) {

                members[proposal.applicant].shares = members[proposal.applicant].shares.add(proposal.sharesRequested);

                members[proposal.applicant].loot = members[proposal.applicant].loot.add(proposal.lootRequested);



            // if the applicant is a new member, create a new record for them

            } else {

                registerMember(proposal.applicant, proposal.sharesRequested);

            }



            // mint new guild token, shares & loot 

            mintGuildToken(proposal.applicant, proposal.sharesRequested.add(proposal.lootRequested));

            totalShares = totalShares.add(proposal.sharesRequested);

            totalLoot = totalLoot.add(proposal.lootRequested);



            // if the proposal tribute is the first token of its kind to make it into the guild bank, increment total guild bank tokens

            if (userTokenBalances[GUILD][proposal.tributeToken] == 0 && proposal.tributeOffered > 0) {

                totalGuildBankTokens += 1;

            }



            unsafeInternalTransfer(ESCROW, GUILD, proposal.tributeToken, proposal.tributeOffered);

            unsafeInternalTransfer(GUILD, proposal.applicant, proposal.paymentToken, proposal.paymentRequested);



            // if the proposal spends 100% of guild bank balance for a token, decrement total guild bank tokens

            if (userTokenBalances[GUILD][proposal.paymentToken] == 0 && proposal.paymentRequested > 0) {

                totalGuildBankTokens -= 1;

            }



        // PROPOSAL FAILED

        } else {

            // return all tokens to the proposer (not the applicant, because funds come from proposer)

            unsafeInternalTransfer(ESCROW, proposal.proposer, proposal.tributeToken, proposal.tributeOffered);

        }



        _returnDeposit(proposal.sponsor);

        

        emit ProcessProposal(proposalIndex, proposalId, didPass);

    }

    

    function processActionProposal(uint256 proposalIndex) external nonReentrant returns (bool, bytes memory) {

        _validateProposalForProcessing(proposalIndex);

        

        uint256 proposalId = proposalQueue[proposalIndex];

        bytes memory action = actions[proposalId];

        Proposal storage proposal = proposals[proposalId];

        

        require(proposal.flags[6] == 1, "!action");



        proposal.flags[1] = 1; // processed



        bool didPass = _didPass(proposalIndex);

        

        // Make the proposal fail if it is requesting more ether than the available local balance

        if (proposal.paymentToken == address(0) && proposal.tributeOffered > address(this).balance) {

            didPass = false;

        }

        

        // Make the proposal fail if it is requesting more stake token than the available local balance

        if (proposal.paymentToken == stakeToken && proposal.paymentRequested > IERC20(stakeToken).balanceOf(address(this))) {

            didPass = false;

        }

        

        // Make the proposal fail if it is requesting more tokens than the available guild bank balance

        if (proposal.paymentToken != address(0) && proposal.paymentToken != stakeToken && proposal.paymentRequested > userTokenBalances[GUILD][proposal.paymentToken]) {

            didPass = false;

        }



        if (didPass == true) {

            proposal.flags[2] = 1; // didPass

            (bool success, bytes memory retData) = proposal.applicant.call.value(proposal.tributeOffered)(action);

            if (proposal.paymentToken != address(0) && proposal.paymentToken != stakeToken) {

                unsafeSubtractFromBalance(GUILD, proposal.paymentToken, proposal.paymentRequested);

                // if the action proposal spends 100% of guild bank balance for a token, decrement total guild bank tokens

                if (userTokenBalances[GUILD][proposal.paymentToken] == 0 && proposal.paymentRequested > 0) {totalGuildBankTokens -= 1;}

            }

            return (success, retData);

        }

        

        emit ProcessActionProposal(proposalIndex, proposalId, didPass);

    }



    function processWhitelistProposal(uint256 proposalIndex) external {

        _validateProposalForProcessing(proposalIndex);



        uint256 proposalId = proposalQueue[proposalIndex];

        Proposal storage proposal = proposals[proposalId];



        require(proposal.flags[4] == 1, "!whitelist");



        proposal.flags[1] = 1; // processed



        bool didPass = _didPass(proposalIndex);



        if (approvedTokens.length >= MAX_TOKEN_WHITELIST_COUNT) {

            didPass = false;

        }



        if (didPass == true) {

            proposal.flags[2] = 1; // didPass



            tokenWhitelist[address(proposal.tributeToken)] = true;

            approvedTokens.push(proposal.tributeToken);

        }



        proposedToWhitelist[address(proposal.tributeToken)] = false;



        _returnDeposit(proposal.sponsor);

        

        emit ProcessWhitelistProposal(proposalIndex, proposalId, didPass);

    }



    function processGuildKickProposal(uint256 proposalIndex) external {

        _validateProposalForProcessing(proposalIndex);



        uint256 proposalId = proposalQueue[proposalIndex];

        Proposal storage proposal = proposals[proposalId];



        require(proposal.flags[5] == 1, "!kick");



        proposal.flags[1] = 1; // processed



        bool didPass = _didPass(proposalIndex);



        if (didPass == true) {

            proposal.flags[2] = 1; // didPass

            Member storage member = members[proposal.applicant];

            member.jailed = proposalIndex;



            // transfer shares to loot

            member.loot = member.loot.add(member.shares);

            totalShares = totalShares.sub(member.shares);

            totalLoot = totalLoot.add(member.shares);

            member.shares = 0; // revoke all shares

        }



        proposedToKick[proposal.applicant] = false;



        _returnDeposit(proposal.sponsor);

        

        emit ProcessGuildKickProposal(proposalIndex, proposalId, didPass);

    }



    function _didPass(uint256 proposalIndex) internal view returns (bool didPass) {

        Proposal memory proposal = proposals[proposalQueue[proposalIndex]];

        

        if (proposal.yesVotes > proposal.noVotes) {

            didPass = true;

        }

        

        // Make the proposal fail if the dilutionBound is exceeded

        if ((totalSupply().mul(dilutionBound)) < proposal.maxTotalSharesAndLootAtYesVote) {

            didPass = false;

        }



        // Make the proposal fail if the applicant is jailed

        // - for standard proposals, we don't want the applicant to get any shares/loot/payment

        // - for guild kick proposals, we should never be able to propose to kick a jailed member (or have two kick proposals active), so it doesn't matter

        if (members[proposal.applicant].jailed != 0) {

            didPass = false;

        }



        return didPass;

    }



    function _validateProposalForProcessing(uint256 proposalIndex) internal view {

        require(proposalIndex < proposalQueue.length, "!proposal");

        Proposal memory proposal = proposals[proposalQueue[proposalIndex]];



        require(getCurrentPeriod() >= proposal.startingPeriod + votingPeriodLength + gracePeriodLength, "!ready");

        require(proposal.flags[1] == 0, "processed");

        require(proposalIndex == 0 || proposals[proposalQueue[proposalIndex - 1]].flags[1] == 1, "prior !processed");

    }



    function _returnDeposit(address sponsor) internal {

        unsafeInternalTransfer(ESCROW, msg.sender, depositToken, processingReward);

        unsafeInternalTransfer(ESCROW, sponsor, depositToken, proposalDeposit - processingReward);

    }



    function ragequit(uint256 sharesToBurn, uint256 lootToBurn) external {

        require(members[msg.sender].exists == 1, "!member");

        

        _ragequit(msg.sender, sharesToBurn, lootToBurn);

    }



    function _ragequit(address memberAddress, uint256 sharesToBurn, uint256 lootToBurn) internal {

        uint256 initialTotalSharesAndLoot = totalSupply();



        Member storage member = members[memberAddress];



        require(member.shares >= sharesToBurn, "!shares");

        require(member.loot >= lootToBurn, "!loot");



        require(canRagequit(member.highestIndexYesVote), "!ragequit until highest index proposal member voted YES processes");



        uint256 sharesAndLootToBurn = sharesToBurn.add(lootToBurn);



        // burn guild token, shares & loot

        burnGuildToken(memberAddress, sharesAndLootToBurn);

        member.shares = member.shares.sub(sharesToBurn);

        member.loot = member.loot.sub(lootToBurn);

        totalShares = totalShares.sub(sharesToBurn);

        totalLoot = totalLoot.sub(lootToBurn);



        for (uint256 i = 0; i < approvedTokens.length; i++) {

            uint256 amountToRagequit = fairShare(userTokenBalances[GUILD][approvedTokens[i]], sharesAndLootToBurn, initialTotalSharesAndLoot);

            if (amountToRagequit > 0) { // gas optimization to allow a higher maximum token limit

                // deliberately not using safemath here to keep overflows from preventing the function execution (which would break ragekicks)

                // if a token overflows, it is because the supply was artificially inflated to oblivion, so we probably don't care about it anyways

                userTokenBalances[GUILD][approvedTokens[i]] -= amountToRagequit;

                userTokenBalances[memberAddress][approvedTokens[i]] += amountToRagequit;

            }

        }



        emit Ragequit(memberAddress, sharesToBurn, lootToBurn);

    }



    function ragekick(address memberToKick) external {

        Member storage member = members[memberToKick];



        require(member.jailed != 0, "!jailed");

        require(member.loot > 0, "!loot"); // note - should be impossible for jailed member to have shares

        require(canRagequit(member.highestIndexYesVote), "!ragequit until highest index proposal member voted YES processes");



        _ragequit(memberToKick, 0, member.loot);

    }

    

    function withdrawBalance(address token, uint256 amount) external nonReentrant {

        _withdrawBalance(token, amount);

    }



    function withdrawBalances(address[] calldata tokens, uint256[] calldata amounts, bool max) external nonReentrant {

        require(tokens.length == amounts.length, "tokens != amounts");



        for (uint256 i=0; i < tokens.length; i++) {

            uint256 withdrawAmount = amounts[i];

            if (max) { // withdraw the maximum balance

                withdrawAmount = userTokenBalances[msg.sender][tokens[i]];

            }



            _withdrawBalance(tokens[i], withdrawAmount);

        }

    }

    

    function _withdrawBalance(address token, uint256 amount) internal {

        require(userTokenBalances[msg.sender][token] >= amount, "!balance");

        

        require(IERC20(token).transfer(msg.sender, amount), "!transfer");

        unsafeSubtractFromBalance(msg.sender, token, amount);

        

        emit Withdraw(msg.sender, token, amount);

    }



    function collectTokens(address token) external {

        uint256 amountToCollect = IERC20(token).balanceOf(address(this)).sub(userTokenBalances[TOTAL][token]);

        // only collect if 1) there are tokens to collect & 2) token is whitelisted

        require(amountToCollect > 0, "!amount");

        require(tokenWhitelist[token], "!whitelisted");

        

        if (userTokenBalances[GUILD][token] == 0 && totalGuildBankTokens < MAX_TOKEN_GUILDBANK_COUNT) {totalGuildBankTokens += 1;}

        unsafeAddToBalance(GUILD, token, amountToCollect);



        emit TokensCollected(token, amountToCollect);

    }



    // NOTE: requires that delegate key which sent the original proposal cancels, msg.sender == proposal.proposer

    function cancelProposal(uint256 proposalId) external {

        Proposal storage proposal = proposals[proposalId];

        require(proposal.flags[0] == 0, "sponsored");

        require(proposal.flags[3] == 0, "cancelled");

        require(msg.sender == proposal.proposer, "!proposer");



        proposal.flags[3] = 1; // cancelled

        

        unsafeInternalTransfer(ESCROW, proposal.proposer, proposal.tributeToken, proposal.tributeOffered);

        

        emit CancelProposal(proposalId, msg.sender);

    }



    function updateDelegateKey(address newDelegateKey) external {

        require(members[msg.sender].shares > 0, "caller !shareholder");

        require(newDelegateKey != address(0), "newDelegateKey == 0");



        // skip checks if member is setting the delegate key to their member address

        if (newDelegateKey != msg.sender) {

            require(members[newDelegateKey].exists == 0, "!overwrite members");

            require(members[memberAddressByDelegateKey[newDelegateKey]].exists == 0, "!overwrite keys");

        }



        Member storage member = members[msg.sender];

        memberAddressByDelegateKey[member.delegateKey] = address(0);

        memberAddressByDelegateKey[newDelegateKey] = msg.sender;

        member.delegateKey = newDelegateKey;



        emit UpdateDelegateKey(msg.sender, newDelegateKey);

    }

    

    // can only ragequit if the latest proposal you voted YES on has been processed

    function canRagequit(uint256 highestIndexYesVote) public view returns (bool) {

        require(highestIndexYesVote < proposalQueue.length, "!proposal");

        

        return proposals[proposalQueue[highestIndexYesVote]].flags[1] == 1;

    }



    function hasVotingPeriodExpired(uint256 startingPeriod) public view returns (bool) {

        return getCurrentPeriod() >= startingPeriod + votingPeriodLength;

    }

    

    /***************

    GETTER FUNCTIONS

    ***************/

    function max(uint256 x, uint256 y) internal pure returns (uint256) {

        return x >= y ? x : y;

    }

    

    function getCurrentPeriod() public view returns (uint256) {

        return now.sub(summoningTime).div(periodDuration);

    }

    

    function getMemberProposalVote(address memberAddress, uint256 proposalIndex) external view returns (Vote) {

        require(members[memberAddress].exists == 1, "!member");

        require(proposalIndex < proposalQueue.length, "!proposed");

        

        return proposals[proposalQueue[proposalIndex]].votesByMember[memberAddress];

    }



    function getProposalFlags(uint256 proposalId) external view returns (uint8[7] memory) {

        return proposals[proposalId].flags;

    }

    

    function getProposalQueueLength() external view returns (uint256) {

        return proposalQueue.length;

    }

    

    function getTokenCount() external view returns (uint256) {

        return approvedTokens.length;

    }



    function getUserTokenBalance(address user, address token) external view returns (uint256) {

        return userTokenBalances[user][token];

    }

    

    /***************

    HELPER FUNCTIONS

    ***************/

    function() external payable {}

    

    function fairShare(uint256 balance, uint256 shares, uint256 totalSharesAndLoot) internal pure returns (uint256) {

        require(totalSharesAndLoot != 0);



        if (balance == 0) { return 0; }



        uint256 prod = balance * shares;



        if (prod / balance == shares) { // no overflow in multiplication above?

            return prod / totalSharesAndLoot;

        }



        return (balance / totalSharesAndLoot) * shares;

    }

    

    function registerMember(address newMember, uint256 shares) internal {

        // if new member is already taken by a member's delegateKey, reset it to their member address

        if (members[memberAddressByDelegateKey[newMember]].exists == 1) {

            address memberToOverride = memberAddressByDelegateKey[newMember];

            memberAddressByDelegateKey[memberToOverride] = memberToOverride;

            members[memberToOverride].delegateKey = memberToOverride;

        }

        

        members[newMember] = Member({

            delegateKey : newMember,

            exists : 1, // 'true'

            shares : shares,

            loot : 0,

            highestIndexYesVote : 0,

            jailed : 0

        });



        memberAddressByDelegateKey[newMember] = newMember;

    }

    

    function unsafeAddToBalance(address user, address token, uint256 amount) internal {

        userTokenBalances[user][token] += amount;

        userTokenBalances[TOTAL][token] += amount;

    }

    

    function unsafeInternalTransfer(address from, address to, address token, uint256 amount) internal {

        unsafeSubtractFromBalance(from, token, amount);

        unsafeAddToBalance(to, token, amount);

    }



    function unsafeSubtractFromBalance(address user, address token, uint256 amount) internal {

        userTokenBalances[user][token] -= amount;

        userTokenBalances[TOTAL][token] -= amount;

    }

    

    /********************

    GUILD TOKEN FUNCTIONS

    ********************/

    // GETTER FUNCTIONS

    function balanceOf(address account) external view returns (uint256) { 

        return balances[account];

    }

    

    function totalSupply() public view returns (uint256) { 

        return totalShares.add(totalLoot);

    }

    

    // BALANCE MGMT FUNCTIONS

    function allowance(address owner, address spender) external view returns (uint256) { // tracks guild token (loot) allowances 

        return allowances[owner][spender];

    }

    

    function approve(address spender, uint256 amount) external returns (bool) {

        if(amount != 0 && allowances[msg.sender][spender] != 0) {return false;}

        

        allowances[msg.sender][spender] = amount;

        

        emit Approval(msg.sender, spender, amount);

        

        return true;

    }

    

    function burnGuildToken(address memberAddress, uint256 amount) internal {

        balances[memberAddress] = balances[memberAddress].sub(amount);

        

        emit Transfer(memberAddress, address(0), amount);

    }

    

    function claimShares(uint256 amount) external nonReentrant {

        require(IERC20(stakeToken).transferFrom(msg.sender, address(this), amount), "!transfer"); // deposit stake token & claim shares (1:1)

        

        // if the sender is already a member, add to their existing shares 

        if (members[msg.sender].exists == 1) {

            members[msg.sender].shares = members[msg.sender].shares.add(amount);



        // if the sender is a new member, create a new record for them

        } else {

            registerMember(msg.sender, amount);

        }



        // mint new guild token & shares 

        mintGuildToken(msg.sender, amount);

        totalShares = totalShares.add(amount);

            

        require(totalShares <= MAX_GUILD_BOUND, "guild maxed");

    }

    

    function convertSharesToLoot(uint256 sharesToLoot) external {

        require(members[msg.sender].shares >= sharesToLoot, "!shares");

        

        members[msg.sender].shares = members[msg.sender].shares.sub(sharesToLoot);

        members[msg.sender].loot = members[msg.sender].loot.add(sharesToLoot);

        totalShares = totalShares.sub(sharesToLoot);

        totalLoot = totalLoot.add(sharesToLoot);

    }

    

    function mintGuildToken(address memberAddress, uint256 amount) internal {

        balances[memberAddress] = balances[memberAddress].add(amount);

        

        emit Transfer(address(0), memberAddress, amount);

    }



    // LOOT TRANSFER FUNCTIONS

    function transfer(address receiver, uint256 lootToTransfer) external returns (bool) {

        require(members[msg.sender].loot >= lootToTransfer, "!loot");

        

        members[msg.sender].loot = members[msg.sender].loot.sub(lootToTransfer);

        members[receiver].loot = members[receiver].loot.add(lootToTransfer);

        

        balances[msg.sender] = balances[msg.sender].sub(lootToTransfer);

        balances[receiver] = balances[receiver].add(lootToTransfer);

        

        emit Transfer(msg.sender, receiver, lootToTransfer);

        

        return true;

    }

    

    function transferFrom(address sender, address receiver, uint256 lootToTransfer) external returns (bool) {

        require(members[sender].loot >= lootToTransfer, "!loot");

        

        allowances[sender][msg.sender] = allowances[sender][msg.sender].sub(lootToTransfer);

        

        members[sender].loot = members[sender].loot.sub(lootToTransfer);

        members[receiver].loot = members[receiver].loot.add(lootToTransfer);

        

        balances[sender] = balances[sender].sub(lootToTransfer);

        balances[receiver] = balances[receiver].add(lootToTransfer);

        

        emit Transfer(sender, receiver, lootToTransfer);

        

        return true;

    }

}

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:58.292876
Transaction Length: 1
Severity: High
Contract: MysticMoloch
Function name: submitWhitelistProposal(address,bytes32)
PC address: 45091
Estimated Gas Usage: 1106 - 4496
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x22dfed2edd99a1f1e6a7475f58e6435e0b6126eb.sol:146

contract MysticMoloch is ReentrancyGuard { 

    using SafeMath for uint256;



    /***************

    GLOBAL CONSTANTS

    ***************/

    address public depositToken; // deposit token contract reference - default = wETH

    address public stakeToken; // stake token contract reference for guild voting shares 

    address public constant wETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; // canonical ether token wrapper contract reference for proposals

    

    uint256 public proposalDeposit; // default = 10 deposit token 

    uint256 public processingReward; // default = 0.1 - amount of deposit token to give to whoever processes a proposal

    uint256 public periodDuration; // default = 17280 = 4.8 hours in seconds (5 periods per day)

    uint256 public votingPeriodLength; // default = 35 periods (7 days)

    uint256 public gracePeriodLength; // default = 35 periods (7 days)

    uint256 public dilutionBound; // default = 3 - maximum multiplier a YES voter will be obligated to pay in case of mass ragequit

    uint256 public summoningTime; // needed to determine the current period

    

    // HARD-CODED LIMITS

    // These numbers are quite arbitrary; they are small enough to avoid overflows when doing calculations

    // with periods or shares, yet big enough to not limit reasonable use cases.

    uint256 constant MAX_GUILD_BOUND = 10**36; // maximum bound for guild accounting

    uint256 constant MAX_TOKEN_WHITELIST_COUNT = 400; // maximum number of whitelisted tokens

    uint256 constant MAX_TOKEN_GUILDBANK_COUNT = 200; // maximum number of tokens with non-zero balance in guildbank



    // BANK TOKEN DETAILS

    string public constant name = "Moloch DAO v2x Bank";

    string public constant symbol = "MOL-V2X";

    uint8 public constant decimals = 18;



    // **************

    // EVENT TRACKING

    // **************

    event SubmitProposal(address indexed applicant, uint256 sharesRequested, uint256 lootRequested, uint256 tributeOffered, address tributeToken, uint256 paymentRequested, address paymentToken, bytes32 details, uint8[7] flags, bytes data, uint256 proposalId, address indexed delegateKey, address indexed memberAddress);

    event CancelProposal(uint256 indexed proposalId, address applicantAddress);

    event SponsorProposal(address indexed delegateKey, address indexed memberAddress, uint256 proposalId, uint256 proposalIndex, uint256 startingPeriod);

    event SubmitVote(uint256 proposalId, uint256 indexed proposalIndex, address indexed delegateKey, address indexed memberAddress, uint8 uintVote);

    event ProcessProposal(uint256 indexed proposalIndex, uint256 indexed proposalId, bool didPass);

    event ProcessActionProposal(uint256 indexed proposalIndex, uint256 indexed proposalId, bool didPass);

    event ProcessWhitelistProposal(uint256 indexed proposalIndex, uint256 indexed proposalId, bool didPass);

    event ProcessGuildKickProposal(uint256 indexed proposalIndex, uint256 indexed proposalId, bool didPass);

    event UpdateDelegateKey(address indexed memberAddress, address newDelegateKey);

    event Approval(address indexed owner, address indexed spender, uint256 amount); // guild token (loot) allowance tracking

    event Transfer(address indexed from, address indexed to, uint256 amount); // guild token mint, burn & (loot) transfer tracking

    event Ragequit(address indexed memberAddress, uint256 sharesToBurn, uint256 lootToBurn);

    event TokensCollected(address indexed token, uint256 amountToCollect);

    event Withdraw(address indexed memberAddress, address token, uint256 amount);

    

    // *******************

    // INTERNAL ACCOUNTING

    // *******************

    address public constant GUILD = address(0xdead);

    address public constant ESCROW = address(0xdeaf);

    address public constant TOTAL = address(0xdeed);

    

    uint256 public proposalCount; // total proposals submitted

    uint256 public totalShares; // total shares across all members

    uint256 public totalLoot; // total loot across all members

    uint256 public totalGuildBankTokens; // total tokens with non-zero balance in guild bank



    mapping(uint256 => bytes) public actions; // proposalId => action data

    mapping(address => uint256) private balances; // guild token balances

    mapping(address => mapping(address => uint256)) private allowances; // guild token (loot) allowances

    mapping(address => mapping(address => uint256)) private userTokenBalances; // userTokenBalances[userAddress][tokenAddress]



    enum Vote {

        Null, // default value, counted as abstention

        Yes,

        No

    }

    

    struct Member {

        address delegateKey; // the key responsible for submitting proposals & voting - defaults to member address unless updated

        uint8 exists; // always true (1) once a member has been created

        uint256 shares; // the # of voting shares assigned to this member

        uint256 loot; // the loot amount available to this member (combined with shares on ragekick) - transferable by guild token

        uint256 highestIndexYesVote; // highest proposal index # on which the member voted YES

        uint256 jailed; // set to proposalIndex of a passing guild kick proposal for this member, prevents voting on & sponsoring proposals

    }

    

    struct Proposal {

        address applicant; // the applicant who wishes to become a member - this key will be used for withdrawals (doubles as target for alt. proposals)

        address proposer; // the account that submitted the proposal (can be non-member)

        address sponsor; // the member that sponsored the proposal (moving it into the queue)

        address tributeToken; // tribute token contract reference

        address paymentToken; // payment token contract reference

        uint8[7] flags; // [sponsored, processed, didPass, cancelled, whitelist, guildkick, action]

        uint256 sharesRequested; // the # of shares the applicant is requesting

        uint256 lootRequested; // the amount of loot the applicant is requesting

        uint256 paymentRequested; // amount of tokens requested as payment

        uint256 tributeOffered; // amount of tokens offered as tribute

        uint256 startingPeriod; // the period in which voting can start for this proposal

        uint256 yesVotes; // the total number of YES votes for this proposal

        uint256 noVotes; // the total number of NO votes for this proposal

        uint256 maxTotalSharesAndLootAtYesVote; // the maximum # of total shares encountered at a yes vote on this proposal

        bytes32 details; // proposal details to add context for members 

        mapping(address => Vote) votesByMember; // the votes on this proposal by each member

    }



    mapping(address => bool) public tokenWhitelist;

    address[] public approvedTokens;



    mapping(address => bool) public proposedToWhitelist;

    mapping(address => bool) public proposedToKick;

    

    mapping(address => Member) public members;

    mapping(address => address) public memberAddressByDelegateKey;

    

    mapping(uint256 => Proposal) public proposals;



    uint256[] public proposalQueue;

    

    bool public initialized;



    modifier onlyDelegate {

        require(members[memberAddressByDelegateKey[msg.sender]].shares > 0, "!delegate");

        _;

    }



    function init(

        address _depositToken,

        address _stakeToken,

        address[] calldata _summoner,

        uint256[] calldata _summonerShares,

        uint256 _summonerDeposit,

        uint256 _proposalDeposit,

        uint256 _processingReward,

        uint256 _periodDuration,

        uint256 _votingPeriodLength,

        uint256 _gracePeriodLength,

        uint256 _dilutionBound

    ) external {

        require(!initialized, "initialized");

        require(_depositToken != _stakeToken, "depositToken == stakeToken");

        require(_summoner.length == _summonerShares.length, "summoner != summonerShares");

        require(_proposalDeposit >= _processingReward, "_processingReward > _proposalDeposit");

        

        for (uint256 i = 0; i < _summoner.length; i++) {

            registerMember(_summoner[i], _summonerShares[i]);

            mintGuildToken(_summoner[i], _summonerShares[i]);

            totalShares = totalShares.add(_summonerShares[i]);

        }

        

        require(totalShares <= MAX_GUILD_BOUND, "guild maxed");

        

        tokenWhitelist[_depositToken] = true;

        approvedTokens.push(_depositToken);

        

        if (_summonerDeposit > 0) {

            totalGuildBankTokens += 1;

            unsafeAddToBalance(GUILD, _depositToken, _summonerDeposit);

        }

        

        depositToken = _depositToken;

        stakeToken = _stakeToken;

        proposalDeposit = _proposalDeposit;

        processingReward = _processingReward;

        periodDuration = _periodDuration;

        votingPeriodLength = _votingPeriodLength;

        gracePeriodLength = _gracePeriodLength;

        dilutionBound = _dilutionBound;

        summoningTime = now;

        initialized = true;

        

        _initReentrancyGuard();

    }

    

    /*****************

    PROPOSAL FUNCTIONS

    *****************/

    function submitProposal(

        address applicant,

        uint256 sharesRequested,

        uint256 lootRequested,

        uint256 tributeOffered,

        address tributeToken,

        uint256 paymentRequested,

        address paymentToken,

        bytes32 details

    ) payable external nonReentrant returns (uint256 proposalId) {

        require(sharesRequested.add(lootRequested) <= MAX_GUILD_BOUND, "guild maxed");

        require(tokenWhitelist[tributeToken], "tributeToken != whitelist");

        require(tokenWhitelist[paymentToken], "paymentToken != whitelist");

        require(applicant != GUILD && applicant != ESCROW && applicant != TOTAL, "applicant unreservable");

        require(members[applicant].jailed == 0, "applicant jailed");



        if (tributeOffered > 0 && userTokenBalances[GUILD][tributeToken] == 0) {

            require(totalGuildBankTokens < MAX_TOKEN_GUILDBANK_COUNT, "guildbank maxed");

        }

        

        // collect tribute from proposer & store it in the Moloch until the proposal is processed - if ether, wrap into wETH

        if (tributeToken == wETH && msg.value > 0) {

            require(msg.value == tributeOffered, "!ETH");

            IWETH(wETH).deposit();

            (bool success, ) = wETH.call.value(msg.value)("");

            require(success, "!transfer");

            IWETH(wETH).transfer(address(this), msg.value);

        } else {

            require(IERC20(tributeToken).transferFrom(msg.sender, address(this), tributeOffered), "!transfer");

        }

        

        unsafeAddToBalance(ESCROW, tributeToken, tributeOffered);



        uint8[7] memory flags; // [sponsored, processed, didPass, cancelled, whitelist, guildkick, action]



        _submitProposal(applicant, sharesRequested, lootRequested, tributeOffered, tributeToken, paymentRequested, paymentToken, details, flags, "");

        

        return proposalCount - 1; // return proposalId - contracts calling submit might want it

    }

    

    function submitActionProposal( // stages arbitrary function calls for member vote - based on Raid Guild 'Minion'

        address actionTo,

        address actionToken,

        uint256 actionTokenAmount,

        uint256 actionValue,

        bytes calldata data,

        bytes32 details

    ) external returns (uint256 proposalId) {

        

        uint8[7] memory flags; // [sponsored, processed, didPass, cancelled, whitelist, guildkick, action]

        flags[6] = 1; // guild action

        

        _submitProposal(actionTo, 0, 0, actionValue, address(0), actionTokenAmount, actionToken, details, flags, data);

        

        return proposalCount - 1;

    }

    

    function submitWhitelistProposal(address tokenToWhitelist, bytes32 details) external returns (uint256 proposalId) {

        require(tokenToWhitelist != address(0), "!token");

        require(tokenToWhitelist != stakeToken, "tokenToWhitelist == stakeToken");

        require(!tokenWhitelist[tokenToWhitelist], "whitelisted");

        require(approvedTokens.length < MAX_TOKEN_WHITELIST_COUNT, "whitelist maxed");



        uint8[7] memory flags; // [sponsored, processed, didPass, cancelled, whitelist, guildkick, action]

        flags[4] = 1; // whitelist



        _submitProposal(address(0), 0, 0, 0, tokenToWhitelist, 0, address(0), details, flags, "");

        

        return proposalCount - 1;

    }

    

    function submitGuildKickProposal(address memberToKick, bytes32 details) external returns (uint256 proposalId) {

        Member memory member = members[memberToKick];



        require(member.shares > 0 || member.loot > 0, "!share||loot");

        require(members[memberToKick].jailed == 0, "jailed");



        uint8[7] memory flags; // [sponsored, processed, didPass, cancelled, whitelist, guildkick, action]

        flags[5] = 1; // guild kick



        _submitProposal(memberToKick, 0, 0, 0, address(0), 0, address(0), details, flags, "");

        

        return proposalCount - 1;

    }

    

    function _submitProposal(

        address applicant,

        uint256 sharesRequested,

        uint256 lootRequested,

        uint256 tributeOffered,

        address tributeToken,

        uint256 paymentRequested,

        address paymentToken,

        bytes32 details,

        uint8[7] memory flags,

        bytes memory data

    ) internal {

        Proposal memory proposal = Proposal({

            applicant : applicant,

            proposer : msg.sender,

            sponsor : address(0),

            tributeToken : tributeToken,

            paymentToken : paymentToken,

            flags : flags,

            sharesRequested : sharesRequested,

            lootRequested : lootRequested,

            paymentRequested : paymentRequested,

            tributeOffered : tributeOffered,

            startingPeriod : 0,

            yesVotes : 0,

            noVotes : 0,

            maxTotalSharesAndLootAtYesVote : 0,

            details : details

        });

        

        if (proposal.flags[6] == 1) {

            actions[proposalCount] = data;

        }

        

        proposals[proposalCount] = proposal;

        address memberAddress = memberAddressByDelegateKey[msg.sender];

        // NOTE: argument order matters, avoid stack too deep

        emit SubmitProposal(applicant, sharesRequested, lootRequested, tributeOffered, tributeToken, paymentRequested, paymentToken, details, flags, data, proposalCount, msg.sender, memberAddress);

        

        proposalCount += 1;

    }



    function sponsorProposal(uint256 proposalId) external nonReentrant onlyDelegate {

        // collect proposal deposit from sponsor & store it in the Moloch until the proposal is processed

        require(IERC20(depositToken).transferFrom(msg.sender, address(this), proposalDeposit), "!transfer");

        unsafeAddToBalance(ESCROW, depositToken, proposalDeposit);



        Proposal storage proposal = proposals[proposalId];



        require(proposal.proposer != address(0), "!proposed");

        require(proposal.flags[0] == 0, "sponsored");

        require(proposal.flags[3] == 0, "cancelled");

        require(members[proposal.applicant].jailed == 0, "applicant jailed");



        if (proposal.tributeOffered > 0 && userTokenBalances[GUILD][proposal.tributeToken] == 0) {

            require(totalGuildBankTokens < MAX_TOKEN_GUILDBANK_COUNT, "guildbank maxed");

        }



        // whitelist proposal

        if (proposal.flags[4] == 1) {

            require(!tokenWhitelist[address(proposal.tributeToken)], "whitelisted");

            require(!proposedToWhitelist[address(proposal.tributeToken)], "whitelist proposed");

            require(approvedTokens.length < MAX_TOKEN_WHITELIST_COUNT, "whitelist maxed");

            proposedToWhitelist[address(proposal.tributeToken)] = true;



        // guild kick proposal

        } else if (proposal.flags[5] == 1) {

            require(!proposedToKick[proposal.applicant], "kick proposed");

            proposedToKick[proposal.applicant] = true;

        }



        // compute startingPeriod for proposal

        uint256 startingPeriod = max(

            getCurrentPeriod(),

            proposalQueue.length == 0 ? 0 : proposals[proposalQueue[proposalQueue.length - 1]].startingPeriod

        ) + 1;



        proposal.startingPeriod = startingPeriod;



        address memberAddress = memberAddressByDelegateKey[msg.sender];

        proposal.sponsor = memberAddress;



        proposal.flags[0] = 1; // sponsored



        // append proposal to the queue

        proposalQueue.push(proposalId);

        

        emit SponsorProposal(msg.sender, memberAddress, proposalId, proposalQueue.length - 1, startingPeriod);

    }



    // NOTE: In MolochV2 proposalIndex != proposalId

    function submitVote(uint256 proposalIndex, uint8 uintVote) external onlyDelegate {

        address memberAddress = memberAddressByDelegateKey[msg.sender];

        Member storage member = members[memberAddress];



        require(proposalIndex < proposalQueue.length, "!proposed");

        Proposal storage proposal = proposals[proposalQueue[proposalIndex]];



        require(uintVote < 3, "!<3");

        Vote vote = Vote(uintVote);



        require(getCurrentPeriod() >= proposal.startingPeriod, "pending");

        require(!hasVotingPeriodExpired(proposal.startingPeriod), "expired");

        require(proposal.votesByMember[memberAddress] == Vote.Null, "voted");

        require(vote == Vote.Yes || vote == Vote.No, "!Yes||No");



        proposal.votesByMember[memberAddress] = vote;



        if (vote == Vote.Yes) {

            proposal.yesVotes += member.shares;



            // set highest index (latest) yes vote - must be processed for member to ragequit

            if (proposalIndex > member.highestIndexYesVote) {

                member.highestIndexYesVote = proposalIndex;

            }



            // set maximum of total shares encountered at a yes vote - used to bound dilution for yes voters

            if (totalSupply() > proposal.maxTotalSharesAndLootAtYesVote) {

                proposal.maxTotalSharesAndLootAtYesVote = totalSupply();

            }



        } else if (vote == Vote.No) {

            proposal.noVotes += member.shares;

        }

     

        // NOTE: subgraph indexes by proposalId not proposalIndex since proposalIndex isn't set until it's been sponsored but proposal is created on submission

        emit SubmitVote(proposalQueue[proposalIndex], proposalIndex, msg.sender, memberAddress, uintVote);

    }



    function processProposal(uint256 proposalIndex) external {

        _validateProposalForProcessing(proposalIndex);



        uint256 proposalId = proposalQueue[proposalIndex];

        Proposal storage proposal = proposals[proposalId];



        require(proposal.flags[4] == 0 && proposal.flags[5] == 0 && proposal.flags[6] == 0, "!standard");



        proposal.flags[1] = 1; // processed



        bool didPass = _didPass(proposalIndex);



        // Make the proposal fail if the new total number of shares & loot exceeds the limit

        if (totalSupply().add(proposal.sharesRequested).add(proposal.lootRequested) > MAX_GUILD_BOUND) {

            didPass = false;

        }



        // Make the proposal fail if it is requesting more tokens as payment than the available guild bank balance

        if (proposal.paymentRequested > userTokenBalances[GUILD][proposal.paymentToken]) {

            didPass = false;

        }



        // Make the proposal fail if it would result in too many tokens with non-zero balance in guild bank

        if (proposal.tributeOffered > 0 && userTokenBalances[GUILD][proposal.tributeToken] == 0 && totalGuildBankTokens >= MAX_TOKEN_GUILDBANK_COUNT) {

            didPass = false;

        }



        // PROPOSAL PASSED

        if (didPass == true) {

            proposal.flags[2] = 1; // didPass



            // if the applicant is already a member, add to their existing shares & loot

            if (members[proposal.applicant].exists == 1) {

                members[proposal.applicant].shares = members[proposal.applicant].shares.add(proposal.sharesRequested);

                members[proposal.applicant].loot = members[proposal.applicant].loot.add(proposal.lootRequested);



            // if the applicant is a new member, create a new record for them

            } else {

                registerMember(proposal.applicant, proposal.sharesRequested);

            }



            // mint new guild token, shares & loot 

            mintGuildToken(proposal.applicant, proposal.sharesRequested.add(proposal.lootRequested));

            totalShares = totalShares.add(proposal.sharesRequested);

            totalLoot = totalLoot.add(proposal.lootRequested);



            // if the proposal tribute is the first token of its kind to make it into the guild bank, increment total guild bank tokens

            if (userTokenBalances[GUILD][proposal.tributeToken] == 0 && proposal.tributeOffered > 0) {

                totalGuildBankTokens += 1;

            }



            unsafeInternalTransfer(ESCROW, GUILD, proposal.tributeToken, proposal.tributeOffered);

            unsafeInternalTransfer(GUILD, proposal.applicant, proposal.paymentToken, proposal.paymentRequested);



            // if the proposal spends 100% of guild bank balance for a token, decrement total guild bank tokens

            if (userTokenBalances[GUILD][proposal.paymentToken] == 0 && proposal.paymentRequested > 0) {

                totalGuildBankTokens -= 1;

            }



        // PROPOSAL FAILED

        } else {

            // return all tokens to the proposer (not the applicant, because funds come from proposer)

            unsafeInternalTransfer(ESCROW, proposal.proposer, proposal.tributeToken, proposal.tributeOffered);

        }



        _returnDeposit(proposal.sponsor);

        

        emit ProcessProposal(proposalIndex, proposalId, didPass);

    }

    

    function processActionProposal(uint256 proposalIndex) external nonReentrant returns (bool, bytes memory) {

        _validateProposalForProcessing(proposalIndex);

        

        uint256 proposalId = proposalQueue[proposalIndex];

        bytes memory action = actions[proposalId];

        Proposal storage proposal = proposals[proposalId];

        

        require(proposal.flags[6] == 1, "!action");



        proposal.flags[1] = 1; // processed



        bool didPass = _didPass(proposalIndex);

        

        // Make the proposal fail if it is requesting more ether than the available local balance

        if (proposal.paymentToken == address(0) && proposal.tributeOffered > address(this).balance) {

            didPass = false;

        }

        

        // Make the proposal fail if it is requesting more stake token than the available local balance

        if (proposal.paymentToken == stakeToken && proposal.paymentRequested > IERC20(stakeToken).balanceOf(address(this))) {

            didPass = false;

        }

        

        // Make the proposal fail if it is requesting more tokens than the available guild bank balance

        if (proposal.paymentToken != address(0) && proposal.paymentToken != stakeToken && proposal.paymentRequested > userTokenBalances[GUILD][proposal.paymentToken]) {

            didPass = false;

        }



        if (didPass == true) {

            proposal.flags[2] = 1; // didPass

            (bool success, bytes memory retData) = proposal.applicant.call.value(proposal.tributeOffered)(action);

            if (proposal.paymentToken != address(0) && proposal.paymentToken != stakeToken) {

                unsafeSubtractFromBalance(GUILD, proposal.paymentToken, proposal.paymentRequested);

                // if the action proposal spends 100% of guild bank balance for a token, decrement total guild bank tokens

                if (userTokenBalances[GUILD][proposal.paymentToken] == 0 && proposal.paymentRequested > 0) {totalGuildBankTokens -= 1;}

            }

            return (success, retData);

        }

        

        emit ProcessActionProposal(proposalIndex, proposalId, didPass);

    }



    function processWhitelistProposal(uint256 proposalIndex) external {

        _validateProposalForProcessing(proposalIndex);



        uint256 proposalId = proposalQueue[proposalIndex];

        Proposal storage proposal = proposals[proposalId];



        require(proposal.flags[4] == 1, "!whitelist");



        proposal.flags[1] = 1; // processed



        bool didPass = _didPass(proposalIndex);



        if (approvedTokens.length >= MAX_TOKEN_WHITELIST_COUNT) {

            didPass = false;

        }



        if (didPass == true) {

            proposal.flags[2] = 1; // didPass



            tokenWhitelist[address(proposal.tributeToken)] = true;

            approvedTokens.push(proposal.tributeToken);

        }



        proposedToWhitelist[address(proposal.tributeToken)] = false;



        _returnDeposit(proposal.sponsor);

        

        emit ProcessWhitelistProposal(proposalIndex, proposalId, didPass);

    }



    function processGuildKickProposal(uint256 proposalIndex) external {

        _validateProposalForProcessing(proposalIndex);



        uint256 proposalId = proposalQueue[proposalIndex];

        Proposal storage proposal = proposals[proposalId];



        require(proposal.flags[5] == 1, "!kick");



        proposal.flags[1] = 1; // processed



        bool didPass = _didPass(proposalIndex);



        if (didPass == true) {

            proposal.flags[2] = 1; // didPass

            Member storage member = members[proposal.applicant];

            member.jailed = proposalIndex;



            // transfer shares to loot

            member.loot = member.loot.add(member.shares);

            totalShares = totalShares.sub(member.shares);

            totalLoot = totalLoot.add(member.shares);

            member.shares = 0; // revoke all shares

        }



        proposedToKick[proposal.applicant] = false;



        _returnDeposit(proposal.sponsor);

        

        emit ProcessGuildKickProposal(proposalIndex, proposalId, didPass);

    }



    function _didPass(uint256 proposalIndex) internal view returns (bool didPass) {

        Proposal memory proposal = proposals[proposalQueue[proposalIndex]];

        

        if (proposal.yesVotes > proposal.noVotes) {

            didPass = true;

        }

        

        // Make the proposal fail if the dilutionBound is exceeded

        if ((totalSupply().mul(dilutionBound)) < proposal.maxTotalSharesAndLootAtYesVote) {

            didPass = false;

        }



        // Make the proposal fail if the applicant is jailed

        // - for standard proposals, we don't want the applicant to get any shares/loot/payment

        // - for guild kick proposals, we should never be able to propose to kick a jailed member (or have two kick proposals active), so it doesn't matter

        if (members[proposal.applicant].jailed != 0) {

            didPass = false;

        }



        return didPass;

    }



    function _validateProposalForProcessing(uint256 proposalIndex) internal view {

        require(proposalIndex < proposalQueue.length, "!proposal");

        Proposal memory proposal = proposals[proposalQueue[proposalIndex]];



        require(getCurrentPeriod() >= proposal.startingPeriod + votingPeriodLength + gracePeriodLength, "!ready");

        require(proposal.flags[1] == 0, "processed");

        require(proposalIndex == 0 || proposals[proposalQueue[proposalIndex - 1]].flags[1] == 1, "prior !processed");

    }



    function _returnDeposit(address sponsor) internal {

        unsafeInternalTransfer(ESCROW, msg.sender, depositToken, processingReward);

        unsafeInternalTransfer(ESCROW, sponsor, depositToken, proposalDeposit - processingReward);

    }



    function ragequit(uint256 sharesToBurn, uint256 lootToBurn) external {

        require(members[msg.sender].exists == 1, "!member");

        

        _ragequit(msg.sender, sharesToBurn, lootToBurn);

    }



    function _ragequit(address memberAddress, uint256 sharesToBurn, uint256 lootToBurn) internal {

        uint256 initialTotalSharesAndLoot = totalSupply();



        Member storage member = members[memberAddress];



        require(member.shares >= sharesToBurn, "!shares");

        require(member.loot >= lootToBurn, "!loot");



        require(canRagequit(member.highestIndexYesVote), "!ragequit until highest index proposal member voted YES processes");



        uint256 sharesAndLootToBurn = sharesToBurn.add(lootToBurn);



        // burn guild token, shares & loot

        burnGuildToken(memberAddress, sharesAndLootToBurn);

        member.shares = member.shares.sub(sharesToBurn);

        member.loot = member.loot.sub(lootToBurn);

        totalShares = totalShares.sub(sharesToBurn);

        totalLoot = totalLoot.sub(lootToBurn);



        for (uint256 i = 0; i < approvedTokens.length; i++) {

            uint256 amountToRagequit = fairShare(userTokenBalances[GUILD][approvedTokens[i]], sharesAndLootToBurn, initialTotalSharesAndLoot);

            if (amountToRagequit > 0) { // gas optimization to allow a higher maximum token limit

                // deliberately not using safemath here to keep overflows from preventing the function execution (which would break ragekicks)

                // if a token overflows, it is because the supply was artificially inflated to oblivion, so we probably don't care about it anyways

                userTokenBalances[GUILD][approvedTokens[i]] -= amountToRagequit;

                userTokenBalances[memberAddress][approvedTokens[i]] += amountToRagequit;

            }

        }



        emit Ragequit(memberAddress, sharesToBurn, lootToBurn);

    }



    function ragekick(address memberToKick) external {

        Member storage member = members[memberToKick];



        require(member.jailed != 0, "!jailed");

        require(member.loot > 0, "!loot"); // note - should be impossible for jailed member to have shares

        require(canRagequit(member.highestIndexYesVote), "!ragequit until highest index proposal member voted YES processes");



        _ragequit(memberToKick, 0, member.loot);

    }

    

    function withdrawBalance(address token, uint256 amount) external nonReentrant {

        _withdrawBalance(token, amount);

    }



    function withdrawBalances(address[] calldata tokens, uint256[] calldata amounts, bool max) external nonReentrant {

        require(tokens.length == amounts.length, "tokens != amounts");



        for (uint256 i=0; i < tokens.length; i++) {

            uint256 withdrawAmount = amounts[i];

            if (max) { // withdraw the maximum balance

                withdrawAmount = userTokenBalances[msg.sender][tokens[i]];

            }



            _withdrawBalance(tokens[i], withdrawAmount);

        }

    }

    

    function _withdrawBalance(address token, uint256 amount) internal {

        require(userTokenBalances[msg.sender][token] >= amount, "!balance");

        

        require(IERC20(token).transfer(msg.sender, amount), "!transfer");

        unsafeSubtractFromBalance(msg.sender, token, amount);

        

        emit Withdraw(msg.sender, token, amount);

    }



    function collectTokens(address token) external {

        uint256 amountToCollect = IERC20(token).balanceOf(address(this)).sub(userTokenBalances[TOTAL][token]);

        // only collect if 1) there are tokens to collect & 2) token is whitelisted

        require(amountToCollect > 0, "!amount");

        require(tokenWhitelist[token], "!whitelisted");

        

        if (userTokenBalances[GUILD][token] == 0 && totalGuildBankTokens < MAX_TOKEN_GUILDBANK_COUNT) {totalGuildBankTokens += 1;}

        unsafeAddToBalance(GUILD, token, amountToCollect);



        emit TokensCollected(token, amountToCollect);

    }



    // NOTE: requires that delegate key which sent the original proposal cancels, msg.sender == proposal.proposer

    function cancelProposal(uint256 proposalId) external {

        Proposal storage proposal = proposals[proposalId];

        require(proposal.flags[0] == 0, "sponsored");

        require(proposal.flags[3] == 0, "cancelled");

        require(msg.sender == proposal.proposer, "!proposer");



        proposal.flags[3] = 1; // cancelled

        

        unsafeInternalTransfer(ESCROW, proposal.proposer, proposal.tributeToken, proposal.tributeOffered);

        

        emit CancelProposal(proposalId, msg.sender);

    }



    function updateDelegateKey(address newDelegateKey) external {

        require(members[msg.sender].shares > 0, "caller !shareholder");

        require(newDelegateKey != address(0), "newDelegateKey == 0");



        // skip checks if member is setting the delegate key to their member address

        if (newDelegateKey != msg.sender) {

            require(members[newDelegateKey].exists == 0, "!overwrite members");

            require(members[memberAddressByDelegateKey[newDelegateKey]].exists == 0, "!overwrite keys");

        }



        Member storage member = members[msg.sender];

        memberAddressByDelegateKey[member.delegateKey] = address(0);

        memberAddressByDelegateKey[newDelegateKey] = msg.sender;

        member.delegateKey = newDelegateKey;



        emit UpdateDelegateKey(msg.sender, newDelegateKey);

    }

    

    // can only ragequit if the latest proposal you voted YES on has been processed

    function canRagequit(uint256 highestIndexYesVote) public view returns (bool) {

        require(highestIndexYesVote < proposalQueue.length, "!proposal");

        

        return proposals[proposalQueue[highestIndexYesVote]].flags[1] == 1;

    }



    function hasVotingPeriodExpired(uint256 startingPeriod) public view returns (bool) {

        return getCurrentPeriod() >= startingPeriod + votingPeriodLength;

    }

    

    /***************

    GETTER FUNCTIONS

    ***************/

    function max(uint256 x, uint256 y) internal pure returns (uint256) {

        return x >= y ? x : y;

    }

    

    function getCurrentPeriod() public view returns (uint256) {

        return now.sub(summoningTime).div(periodDuration);

    }

    

    function getMemberProposalVote(address memberAddress, uint256 proposalIndex) external view returns (Vote) {

        require(members[memberAddress].exists == 1, "!member");

        require(proposalIndex < proposalQueue.length, "!proposed");

        

        return proposals[proposalQueue[proposalIndex]].votesByMember[memberAddress];

    }



    function getProposalFlags(uint256 proposalId) external view returns (uint8[7] memory) {

        return proposals[proposalId].flags;

    }

    

    function getProposalQueueLength() external view returns (uint256) {

        return proposalQueue.length;

    }

    

    function getTokenCount() external view returns (uint256) {

        return approvedTokens.length;

    }



    function getUserTokenBalance(address user, address token) external view returns (uint256) {

        return userTokenBalances[user][token];

    }

    

    /***************

    HELPER FUNCTIONS

    ***************/

    function() external payable {}

    

    function fairShare(uint256 balance, uint256 shares, uint256 totalSharesAndLoot) internal pure returns (uint256) {

        require(totalSharesAndLoot != 0);



        if (balance == 0) { return 0; }



        uint256 prod = balance * shares;



        if (prod / balance == shares) { // no overflow in multiplication above?

            return prod / totalSharesAndLoot;

        }



        return (balance / totalSharesAndLoot) * shares;

    }

    

    function registerMember(address newMember, uint256 shares) internal {

        // if new member is already taken by a member's delegateKey, reset it to their member address

        if (members[memberAddressByDelegateKey[newMember]].exists == 1) {

            address memberToOverride = memberAddressByDelegateKey[newMember];

            memberAddressByDelegateKey[memberToOverride] = memberToOverride;

            members[memberToOverride].delegateKey = memberToOverride;

        }

        

        members[newMember] = Member({

            delegateKey : newMember,

            exists : 1, // 'true'

            shares : shares,

            loot : 0,

            highestIndexYesVote : 0,

            jailed : 0

        });



        memberAddressByDelegateKey[newMember] = newMember;

    }

    

    function unsafeAddToBalance(address user, address token, uint256 amount) internal {

        userTokenBalances[user][token] += amount;

        userTokenBalances[TOTAL][token] += amount;

    }

    

    function unsafeInternalTransfer(address from, address to, address token, uint256 amount) internal {

        unsafeSubtractFromBalance(from, token, amount);

        unsafeAddToBalance(to, token, amount);

    }



    function unsafeSubtractFromBalance(address user, address token, uint256 amount) internal {

        userTokenBalances[user][token] -= amount;

        userTokenBalances[TOTAL][token] -= amount;

    }

    

    /********************

    GUILD TOKEN FUNCTIONS

    ********************/

    // GETTER FUNCTIONS

    function balanceOf(address account) external view returns (uint256) { 

        return balances[account];

    }

    

    function totalSupply() public view returns (uint256) { 

        return totalShares.add(totalLoot);

    }

    

    // BALANCE MGMT FUNCTIONS

    function allowance(address owner, address spender) external view returns (uint256) { // tracks guild token (loot) allowances 

        return allowances[owner][spender];

    }

    

    function approve(address spender, uint256 amount) external returns (bool) {

        if(amount != 0 && allowances[msg.sender][spender] != 0) {return false;}

        

        allowances[msg.sender][spender] = amount;

        

        emit Approval(msg.sender, spender, amount);

        

        return true;

    }

    

    function burnGuildToken(address memberAddress, uint256 amount) internal {

        balances[memberAddress] = balances[memberAddress].sub(amount);

        

        emit Transfer(memberAddress, address(0), amount);

    }

    

    function claimShares(uint256 amount) external nonReentrant {

        require(IERC20(stakeToken).transferFrom(msg.sender, address(this), amount), "!transfer"); // deposit stake token & claim shares (1:1)

        

        // if the sender is already a member, add to their existing shares 

        if (members[msg.sender].exists == 1) {

            members[msg.sender].shares = members[msg.sender].shares.add(amount);



        // if the sender is a new member, create a new record for them

        } else {

            registerMember(msg.sender, amount);

        }



        // mint new guild token & shares 

        mintGuildToken(msg.sender, amount);

        totalShares = totalShares.add(amount);

            

        require(totalShares <= MAX_GUILD_BOUND, "guild maxed");

    }

    

    function convertSharesToLoot(uint256 sharesToLoot) external {

        require(members[msg.sender].shares >= sharesToLoot, "!shares");

        

        members[msg.sender].shares = members[msg.sender].shares.sub(sharesToLoot);

        members[msg.sender].loot = members[msg.sender].loot.add(sharesToLoot);

        totalShares = totalShares.sub(sharesToLoot);

        totalLoot = totalLoot.add(sharesToLoot);

    }

    

    function mintGuildToken(address memberAddress, uint256 amount) internal {

        balances[memberAddress] = balances[memberAddress].add(amount);

        

        emit Transfer(address(0), memberAddress, amount);

    }



    // LOOT TRANSFER FUNCTIONS

    function transfer(address receiver, uint256 lootToTransfer) external returns (bool) {

        require(members[msg.sender].loot >= lootToTransfer, "!loot");

        

        members[msg.sender].loot = members[msg.sender].loot.sub(lootToTransfer);

        members[receiver].loot = members[receiver].loot.add(lootToTransfer);

        

        balances[msg.sender] = balances[msg.sender].sub(lootToTransfer);

        balances[receiver] = balances[receiver].add(lootToTransfer);

        

        emit Transfer(msg.sender, receiver, lootToTransfer);

        

        return true;

    }

    

    function transferFrom(address sender, address receiver, uint256 lootToTransfer) external returns (bool) {

        require(members[sender].loot >= lootToTransfer, "!loot");

        

        allowances[sender][msg.sender] = allowances[sender][msg.sender].sub(lootToTransfer);

        

        members[sender].loot = members[sender].loot.sub(lootToTransfer);

        members[receiver].loot = members[receiver].loot.add(lootToTransfer);

        

        balances[sender] = balances[sender].sub(lootToTransfer);

        balances[receiver] = balances[receiver].add(lootToTransfer);

        

        emit Transfer(sender, receiver, lootToTransfer);

        

        return true;

    }

}

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xaDe500DCA59E3C7716b32D86dE20f12F59e8a29b.sol
Total states:5978
10830.380865
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.402367
Transaction Length: 0
Severity: High
Contract: Ether5
Function name: constructor
PC address: 287
Estimated Gas Usage: 66753 - 330473
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xaDe500DCA59E3C7716b32D86dE20f12F59e8a29b.sol:216

now + poolTime

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x052280a48ce0b00cbea7164a2b99b6a0cf534344.sol
Total states:23706
77.091283
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.099905
Transaction Length: 0
Severity: High
Contract: LexAIR
Function name: constructor
PC address: 110
Estimated Gas Usage: 257 - 3030
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x052280a48ce0b00cbea7164a2b99b6a0cf534344.sol:10

█████╗

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.115074
Transaction Length: 0
Severity: High
Contract: LexAIR
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x052280a48ce0b00cbea7164a2b99b6a0cf534344.sol:9

█╔██╗ 
███████╗█

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.946207
Transaction Length: 1
Severity: High
Contract: LexAIR
Function name: updateMessage(string)
PC address: 275
Estimated Gas Usage: 319 - 414
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x052280a48ce0b00cbea7164a2b99b6a0cf534344.sol:3

*/

/*
██╗     ████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.341663
Transaction Length: 1
Severity: High
Contract: LexAIR
Function name: list(address[],bytes32)
PC address: 536
Estimated Gas Usage: 385 - 480
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x052280a48ce0b00cbea7164a2b99b6a0cf534344.sol:6

     ████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.340725
Transaction Length: 1
Severity: High
Contract: LexAIR
Function name: list(address[],bytes32)
PC address: 538
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x052280a48ce0b00cbea7164a2b99b6a0cf534344.sol:3

*/

/*
██╗     █████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:19.940064
Transaction Length: 1
Severity: High
Contract: LexAIR
Function name: delist(address[],bytes32)
PC address: 735
Estimated Gas Usage: 318 - 413
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x052280a48ce0b00cbea7164a2b99b6a0cf534344.sol:6

     ████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:23.028289
Transaction Length: 1
Severity: High
Contract: LexAIR
Function name: delist(address[],bytes32)
PC address: 737
Estimated Gas Usage: 318 - 413
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x052280a48ce0b00cbea7164a2b99b6a0cf534344.sol:3

*/

/*
██╗     █████

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x4F4001b06A2d5E71674a3591713B47580a100244.sol
Total states:1055
2.47138
==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.005893
Transaction Length: 0
Severity: Medium
Contract: Governance
Function name: constructor
PC address: 18
Estimated Gas Usage: 42 - 137
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../new/0x4F4001b06A2d5E71674a3591713B47580a100244.sol:220

tx.origin

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x6e58b1a54c5e57895b45ec8752c39e6d1c38ca19.sol
Total states:2955
3.987661
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xa2185aa4e9ddf0e6f58dc76a1fbc6376f64cd8f2.sol
Total states:2927
3.107344
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x12c211dc731410ee5c5ee18670b54cb1b989e0112.sol
Total states:1805
3.526252
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x8033eCe502a6CF62F9aEA0ef40Df467B723F04F6.sol
Total states:18680
153.297785
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.104006
Transaction Length: 1
Severity: High
Contract: mimitoken
Function name: bulkTransfer(address[],uint256[])
PC address: 757
Estimated Gas Usage: 408 - 503
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x8033eCe502a6CF62F9aEA0ef40Df467B723F04F6.sol:5

olidity ^0.5.13;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.033258
Transaction Length: 1
Severity: High
Contract: mimitoken
Function name: bulkTransfer(address[],uint256[])
PC address: 759
Estimated Gas Usage: 408 - 503
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x8033eCe502a6CF62F9aEA0ef40Df467B723F04F6.sol:3

*/

//pragma solidity ^0.5.13;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.803346
Transaction Length: 1
Severity: High
Contract: mimitoken
Function name: bulkTransfer(address[],uint256[])
PC address: 842
Estimated Gas Usage: 584 - 679
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x8033eCe502a6CF62F9aEA0ef40Df467B723F04F6.sol:5

olidity ^0.5.13;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:27.776480
Transaction Length: 1
Severity: High
Contract: mimitoken
Function name: bulkTransfer(address[],uint256[])
PC address: 844
Estimated Gas Usage: 584 - 679
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x8033eCe502a6CF62F9aEA0ef40Df467B723F04F6.sol:3

*/

//pragma solidity ^0.5.13;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:45.161631
Transaction Length: 1
Severity: High
Contract: mimitoken
Function name: transferAndCall(address,uint256,bytes)
PC address: 1417
Estimated Gas Usage: 511 - 606
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x8033eCe502a6CF62F9aEA0ef40Df467B723F04F6.sol:3

*/

//pragma solidity ^0.5.13;
prag

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:51.929910
Transaction Length: 1
Severity: Low
Contract: mimitoken
Function name: unfreeze(uint256)
PC address: 6428
Estimated Gas Usage: 1375 - 1660
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x8033eCe502a6CF62F9aEA0ef40Df467B723F04F6.sol:212

_burnedAmount * FLOAT_SCALAR / info.totalFrozen

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:26.724630
Transaction Length: 2
Severity: Low
Contract: mimitoken
Function name: unfreeze(uint256)
PC address: 6428
Estimated Gas Usage: 1375 - 1660
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x8033eCe502a6CF62F9aEA0ef40Df467B723F04F6.sol:212

_burnedAmount * FLOAT_SCALAR / info.totalFrozen

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xb9d01530c7c59437daa96aba918e31150589dc00.sol
Total states:149
2.638558
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x2f701fc5b2bc15fa8b09190a5cfc7b564ae9fad3.sol
Total states:35050
165.618293
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.136535
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1004
Estimated Gas Usage: 417 - 512
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x2f701fc5b2bc15fa8b09190a5cfc7b564ae9fad3.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.906930
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1006
Estimated Gas Usage: 417 - 512
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x2f701fc5b2bc15fa8b09190a5cfc7b564ae9fad3.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.638980
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1089
Estimated Gas Usage: 593 - 688
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x2f701fc5b2bc15fa8b09190a5cfc7b564ae9fad3.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:19.789723
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1091
Estimated Gas Usage: 593 - 688
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x2f701fc5b2bc15fa8b09190a5cfc7b564ae9fad3.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.905185
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1250
Estimated Gas Usage: 462 - 557
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x2f701fc5b2bc15fa8b09190a5cfc7b564ae9fad3.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.934990
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1252
Estimated Gas Usage: 462 - 557
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x2f701fc5b2bc15fa8b09190a5cfc7b564ae9fad3.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.360173
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1335
Estimated Gas Usage: 638 - 733
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x2f701fc5b2bc15fa8b09190a5cfc7b564ae9fad3.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:19.937917
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1337
Estimated Gas Usage: 638 - 733
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x2f701fc5b2bc15fa8b09190a5cfc7b564ae9fad3.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.764248
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeBP(uint256)
PC address: 2585
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x2f701fc5b2bc15fa8b09190a5cfc7b564ae9fad3.sol:784

uint[] public bonusRangeBP

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.392422
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3621
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x2f701fc5b2bc15fa8b09190a5cfc7b564ae9fad3.sol:1226

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:03.798086
Transaction Length: 2
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3621
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x2f701fc5b2bc15fa8b09190a5cfc7b564ae9fad3.sol:1226

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:34.396028
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeStart(uint256)
PC address: 6017
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x2f701fc5b2bc15fa8b09190a5cfc7b564ae9fad3.sol:783

uint[] public bonusRangeStart

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:35.536399
Transaction Length: 1
Severity: Low
Contract: LidStaking
Function name: stakeHandlers(uint256)
PC address: 6118
Estimated Gas Usage: 790 - 885
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x2f701fc5b2bc15fa8b09190a5cfc7b564ae9fad3.sol:961

IStakeHandler[] public stakeHandlers

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:01.061589
Transaction Length: 2
Severity: High
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6315
Estimated Gas Usage: 1699 - 2124
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0x2f701fc5b2bc15fa8b09190a5cfc7b564ae9fad3.sol:1111

stakeHandlers.length-1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:08.361486
Transaction Length: 2
Severity: Low
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6326
Estimated Gas Usage: 1709 - 2134
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x2f701fc5b2bc15fa8b09190a5cfc7b564ae9fad3.sol:1111

stakeHandlers[stakeHandlers.length-1]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:30.364947
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: calculateRatePerEth(uint256,uint256,uint256)
PC address: 6866
Estimated Gas Usage: 955 - 1050
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x2f701fc5b2bc15fa8b09190a5cfc7b564ae9fad3.sol:162

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.365293
Transaction Length: 1
Severity: High
Contract: LidStaking
Function name: findTaxAmount(uint256,uint256)
PC address: 13348
Estimated Gas Usage: 474 - 569
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x2f701fc5b2bc15fa8b09190a5cfc7b564ae9fad3.sol:162

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:32.782441
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPoolBPs(uint256)
PC address: 15373
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x2f701fc5b2bc15fa8b09190a5cfc7b564ae9fad3.sol:1227

uint[] public tokenPoolBPs

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xb380f3727467253108e2c034a8ae519dd631851c.sol
Total states:2324
1.829344
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x28681d373aF03A0Eb00ACE262c5dad9A0C65F2762.sol
Total states:4368
582.954974
==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.005729
Transaction Length: 0
Severity: Medium
Contract: Governance
Function name: constructor
PC address: 18
Estimated Gas Usage: 42 - 137
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../new/0x28681d373aF03A0Eb00ACE262c5dad9A0C65F2762.sol:639

tx.origin

--------------------

==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.030899
Transaction Length: 0
Severity: Medium
Contract: LPTokenWrapper
Function name: constructor
PC address: 241
Estimated Gas Usage: 16419 - 77504
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../new/0x28681d373aF03A0Eb00ACE262c5dad9A0C65F2762.sol:639

tx.origin

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.300259
Transaction Length: 0
Severity: High
Contract: UniswapReward
Function name: constructor
PC address: 516
Estimated Gas Usage: 37837 - 179912
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x28681d373aF03A0Eb00ACE262c5dad9A0C65F2762.sol:796

now + 365 days

--------------------

==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.752837
Transaction Length: 0
Severity: Medium
Contract: UniswapReward
Function name: constructor
PC address: 582
Estimated Gas Usage: 78340 - 380745
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../new/0x28681d373aF03A0Eb00ACE262c5dad9A0C65F2762.sol:639

tx.origin

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.779099
Transaction Length: 1
Severity: High
Contract: LPTokenWrapper
Function name: stake(uint256,string)
PC address: 873
Estimated Gas Usage: 411 - 506
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x28681d373aF03A0Eb00ACE262c5dad9A0C65F2762.sol:3

*/

/***
 *    ██████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.666309
Transaction Length: 1
Severity: High
Contract: UniswapReward
Function name: stake(uint256,string)
PC address: 2435
Estimated Gas Usage: 456 - 551
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x28681d373aF03A0Eb00ACE262c5dad9A0C65F2762.sol:3

*/

/***
 *    ██████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:57.252490
Transaction Length: 1
Severity: High
Contract: UniswapReward
Function name: seize(address,uint256)
PC address: 13914
Estimated Gas Usage: 2651 - 5713
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x28681d373aF03A0Eb00ACE262c5dad9A0C65F2762.sol:544

address(token).call(abi.encodeWithSelector(SELECTOR, to, value))

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:06:49.197099
Transaction Length: 1
Severity: Medium
Contract: UniswapReward
Function name: seize(address,uint256)
PC address: 13931
Estimated Gas Usage: 2976 - 7118
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../new/0x28681d373aF03A0Eb00ACE262c5dad9A0C65F2762.sol:544

address(token).call(abi.encodeWithSelector(SELECTOR, to, value))

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x5dabc0ed37d881b1b09707e0a894301adafcd4af.sol
Total states:19027
123.970377
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.860186
Transaction Length: 1
Severity: High
Contract: DefFinance
Function name: bulkTransfer(address[],uint256[])
PC address: 909
Estimated Gas Usage: 364 - 459
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5dabc0ed37d881b1b09707e0a894301adafcd4af.sol:5

olidity ^0.5.13;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.796942
Transaction Length: 1
Severity: High
Contract: DefFinance
Function name: bulkTransfer(address[],uint256[])
PC address: 911
Estimated Gas Usage: 364 - 459
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5dabc0ed37d881b1b09707e0a894301adafcd4af.sol:3

*/

//pragma solidity ^0.5.13;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.153437
Transaction Length: 1
Severity: High
Contract: DefFinance
Function name: bulkTransfer(address[],uint256[])
PC address: 994
Estimated Gas Usage: 540 - 635
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5dabc0ed37d881b1b09707e0a894301adafcd4af.sol:5

olidity ^0.5.13;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:24.391495
Transaction Length: 1
Severity: High
Contract: DefFinance
Function name: bulkTransfer(address[],uint256[])
PC address: 996
Estimated Gas Usage: 540 - 635
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5dabc0ed37d881b1b09707e0a894301adafcd4af.sol:3

*/

//pragma solidity ^0.5.13;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:40.522603
Transaction Length: 1
Severity: High
Contract: DefFinance
Function name: transferAndCall(address,uint256,bytes)
PC address: 1541
Estimated Gas Usage: 423 - 518
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5dabc0ed37d881b1b09707e0a894301adafcd4af.sol:3

*/

//pragma solidity ^0.5.13;
prag

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:39.588758
Transaction Length: 1
Severity: Low
Contract: DefFinance
Function name: unstake(uint256)
PC address: 8575
Estimated Gas Usage: 1420 - 1705
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x5dabc0ed37d881b1b09707e0a894301adafcd4af.sol:322

_burnedAmount * FLOAT_SCALAR / info.totalStaked

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:04.796112
Transaction Length: 2
Severity: Low
Contract: DefFinance
Function name: unstake(uint256)
PC address: 8575
Estimated Gas Usage: 1420 - 1705
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x5dabc0ed37d881b1b09707e0a894301adafcd4af.sol:322

_burnedAmount * FLOAT_SCALAR / info.totalStaked

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x12a9304681a1d29d01daffe882dcf3941bc5f8bc.sol
Total states:1308
1.079222
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xcc22f24e26e2afeb5a27b5cd98f5584287f97cea.sol
Total states:1444
7.163904
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.688515
Transaction Length: 1
Severity: High
Contract: TokenPool
Function name: balance()
PC address: 1230
Estimated Gas Usage: 2430 - 37419
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcc22f24e26e2afeb5a27b5cd98f5584287f97cea.sol:9

openzeppelin-so

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.418370
Transaction Length: 1
Severity: High
Contract: TokenPool
Function name: balance()
PC address: 1233
Estimated Gas Usage: 2430 - 37419
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcc22f24e26e2afeb5a27b5cd98f5584287f97cea.sol:5

*/



// File: openzeppelin-solidity/contra

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.162244
Transaction Length: 1
Severity: High
Contract: TokenPool
Function name: balance()
PC address: 1245
Estimated Gas Usage: 2430 - 37419
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcc22f24e26e2afeb5a27b5cd98f5584287f97cea.sol:799

token.balanceOf(address(this))

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:02.214943
Transaction Length: 1
Severity: High
Contract: TokenPool
Function name: balance()
PC address: 1920
Estimated Gas Usage: 2430 - 37419
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0xcc22f24e26e2afeb5a27b5cd98f5584287f97cea.sol:96

unction sub(uint256 a, 

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xb7555eb74b6f288fdbf9fc0013af1be59388655b.sol
Total states:1237
3.389875
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:01.448543
Transaction Length: 1
Severity: Low
Contract: ESDRouterV1
Function name: addLiquidityUSDCOnly(uint256)
PC address: 1279
Estimated Gas Usage: 2046 - 3037
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0xb7555eb74b6f288fdbf9fc0013af1be59388655b.sol:340

usdcToken.transferFrom(address(msg.sender), address(this), usdcAmountToAdd)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xabd26d7b0f70f86e4fd490837bbb21932015f97e.sol
Total states:23718
65.475495
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.859146
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3244
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xabd26d7b0f70f86e4fd490837bbb21932015f97e.sol:121

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.176331
Transaction Length: 1
Severity: High
Contract: DynamicSwap
Function name: swapExactAmountOut(address,address,uint256,uint256,uint256)
PC address: 12118
Estimated Gas Usage: 2280 - 37172
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xabd26d7b0f70f86e4fd490837bbb21932015f97e.sol:140

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.623068
Transaction Length: 2
Severity: High
Contract: DynamicSwap
Function name: increaseAllowance(address,uint256)
PC address: 13047
Estimated Gas Usage: 1037 - 1512
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xabd26d7b0f70f86e4fd490837bbb21932015f97e.sol:121

a + b

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:09.789660
Transaction Length: 1
Severity: High
Contract: DynamicSwap
Function name: getInExactOut(address,int256,int256,int256)
PC address: 14900
Estimated Gas Usage: 538 - 633
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0xabd26d7b0f70f86e4fd490837bbb21932015f97e.sol:229

a - b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:20.481064
Transaction Length: 1
Severity: High
Contract: DynamicSwap
Function name: getOutExactIn(address,int256,int256,int256)
PC address: 16120
Estimated Gas Usage: 583 - 678
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xabd26d7b0f70f86e4fd490837bbb21932015f97e.sol:235

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.642296
Transaction Length: 1
Severity: High
Contract: DynamicSwap
Function name: getInExactOut(address,int256,int256,int256)
PC address: 17245
Estimated Gas Usage: 788 - 883
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xabd26d7b0f70f86e4fd490837bbb21932015f97e.sol:215

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x642bF34F2aeC4c28a8273C8f032c1b0a21EceDcf2.sol
Total states:976
23.54247
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.656623
Transaction Length: 1
Severity: High
Contract: UniswapV2
Function name: allPairsLength()
PC address: 398
Estimated Gas Usage: 2192 - 37086
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x642bF34F2aeC4c28a8273C8f032c1b0a21EceDcf2.sol:5

racts/lib/IERC2

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.319991
Transaction Length: 1
Severity: High
Contract: UniswapV2
Function name: allPairsLength()
PC address: 401
Estimated Gas Usage: 2192 - 37086
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x642bF34F2aeC4c28a8273C8f032c1b0a21EceDcf2.sol:3



// File: contracts/lib/IERC20.sol

//prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.134372
Transaction Length: 1
Severity: High
Contract: UniswapV2
Function name: allPairsLength()
PC address: 413
Estimated Gas Usage: 2192 - 37086
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x642bF34F2aeC4c28a8273C8f032c1b0a21EceDcf2.sol:154

factory.allPairsLength()

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:06.350598
Transaction Length: 1
Severity: High
Contract: UniswapV2
Function name: getPairs(uint256,uint256)
PC address: 2557
Estimated Gas Usage: 560 - 938
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0x642bF34F2aeC4c28a8273C8f032c1b0a21EceDcf2.sol:158

toIndex - fromIndex

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:02.181428
Transaction Length: 1
Severity: High
Contract: UniswapV2
Function name: allPairsLength()
PC address: 3659
Estimated Gas Usage: 2192 - 37086
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0x642bF34F2aeC4c28a8273C8f032c1b0a21EceDcf2.sol:44

e number of decimals us

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xb9539dddc216e4e46c356da5f0c2300825d63ba5.sol
Total states:2023
4.796028
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x3370d0c3048b98eb6034774883ab14617872f012.sol
Total states:1880
93.138756
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.296016
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShip(address[])
PC address: 360
Estimated Gas Usage: 342 - 437
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3370d0c3048b98eb6034774883ab14617872f012.sol:5

penzeppelin-solidity/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.700562
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShip(address[])
PC address: 362
Estimated Gas Usage: 342 - 437
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3370d0c3048b98eb6034774883ab14617872f012.sol:3

*/

// File: openzeppelin-solidity/c

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:36.577412
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShipWithHowMany(address[],uint256)
PC address: 776
Estimated Gas Usage: 341 - 436
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3370d0c3048b98eb6034774883ab14617872f012.sol:5

penzeppelin-solidity/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:39.467229
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShipWithHowMany(address[],uint256)
PC address: 778
Estimated Gas Usage: 341 - 436
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3370d0c3048b98eb6034774883ab14617872f012.sol:3

*/

// File: openzeppelin-solidity/c

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:28.994913
Transaction Length: 1
Severity: Low
Contract: BeneficiaryOperations
Function name: allOperations(uint256)
PC address: 1715
Estimated Gas Usage: 701 - 796
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x3370d0c3048b98eb6034774883ab14617872f012.sol:386

bytes32[] public allOperations

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:28.070937
Transaction Length: 1
Severity: Low
Contract: BeneficiaryOperations
Function name: beneficiaries(uint256)
PC address: 4636
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x3370d0c3048b98eb6034774883ab14617872f012.sol:385

address[] public beneficiaries

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x1d4f16c44d3385832caff0cd43032eefbb485143.sol
Total states:1308
1.157941
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xb89abea71417ecb7fd8234a376cfc231c2c94e9a.sol
Total states:10634
27.969471
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xd5a34b505aad78dc6677dcc75d7ea357c542ec14.sol
Total states:1332
351.304869
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.229861
Transaction Length: 1
Severity: High
Contract: Airdrop
Function name: airdropTokens(address,address[],uint256[])
PC address: 201
Estimated Gas Usage: 329 - 424
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xd5a34b505aad78dc6677dcc75d7ea357c542ec14.sol:5

olidity 0.5.0;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.961395
Transaction Length: 1
Severity: High
Contract: Airdrop
Function name: airdropTokens(address,address[],uint256[])
PC address: 203
Estimated Gas Usage: 329 - 424
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xd5a34b505aad78dc6677dcc75d7ea357c542ec14.sol:3

*/

//pragma solidity 0.5.0;
pragma 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:17.586385
Transaction Length: 1
Severity: High
Contract: Airdrop
Function name: airdropTokens(address,address[],uint256[])
PC address: 349
Estimated Gas Usage: 671 - 3448
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xd5a34b505aad78dc6677dcc75d7ea357c542ec14.sol:5

olidity 0.5.0;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:28.328500
Transaction Length: 1
Severity: High
Contract: Airdrop
Function name: airdropTokens(address,address[],uint256[])
PC address: 351
Estimated Gas Usage: 671 - 3448
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xd5a34b505aad78dc6677dcc75d7ea357c542ec14.sol:3

*/

//pragma solidity 0.5.0;
pragma 

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:05.780992
Transaction Length: 1
Severity: Low
Contract: Airdrop
Function name: airdropTokens(address,address[],uint256[])
PC address: 704
Estimated Gas Usage: 6942 - 33433
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xd5a34b505aad78dc6677dcc75d7ea357c542ec14.sol:66

_tokens[i]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:03:36.297017
Transaction Length: 2
Severity: Low
Contract: Airdrop
Function name: airdropTokens(address,address[],uint256[])
PC address: 704
Estimated Gas Usage: 6942 - 33433
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xd5a34b505aad78dc6677dcc75d7ea357c542ec14.sol:66

_tokens[i]

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:01:39.192437
Transaction Length: 1
Severity: Medium
Contract: Airdrop
Function name: airdropTokens(address,address[],uint256[])
PC address: 902
Estimated Gas Usage: 7844 - 34994
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../new/0xd5a34b505aad78dc6677dcc75d7ea357c542ec14.sol:66

token.transferFrom(msg.sender, _recipient[i], _tokens[i])

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:02:32.515287
Transaction Length: 2
Severity: Medium
Contract: Airdrop
Function name: airdropTokens(address,address[],uint256[])
PC address: 902
Estimated Gas Usage: 7844 - 34994
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../new/0xd5a34b505aad78dc6677dcc75d7ea357c542ec14.sol:66

token.transferFrom(msg.sender, _recipient[i], _tokens[i])

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x5b417ce858713528b127aed8eb412c9daabbd349.sol
Total states:661
1.611348
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x6ef2e0eb03ee48d2d93751ebb904770c19a74501.sol
Total states:17998
40.204622
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.076279
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3044
Estimated Gas Usage: 989 - 1464
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x6ef2e0eb03ee48d2d93751ebb904770c19a74501.sol:38

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:02.022654
Transaction Length: 1
Severity: Low
Contract: NHCCoin
Function name: lockState(address,uint256)
PC address: 4809
Estimated Gas Usage: 830 - 1115
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x6ef2e0eb03ee48d2d93751ebb904770c19a74501.sol:334

lockInfo[_holder][_idx]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.593279
Transaction Length: 2
Severity: High
Contract: NHCCoin
Function name: increaseAllowance(address,uint256)
PC address: 14392
Estimated Gas Usage: 968 - 1443
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x6ef2e0eb03ee48d2d93751ebb904770c19a74501.sol:38

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x594e8f548ae1eb5a22b4d48a90ae9bc48e7c4742.sol
Total states:18022
39.513591
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.223518
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3044
Estimated Gas Usage: 989 - 1464
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x594e8f548ae1eb5a22b4d48a90ae9bc48e7c4742.sol:111

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:02.059350
Transaction Length: 1
Severity: Low
Contract: BitTiger
Function name: lockState(address,uint256)
PC address: 4915
Estimated Gas Usage: 897 - 1182
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x594e8f548ae1eb5a22b4d48a90ae9bc48e7c4742.sol:630

lockInfo[_holder][_idx]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.510164
Transaction Length: 2
Severity: High
Contract: BitTiger
Function name: increaseAllowance(address,uint256)
PC address: 14875
Estimated Gas Usage: 968 - 1443
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x594e8f548ae1eb5a22b4d48a90ae9bc48e7c4742.sol:111

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xa55ee5d39d6afe61069cfca5454ecaeba6843146.sol
Total states:3700
54.950805
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:00.110808
Transaction Length: 0
Severity: Low
Contract: COREv1Router
Function name: constructor
PC address: 1005
Estimated Gas Usage: 41966 - 188994
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0xa55ee5d39d6afe61069cfca5454ecaeba6843146.sol:2145

IUniswapV2Pair(_coreWETHPair).approve(address(_coreVault), uint(-1))

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:33.051162
Transaction Length: 1
Severity: Low
Contract: COREv1Router
Function name: fallback()
PC address: 1858
Estimated Gas Usage: 7928 - 29722
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0xa55ee5d39d6afe61069cfca5454ecaeba6843146.sol:2162

_WETH.deposit.value(msg.value)()

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:26.514538
Transaction Length: 1
Severity: Low
Contract: COREv1Router
Function name: refreshApproval()
PC address: 4217
Estimated Gas Usage: 1898 - 3124
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0xa55ee5d39d6afe61069cfca5454ecaeba6843146.sol:2145

IUniswapV2Pair(_coreWETHPair).approve(address(_coreVault), uint(-1))

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x792af201f356242e07da90f5c8ad634617db4eaf.sol
Total states:305
3.77749
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x12ca9db171f3f2ef9e53ab6bc4b7f6a6b8f3cfff.sol
Total states:426
0.643371
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x26050bdf45da4c5ee6288beb9c1ef629ed68c6e6.sol
Total states:524
38.519692
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.367009
Transaction Length: 1
Severity: High
Contract: MultiSend
Function name: sendMany(address,address[],uint256[])
PC address: 190
Estimated Gas Usage: 329 - 424
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x26050bdf45da4c5ee6288beb9c1ef629ed68c6e6.sol:5

cense-Identifier: MIT

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.819451
Transaction Length: 1
Severity: High
Contract: MultiSend
Function name: sendMany(address,address[],uint256[])
PC address: 192
Estimated Gas Usage: 329 - 424
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x26050bdf45da4c5ee6288beb9c1ef629ed68c6e6.sol:3

*/

// SPDX-License-Identifier: MIT


--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.847180
Transaction Length: 1
Severity: High
Contract: MultiSend
Function name: sendMany(address,address[],uint256[])
PC address: 275
Estimated Gas Usage: 505 - 600
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x26050bdf45da4c5ee6288beb9c1ef629ed68c6e6.sol:5

cense-Identifier: MIT

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:22.833703
Transaction Length: 1
Severity: High
Contract: MultiSend
Function name: sendMany(address,address[],uint256[])
PC address: 277
Estimated Gas Usage: 505 - 600
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x26050bdf45da4c5ee6288beb9c1ef629ed68c6e6.sol:3

*/

// SPDX-License-Identifier: MIT


--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x1a48B6151012a27A4ab2a8c1b8Ec108bAB9eF49c.sol
Total states:5938
22.459484
==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:03.979280
Transaction Length: 1
Severity: Medium
Contract: RewardProxyActions
Function name: claimReward(address)
PC address: 144
Estimated Gas Usage: 5139 - 108825
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 250
Offset: 409
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../new/0x1a48B6151012a27A4ab2a8c1b8Ec108bAB9eF49c.sol:1271

function claimReward(address rewarder) public {
        uint256 reward = StakingRewards(rewarder).getReward();
        IERC20(StakingRewards(rewarder).gov()).transfer(msg.sender, reward);
    }

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:00:01.603730
Transaction Length: 1
Severity: Medium
Contract: RewardProxyActions
Function name: claimReward(address)
PC address: 250
Estimated Gas Usage: 1019 - 1395
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../new/0x1a48B6151012a27A4ab2a8c1b8Ec108bAB9eF49c.sol:1272

StakingRewards(rewarder).getReward()

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:03.877974
Transaction Length: 1
Severity: Low
Contract: RewardProxyActions
Function name: claimReward(address)
PC address: 630
Estimated Gas Usage: 4314 - 73814
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0x1a48B6151012a27A4ab2a8c1b8Ec108bAB9eF49c.sol:1273

IERC20(StakingRewards(rewarder).gov()).transfer(msg.sender, reward)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x9113d0ed67fb4d6379cb70f7b51ef151c9fa10e1.sol
Total states:2324
1.853042
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xcb13fe86e4f8139d56f694c9a452d03e00f708ef.sol
Total states:976
24.235667
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.667285
Transaction Length: 1
Severity: High
Contract: UniswapV2
Function name: allPairsLength()
PC address: 398
Estimated Gas Usage: 2192 - 37086
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcb13fe86e4f8139d56f694c9a452d03e00f708ef.sol:5

racts/lib/IERC2

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.321637
Transaction Length: 1
Severity: High
Contract: UniswapV2
Function name: allPairsLength()
PC address: 401
Estimated Gas Usage: 2192 - 37086
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcb13fe86e4f8139d56f694c9a452d03e00f708ef.sol:3



// File: contracts/lib/IERC20.sol

//prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.142756
Transaction Length: 1
Severity: High
Contract: UniswapV2
Function name: allPairsLength()
PC address: 413
Estimated Gas Usage: 2192 - 37086
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcb13fe86e4f8139d56f694c9a452d03e00f708ef.sol:154

factory.allPairsLength()

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:06.378910
Transaction Length: 1
Severity: High
Contract: UniswapV2
Function name: getPairs(uint256,uint256)
PC address: 2557
Estimated Gas Usage: 560 - 938
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0xcb13fe86e4f8139d56f694c9a452d03e00f708ef.sol:158

toIndex - fromIndex

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:02.204633
Transaction Length: 1
Severity: High
Contract: UniswapV2
Function name: allPairsLength()
PC address: 3659
Estimated Gas Usage: 2192 - 37086
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0xcb13fe86e4f8139d56f694c9a452d03e00f708ef.sol:44

umber of decimals used 

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x4c8cc29226f97d92ec2d299bc14edf16bad436b7.sol
Total states:29183
581.067838
==== Delegatecall Proxy ====
SWC ID: 112
FOUND TIME: 0:00:00.007060
Transaction Length: 1
Severity: Low
Contract: BaseUpgradeabilityProxy
Function name: fallback
PC address: 97
Estimated Gas Usage: 557 - 2956
The contract implements a delegatecall proxy.
The smart contract forwards the received calldata via delegatecall. Note that callerscan execute arbitrary functions in the callee contract and that the callee contract can access the storage of the calling contract. Make sure that the callee contract is audited properly.DELEGATECALL target: 0x0
--------------------
In file: ../../new/0x4c8cc29226f97d92ec2d299bc14edf16bad436b7.sol:1030

delegatecall(gas, implementation, 0, calldatasize, 0, 0)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.149270
Transaction Length: 1
Severity: High
Contract: InitializableUpgradeabilityProxy
Function name: initialize(address,bytes)
PC address: 184
Estimated Gas Usage: 305 - 400
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x4c8cc29226f97d92ec2d299bc14edf16bad436b7.sol:3



*/



//pragma solidity 0.5.12;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.968302
Transaction Length: 1
Severity: High
Contract: BaseAdminUpgradeabilityProxy
Function name: upgradeToAndCall(address,bytes)
PC address: 309
Estimated Gas Usage: 327 - 422
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x4c8cc29226f97d92ec2d299bc14edf16bad436b7.sol:3



*/



//pragma solidity 0.5.12;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.937247
Transaction Length: 1
Severity: High
Contract: InitializableAdminUpgradeabilityProxy
Function name: upgradeToAndCall(address,bytes)
PC address: 347
Estimated Gas Usage: 350 - 445
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x4c8cc29226f97d92ec2d299bc14edf16bad436b7.sol:3



*/



//pragma solidity 0.5.12;
p

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:16.293387
Transaction Length: 1
Severity: High
Contract: InitializableUpgradeabilityProxy
Function name: initialize(address,bytes)
PC address: 441
Estimated Gas Usage: 1160 - 4266
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0x4c8cc29226f97d92ec2d299bc14edf16bad436b7.sol:1302

uint256(keccak256('eip1967.proxy.implementation')) - 1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:10.909832
Transaction Length: 1
Severity: Low
Contract: InitializableUpgradeabilityProxy
Function name: initialize(address,bytes)
PC address: 488
Estimated Gas Usage: 1170 - 4276
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x4c8cc29226f97d92ec2d299bc14edf16bad436b7.sol:1302

assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1))

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.285805
Transaction Length: 1
Severity: High
Contract: InitializableAdminUpgradeabilityProxy
Function name: initialize(address,address,bytes)
PC address: 700
Estimated Gas Usage: 382 - 477
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x4c8cc29226f97d92ec2d299bc14edf16bad436b7.sol:3



*/



//pragma solidity 0.5.12;
p

--------------------

==== Delegatecall Proxy ====
SWC ID: 112
FOUND TIME: 0:01:10.916718
Transaction Length: 1
Severity: Low
Contract: InitializableUpgradeabilityProxy
Function name: fallback
PC address: 775
Estimated Gas Usage: 618 - 3017
The contract implements a delegatecall proxy.
The smart contract forwards the received calldata via delegatecall. Note that callerscan execute arbitrary functions in the callee contract and that the callee contract can access the storage of the calling contract. Make sure that the callee contract is audited properly.DELEGATECALL target: 0x0
--------------------
In file: ../../new/0x4c8cc29226f97d92ec2d299bc14edf16bad436b7.sol:1030

delegatecall(gas, implementation, 0, calldatasize, 0, 0)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.622767
Transaction Length: 1
Severity: Low
Contract: KRoles
Function name: operators(uint256)
PC address: 898
Estimated Gas Usage: 722 - 817
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x4c8cc29226f97d92ec2d299bc14edf16bad436b7.sol:770

address[] public operators

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:37.772931
Transaction Length: 1
Severity: High
Contract: InitializableAdminUpgradeabilityProxy
Function name: initialize(address,bytes)
PC address: 919
Estimated Gas Usage: 371 - 466
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x4c8cc29226f97d92ec2d299bc14edf16bad436b7.sol:3



*/



//pragma solidity 0.5.12;
p

--------------------

==== Delegatecall Proxy ====
SWC ID: 112
FOUND TIME: 0:00:05.733699
Transaction Length: 1
Severity: Low
Contract: BaseAdminUpgradeabilityProxy
Function name: fallback
PC address: 1699
Estimated Gas Usage: 1229 - 3628
The contract implements a delegatecall proxy.
The smart contract forwards the received calldata via delegatecall. Note that callerscan execute arbitrary functions in the callee contract and that the callee contract can access the storage of the calling contract. Make sure that the callee contract is audited properly.DELEGATECALL target: 0x0
--------------------
In file: ../../new/0x4c8cc29226f97d92ec2d299bc14edf16bad436b7.sol:1030

delegatecall(gas, implementation, 0, calldatasize, 0, 0)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.114334
Transaction Length: 1
Severity: High
Contract: LiquidityPoolV2
Function name: borrow(address,uint256,bytes)
PC address: 1714
Estimated Gas Usage: 423 - 518
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x4c8cc29226f97d92ec2d299bc14edf16bad436b7.sol:3



*/



//pragma solidity 0.5.12;
p

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.114742
Transaction Length: 1
Severity: Low
Contract: CanReclaimTokens
Function name: operators(uint256)
PC address: 1895
Estimated Gas Usage: 700 - 795
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x4c8cc29226f97d92ec2d299bc14edf16bad436b7.sol:770

address[] public operators

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.107645
Transaction Length: 1
Severity: High
Contract: LiquidityPoolV2
Function name: initialize(string,address)
PC address: 1972
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x4c8cc29226f97d92ec2d299bc14edf16bad436b7.sol:3



*/



//pragma solidity 0.5.12;
p

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:20.777397
Transaction Length: 1
Severity: High
Contract: InitializableAdminUpgradeabilityProxy
Function name: initialize(address,address,bytes)
PC address: 2230
Estimated Gas Usage: 1755 - 4861
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0x4c8cc29226f97d92ec2d299bc14edf16bad436b7.sol:1302

uint256(keccak256('eip1967.proxy.implementation')) - 1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:42.511700
Transaction Length: 1
Severity: Low
Contract: InitializableAdminUpgradeabilityProxy
Function name: initialize(address,bytes)
PC address: 2277
Estimated Gas Usage: 1227 - 4333
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x4c8cc29226f97d92ec2d299bc14edf16bad436b7.sol:1302

assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1))

--------------------

==== Delegatecall Proxy ====
SWC ID: 112
FOUND TIME: 0:01:42.554511
Transaction Length: 1
Severity: Low
Contract: InitializableAdminUpgradeabilityProxy
Function name: fallback
PC address: 2802
Estimated Gas Usage: 1240 - 3639
The contract implements a delegatecall proxy.
The smart contract forwards the received calldata via delegatecall. Note that callerscan execute arbitrary functions in the callee contract and that the callee contract can access the storage of the calling contract. Make sure that the callee contract is audited properly.DELEGATECALL target: 0x0
--------------------
In file: ../../new/0x4c8cc29226f97d92ec2d299bc14edf16bad436b7.sol:1030

delegatecall(gas, implementation, 0, calldatasize, 0, 0)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.568827
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3249
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x4c8cc29226f97d92ec2d299bc14edf16bad436b7.sol:231

a + b

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:02:32.856846
Transaction Length: 1
Severity: Medium
Contract: LiquidityPoolV2
Function name: underlyingBalance(address,address)
PC address: 3478
Estimated Gas Usage: 4821 - 75266
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 15973
Offset: 16229
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../new/0x4c8cc29226f97d92ec2d299bc14edf16bad436b7.sol:1515

function underlyingBalance(address _token, address _owner) public view returns (uint256) {
        uint256 kBalance = kTokens[_token].balanceOf(_owner);
        uint256 kSupply = kTokens[_token].totalSupply();
        if (kBalance == 0) {
            return 0;
        }
        return borrowableBalance(_token).mul(kBalance).div(kSupply);
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:56.635878
Transaction Length: 1
Severity: High
Contract: LiquidityPoolV2
Function name: VERSION()
PC address: 3573
Estimated Gas Usage: 1522 - 2557
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x4c8cc29226f97d92ec2d299bc14edf16bad436b7.sol:1341

string public VERSION

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:02.428843
Transaction Length: 1
Severity: Low
Contract: LiquidityPoolV2
Function name: registeredTokens(uint256)
PC address: 11681
Estimated Gas Usage: 701 - 796
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x4c8cc29226f97d92ec2d299bc14edf16bad436b7.sol:1339

address[] public registeredTokens

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:45.622649
Transaction Length: 1
Severity: Low
Contract: LiquidityPoolV2
Function name: operators(uint256)
PC address: 15440
Estimated Gas Usage: 767 - 862
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x4c8cc29226f97d92ec2d299bc14edf16bad436b7.sol:770

address[] public operators

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x18923b96e765aeeabb8090e17c15da958a4846d3.sol
Total states:77
3.186678
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x8177E21B333c7488993D89c11f889D78F1eADAE5.sol
Total states:981
8.657591
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.331260
Transaction Length: 1
Severity: High
Contract: PriceProvider
Function name: poke()
PC address: 1260
Estimated Gas Usage: 2248 - 37142
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x8177E21B333c7488993D89c11f889D78F1eADAE5.sol:5

tened sources o

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xf5ce0c13f9287d37adea719628821e4c20edaa2a2.sol
Total states:15386
125.382533
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:01.733275
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3645
Estimated Gas Usage: 1025 - 1500
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xf5ce0c13f9287d37adea719628821e4c20edaa2a2.sol:56

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:35.765666
Transaction Length: 2
Severity: High
Contract: ERC20Pausable
Function name: increaseAllowance(address,uint256)
PC address: 5504
Estimated Gas Usage: 1070 - 1545
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xf5ce0c13f9287d37adea719628821e4c20edaa2a2.sol:56

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x2c307a1952891cb2b6856155a1534a1c75ecc7cd.sol
Total states:2007
484.655913
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.198473
Transaction Length: 1
Severity: High
Contract: Operator
Function name: batchRemoveOperators(address[])
PC address: 294
Estimated Gas Usage: 341 - 436
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x2c307a1952891cb2b6856155a1534a1c75ecc7cd.sol:9

ma solidity ^0.5.0;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.856811
Transaction Length: 1
Severity: High
Contract: Operator
Function name: batchRemoveOperators(address[])
PC address: 296
Estimated Gas Usage: 341 - 436
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x2c307a1952891cb2b6856155a1534a1c75ecc7cd.sol:3



*/



//pragma solidity ^0.5.0;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:16.572716
Transaction Length: 1
Severity: High
Contract: Operator
Function name: batchAddOperators(address[])
PC address: 478
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x2c307a1952891cb2b6856155a1534a1c75ecc7cd.sol:9

ma solidity ^0.5.0;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:20.100306
Transaction Length: 1
Severity: High
Contract: Operator
Function name: batchAddOperators(address[])
PC address: 480
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x2c307a1952891cb2b6856155a1534a1c75ecc7cd.sol:3



*/



//pragma solidity ^0.5.0;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.524727
Transaction Length: 1
Severity: High
Contract: TimeLockFactory
Function name: batchRemoveOperators(address[])
PC address: 1015
Estimated Gas Usage: 408 - 503
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x2c307a1952891cb2b6856155a1534a1c75ecc7cd.sol:9

ma solidity ^0.5.0;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.585656
Transaction Length: 1
Severity: High
Contract: TimeLockFactory
Function name: batchRemoveOperators(address[])
PC address: 1017
Estimated Gas Usage: 408 - 503
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x2c307a1952891cb2b6856155a1534a1c75ecc7cd.sol:3



*/



//pragma solidity ^0.5.0;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:22.476634
Transaction Length: 1
Severity: High
Contract: TimeLockFactory
Function name: setLockupPhases(uint256[],uint256[],uint256[])
PC address: 1209
Estimated Gas Usage: 452 - 547
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x2c307a1952891cb2b6856155a1534a1c75ecc7cd.sol:9

ma solidity ^0.5.0;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:25.615249
Transaction Length: 1
Severity: High
Contract: TimeLockFactory
Function name: setLockupPhases(uint256[],uint256[],uint256[])
PC address: 1211
Estimated Gas Usage: 452 - 547
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x2c307a1952891cb2b6856155a1534a1c75ecc7cd.sol:3



*/



//pragma solidity ^0.5.0;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:36.502085
Transaction Length: 1
Severity: High
Contract: TimeLockFactory
Function name: setLockupPhases(uint256[],uint256[],uint256[])
PC address: 1357
Estimated Gas Usage: 785 - 3562
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x2c307a1952891cb2b6856155a1534a1c75ecc7cd.sol:9

ma solidity ^0.5.0;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:47.111531
Transaction Length: 1
Severity: High
Contract: TimeLockFactory
Function name: setLockupPhases(uint256[],uint256[],uint256[])
PC address: 1359
Estimated Gas Usage: 785 - 3562
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x2c307a1952891cb2b6856155a1534a1c75ecc7cd.sol:3



*/



//pragma solidity ^0.5.0;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:13.708933
Transaction Length: 1
Severity: High
Contract: TimeLockFactory
Function name: setLockupPhases(uint256[],uint256[],uint256[])
PC address: 1505
Estimated Gas Usage: 1118 - 6577
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x2c307a1952891cb2b6856155a1534a1c75ecc7cd.sol:9

ma solidity ^0.5.0;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:35.606427
Transaction Length: 1
Severity: High
Contract: TimeLockFactory
Function name: setLockupPhases(uint256[],uint256[],uint256[])
PC address: 1507
Estimated Gas Usage: 1118 - 6577
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x2c307a1952891cb2b6856155a1534a1c75ecc7cd.sol:3



*/



//pragma solidity ^0.5.0;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:25.185590
Transaction Length: 1
Severity: High
Contract: TimeLockFactory
Function name: version()
PC address: 1719
Estimated Gas Usage: 507 - 1637
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x2c307a1952891cb2b6856155a1534a1c75ecc7cd.sol:1366

string public constant version = "1.0"

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:26.860466
Transaction Length: 1
Severity: Low
Contract: Operator
Function name: getAllOperators()
PC address: 2456
Estimated Gas Usage: 3808 - 7953
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x2c307a1952891cb2b6856155a1534a1c75ecc7cd.sol:1054

operators[counter]

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xfecc0513a5063b8dac9e77c723a1d00cf27fe7f2.sol
Total states:1521
3.101708
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xede5a457fdd6a436435889fe8af97192a280b545.sol
Total states:723
6.227625
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xbd277e47d0ecdd5db6c57eda717dd8f5a329edec.sol
Total states:8717
522.891877
==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.003840
Transaction Length: 0
Severity: Medium
Contract: Governance
Function name: constructor
PC address: 18
Estimated Gas Usage: 42 - 137
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../new/0xbd277e47d0ecdd5db6c57eda717dd8f5a329edec.sol:1380

tx.origin

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.053285
Transaction Length: 0
Severity: High
Contract: NFTReward
Function name: constructor
PC address: 459
Estimated Gas Usage: 37837 - 179912
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xbd277e47d0ecdd5db6c57eda717dd8f5a329edec.sol:1493

now + 365 days

--------------------

==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.855255
Transaction Length: 0
Severity: Medium
Contract: NFTReward
Function name: constructor
PC address: 637
Estimated Gas Usage: 88578 - 433847
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../new/0xbd277e47d0ecdd5db6c57eda717dd8f5a329edec.sol:1380

tx.origin

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.017127
Transaction Length: 1
Severity: High
Contract: ERC721
Function name: safeTransferFrom(address,address,uint256,bytes)
PC address: 1136
Estimated Gas Usage: 477 - 572
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xbd277e47d0ecdd5db6c57eda717dd8f5a329edec.sol:3

*/

/***
 *    ██████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.832328
Transaction Length: 1
Severity: High
Contract: NFTReward
Function name: onERC721Received(address,address,uint256,bytes)
PC address: 1348
Estimated Gas Usage: 480 - 575
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xbd277e47d0ecdd5db6c57eda717dd8f5a329edec.sol:3

*/

/***
 *    ██████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.418411
Transaction Length: 1
Severity: High
Contract: ERC721Enumerable
Function name: safeTransferFrom(address,address,uint256,bytes)
PC address: 1379
Estimated Gas Usage: 477 - 572
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xbd277e47d0ecdd5db6c57eda717dd8f5a329edec.sol:3

*/

/***
 *    ██████

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:00:34.360489
Transaction Length: 1
Severity: Medium
Contract: NFTReward
Function name: seizeErc721(address,uint256)
PC address: 6092
Estimated Gas Usage: 2156 - 3477
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../new/0xbd277e47d0ecdd5db6c57eda717dd8f5a329edec.sol:1563

token.safeTransferFrom(address(this), _governance, tokenId)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:58.389680
Transaction Length: 1
Severity: Low
Contract: NFTReward
Function name: _playerGego(address,uint256)
PC address: 8494
Estimated Gas Usage: 820 - 1105
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xbd277e47d0ecdd5db6c57eda717dd8f5a329edec.sol:1520

mapping(address => uint256[]) public _playerGego

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x6238972611f7933c6c0919c54447e2bac86f96e7.sol
Total states:7160
9.035422
==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.818033
Transaction Length: 1
Severity: High
Contract: CopaDelCrypto
Function name: validateWinnersCount(uint32,uint32,uint32)
PC address: 4567
Estimated Gas Usage: 578 - 673
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0x6238972611f7933c6c0919c54447e2bac86f96e7.sol:371

winners - last

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:04.379889
Transaction Length: 1
Severity: Low
Contract: CopaDelCrypto
Function name: getForecastData(bytes32,bytes32,bytes12,uint8)
PC address: 9596
Estimated Gas Usage: 462 - 557
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x6238972611f7933c6c0919c54447e2bac86f96e7.sol:210

assert(index >= 32 && index < 108)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:06.147904
Transaction Length: 1
Severity: Low
Contract: CopaDelCrypto
Function name: getResultData(uint8)
PC address: 11005
Estimated Gas Usage: 415 - 510
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x6238972611f7933c6c0919c54447e2bac86f96e7.sol:224

assert(index >= 32 && index < 108)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:06.540958
Transaction Length: 1
Severity: Low
Contract: CopaDelCrypto
Function name: players(uint256)
PC address: 11375
Estimated Gas Usage: 788 - 883
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x6238972611f7933c6c0919c54447e2bac86f96e7.sol:48

address[] public players

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x5c6de810839f33df74d63e21f33e216802b337af.sol
Total states:25217
140.686122
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.990657
Transaction Length: 1
Severity: High
Contract: SymDeficom
Function name: bulkTransfer(address[],uint256[])
PC address: 818
Estimated Gas Usage: 408 - 503
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5c6de810839f33df74d63e21f33e216802b337af.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.459696
Transaction Length: 1
Severity: High
Contract: SymDeficom
Function name: bulkTransfer(address[],uint256[])
PC address: 820
Estimated Gas Usage: 408 - 503
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5c6de810839f33df74d63e21f33e216802b337af.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.004296
Transaction Length: 1
Severity: High
Contract: SymDeficom
Function name: bulkTransfer(address[],uint256[])
PC address: 903
Estimated Gas Usage: 584 - 679
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5c6de810839f33df74d63e21f33e216802b337af.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:23.962163
Transaction Length: 1
Severity: High
Contract: SymDeficom
Function name: bulkTransfer(address[],uint256[])
PC address: 905
Estimated Gas Usage: 584 - 679
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5c6de810839f33df74d63e21f33e216802b337af.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:37.839567
Transaction Length: 1
Severity: High
Contract: SymDeficom
Function name: transferAndCall(address,uint256,bytes)
PC address: 1523
Estimated Gas Usage: 489 - 584
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5c6de810839f33df74d63e21f33e216802b337af.sol:3

*/

/**
 *Submitted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:29.719470
Transaction Length: 2
Severity: High
Contract: SymDeficom
Function name: unstake(uint256)
PC address: 7321
Estimated Gas Usage: 1366 - 1841
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5c6de810839f33df74d63e21f33e216802b337af.sol:222

info.users[msg.sender].stakeTimestamp + 24 hours

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xe917c7c6932a1b9393e8f2df6e3c2531b58e37db.sol
Total states:77
3.243403
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x975Aa6606f1e5179814BAEf22811441C5060e815.sol
Total states:8668
151.124969
==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:01.700219
Transaction Length: 1
Severity: Medium
Contract: RewardDecayAggregator
Function name: claimReward()
PC address: 108
Estimated Gas Usage: 4540 - 74419
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 470
Offset: 470
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../new/0x975Aa6606f1e5179814BAEf22811441C5060e815.sol:1455

function claimReward() public {
        for (uint256 i = 0; i < rewarders.length; i++) {
            rewarders[i].getRewardEx(msg.sender);
        }
    }

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:01.636251
Transaction Length: 1
Severity: Low
Contract: RewardDecayAggregator
Function name: claimReward()
PC address: 470
Estimated Gas Usage: 3660 - 39353
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0x975Aa6606f1e5179814BAEf22811441C5060e815.sol:1457

rewarders[i].getRewardEx(msg.sender)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:02.785077
Transaction Length: 1
Severity: Low
Contract: RewardDecayAggregator
Function name: rewarders(uint256)
PC address: 870
Estimated Gas Usage: 278 - 373
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x975Aa6606f1e5179814BAEf22811441C5060e815.sol:1448

StakingRewardsDecay[2] public rewarders

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:01.482718
Transaction Length: 1
Severity: Low
Contract: StakingRewardsDecayHolder
Function name: withdraw(uint256,address)
PC address: 1090
Estimated Gas Usage: 1894 - 4952
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0x975Aa6606f1e5179814BAEf22811441C5060e815.sol:938

address(rewarder).call(
                abi.encodeWithSelector(rewarder.withdraw.selector, msg.sender, amount, gem)
            )

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.169285
Transaction Length: 1
Severity: High
Contract: StakingRewardsDecay
Function name: initAllEpochs(uint256[],uint256,uint256)
PC address: 1382
Estimated Gas Usage: 452 - 547
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x975Aa6606f1e5179814BAEf22811441C5060e815.sol:5

lattened sources of s

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.192839
Transaction Length: 1
Severity: High
Contract: StakingRewardsDecay
Function name: initAllEpochs(uint256[],uint256,uint256)
PC address: 1384
Estimated Gas Usage: 452 - 547
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x975Aa6606f1e5179814BAEf22811441C5060e815.sol:3

*/

// hevm: flattened sources of sr

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:15.991961
Transaction Length: 1
Severity: Low
Contract: StakingRewardsDecayHolder
Function name: stake(uint256,address)
PC address: 1969
Estimated Gas Usage: 1615 - 2606
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0x975Aa6606f1e5179814BAEf22811441C5060e815.sol:928

rewarder.stake(msg.sender, amount, gem)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:34.870880
Transaction Length: 1
Severity: Low
Contract: StakingRewardsDecay
Function name: getEpochRewardRate(uint256)
PC address: 10020
Estimated Gas Usage: 814 - 909
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x975Aa6606f1e5179814BAEf22811441C5060e815.sol:1128

epochs[epochIdx]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:35.338250
Transaction Length: 1
Severity: Low
Contract: StakingRewardsDecay
Function name: getEpochStartTime(uint256)
PC address: 10062
Estimated Gas Usage: 705 - 800
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x975Aa6606f1e5179814BAEf22811441C5060e815.sol:1132

epochs[epochIdx]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:03.465067
Transaction Length: 1
Severity: Low
Contract: StakingRewardsDecay
Function name: getEpochFinishTime(uint256)
PC address: 11918
Estimated Gas Usage: 748 - 843
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x975Aa6606f1e5179814BAEf22811441C5060e815.sol:1136

epochs[epochIdx]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:17.364543
Transaction Length: 1
Severity: Low
Contract: StakingRewardsDecay
Function name: epochs(uint256)
PC address: 12771
Estimated Gas Usage: 723 - 818
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x975Aa6606f1e5179814BAEf22811441C5060e815.sol:1007

EpochData[] public epochs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:17.575971
Transaction Length: 1
Severity: Low
Contract: StakingRewardsDecay
Function name: getStartTime()
PC address: 12880
Estimated Gas Usage: 666 - 761
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x975Aa6606f1e5179814BAEf22811441C5060e815.sol:1054

epochs[0]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:30.057036
Transaction Length: 1
Severity: Low
Contract: StakingRewardsDecay
Function name: getRewardPerHour()
PC address: 15597
Estimated Gas Usage: 1563 - 1658
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x975Aa6606f1e5179814BAEf22811441C5060e815.sol:1279

epochs[calcCurrentEpoch()]

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xfb3e3929f12120c0ba1BA243fF8af7afbefB4943.sol
Total states:13229
46.510853
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:00.042901
Transaction Length: 0
Severity: Low
Contract: UrnHandler
Function name: constructor
PC address: 223
Estimated Gas Usage: 1003 - 4059
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0xfb3e3929f12120c0ba1BA243fF8af7afbefB4943.sol:70

VatLike(vat).hope(msg.sender)

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:08.806648
Transaction Length: 1
Severity: Medium
Contract: GetCdps
Function name: getCdpsAsc(address,address)
PC address: 416
Estimated Gas Usage: 4549 - 83031
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 909
Offset: 1280
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../new/0xfb3e3929f12120c0ba1BA243fF8af7afbefB4943.sol:319

function getCdpsAsc(address manager, address guy) external view returns (uint[] memory ids, address[] memory urns, bytes32[] memory ilks) {
        uint count = DssCdpManager(manager).count(guy);
        ids = new uint[](count);
        urns = new address[](count);
        ilks = new bytes32[](count);
        uint i = 0;
        uint id = DssCdpManager(manager).first(guy);

        while (id > 0) {
            ids[i] = id;
            urns[i] = DssCdpManager(manager).urns(id);
            ilks[i] = DssCdpManager(manager).ilks(id);
            (,id) = DssCdpManager(manager).list(id);
            i++;
        }
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:36.466430
Transaction Length: 1
Severity: High
Contract: GetCdps
Function name: getCdpsDesc(address,address)
PC address: 623
Estimated Gas Usage: 4144 - 75057
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xfb3e3929f12120c0ba1BA243fF8af7afbefB4943.sol:336

function getCdpsDesc(address manager, address guy) external view returns (uint[] memory ids, address[] memory urns, bytes32[] memory ilks) {
        uint count = DssCdpManager(manager).count(guy);
        ids = new uint[](count);
        urns = new address[](count);
        ilks = new bytes32[](count);
        uint i = 0;
        uint id = DssCdpManager(manager).last(guy);

        while (id > 0) {
            ids[i] = id;
            urns[i] = DssCdpManager(manager).urns(id);
            ilks[i] = DssCdpManager(manager).ilks(id);
            (id,) = DssCdpManager(manager).list(id);
            i++;
        }
    }

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:13.837000
Transaction Length: 1
Severity: Low
Contract: GetCdps
Function name: getCdpsAsc(address,address)
PC address: 1558
Estimated Gas Usage: 5749 - 117572
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xfb3e3929f12120c0ba1BA243fF8af7afbefB4943.sol:329

urns[i]

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xc9db619abd37ae22d80fce3bdb811485b56d4fc32.sol
Total states:12855
269.051066
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.963392
Transaction Length: 1
Severity: High
Contract: Module
Function name: getModuleAddress(string)
PC address: 416
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc9db619abd37ae22d80fce3bdb811485b56d4fc32.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.711120
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 511
Estimated Gas Usage: 364 - 459
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc9db619abd37ae22d80fce3bdb811485b56d4fc32.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.038400
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 513
Estimated Gas Usage: 364 - 459
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc9db619abd37ae22d80fce3bdb811485b56d4fc32.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.151541
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 596
Estimated Gas Usage: 540 - 635
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc9db619abd37ae22d80fce3bdb811485b56d4fc32.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:17.582741
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 598
Estimated Gas Usage: 540 - 635
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc9db619abd37ae22d80fce3bdb811485b56d4fc32.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:29.845004
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 681
Estimated Gas Usage: 716 - 811
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc9db619abd37ae22d80fce3bdb811485b56d4fc32.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:52.228817
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 683
Estimated Gas Usage: 716 - 811
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc9db619abd37ae22d80fce3bdb811485b56d4fc32.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:13.570552
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 766
Estimated Gas Usage: 892 - 987
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc9db619abd37ae22d80fce3bdb811485b56d4fc32.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:43.959599
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 768
Estimated Gas Usage: 892 - 987
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc9db619abd37ae22d80fce3bdb811485b56d4fc32.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:16.909515
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: getModuleAddress(string)
PC address: 1453
Estimated Gas Usage: 451 - 546
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc9db619abd37ae22d80fce3bdb811485b56d4fc32.sol:3

*/

// File: @openzeppelin\contract

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xa24e85d0c2b3d58f1d1d08d9c8c68ceef694515c.sol
Total states:120
370.368391
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.125448
Transaction Length: 1
Severity: High
Contract: MSTX
Function name: withdrawBalances(address[],uint256[],bool)
PC address: 3280
Estimated Gas Usage: 386 - 481
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xa24e85d0c2b3d58f1d1d08d9c8c68ceef694515c.sol:9

X-License-Identifier:

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.634247
Transaction Length: 1
Severity: High
Contract: MSTX
Function name: withdrawBalances(address[],uint256[],bool)
PC address: 3282
Estimated Gas Usage: 386 - 481
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xa24e85d0c2b3d58f1d1d08d9c8c68ceef694515c.sol:3



*/



// SPDX-License-Identifier: 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:14.301216
Transaction Length: 1
Severity: High
Contract: MSTX
Function name: withdrawBalances(address[],uint256[],bool)
PC address: 3365
Estimated Gas Usage: 562 - 657
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xa24e85d0c2b3d58f1d1d08d9c8c68ceef694515c.sol:9

X-License-Identifier:

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:25.245271
Transaction Length: 1
Severity: High
Contract: MSTX
Function name: withdrawBalances(address[],uint256[],bool)
PC address: 3367
Estimated Gas Usage: 562 - 657
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xa24e85d0c2b3d58f1d1d08d9c8c68ceef694515c.sol:3



*/



// SPDX-License-Identifier: 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:44.299542
Transaction Length: 1
Severity: High
Contract: MSTX
Function name: submitActionProposal(address,uint256,uint256,bytes32,bytes)
PC address: 4844
Estimated Gas Usage: 500 - 595
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xa24e85d0c2b3d58f1d1d08d9c8c68ceef694515c.sol:3



*/



// SPDX-License-Identifier:

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:48.586313
Transaction Length: 1
Severity: High
Contract: MSTX
Function name: symbol()
PC address: 5079
Estimated Gas Usage: 551 - 1681
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xa24e85d0c2b3d58f1d1d08d9c8c68ceef694515c.sol:246

string public constant symbol = "MSTX"

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:34.527618
Transaction Length: 1
Severity: High
Contract: MSTX
Function name: init(address,address,address[],uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256)
PC address: 5614
Estimated Gas Usage: 473 - 568
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xa24e85d0c2b3d58f1d1d08d9c8c68ceef694515c.sol:9

X-License-Identifier:

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:40.202032
Transaction Length: 1
Severity: High
Contract: MSTX
Function name: init(address,address,address[],uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256)
PC address: 5616
Estimated Gas Usage: 473 - 568
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xa24e85d0c2b3d58f1d1d08d9c8c68ceef694515c.sol:3



*/



// SPDX-License-Identifier: 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:46.411473
Transaction Length: 1
Severity: High
Contract: MSTX
Function name: init(address,address,address[],uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256)
PC address: 5699
Estimated Gas Usage: 649 - 744
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xa24e85d0c2b3d58f1d1d08d9c8c68ceef694515c.sol:9

X-License-Identifier:

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:58.748641
Transaction Length: 1
Severity: High
Contract: MSTX
Function name: init(address,address,address[],uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256)
PC address: 5701
Estimated Gas Usage: 649 - 744
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xa24e85d0c2b3d58f1d1d08d9c8c68ceef694515c.sol:3



*/



// SPDX-License-Identifier: 

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:02.670467
Transaction Length: 1
Severity: Low
Contract: MSTX
Function name: approvedTokens(uint256)
PC address: 9442
Estimated Gas Usage: 769 - 864
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xa24e85d0c2b3d58f1d1d08d9c8c68ceef694515c.sol:284

address[] public approvedTokens

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:04.709466
Transaction Length: 1
Severity: Low
Contract: MSTX
Function name: proposalQueue(uint256)
PC address: 12834
Estimated Gas Usage: 747 - 842
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xa24e85d0c2b3d58f1d1d08d9c8c68ceef694515c.sol:290

uint256[] public proposalQueue

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xaaa601ae20077f9fae80494ddc36bb39c952c2d0.sol
Total states:7896
52.135165
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.740518
Transaction Length: 1
Severity: High
Contract: PriceFeeds
Function name: setPriceFeed(address[],address[])
PC address: 1295
Estimated Gas Usage: 385 - 480
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xaaa601ae20077f9fae80494ddc36bb39c952c2d0.sol:6

yright 2017-2020, bZe

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.705993
Transaction Length: 1
Severity: High
Contract: PriceFeeds
Function name: setPriceFeed(address[],address[])
PC address: 1297
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xaaa601ae20077f9fae80494ddc36bb39c952c2d0.sol:3

*/

/**
 * Copyright 2017-2020, bZer

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:16.883893
Transaction Length: 1
Severity: High
Contract: PriceFeeds
Function name: setPriceFeed(address[],address[])
PC address: 1380
Estimated Gas Usage: 561 - 656
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xaaa601ae20077f9fae80494ddc36bb39c952c2d0.sol:6

yright 2017-2020, bZe

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:30.454647
Transaction Length: 1
Severity: High
Contract: PriceFeeds
Function name: setPriceFeed(address[],address[])
PC address: 1382
Estimated Gas Usage: 561 - 656
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xaaa601ae20077f9fae80494ddc36bb39c952c2d0.sol:3

*/

/**
 * Copyright 2017-2020, bZer

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:42.706618
Transaction Length: 1
Severity: High
Contract: PriceFeeds
Function name: setDecimals(address[])
PC address: 1865
Estimated Gas Usage: 385 - 480
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xaaa601ae20077f9fae80494ddc36bb39c952c2d0.sol:6

yright 2017-2020, bZe

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:46.312187
Transaction Length: 1
Severity: High
Contract: PriceFeeds
Function name: setDecimals(address[])
PC address: 1867
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xaaa601ae20077f9fae80494ddc36bb39c952c2d0.sol:3

*/

/**
 * Copyright 2017-2020, bZer

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.215773
Transaction Length: 1
Severity: High
Contract: PriceFeeds
Function name: checkPriceDisagreement(address,address,uint256,uint256,uint256)
PC address: 6399
Estimated Gas Usage: 1065 - 1490
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xaaa601ae20077f9fae80494ddc36bb39c952c2d0.sol:181

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x40d9f0c693121eab65b289a11c87a38f5f17d9b1.sol
Total states:2673
113.894723
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.217523
Transaction Length: 1
Severity: High
Contract: PaymentMaster
Function name: multiHandlerSweep(address[],address)
PC address: 295
Estimated Gas Usage: 319 - 414
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x40d9f0c693121eab65b289a11c87a38f5f17d9b1.sol:9

0 PaymentMaster







--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.270325
Transaction Length: 1
Severity: High
Contract: PaymentMaster
Function name: multiHandlerSweep(address[],address)
PC address: 297
Estimated Gas Usage: 319 - 414
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x40d9f0c693121eab65b289a11c87a38f5f17d9b1.sol:3



*/



// v1.0 PaymentMaster





/

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:05.947576
Transaction Length: 1
Severity: Low
Contract: PaymentHandler
Function name: fallback()
PC address: 597
Estimated Gas Usage: 4310 - 74284
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0x40d9f0c693121eab65b289a11c87a38f5f17d9b1.sol:302

master.firePaymentReceivedEvent(address(this), msg.sender, msg.value)

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:05.952249
Transaction Length: 1
Severity: Medium
Contract: PaymentHandler
Function name: fallback()
PC address: 620
Estimated Gas Usage: 5043 - 109017
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 217
Offset: 597
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../new/0x40d9f0c693121eab65b289a11c87a38f5f17d9b1.sol:242

contract PaymentHandler {



	// Keep track of the parent master contract - cannot be changed once set

	PaymentMaster public master;



	/**

	 * General constructor called by the master

	 */

	constructor(PaymentMaster _master) public {

		master = _master;

	}



	/**

	 * Helper function to return the parent master's address

	 */

	function getMasterAddress() public view returns (address) {

		return address(master);

	}



	/**

	 * Default payable function - forwards to the owner and triggers event

	 */

	function() external payable {

		// Get the parent master's owner address - explicity convert to payable

		address payable ownerAddress = address(uint160(master.owner()));



		// Forward the funds to the owner

		ownerAddress.transfer(msg.value);



		// Trigger the event notification in the parent master

		master.firePaymentReceivedEvent(address(this), msg.sender, msg.value);

	}



	/**

	 * Sweep any tokens to the owner of the master

	 */

	function sweepTokens(IERC20 token) public {

		// Get the owner address

		address ownerAddress = master.owner();



		// Get the current balance

		uint balance = token.balanceOf(address(this));



		// Transfer to the owner

		token.transfer(ownerAddress, balance);

	}



}

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:04.158068
Transaction Length: 1
Severity: Medium
Contract: PaymentHandler
Function name: sweepTokens(address)
PC address: 875
Estimated Gas Usage: 5654 - 109765
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 1090
Offset: 1306
Offset: 1530
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../new/0x40d9f0c693121eab65b289a11c87a38f5f17d9b1.sol:314

function sweepTokens(IERC20 token) public {

		// Get the owner address

		address ownerAddress = master.owner();



		// Get the current balance

		uint balance = token.balanceOf(address(this));



		// Transfer to the owner

		token.transfer(ownerAddress, balance);

	}

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:43.532723
Transaction Length: 1
Severity: High
Contract: PaymentMaster
Function name: getHandlerList()
PC address: 932
Estimated Gas Usage: 1227 - 2074
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x40d9f0c693121eab65b289a11c87a38f5f17d9b1.sol:429

function getHandlerList() public view returns (address[] memory) {

			// Return the entire list

      return handlerList;

  }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:52.459368
Transaction Length: 1
Severity: High
Contract: PaymentMaster
Function name: getHandlerList()
PC address: 972
Estimated Gas Usage: 1377 - 2600
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x40d9f0c693121eab65b289a11c87a38f5f17d9b1.sol:429

function getHandlerList() public view returns (address[] memory) {

			// Return the entire list

      return handlerList;

  }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:01:47.299707
Transaction Length: 1
Severity: Medium
Contract: PaymentMaster
Function name: sweepTokens(address)
PC address: 1130
Estimated Gas Usage: 5292 - 109073
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 2955
Offset: 3142
Offset: 3335
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../new/0x40d9f0c693121eab65b289a11c87a38f5f17d9b1.sol:509

function sweepTokens(IERC20 token) public {

		// Get the current balance

		uint balance = token.balanceOf(address(this));



		// Transfer to the owner

		token.transfer(this.owner(), balance);

	}

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:00:04.047369
Transaction Length: 1
Severity: Medium
Contract: PaymentHandler
Function name: sweepTokens(address)
PC address: 1530
Estimated Gas Usage: 4827 - 74752
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../new/0x40d9f0c693121eab65b289a11c87a38f5f17d9b1.sol:330

token.transfer(ownerAddress, balance)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:27.750753
Transaction Length: 1
Severity: Low
Contract: PaymentMaster
Function name: handlerList(uint256)
PC address: 1950
Estimated Gas Usage: 656 - 751
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x40d9f0c693121eab65b289a11c87a38f5f17d9b1.sol:373

address[] public handlerList

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:01:42.908580
Transaction Length: 1
Severity: Medium
Contract: PaymentMaster
Function name: sweepTokens(address)
PC address: 3335
Estimated Gas Usage: 4467 - 74062
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../new/0x40d9f0c693121eab65b289a11c87a38f5f17d9b1.sol:519

token.transfer(this.owner(), balance)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xc902c9ad7a3c039f4151c28f95532f40dc1614ed.sol
Total states:1237
3.479173
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:01.484044
Transaction Length: 1
Severity: Low
Contract: ESDRouterV1
Function name: addLiquidityUSDCOnly(uint256)
PC address: 1279
Estimated Gas Usage: 2046 - 3037
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0xc902c9ad7a3c039f4151c28f95532f40dc1614ed.sol:340

usdcToken.transferFrom(msg.sender, address(this), usdcAmountToAdd)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xf6eb94e64fc7789a57fdf89fe2ffd2eb39b252e4.sol
Total states:34354
236.296646
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xbbfd9e6f960a62e17952705ed9ad64eacf23d008.sol
Total states:654
0.406181
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x4339aeA71d38b5Edb545987F5096992aE7abBB14.sol
Total states:87
1.102905
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xfeb75b3cc7281b18f2d475a04f1ffaaa3c9a6e36.sol
Total states:822
11.208773
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xa3587ce44ae345b21b2cb7a361424ac8d4e7f055.sol
Total states:2324
1.846416
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x4570b4faf71e23942b8b9f934b47ccedf7540162.sol
Total states:18247
860.823711
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.158844
Transaction Length: 1
Severity: High
Contract: Submitter
Function name: submitGuildKickProposal(address,string)
PC address: 225
Estimated Gas Usage: 329 - 424
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x4570b4faf71e23942b8b9f934b47ccedf7540162.sol:3



*/



// Sources flattened with b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.285013
Transaction Length: 1
Severity: High
Contract: MolochSummoner
Function name: summonMoloch(address,address[],uint256,uint256,uint256,uint256,uint256,uint256)
PC address: 243
Estimated Gas Usage: 351 - 446
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x4570b4faf71e23942b8b9f934b47ccedf7540162.sol:9

rces flattened with b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.864165
Transaction Length: 1
Severity: High
Contract: MolochSummoner
Function name: summonMoloch(address,address[],uint256,uint256,uint256,uint256,uint256,uint256)
PC address: 245
Estimated Gas Usage: 351 - 446
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x4570b4faf71e23942b8b9f934b47ccedf7540162.sol:3



*/



// Sources flattened with bu

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:16.521717
Transaction Length: 1
Severity: High
Contract: Submitter
Function name: submitProposal(address,uint256,uint256,uint256,address,uint256,address,string)
PC address: 549
Estimated Gas Usage: 525 - 620
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x4570b4faf71e23942b8b9f934b47ccedf7540162.sol:3



*/



// Sources flattened with b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:08:20.698906
Transaction Length: 1
Severity: High
Contract: Submitter
Function name: submitWhitelistProposal(address,string)
PC address: 842
Estimated Gas Usage: 395 - 490
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x4570b4faf71e23942b8b9f934b47ccedf7540162.sol:3



*/



// Sources flattened with b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:35.428288
Transaction Length: 1
Severity: Low
Contract: MolochSummoner
Function name: Molochs(uint256)
PC address: 1087
Estimated Gas Usage: 678 - 773
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x4570b4faf71e23942b8b9f934b47ccedf7540162.sol:859

address[] public Molochs

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:03:13.756345
Transaction Length: 1
Severity: Low
Contract: Submitter
Function name: submitGuildKickProposal(address,string)
PC address: 1248
Estimated Gas Usage: 2466 - 7783
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0x4570b4faf71e23942b8b9f934b47ccedf7540162.sol:1147

moloch.submitGuildKickProposal(
      memberToKick,
      details
    )

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:31.271404
Transaction Length: 1
Severity: High
Contract: Submitter
Function name: submitProposal(address,uint256,uint256,uint256,address,uint256,address,string)
PC address: 1727
Estimated Gas Usage: 1623 - 6147
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x4570b4faf71e23942b8b9f934b47ccedf7540162.sol:1117

moloch.submitProposal(
      applicant,
      sharesRequested,
      lootRequested,
      tributeOffered,
      tributeToken,
      paymentRequested,
      paymentToken,
      details
    )

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:07:45.000264
Transaction Length: 1
Severity: Low
Contract: Submitter
Function name: submitProposal(address,uint256,uint256,uint256,address,uint256,address,string)
PC address: 1804
Estimated Gas Usage: 2707 - 8406
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0x4570b4faf71e23942b8b9f934b47ccedf7540162.sol:1117

moloch.submitProposal(
      applicant,
      sharesRequested,
      lootRequested,
      tributeOffered,
      tributeToken,
      paymentRequested,
      paymentToken,
      details
    )

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:09:38.590669
Transaction Length: 1
Severity: High
Contract: Submitter
Function name: submitWhitelistProposal(address,string)
PC address: 2196
Estimated Gas Usage: 1361 - 5315
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x4570b4faf71e23942b8b9f934b47ccedf7540162.sol:1135

moloch.submitWhitelistProposal(
      tokenToWhitelist,
      details
    )

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:12:29.126153
Transaction Length: 1
Severity: Low
Contract: Submitter
Function name: submitWhitelistProposal(address,string)
PC address: 2267
Estimated Gas Usage: 2358 - 7299
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0x4570b4faf71e23942b8b9f934b47ccedf7540162.sol:1135

moloch.submitWhitelistProposal(
      tokenToWhitelist,
      details
    )

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.206946
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 2575
Estimated Gas Usage: 989 - 1464
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x4570b4faf71e23942b8b9f934b47ccedf7540162.sol:44

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.075724
Transaction Length: 2
Severity: High
Contract: Token
Function name: increaseAllowance(address,uint256)
PC address: 2806
Estimated Gas Usage: 989 - 1464
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x4570b4faf71e23942b8b9f934b47ccedf7540162.sol:44

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xf86a1f19bfdf106ff108f33f7a339dfcc89f6c24.sol
Total states:1751
1.405582
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xccbc5b5f4155907cfe6557ccb12841ab4c46ae70.sol
Total states:740
1.535405
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x54277B3a7A4aEe0fdF279E16aBF9D5Dad87828D6.sol
Total states:663
2.063189
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x68051c65c310aa210bd8e79ed7aa1b0ac7e6db52.sol
Total states:1225
3.56657
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xc1693a3a12b0d021cd857e5d4293edcd61a82502.sol
Total states:1394
19.180991
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.832306
Transaction Length: 1
Severity: High
Contract: KYFV2
Function name: removeMultiple(address[])
PC address: 1011
Estimated Gas Usage: 384 - 479
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc1693a3a12b0d021cd857e5d4293edcd61a82502.sol:7

    |  __    / ____|


--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.665012
Transaction Length: 1
Severity: High
Contract: KYFV2
Function name: removeMultiple(address[])
PC address: 1013
Estimated Gas Usage: 384 - 479
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc1693a3a12b0d021cd857e5d4293edcd61a82502.sol:3

*/

/*

    /     |  __    / ____|
 

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x4bbb69e277a94357aa75b44ebe4ee4390e85ac83.sol
Total states:10228
494.759594
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.579758
Transaction Length: 1
Severity: High
Contract: OxBase
Function name: multiTransfer(address[],uint256[])
PC address: 774
Estimated Gas Usage: 430 - 525
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x4bbb69e277a94357aa75b44ebe4ee4390e85ac83.sol:7

!!!!!!!!!Notice!!!!!!

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.096693
Transaction Length: 1
Severity: High
Contract: OxBase
Function name: multiTransfer(address[],uint256[])
PC address: 776
Estimated Gas Usage: 430 - 525
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x4bbb69e277a94357aa75b44ebe4ee4390e85ac83.sol:3

*/

/*

!!!!!!!!!!!!!!!Notice!!!!!!!

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.485372
Transaction Length: 1
Severity: High
Contract: OxBase
Function name: multiTransfer(address[],uint256[])
PC address: 922
Estimated Gas Usage: 763 - 3540
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x4bbb69e277a94357aa75b44ebe4ee4390e85ac83.sol:7

!!!!!!!!!Notice!!!!!!

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:25.755828
Transaction Length: 1
Severity: High
Contract: OxBase
Function name: multiTransfer(address[],uint256[])
PC address: 924
Estimated Gas Usage: 763 - 3540
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x4bbb69e277a94357aa75b44ebe4ee4390e85ac83.sol:3

*/

/*

!!!!!!!!!!!!!!!Notice!!!!!!!

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:26.184043
Transaction Length: 1
Severity: High
Contract: OxBase
Function name: symbol()
PC address: 1596
Estimated Gas Usage: 1913 - 3043
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x4bbb69e277a94357aa75b44ebe4ee4390e85ac83.sol:136

function symbol() public view returns(string memory) {
    return _Tokensymbol;
  }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:30.553921
Transaction Length: 1
Severity: High
Contract: OxBase
Function name: multiTransferEqualAmount(address[],uint256)
PC address: 1905
Estimated Gas Usage: 340 - 435
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x4bbb69e277a94357aa75b44ebe4ee4390e85ac83.sol:7

!!!!!!!!!Notice!!!!!!

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:33.874882
Transaction Length: 1
Severity: High
Contract: OxBase
Function name: multiTransferEqualAmount(address[],uint256)
PC address: 1907
Estimated Gas Usage: 340 - 435
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x4bbb69e277a94357aa75b44ebe4ee4390e85ac83.sol:3

*/

/*

!!!!!!!!!!!!!!!Notice!!!!!!!

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:54.619609
Transaction Length: 1
Severity: High
Contract: OxBase
Function name: multiTransferEqualAmount(address[],uint256)
PC address: 5590
Estimated Gas Usage: 819 - 4205
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x4bbb69e277a94357aa75b44ebe4ee4390e85ac83.sol:283

amount * 10**uint256(tokenDecimals)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:06:29.315674
Transaction Length: 1
Severity: Low
Contract: OxBase
Function name: decreaseAllowance(address,uint256)
PC address: 7970
Estimated Gas Usage: 1062 - 1537
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x4bbb69e277a94357aa75b44ebe4ee4390e85ac83.sol:101

assert(b <= a)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:40.222578
Transaction Length: 2
Severity: Low
Contract: OxBase
Function name: decreaseAllowance(address,uint256)
PC address: 7970
Estimated Gas Usage: 1062 - 1537
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x4bbb69e277a94357aa75b44ebe4ee4390e85ac83.sol:101

assert(b <= a)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.582915
Transaction Length: 2
Severity: High
Contract: OxBase
Function name: increaseAllowance(address,uint256)
PC address: 7988
Estimated Gas Usage: 1047 - 1522
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x4bbb69e277a94357aa75b44ebe4ee4390e85ac83.sol:106

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:34.922278
Transaction Length: 2
Severity: Low
Contract: OxBase
Function name: increaseAllowance(address,uint256)
PC address: 8001
Estimated Gas Usage: 1057 - 1532
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x4bbb69e277a94357aa75b44ebe4ee4390e85ac83.sol:107

assert(c >= a)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:44.075850
Transaction Length: 1
Severity: High
Contract: OxBase
Function name: findPercentage(uint256)
PC address: 8412
Estimated Gas Usage: 828 - 923
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x4bbb69e277a94357aa75b44ebe4ee4390e85ac83.sol:90

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:05:59.199606
Transaction Length: 1
Severity: Low
Contract: OxBase
Function name: findPercentage(uint256)
PC address: 8435
Estimated Gas Usage: 866 - 961
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x4bbb69e277a94357aa75b44ebe4ee4390e85ac83.sol:91

assert(c / a == b)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xf1f689042e6a0b1d9239ff04822990c58cc25503.sol
Total states:2324
1.791575
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xa735224e43cb2549438275e985ef67fa9fcf3c8c.sol
Total states:41703
139.924973
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.791582
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1164
Estimated Gas Usage: 440 - 535
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xa735224e43cb2549438275e985ef67fa9fcf3c8c.sol:9

ma solidity =0.5.16;


--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.172389
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1166
Estimated Gas Usage: 440 - 535
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xa735224e43cb2549438275e985ef67fa9fcf3c8c.sol:3



*/



//pragma solidity =0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.846337
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1249
Estimated Gas Usage: 616 - 711
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xa735224e43cb2549438275e985ef67fa9fcf3c8c.sol:9

ma solidity =0.5.16;


--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:17.029031
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1251
Estimated Gas Usage: 616 - 711
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xa735224e43cb2549438275e985ef67fa9fcf3c8c.sol:3



*/



//pragma solidity =0.5.16;
p

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.387936
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3590
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xa735224e43cb2549438275e985ef67fa9fcf3c8c.sol:2342

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:03.860942
Transaction Length: 2
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3590
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xa735224e43cb2549438275e985ef67fa9fcf3c8c.sol:2342

address[] public tokenPools

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.610935
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: calculateRatePerEth(uint256,uint256)
PC address: 4541
Estimated Gas Usage: 450 - 545
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xa735224e43cb2549438275e985ef67fa9fcf3c8c.sol:446

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:42.384217
Transaction Length: 1
Severity: Low
Contract: LidStaking
Function name: stakeHandlers(uint256)
PC address: 6118
Estimated Gas Usage: 790 - 885
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xa735224e43cb2549438275e985ef67fa9fcf3c8c.sol:1836

IStakeHandler[] public stakeHandlers

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.757101
Transaction Length: 2
Severity: High
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6315
Estimated Gas Usage: 1699 - 2124
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0xa735224e43cb2549438275e985ef67fa9fcf3c8c.sol:2136

stakeHandlers.length-1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:08.364859
Transaction Length: 2
Severity: Low
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6326
Estimated Gas Usage: 1709 - 2134
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xa735224e43cb2549438275e985ef67fa9fcf3c8c.sol:2136

stakeHandlers[stakeHandlers.length-1]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.410303
Transaction Length: 1
Severity: High
Contract: LidStaking
Function name: findTaxAmount(uint256,uint256)
PC address: 13348
Estimated Gas Usage: 474 - 569
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xa735224e43cb2549438275e985ef67fa9fcf3c8c.sol:446

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:27.488497
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPoolBPs(uint256)
PC address: 15384
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xa735224e43cb2549438275e985ef67fa9fcf3c8c.sol:2344

uint[] public tokenPoolBPs

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xdd037e770c4df544cf530e9072315a1855f1c929.sol
Total states:1308
1.144672
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xeb7e15b4e38cbee57a98204d05999c3230d36348.sol
Total states:27512
458.165179
==== Delegatecall Proxy ====
SWC ID: 112
FOUND TIME: 0:00:00.007911
Transaction Length: 1
Severity: Low
Contract: BaseUpgradeabilityProxy
Function name: fallback
PC address: 97
Estimated Gas Usage: 557 - 2956
The contract implements a delegatecall proxy.
The smart contract forwards the received calldata via delegatecall. Note that callerscan execute arbitrary functions in the callee contract and that the callee contract can access the storage of the calling contract. Make sure that the callee contract is audited properly.DELEGATECALL target: 0x0
--------------------
In file: ../../new/0xeb7e15b4e38cbee57a98204d05999c3230d36348.sol:1030

delegatecall(gas, implementation, 0, calldatasize, 0, 0)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.912278
Transaction Length: 1
Severity: High
Contract: InitializableUpgradeabilityProxy
Function name: initialize(address,bytes)
PC address: 184
Estimated Gas Usage: 305 - 400
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xeb7e15b4e38cbee57a98204d05999c3230d36348.sol:3



*/



//pragma solidity 0.5.12;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.973211
Transaction Length: 1
Severity: High
Contract: BaseAdminUpgradeabilityProxy
Function name: upgradeToAndCall(address,bytes)
PC address: 309
Estimated Gas Usage: 327 - 422
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xeb7e15b4e38cbee57a98204d05999c3230d36348.sol:3



*/



//pragma solidity 0.5.12;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.906706
Transaction Length: 1
Severity: High
Contract: InitializableAdminUpgradeabilityProxy
Function name: upgradeToAndCall(address,bytes)
PC address: 347
Estimated Gas Usage: 350 - 445
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xeb7e15b4e38cbee57a98204d05999c3230d36348.sol:3



*/



//pragma solidity 0.5.12;
p

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:14.956477
Transaction Length: 1
Severity: High
Contract: InitializableUpgradeabilityProxy
Function name: initialize(address,bytes)
PC address: 441
Estimated Gas Usage: 1160 - 4266
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0xeb7e15b4e38cbee57a98204d05999c3230d36348.sol:1302

uint256(keccak256('eip1967.proxy.implementation')) - 1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:07.019802
Transaction Length: 1
Severity: Low
Contract: InitializableUpgradeabilityProxy
Function name: initialize(address,bytes)
PC address: 488
Estimated Gas Usage: 1170 - 4276
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xeb7e15b4e38cbee57a98204d05999c3230d36348.sol:1302

assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1))

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.366735
Transaction Length: 1
Severity: High
Contract: InitializableAdminUpgradeabilityProxy
Function name: initialize(address,address,bytes)
PC address: 700
Estimated Gas Usage: 382 - 477
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xeb7e15b4e38cbee57a98204d05999c3230d36348.sol:3



*/



//pragma solidity 0.5.12;
p

--------------------

==== Delegatecall Proxy ====
SWC ID: 112
FOUND TIME: 0:01:07.026610
Transaction Length: 1
Severity: Low
Contract: InitializableUpgradeabilityProxy
Function name: fallback
PC address: 775
Estimated Gas Usage: 618 - 3017
The contract implements a delegatecall proxy.
The smart contract forwards the received calldata via delegatecall. Note that callerscan execute arbitrary functions in the callee contract and that the callee contract can access the storage of the calling contract. Make sure that the callee contract is audited properly.DELEGATECALL target: 0x0
--------------------
In file: ../../new/0xeb7e15b4e38cbee57a98204d05999c3230d36348.sol:1030

delegatecall(gas, implementation, 0, calldatasize, 0, 0)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.404105
Transaction Length: 1
Severity: Low
Contract: kRoles
Function name: operators(uint256)
PC address: 898
Estimated Gas Usage: 722 - 817
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xeb7e15b4e38cbee57a98204d05999c3230d36348.sol:770

address[] public operators

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:34.823846
Transaction Length: 1
Severity: High
Contract: InitializableAdminUpgradeabilityProxy
Function name: initialize(address,bytes)
PC address: 919
Estimated Gas Usage: 371 - 466
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xeb7e15b4e38cbee57a98204d05999c3230d36348.sol:3



*/



//pragma solidity 0.5.12;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.281851
Transaction Length: 1
Severity: High
Contract: LiquidityPoolV1
Function name: borrow(address,uint256,bytes)
PC address: 1461
Estimated Gas Usage: 423 - 518
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xeb7e15b4e38cbee57a98204d05999c3230d36348.sol:3



*/



//pragma solidity 0.5.12;
p

--------------------

==== Delegatecall Proxy ====
SWC ID: 112
FOUND TIME: 0:00:05.448999
Transaction Length: 1
Severity: Low
Contract: BaseAdminUpgradeabilityProxy
Function name: fallback
PC address: 1699
Estimated Gas Usage: 1229 - 3628
The contract implements a delegatecall proxy.
The smart contract forwards the received calldata via delegatecall. Note that callerscan execute arbitrary functions in the callee contract and that the callee contract can access the storage of the calling contract. Make sure that the callee contract is audited properly.DELEGATECALL target: 0x0
--------------------
In file: ../../new/0xeb7e15b4e38cbee57a98204d05999c3230d36348.sol:1030

delegatecall(gas, implementation, 0, calldatasize, 0, 0)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.301022
Transaction Length: 1
Severity: High
Contract: LiquidityPoolV1
Function name: initialize(string,address)
PC address: 1719
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xeb7e15b4e38cbee57a98204d05999c3230d36348.sol:3



*/



//pragma solidity 0.5.12;
p

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.082009
Transaction Length: 1
Severity: Low
Contract: CanReclaimTokens
Function name: operators(uint256)
PC address: 1895
Estimated Gas Usage: 700 - 795
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xeb7e15b4e38cbee57a98204d05999c3230d36348.sol:770

address[] public operators

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:19.755007
Transaction Length: 1
Severity: High
Contract: InitializableAdminUpgradeabilityProxy
Function name: initialize(address,address,bytes)
PC address: 2230
Estimated Gas Usage: 1755 - 4861
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0xeb7e15b4e38cbee57a98204d05999c3230d36348.sol:1302

uint256(keccak256('eip1967.proxy.implementation')) - 1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:34.833281
Transaction Length: 1
Severity: Low
Contract: InitializableAdminUpgradeabilityProxy
Function name: initialize(address,bytes)
PC address: 2277
Estimated Gas Usage: 1227 - 4333
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xeb7e15b4e38cbee57a98204d05999c3230d36348.sol:1302

assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1))

--------------------

==== Delegatecall Proxy ====
SWC ID: 112
FOUND TIME: 0:01:34.863642
Transaction Length: 1
Severity: Low
Contract: InitializableAdminUpgradeabilityProxy
Function name: fallback
PC address: 2802
Estimated Gas Usage: 1240 - 3639
The contract implements a delegatecall proxy.
The smart contract forwards the received calldata via delegatecall. Note that callerscan execute arbitrary functions in the callee contract and that the callee contract can access the storage of the calling contract. Make sure that the callee contract is audited properly.DELEGATECALL target: 0x0
--------------------
In file: ../../new/0xeb7e15b4e38cbee57a98204d05999c3230d36348.sol:1030

delegatecall(gas, implementation, 0, calldatasize, 0, 0)

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:01:38.541856
Transaction Length: 1
Severity: Medium
Contract: LiquidityPoolV1
Function name: underlyingBalance(address,address)
PC address: 2999
Estimated Gas Usage: 4799 - 75244
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 14031
Offset: 14287
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../new/0xeb7e15b4e38cbee57a98204d05999c3230d36348.sol:1456

function underlyingBalance(address _token, address _owner) public view returns (uint256) {
        uint256 kBalance = kTokens[_token].balanceOf(_owner);
        uint256 kSupply = kTokens[_token].totalSupply();
        if (kBalance == 0) {
            return 0;
        }
        return borrowableBalance(_token).mul(kBalance).div(kSupply);
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:59.728103
Transaction Length: 1
Severity: High
Contract: LiquidityPoolV1
Function name: VERSION()
PC address: 3094
Estimated Gas Usage: 1500 - 2535
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xeb7e15b4e38cbee57a98204d05999c3230d36348.sol:1341

string public VERSION

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.592061
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3249
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xeb7e15b4e38cbee57a98204d05999c3230d36348.sol:231

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:45.642155
Transaction Length: 1
Severity: Low
Contract: LiquidityPoolV1
Function name: registeredTokens(uint256)
PC address: 10354
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xeb7e15b4e38cbee57a98204d05999c3230d36348.sol:1339

address[] public registeredTokens

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:01.692390
Transaction Length: 1
Severity: Low
Contract: LiquidityPoolV1
Function name: operators(uint256)
PC address: 13504
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xeb7e15b4e38cbee57a98204d05999c3230d36348.sol:770

address[] public operators

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x12c790b8bfd6f8ccfa48244419dd1611adad4bbb.sol
Total states:11864
13.333333
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.373049
Transaction Length: 1
Severity: Low
Contract: WBTCexPro
Function name: userLotteryTicker(address,uint256)
PC address: 8334
Estimated Gas Usage: 886 - 1171
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x12c790b8bfd6f8ccfa48244419dd1611adad4bbb.sol:1090

mapping(address => uint256[]) public userLotteryTicker

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:02.365971
Transaction Length: 1
Severity: Low
Contract: WBTCexPro
Function name: lotteryPool(uint256)
PC address: 9271
Estimated Gas Usage: 746 - 841
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x12c790b8bfd6f8ccfa48244419dd1611adad4bbb.sol:1092

LotteryTicket[] public  lotteryPool

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:03.323654
Transaction Length: 1
Severity: Low
Contract: WBTCexPro
Function name: getUserDepositInfo(address,uint256)
PC address: 12807
Estimated Gas Usage: 894 - 1179
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x12c790b8bfd6f8ccfa48244419dd1611adad4bbb.sol:1804

user.deposits[index]

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xa809b0ea04e2ea2b70af56b8db256ba2529753ff.sol
Total states:2324
1.905463
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x0f14488cbac6cb0f94ef211c80eb38d470a6a3f9.sol
Total states:149
2.638392
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xe3d02a14d0eae3aea47081dee53d2281baf3d43f.sol
Total states:1822
3.696161
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x15910d6238e437ea01a2a9d3144678c988b81e58.sol
Total states:18334
2625.427133
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.397770
Transaction Length: 1
Severity: High
Contract: master
Function name: airdrop(address,address[],uint256[])
PC address: 458
Estimated Gas Usage: 375 - 470
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x15910d6238e437ea01a2a9d3144678c988b81e58.sol:5

olidity 0.5.7;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.225155
Transaction Length: 1
Severity: High
Contract: master
Function name: airdrop(address,address[],uint256[])
PC address: 460
Estimated Gas Usage: 375 - 470
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x15910d6238e437ea01a2a9d3144678c988b81e58.sol:3

*/

//pragma solidity 0.5.7;
pragma 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:14.650029
Transaction Length: 1
Severity: High
Contract: master
Function name: airdrop(address,address[],uint256[])
PC address: 606
Estimated Gas Usage: 717 - 3494
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x15910d6238e437ea01a2a9d3144678c988b81e58.sol:5

olidity 0.5.7;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:23.776976
Transaction Length: 1
Severity: High
Contract: master
Function name: airdrop(address,address[],uint256[])
PC address: 608
Estimated Gas Usage: 717 - 3494
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x15910d6238e437ea01a2a9d3144678c988b81e58.sol:3

*/

//pragma solidity 0.5.7;
pragma 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:54.054246
Transaction Length: 1
Severity: High
Contract: master
Function name: name()
PC address: 790
Estimated Gas Usage: 1914 - 3044
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x15910d6238e437ea01a2a9d3144678c988b81e58.sol:68

function name() public view returns(string memory) {
        return _name;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:10:31.641615
Transaction Length: 1
Severity: High
Contract: master
Function name: symbol()
PC address: 1757
Estimated Gas Usage: 1957 - 3087
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x15910d6238e437ea01a2a9d3144678c988b81e58.sol:72

function symbol() public view returns(string memory) {
        return _symbol;
    }

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:12:59.331063
Transaction Length: 1
Severity: Low
Contract: master
Function name: decreaseAllowance(address,uint256)
PC address: 9553
Estimated Gas Usage: 973 - 1448
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x15910d6238e437ea01a2a9d3144678c988b81e58.sol:40

assert(b <= a)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:27:16.422147
Transaction Length: 2
Severity: Low
Contract: master
Function name: decreaseAllowance(address,uint256)
PC address: 9553
Estimated Gas Usage: 973 - 1448
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x15910d6238e437ea01a2a9d3144678c988b81e58.sol:40

assert(b <= a)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:18:16.210113
Transaction Length: 2
Severity: High
Contract: master
Function name: increaseAllowance(address,uint256)
PC address: 9571
Estimated Gas Usage: 1003 - 1478
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x15910d6238e437ea01a2a9d3144678c988b81e58.sol:45

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:24:54.205531
Transaction Length: 2
Severity: Low
Contract: master
Function name: increaseAllowance(address,uint256)
PC address: 9584
Estimated Gas Usage: 1013 - 1488
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x15910d6238e437ea01a2a9d3144678c988b81e58.sol:46

assert(c >= a)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xf1a8793cfc1ae7fe721aa9bfe1b930bec145602d.sol
Total states:7346
38.917786
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xe5376b859347020129786c7cf5d82010f2d1c274.sol
Total states:723
5.987982
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xcfaf813c03838d43f133afa2a425b6a1d1b86558.sol
Total states:11825
27.381819
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.045708
Transaction Length: 0
Severity: High
Contract: Token
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcfaf813c03838d43f133afa2a425b6a1d1b86558.sol:8

Public License as published by
// the Free 

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x8b7d92aa522f192dda6c8c9556338776b9c72ab6.sol
Total states:2324
1.79612
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x84294fc9710e1252d407d3d80a84bc39001bd4a8.sol
Total states:9842
764.788033
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.416076
Transaction Length: 1
Severity: High
Contract: NUTS
Function name: multiTransfer(address[],uint256[])
PC address: 623
Estimated Gas Usage: 341 - 436
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x84294fc9710e1252d407d3d80a84bc39001bd4a8.sol:5

olidity ^0.5.0;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.348306
Transaction Length: 1
Severity: High
Contract: NUTS
Function name: multiTransfer(address[],uint256[])
PC address: 625
Estimated Gas Usage: 341 - 436
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x84294fc9710e1252d407d3d80a84bc39001bd4a8.sol:3

*/

//pragma solidity ^0.5.0;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:14.197642
Transaction Length: 1
Severity: High
Contract: NUTS
Function name: multiTransfer(address[],uint256[])
PC address: 771
Estimated Gas Usage: 674 - 3451
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x84294fc9710e1252d407d3d80a84bc39001bd4a8.sol:5

olidity ^0.5.0;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:27.968544
Transaction Length: 1
Severity: High
Contract: NUTS
Function name: multiTransfer(address[],uint256[])
PC address: 773
Estimated Gas Usage: 674 - 3451
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x84294fc9710e1252d407d3d80a84bc39001bd4a8.sol:3

*/

//pragma solidity ^0.5.0;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:05.641886
Transaction Length: 1
Severity: High
Contract: NUTS
Function name: symbol()
PC address: 1411
Estimated Gas Usage: 528 - 1658
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x84294fc9710e1252d407d3d80a84bc39001bd4a8.sol:37

string public constant symbol = "NUTS"

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:48.917229
Transaction Length: 1
Severity: High
Contract: NUTS
Function name: approveAndCall(address,uint256,bytes)
PC address: 1756
Estimated Gas Usage: 444 - 539
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x84294fc9710e1252d407d3d80a84bc39001bd4a8.sol:3

*/

//pragma solidity ^0.5.0;
pragm

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:09.607337
Transaction Length: 1
Severity: Low
Contract: NUTS
Function name: multiTransfer(address[],uint256[])
PC address: 2361
Estimated Gas Usage: 1028 - 6859
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x84294fc9710e1252d407d3d80a84bc39001bd4a8.sol:74

amounts[i]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:03:42.448301
Transaction Length: 2
Severity: Low
Contract: NUTS
Function name: multiTransfer(address[],uint256[])
PC address: 2361
Estimated Gas Usage: 1040 - 6871
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x84294fc9710e1252d407d3d80a84bc39001bd4a8.sol:74

amounts[i]

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:07:08.987133
Transaction Length: 1
Severity: Medium
Contract: NUTS
Function name: approveAndCall(address,uint256,bytes)
PC address: 5473
Estimated Gas Usage: 8291 - 32458
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../new/0x84294fc9710e1252d407d3d80a84bc39001bd4a8.sol:88

ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x08cda1baddbca220e75b3f90f8b029508969ee5c.sol
Total states:10094
22.94824
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.045995
Transaction Length: 0
Severity: High
Contract: UniswapExchange
Function name: constructor
PC address: 98
Estimated Gas Usage: 233 - 3006
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x08cda1baddbca220e75b3f90f8b029508969ee5c.sol:22

function transfer(address recipient, uint a

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.334858
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3244
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x08cda1baddbca220e75b3f90f8b029508969ee5c.sol:84

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x464131bf3a803566bb2142e36a8ccf0fbb8bda5b.sol
Total states:10046
660.676552
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.080620
Transaction Length: 1
Severity: High
Contract: EMTC
Function name: multipleAirdrop(address[],uint256[])
PC address: 1618
Estimated Gas Usage: 407 - 502
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x464131bf3a803566bb2142e36a8ccf0fbb8bda5b.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.116464
Transaction Length: 1
Severity: High
Contract: EMTC
Function name: multipleAirdrop(address[],uint256[])
PC address: 1620
Estimated Gas Usage: 407 - 502
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x464131bf3a803566bb2142e36a8ccf0fbb8bda5b.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:16.171434
Transaction Length: 1
Severity: High
Contract: EMTC
Function name: multipleAirdrop(address[],uint256[])
PC address: 1766
Estimated Gas Usage: 740 - 3517
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x464131bf3a803566bb2142e36a8ccf0fbb8bda5b.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:29.009476
Transaction Length: 1
Severity: High
Contract: EMTC
Function name: multipleAirdrop(address[],uint256[])
PC address: 1768
Estimated Gas Usage: 740 - 3517
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x464131bf3a803566bb2142e36a8ccf0fbb8bda5b.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:35.640536
Transaction Length: 1
Severity: High
Contract: EMTC
Function name: symbol()
PC address: 2404
Estimated Gas Usage: 1957 - 3087
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x464131bf3a803566bb2142e36a8ccf0fbb8bda5b.sol:152

function symbol() public view returns(string memory) {
        return _symbol;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.071624
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3291
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x464131bf3a803566bb2142e36a8ccf0fbb8bda5b.sol:163

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:29.136384
Transaction Length: 1
Severity: High
Contract: EMTC
Function name: decreaseAllowance(address,uint256)
PC address: 9541
Estimated Gas Usage: 1363 - 5177
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x464131bf3a803566bb2142e36a8ccf0fbb8bda5b.sol:174

require(b <= a, errorMessage)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xFf1B56597a71F2317746EA430f73ac3475cBc46c.sol
Total states:1740
126.486537
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.539881
Transaction Length: 1
Severity: High
Contract: PriceConsumerV3
Function name: priceOfBatch(address[])
PC address: 257
Estimated Gas Usage: 318 - 413
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xFf1B56597a71F2317746EA430f73ac3475cBc46c.sol:9

ma solidity ^0.6.3;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.957973
Transaction Length: 1
Severity: High
Contract: PriceConsumerV3
Function name: priceOfBatch(address[])
PC address: 259
Estimated Gas Usage: 318 - 413
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xFf1B56597a71F2317746EA430f73ac3475cBc46c.sol:3



*/



//pragma solidity ^0.6.3;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:47.065231
Transaction Length: 1
Severity: High
Contract: PriceConsumerV3
Function name: priceOfBatch(address[])
PC address: 392
Estimated Gas Usage: 2862 - 44280
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xFf1B56597a71F2317746EA430f73ac3475cBc46c.sol:138

function priceOfBatch(address[] memory _aggregators) public view returns (int[] memory) {

        require(_aggregators.length > 0, "Should contain more than one aggregator address");

        // Variables

        int[] memory batchPrices = new int[](_aggregators.length);

        // Iterate over each owner and token ID

        for (uint256 i = 0; i < _aggregators.length; i++) {

            AggregatorV3Interface priceFeed = AggregatorV3Interface(_aggregators[i]);

            (

                uint80 roundID, 

                int price,

                uint startedAt,

                uint timeStamp,

                uint80 answeredInRound

            ) = priceFeed.latestRoundData();

            batchPrices[i] = price;

        }

        return batchPrices;

    }

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:02.089623
Transaction Length: 1
Severity: Low
Contract: PriceConsumerV3
Function name: priceOfBatch(address[])
PC address: 1264
Estimated Gas Usage: 2608 - 43369
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xFf1B56597a71F2317746EA430f73ac3475cBc46c.sol:166

batchPrices[i]

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x9e3c953a425483924a42e47cbdef3d66513b9ee3.sol
Total states:2324
2.026343
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x09a95a502a5f380eda8b7f1e8c3ff2ead41afc7e.sol
Total states:10252
580.363048
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.704487
Transaction Length: 1
Severity: High
Contract: seveninch
Function name: multiTransfer(address[],uint256[])
PC address: 785
Estimated Gas Usage: 430 - 525
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x09a95a502a5f380eda8b7f1e8c3ff2ead41afc7e.sol:13

!!!!!!!!!!!!!!!Notice

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.609083
Transaction Length: 1
Severity: High
Contract: seveninch
Function name: multiTransfer(address[],uint256[])
PC address: 787
Estimated Gas Usage: 430 - 525
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x09a95a502a5f380eda8b7f1e8c3ff2ead41afc7e.sol:3



*/



/*



!!!!!!!!!!!!!!!Notice!

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:14.508475
Transaction Length: 1
Severity: High
Contract: seveninch
Function name: multiTransfer(address[],uint256[])
PC address: 933
Estimated Gas Usage: 763 - 3540
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x09a95a502a5f380eda8b7f1e8c3ff2ead41afc7e.sol:13

!!!!!!!!!!!!!!!Notice

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:28.921589
Transaction Length: 1
Severity: High
Contract: seveninch
Function name: multiTransfer(address[],uint256[])
PC address: 935
Estimated Gas Usage: 763 - 3540
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x09a95a502a5f380eda8b7f1e8c3ff2ead41afc7e.sol:3



*/



/*



!!!!!!!!!!!!!!!Notice!

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:04.664099
Transaction Length: 1
Severity: High
Contract: seveninch
Function name: symbol()
PC address: 1607
Estimated Gas Usage: 1913 - 3043
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x09a95a502a5f380eda8b7f1e8c3ff2ead41afc7e.sol:270

function symbol() public view returns(string memory) {

    return _Tokensymbol;

  }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:07:05.067208
Transaction Length: 1
Severity: High
Contract: seveninch
Function name: multiTransferEqualAmount(address[],uint256)
PC address: 1916
Estimated Gas Usage: 451 - 546
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x09a95a502a5f380eda8b7f1e8c3ff2ead41afc7e.sol:13

!!!!!!!!!!!!!!!Notice

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:07:07.977425
Transaction Length: 1
Severity: High
Contract: seveninch
Function name: multiTransferEqualAmount(address[],uint256)
PC address: 1918
Estimated Gas Usage: 451 - 546
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x09a95a502a5f380eda8b7f1e8c3ff2ead41afc7e.sol:3



*/



/*



!!!!!!!!!!!!!!!Notice!

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:07:31.569676
Transaction Length: 1
Severity: High
Contract: seveninch
Function name: multiTransferEqualAmount(address[],uint256)
PC address: 5631
Estimated Gas Usage: 930 - 4316
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x09a95a502a5f380eda8b7f1e8c3ff2ead41afc7e.sol:570

amount * 10**uint256(tokenDecimals)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:07:03.675961
Transaction Length: 1
Severity: Low
Contract: seveninch
Function name: decreaseAllowance(address,uint256)
PC address: 8017
Estimated Gas Usage: 1062 - 1537
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x09a95a502a5f380eda8b7f1e8c3ff2ead41afc7e.sol:200

assert(b <= a)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:49.072440
Transaction Length: 2
Severity: Low
Contract: seveninch
Function name: decreaseAllowance(address,uint256)
PC address: 8017
Estimated Gas Usage: 1062 - 1537
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x09a95a502a5f380eda8b7f1e8c3ff2ead41afc7e.sol:200

assert(b <= a)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:15.925444
Transaction Length: 2
Severity: High
Contract: seveninch
Function name: increaseAllowance(address,uint256)
PC address: 8035
Estimated Gas Usage: 1047 - 1522
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x09a95a502a5f380eda8b7f1e8c3ff2ead41afc7e.sol:210

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:43.443385
Transaction Length: 2
Severity: Low
Contract: seveninch
Function name: increaseAllowance(address,uint256)
PC address: 8048
Estimated Gas Usage: 1057 - 1532
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x09a95a502a5f380eda8b7f1e8c3ff2ead41afc7e.sol:212

assert(c >= a)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:18.915280
Transaction Length: 1
Severity: High
Contract: seveninch
Function name: findPercentage(uint256)
PC address: 8459
Estimated Gas Usage: 828 - 923
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x09a95a502a5f380eda8b7f1e8c3ff2ead41afc7e.sol:178

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:06:30.637557
Transaction Length: 1
Severity: Low
Contract: seveninch
Function name: findPercentage(uint256)
PC address: 8482
Estimated Gas Usage: 866 - 961
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x09a95a502a5f380eda8b7f1e8c3ff2ead41afc7e.sol:180

assert(c / a == b)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xdf69471dca7c45fdc9ed0dc2e15f2232e58b9d6a.sol
Total states:2398
19.426442
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xa387d2be9f737612fa85c86d0234e36e3f2a048b.sol
Total states:272
96.929519
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.042127
Transaction Length: 0
Severity: High
Contract: VaultTimely
Function name: constructor
PC address: 230
Estimated Gas Usage: 41453 - 201878
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xa387d2be9f737612fa85c86d0234e36e3f2a048b.sol:34

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.833530
Transaction Length: 0
Severity: Low
Contract: VaultTimely
Function name: constructor
PC address: 244
Estimated Gas Usage: 41463 - 201888
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xa387d2be9f737612fa85c86d0234e36e3f2a048b.sol:35

assert(c >= a)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x3afdb0877206dea0a57e4e4d18a00059cb6dd897.sol
Total states:1986
20.774197
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.327151
Transaction Length: 1
Severity: High
Contract: StrategyAddTwoSidesOptimal
Function name: execute(address,uint256,bytes)
PC address: 726
Estimated Gas Usage: 376 - 471
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3afdb0877206dea0a57e4e4d18a00059cb6dd897.sol:3

*/

// File: openzeppelin-solidity-

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:00.181503
Transaction Length: 0
Severity: Medium
Contract: StrategyAddTwoSidesOptimal
Function name: constructor
PC address: 867
Estimated Gas Usage: 38791 - 235224
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 375
Offset: 664
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../new/0x3afdb0877206dea0a57e4e4d18a00059cb6dd897.sol:619

contract StrategyAddTwoSidesOptimal is Ownable, ReentrancyGuard, Strategy {
    using SafeToken for address;
    using SafeMath for uint256;

    IUniswapV2Factory public factory;
    IUniswapV2Router02 public router;
    address public weth;
    address public goblin;

    /// @dev Create a new add two-side optimal strategy instance.
    /// @param _router The Uniswap router smart contract.
    constructor(IUniswapV2Router02 _router, address _goblin) public {
        factory = IUniswapV2Factory(_router.factory());
        router = _router;
        weth = _router.WETH();
        goblin = _goblin;
    }
    
    /// @dev Throws if called by any account other than the goblin.
    modifier onlyGoblin() {
        require(isGoblin(), "caller is not the goblin");
        _;
    }

    /// @dev Returns true if the caller is the current goblin.
    function isGoblin() public view returns (bool) {
        return msg.sender == goblin;
    }

    /// @dev Compute optimal deposit amount
    /// @param amtA amount of token A desired to deposit
    /// @param amtB amonut of token B desired to deposit
    /// @param resA amount of token A in reserve
    /// @param resB amount of token B in reserve
    function optimalDeposit(
        uint256 amtA,
        uint256 amtB,
        uint256 resA,
        uint256 resB
    ) internal pure returns (uint256 swapAmt, bool isReversed) {
        if (amtA.mul(resB) >= amtB.mul(resA)) {
            swapAmt = _optimalDepositA(amtA, amtB, resA, resB);
            isReversed = false;
        } else {
            swapAmt = _optimalDepositA(amtB, amtA, resB, resA);
            isReversed = true;
        }
    }

    /// @dev Compute optimal deposit amount helper
    /// @param amtA amount of token A desired to deposit
    /// @param amtB amonut of token B desired to deposit
    /// @param resA amount of token A in reserve
    /// @param resB amount of token B in reserve
    function _optimalDepositA(
        uint256 amtA,
        uint256 amtB,
        uint256 resA,
        uint256 resB
    ) internal pure returns (uint256) {
        require(amtA.mul(resB) >= amtB.mul(resA), "Reversed");

        uint256 a = 997;
        uint256 b = uint256(1997).mul(resA);
        uint256 _c = (amtA.mul(resB)).sub(amtB.mul(resA));
        uint256 c = _c.mul(1000).div(amtB.add(resB)).mul(resA);

        uint256 d = a.mul(c).mul(4);
        uint256 e = Math.sqrt(b.mul(b).add(d));

        uint256 numerator = e.sub(b);
        uint256 denominator = a.mul(2);

        return numerator.div(denominator);
    }

    /// @dev Execute worker strategy. Take LP tokens + ETH. Return LP tokens + ETH.
    /// @param user User address
    /// @param data Extra calldata information passed along to this strategy.
    function execute(address user, uint256, /* debt */ bytes calldata data) 
        external         
        payable  
        onlyGoblin       
        nonReentrant 
    {
        // 1. Find out what farming token we are dealing with.
        (address fToken, uint256 fAmount, uint256 minLPAmount) = abi.decode(data, (address, uint256, uint256));
        IUniswapV2Pair lpToken = IUniswapV2Pair(factory.getPair(fToken, weth));        
        // 2. Compute the optimal amount of ETH and fToken to be converted.  
        if (fAmount > 0) {  
            fToken.safeTransferFrom(user, address(this), fAmount);            
        }
        uint256 ethBalance = address(this).balance;
        uint256 swapAmt;
        bool isReversed;
        {
            (uint256 r0, uint256 r1, ) = lpToken.getReserves();
            (uint256 ethReserve, uint256 fReserve) = lpToken.token0() == weth ? (r0, r1) : (r1, r0);
            (swapAmt, isReversed) = optimalDeposit(ethBalance, fToken.myBalance(), ethReserve, fReserve);
        }
        // 3. Convert between ETH and farming tokens
        fToken.safeApprove(address(router), 0);
        fToken.safeApprove(address(router), uint256(-1));
        address[] memory path = new address[](2);
        (path[0], path[1]) = isReversed ? (fToken, weth) : (weth, fToken);
        if (isReversed) {
            router.swapExactTokensForETH(swapAmt, 0, path, address(this), now); // farming tokens to ETH
        } else {
            router.swapExactETHForTokens.value(swapAmt)(0, path, address(this), now); // ETH to farming tokens
        }
        // 4. Mint more LP tokens and return all LP tokens to the sender.
        (,, uint256 moreLPAmount) = router.addLiquidityETH.value(address(this).balance)(
            fToken, fToken.myBalance(), 0, 0, address(this), now
        );
        require(moreLPAmount >= minLPAmount, "insufficient LP tokens received");
        lpToken.transfer(msg.sender, lpToken.balanceOf(address(this)));
    }

    /// @dev Recover ERC20 tokens that were accidentally sent to this smart contract.
    /// @param token The token contract. Can be anything. This contract should not hold ERC20 tokens.
    /// @param to The address to send the tokens to.
    /// @param value The number of tokens to transfer to `to`.
    function recover(address token, address to, uint256 value) external onlyOwner nonReentrant {
        token.safeTransfer(to, value);
    }

    function() external payable {}
}

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol
Total states:1897
1045.64867
==== Delegatecall Proxy ====
SWC ID: 112
FOUND TIME: 0:00:00.264285
Transaction Length: 1
Severity: Low
Contract: OwnedUpgradeabilityProxy
Function name: fallback
PC address: 180
Estimated Gas Usage: 771 - 5753
The contract implements a delegatecall proxy.
The smart contract forwards the received calldata via delegatecall. Note that callerscan execute arbitrary functions in the callee contract and that the callee contract can access the storage of the calling contract. Make sure that the callee contract is audited properly.DELEGATECALL target: Concat(9_code(OwnedUpgradeabilityProxy),
       9_code(OwnedUpgradeabilityProxy),
       9_code(OwnedUpgradeabilityProxy),
       9_code(OwnedUpgradeabilityProxy),
       9_code(OwnedUpgradeabilityProxy),
       9_code(OwnedUpgradeabilityProxy),
       9_code(OwnedUpgradeabilityProxy),
       9_code(OwnedUpgradeabilityProxy),
       9_code(OwnedUpgradeabilityProxy),
       9_code(OwnedUpgradeabilityProxy),
       9_code(OwnedUpgradeabilityProxy),
       9_code(OwnedUpgradeabilityProxy),
       9_code(OwnedUpgradeabilityProxy),
       9_code(OwnedUpgradeabilityProxy),
       9_code(OwnedUpgradeabilityProxy),
       9_code(OwnedUpgradeabilityProxy),
       9_code(OwnedUpgradeabilityProxy),
       9_code(OwnedUpgradeabilityProxy),
       9_code(OwnedUpgradeabilityProxy),
       9_code(OwnedUpgradeabilityProxy),
       9_code(OwnedUpgradeabilityProxy),
       9_code(OwnedUpgradeabilityProxy),
       9_code(OwnedUpgradeabilityProxy),
       9_code(OwnedUpgradeabilityProxy),
       9_code(OwnedUpgradeabilityProxy),
       9_code(OwnedUpgradeabilityProxy),
       9_code(OwnedUpgradeabilityProxy),
       9_code(OwnedUpgradeabilityProxy),
       9_code(OwnedUpgradeabilityProxy),
       9_code(OwnedUpgradeabilityProxy),
       9_code(OwnedUpgradeabilityProxy),
       9_code(OwnedUpgradeabilityProxy))
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:913

delegatecall(gas, _impl, ptr, calldatasize, 0, 0)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.465768
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: initiate(address,address,address,address[])
PC address: 1211
Estimated Gas Usage: 463 - 558
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:9

e: contracts/external

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.489965
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: initiate(address,address,address,address[])
PC address: 1213
Estimated Gas Usage: 463 - 558
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:3



*/



// File: contracts/external/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.597315
Transaction Length: 1
Severity: High
Contract: MarketRegistryNew
Function name: initiate(address,address,address,address[])
PC address: 1295
Estimated Gas Usage: 552 - 647
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:9

e: contracts/external

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.829469
Transaction Length: 1
Severity: High
Contract: MarketRegistryNew
Function name: initiate(address,address,address,address[])
PC address: 1297
Estimated Gas Usage: 552 - 647
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:3



*/



// File: contracts/external/

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:01:17.469161
Transaction Length: 1
Severity: Medium
Contract: MarketRegistry
Function name: transferAssets(address,address,uint256)
PC address: 2105
Estimated Gas Usage: 3436 - 72609
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 10805
Offset: 26176
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:2538

function transferAssets(address _asset, address payable _to, uint _amount) external onlyAuthorizedToGovern {

      _transferAsset(_asset, _to, _amount);

    }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:01:39.967375
Transaction Length: 1
Severity: Medium
Contract: MarketRegistry
Function name: setMasterAddress()
PC address: 2131
Estimated Gas Usage: 20392 - 150836
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 11129
Offset: 11658
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:2198

function setMasterAddress() public {

      OwnedUpgradeabilityProxy proxy =  OwnedUpgradeabilityProxy(address(uint160(address(this))));

      require(msg.sender == proxy.proxyOwner(),"Sender is not proxy owner.");

      ms = IMaster(msg.sender);

      masterAddress = msg.sender;

      governance = IGovernance(ms.getLatestAddress("GV"));

    }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:01:23.148159
Transaction Length: 1
Severity: Medium
Contract: MarketRegistryNew
Function name: transferAssets(address,address,uint256)
PC address: 2279
Estimated Gas Usage: 3436 - 72609
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 12048
Offset: 30628
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:2538

function transferAssets(address _asset, address payable _to, uint _amount) external onlyAuthorizedToGovern {

      _transferAsset(_asset, _to, _amount);

    }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:01:45.219012
Transaction Length: 1
Severity: Medium
Contract: MarketRegistryNew
Function name: setMasterAddress()
PC address: 2305
Estimated Gas Usage: 20392 - 150836
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 12372
Offset: 12901
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:2198

function setMasterAddress() public {

      OwnedUpgradeabilityProxy proxy =  OwnedUpgradeabilityProxy(address(uint160(address(this))));

      require(msg.sender == proxy.proxyOwner(),"Sender is not proxy owner.");

      ms = IMaster(msg.sender);

      masterAddress = msg.sender;

      governance = IGovernance(ms.getLatestAddress("GV"));

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:29.877105
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: updateMarketImplementations(uint256[],address[])
PC address: 2899
Estimated Gas Usage: 451 - 546
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:9

e: contracts/external

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:32.994122
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: updateMarketImplementations(uint256[],address[])
PC address: 2901
Estimated Gas Usage: 451 - 546
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:3



*/



// File: contracts/external/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:38.029266
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: updateMarketImplementations(uint256[],address[])
PC address: 2987
Estimated Gas Usage: 627 - 722
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:9

e: contracts/external

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:53.205424
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: updateMarketImplementations(uint256[],address[])
PC address: 2989
Estimated Gas Usage: 627 - 722
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:3



*/



// File: contracts/external/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:18.496246
Transaction Length: 1
Severity: High
Contract: MarketRegistryNew
Function name: updateMarketImplementations(uint256[],address[])
PC address: 3148
Estimated Gas Usage: 451 - 546
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:9

e: contracts/external

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:21.833597
Transaction Length: 1
Severity: High
Contract: MarketRegistryNew
Function name: updateMarketImplementations(uint256[],address[])
PC address: 3150
Estimated Gas Usage: 451 - 546
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:3



*/



// File: contracts/external/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:26.701912
Transaction Length: 1
Severity: High
Contract: MarketRegistryNew
Function name: updateMarketImplementations(uint256[],address[])
PC address: 3236
Estimated Gas Usage: 627 - 722
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:9

e: contracts/external

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:42.479525
Transaction Length: 1
Severity: High
Contract: MarketRegistryNew
Function name: updateMarketImplementations(uint256[],address[])
PC address: 3238
Estimated Gas Usage: 627 - 722
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:3



*/



// File: contracts/external/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:10.321737
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: callMarketResultEvent(uint256[],uint256,uint256,uint256)
PC address: 3585
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:9

e: contracts/external

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:13.302933
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: callMarketResultEvent(uint256[],uint256,uint256,uint256)
PC address: 3587
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:3



*/



// File: contracts/external/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:21.268475
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: callClaimedEvent(address,uint256[],address[],uint256,address)
PC address: 4369
Estimated Gas Usage: 484 - 579
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:9

e: contracts/external

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:26.984610
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: callClaimedEvent(address,uint256[],address[],uint256,address)
PC address: 4371
Estimated Gas Usage: 484 - 579
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:3



*/



// File: contracts/external/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:35.153063
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: callClaimedEvent(address,uint256[],address[],uint256,address)
PC address: 4457
Estimated Gas Usage: 660 - 755
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:9

e: contracts/external

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:45.359989
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: callClaimedEvent(address,uint256[],address[],uint256,address)
PC address: 4459
Estimated Gas Usage: 660 - 755
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:3



*/



// File: contracts/external/

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:08:58.790278
Transaction Length: 1
Severity: Medium
Contract: MarketRegistry
Function name: upgradeContractImplementation(address,address)
PC address: 4762
Estimated Gas Usage: 4098 - 73461
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 21857
Offset: 22280
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:2174

function upgradeContractImplementation(address payable _proxyAddress, address _newImplementation) 

        external onlyAuthorizedToGovern

    {

      require(_newImplementation != address(0));

      OwnedUpgradeabilityProxy tempInstance 

          = OwnedUpgradeabilityProxy(_proxyAddress);

      tempInstance.upgradeTo(_newImplementation);

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:10:21.373322
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: createGovernanceProposal(string,string,string,bytes,uint256,address,uint256,uint256,uint256)
PC address: 5068
Estimated Gas Usage: 362 - 457
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:3



*/



// File: contracts/external

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:10:43.742765
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: createGovernanceProposal(string,string,string,bytes,uint256,address,uint256,uint256,uint256)
PC address: 5222
Estimated Gas Usage: 704 - 3481
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:3



*/



// File: contracts/external

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:11:21.944621
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: createGovernanceProposal(string,string,string,bytes,uint256,address,uint256,uint256,uint256)
PC address: 5376
Estimated Gas Usage: 1046 - 6505
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:3



*/



// File: contracts/external

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:02:22.219207
Transaction Length: 1
Severity: Low
Contract: MarketRegistry
Function name: updateConfigAddressParameters(bytes8,address)
PC address: 13397
Estimated Gas Usage: 3816 - 39604
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:2596

marketUtility.updateAddressParameters(code, value)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:03:08.646704
Transaction Length: 1
Severity: Low
Contract: MarketRegistryNew
Function name: updateConfigAddressParameters(bytes8,address)
PC address: 15683
Estimated Gas Usage: 3851 - 39639
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:3704

marketUtility.updateAddressParameters(code, value)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:03:30.062029
Transaction Length: 1
Severity: Low
Contract: MarketRegistry
Function name: updateUintParameters(bytes8,uint256)
PC address: 16788
Estimated Gas Usage: 3812 - 39600
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:2586

marketUtility.updateUintParameters(code, value)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:03:51.665589
Transaction Length: 1
Severity: Low
Contract: MarketRegistry
Function name: burnDisputedProposalTokens(uint256)
PC address: 17424
Estimated Gas Usage: 3858 - 39836
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:2464

IMarket(disputedMarket).resolveDispute(false, 0)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:04:02.123776
Transaction Length: 1
Severity: Low
Contract: MarketRegistry
Function name: burnDisputedProposalTokens(uint256)
PC address: 17752
Estimated Gas Usage: 7571 - 78982
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:2470

plotToken.burn(_stakedAmount)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:36.084341
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: getMarketDetails(address)
PC address: 18576
Estimated Gas Usage: 1945 - 36509
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:9

contracts/exter

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:47.534564
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: getMarketDetails(address)
PC address: 18579
Estimated Gas Usage: 2065 - 36815
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:5

*/



// File: contracts/external/openzeppe

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:52.455930
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: getMarketDetails(address)
PC address: 18602
Estimated Gas Usage: 2065 - 36815
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:2766

IMarket(_marketAdd).getData()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:43.067499
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: getMarketDetails(address)
PC address: 18638
Estimated Gas Usage: 2065 - 36815
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:3

0

*/



// File: con

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:57.454838
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: getMarketDetails(address)
PC address: 18644
Estimated Gas Usage: 2065 - 36815
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:9

lidity/math/Sa

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:05.405785
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: getMarketDetails(address)
PC address: 18665
Estimated Gas Usage: 2123 - 36966
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:26

metic operations in S

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:11.428932
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: getMarketDetails(address)
PC address: 18667
Estimated Gas Usage: 2123 - 36966
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:22

 checks.

 *

 * Arithmetic operations in So

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:20.570731
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: getMarketDetails(address)
PC address: 18720
Estimated Gas Usage: 2223 - 37159
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:3

0

*/



// File: con

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:25.514924
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: getMarketDetails(address)
PC address: 18726
Estimated Gas Usage: 2223 - 37159
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:9

lidity/math/Sa

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:33.377835
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: getMarketDetails(address)
PC address: 18747
Estimated Gas Usage: 2281 - 37310
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:26

metic operations in S

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:40.278193
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: getMarketDetails(address)
PC address: 18749
Estimated Gas Usage: 2281 - 37310
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:22

 checks.

 *

 * Arithmetic operations in So

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:50.314798
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: getMarketDetails(address)
PC address: 18802
Estimated Gas Usage: 2381 - 37503
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:3

0

*/



// File: con

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:55.739631
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: getMarketDetails(address)
PC address: 18808
Estimated Gas Usage: 2381 - 37503
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:9

lidity/math/Sa

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:04.895883
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: getMarketDetails(address)
PC address: 18829
Estimated Gas Usage: 2439 - 37654
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:26

metic operations in S

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:11.807820
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: getMarketDetails(address)
PC address: 18831
Estimated Gas Usage: 2439 - 37654
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:22

 checks.

 *

 * Arithmetic operations in So

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:06:20.037248
Transaction Length: 1
Severity: Low
Contract: MarketRegistry
Function name: createMarket(uint256,uint256)
PC address: 19617
Estimated Gas Usage: 2068 - 3583
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:2274

marketCurrencies[_marketCurrencyIndex]

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:08:58.766724
Transaction Length: 1
Severity: Medium
Contract: MarketRegistry
Function name: upgradeContractImplementation(address,address)
PC address: 22280
Estimated Gas Usage: 3350 - 38713
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:2186

tempInstance.upgradeTo(_newImplementation)

--------------------

==== Unprotected Ether Withdrawal ====
SWC ID: 105
FOUND TIME: 0:01:17.279270
Transaction Length: 1
Severity: High
Contract: MarketRegistry
Function name: transferAssets(address,address,uint256)
PC address: 26176
Estimated Gas Usage: 2655 - 37828
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:2564

_recipient.transfer(_amount)

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:01:09.158657
Transaction Length: 1
Severity: Medium
Contract: MarketRegistry
Function name: transferAssets(address,address,uint256)
PC address: 26373
Estimated Gas Usage: 3452 - 38910
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:2568

IToken(_asset).transfer(_recipient, _amount)

--------------------

==== Unprotected Ether Withdrawal ====
SWC ID: 105
FOUND TIME: 0:01:22.952281
Transaction Length: 1
Severity: High
Contract: MarketRegistryNew
Function name: transferAssets(address,address,uint256)
PC address: 30628
Estimated Gas Usage: 2655 - 37828
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:2564

_recipient.transfer(_amount)

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:01:14.506288
Transaction Length: 1
Severity: Medium
Contract: MarketRegistryNew
Function name: transferAssets(address,address,uint256)
PC address: 30825
Estimated Gas Usage: 3452 - 38910
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../new/0x3e56d34ce0b6317810882142dec186fc3b0fae8c.sol:2568

IToken(_asset).transfer(_recipient, _amount)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol
Total states:1164
11.441527
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.463422
Transaction Length: 1
Severity: Low
Contract: LoihiStorage
Function name: reserves(uint256)
PC address: 1334
Estimated Gas Usage: 767 - 862
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol:984

address[] public reserves

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.805647
Transaction Length: 1
Severity: Low
Contract: LoihiStorage
Function name: numeraires(uint256)
PC address: 1491
Estimated Gas Usage: 700 - 795
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol:983

address[] public numeraires

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.310801
Transaction Length: 1
Severity: Low
Contract: LoihiStorage
Function name: derivatives(uint256)
PC address: 1596
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol:982

address[] public derivatives

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x4F4001b06A2d5E71674a3591713B47580a1002442.sol
Total states:1055
2.42331
==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.005703
Transaction Length: 0
Severity: Medium
Contract: Governance
Function name: constructor
PC address: 18
Estimated Gas Usage: 42 - 137
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../new/0x4F4001b06A2d5E71674a3591713B47580a1002442.sol:220

tx.origin

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x21643bddd9f5af8267700f4c3aa57bf508946e28.sol
Total states:845
9.738218
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xefc8b22a6d8da10aacddaa30a432671c49668a02.sol
Total states:729
1.230406
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.081935
Transaction Length: 0
Severity: High
Contract: MultiWallet
Function name: constructor
PC address: 110
Estimated Gas Usage: 257 - 3030
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xefc8b22a6d8da10aacddaa30a432671c49668a02.sol:15

uint newThreshold;
  

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.097303
Transaction Length: 0
Severity: High
Contract: MultiWallet
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xefc8b22a6d8da10aacddaa30a432671c49668a02.sol:14

ole roleType;
        uint newThreshold;
   

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xe3b8541655d70804526e366d7b8c914b8ecd944a.sol
Total states:2848
327.08531
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.727390
Transaction Length: 1
Severity: High
Contract: NiftyTools
Function name: feedMultiple(uint256[],uint256[])
PC address: 719
Estimated Gas Usage: 407 - 502
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xe3b8541655d70804526e366d7b8c914b8ecd944a.sol:5

openzeppelin/contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.642768
Transaction Length: 1
Severity: High
Contract: NiftyTools
Function name: feedMultiple(uint256[],uint256[])
PC address: 721
Estimated Gas Usage: 407 - 502
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xe3b8541655d70804526e366d7b8c914b8ecd944a.sol:3

*/

// File: @openzeppelin/contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.333279
Transaction Length: 1
Severity: High
Contract: NiftyTools
Function name: feedMultiple(uint256[],uint256[])
PC address: 804
Estimated Gas Usage: 583 - 678
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xe3b8541655d70804526e366d7b8c914b8ecd944a.sol:5

openzeppelin/contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:26.808742
Transaction Length: 1
Severity: High
Contract: NiftyTools
Function name: feedMultiple(uint256[],uint256[])
PC address: 806
Estimated Gas Usage: 583 - 678
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xe3b8541655d70804526e366d7b8c914b8ecd944a.sol:3

*/

// File: @openzeppelin/contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:06.875669
Transaction Length: 1
Severity: High
Contract: NiftyTools
Function name: claimMultiple(uint256[])
PC address: 999
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xe3b8541655d70804526e366d7b8c914b8ecd944a.sol:5

openzeppelin/contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:10.634754
Transaction Length: 1
Severity: High
Contract: NiftyTools
Function name: claimMultiple(uint256[])
PC address: 1001
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xe3b8541655d70804526e366d7b8c914b8ecd944a.sol:3

*/

// File: @openzeppelin/contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:27.508198
Transaction Length: 1
Severity: High
Contract: NiftyTools
Function name: _checkAmount(uint256[])
PC address: 1198
Estimated Gas Usage: 340 - 435
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xe3b8541655d70804526e366d7b8c914b8ecd944a.sol:5

openzeppelin/contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:31.180817
Transaction Length: 1
Severity: High
Contract: NiftyTools
Function name: _checkAmount(uint256[])
PC address: 1200
Estimated Gas Usage: 340 - 435
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xe3b8541655d70804526e366d7b8c914b8ecd944a.sol:3

*/

// File: @openzeppelin/contracts

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:03:10.032628
Transaction Length: 1
Severity: Low
Contract: NiftyTools
Function name: claimMultiple(uint256[])
PC address: 5672
Estimated Gas Usage: 4851 - 40874
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0xe3b8541655d70804526e366d7b8c914b8ecd944a.sol:412

vnft.claimMiningRewards(ids[i])

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:24.672961
Transaction Length: 1
Severity: High
Contract: NiftyTools
Function name: claimMultiple(uint256[])
PC address: 8265
Estimated Gas Usage: 3963 - 39280
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xe3b8541655d70804526e366d7b8c914b8ecd944a.sol:191

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x6c936307dad9b197de34e3f0642f54c39f662441.sol
Total states:2324
1.898026
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xc9db619abd37ae22d80fce3bdb811485b56d4fc3.sol
Total states:12855
257.507497
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.966045
Transaction Length: 1
Severity: High
Contract: Module
Function name: getModuleAddress(string)
PC address: 416
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc9db619abd37ae22d80fce3bdb811485b56d4fc3.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.281150
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 511
Estimated Gas Usage: 364 - 459
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc9db619abd37ae22d80fce3bdb811485b56d4fc3.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.564975
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 513
Estimated Gas Usage: 364 - 459
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc9db619abd37ae22d80fce3bdb811485b56d4fc3.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.523941
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 596
Estimated Gas Usage: 540 - 635
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc9db619abd37ae22d80fce3bdb811485b56d4fc3.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:17.941804
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 598
Estimated Gas Usage: 540 - 635
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc9db619abd37ae22d80fce3bdb811485b56d4fc3.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:30.826795
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 681
Estimated Gas Usage: 716 - 811
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc9db619abd37ae22d80fce3bdb811485b56d4fc3.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:51.452582
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 683
Estimated Gas Usage: 716 - 811
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc9db619abd37ae22d80fce3bdb811485b56d4fc3.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:11.837415
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 766
Estimated Gas Usage: 892 - 987
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc9db619abd37ae22d80fce3bdb811485b56d4fc3.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:35.843560
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 768
Estimated Gas Usage: 892 - 987
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc9db619abd37ae22d80fce3bdb811485b56d4fc3.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:05.427913
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: getModuleAddress(string)
PC address: 1453
Estimated Gas Usage: 451 - 546
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc9db619abd37ae22d80fce3bdb811485b56d4fc3.sol:3

*/

// File: @openzeppelin\contract

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xDf625D21ab9aE7C74A1864265D6116EeaE9E94B22.sol
Total states:2203
46.423721
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.439263
Transaction Length: 1
Severity: High
Contract: EUSDReserves
Function name: migrateReserves(address,address[])
PC address: 305
Estimated Gas Usage: 352 - 447
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xDf625D21ab9aE7C74A1864265D6116EeaE9E94B22.sol:5

olidity 0.5.17;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.671555
Transaction Length: 1
Severity: High
Contract: EUSDReserves
Function name: migrateReserves(address,address[])
PC address: 307
Estimated Gas Usage: 352 - 447
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xDf625D21ab9aE7C74A1864265D6116EeaE9E94B22.sol:3

*/

//pragma solidity 0.5.17;
pragma

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x2b0881c43467bb590a7339ff7afe494807f5f914.sol
Total states:77
3.249335
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xc7c5E7d7d5C6e49Be1CC835ac67E774e164D7811.sol
Total states:9197
1672.200037
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.431930
Transaction Length: 1
Severity: High
Contract: Operator
Function name: setOperators(address[])
PC address: 540
Estimated Gas Usage: 340 - 435
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc7c5E7d7d5C6e49Be1CC835ac67E774e164D7811.sol:9

e: contracts\modules\

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.461054
Transaction Length: 1
Severity: High
Contract: Operator
Function name: setOperators(address[])
PC address: 542
Estimated Gas Usage: 340 - 435
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc7c5E7d7d5C6e49Be1CC835ac67E774e164D7811.sol:3



*/



// File: contracts\modules\S

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:36.765552
Transaction Length: 1
Severity: High
Contract: Operator
Function name: getOperator()
PC address: 763
Estimated Gas Usage: 1249 - 2096
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc7c5E7d7d5C6e49Be1CC835ac67E774e164D7811.sol:1115

function getOperator()public view returns (address[] memory) {

        return _operatorList;

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:46.076339
Transaction Length: 1
Severity: High
Contract: Operator
Function name: getOperator()
PC address: 803
Estimated Gas Usage: 1399 - 2622
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc7c5E7d7d5C6e49Be1CC835ac67E774e164D7811.sol:1115

function getOperator()public view returns (address[] memory) {

        return _operatorList;

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.181267
Transaction Length: 1
Severity: High
Contract: CollateralPool
Function name: getAllRealBalance(address[])
PC address: 1179
Estimated Gas Usage: 388 - 483
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc7c5E7d7d5C6e49Be1CC835ac67E774e164D7811.sol:9

e: contracts\modules\

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.882948
Transaction Length: 1
Severity: High
Contract: CollateralPool
Function name: getAllRealBalance(address[])
PC address: 1181
Estimated Gas Usage: 388 - 483
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc7c5E7d7d5C6e49Be1CC835ac67E774e164D7811.sol:3



*/



// File: contracts\modules\S

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:22.501816
Transaction Length: 1
Severity: High
Contract: CollateralPool
Function name: getAllRealBalance(address[])
PC address: 1314
Estimated Gas Usage: 880 - 4502
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc7c5E7d7d5C6e49Be1CC835ac67E774e164D7811.sol:2062

function getAllRealBalance(address[] memory whiteList)public view returns(int256[] memory){

        uint256 len = whiteList.length;

        int256[] memory realBalances = new int256[](len); 

        for (uint i = 0;i<len;i++){

            int256 latestWorth = _optionsPool.getNetWrothLatestWorth(whiteList[i]);

            realBalances[i] = netWorthBalances[whiteList[i]].add(latestWorth);

        }

        return realBalances;

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:23.637556
Transaction Length: 1
Severity: High
Contract: CollateralPool
Function name: getWhiteList()
PC address: 1422
Estimated Gas Usage: 1275 - 2122
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc7c5E7d7d5C6e49Be1CC835ac67E774e164D7811.sol:901

function getWhiteList()public view returns (address[] memory){

        return whiteList;

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.071000
Transaction Length: 1
Severity: High
Contract: CollateralData
Function name: setOperators(address[])
PC address: 1436
Estimated Gas Usage: 429 - 524
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc7c5E7d7d5C6e49Be1CC835ac67E774e164D7811.sol:9

e: contracts\modules\

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.262938
Transaction Length: 1
Severity: High
Contract: CollateralData
Function name: setOperators(address[])
PC address: 1438
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc7c5E7d7d5C6e49Be1CC835ac67E774e164D7811.sol:3



*/



// File: contracts\modules\S

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:42.244051
Transaction Length: 1
Severity: High
Contract: CollateralPool
Function name: getWhiteList()
PC address: 1462
Estimated Gas Usage: 1425 - 2648
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc7c5E7d7d5C6e49Be1CC835ac67E774e164D7811.sol:901

function getWhiteList()public view returns (address[] memory){

        return whiteList;

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:35.849925
Transaction Length: 1
Severity: High
Contract: CollateralData
Function name: getOperator()
PC address: 1727
Estimated Gas Usage: 1249 - 2096
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc7c5E7d7d5C6e49Be1CC835ac67E774e164D7811.sol:1115

function getOperator()public view returns (address[] memory) {

        return _operatorList;

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:45.908965
Transaction Length: 1
Severity: High
Contract: CollateralData
Function name: getOperator()
PC address: 1767
Estimated Gas Usage: 1399 - 2622
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc7c5E7d7d5C6e49Be1CC835ac67E774e164D7811.sol:1115

function getOperator()public view returns (address[] memory) {

        return _operatorList;

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:08:35.417919
Transaction Length: 1
Severity: High
Contract: CollateralPool
Function name: getFeeRateAll()
PC address: 2636
Estimated Gas Usage: 4034 - 7101
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc7c5E7d7d5C6e49Be1CC835ac67E774e164D7811.sol:1263

function getFeeRateAll()public view returns (uint32[] memory){

        return FeeRates;

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:09:02.648582
Transaction Length: 1
Severity: High
Contract: CollateralPool
Function name: getFeeRateAll()
PC address: 2676
Estimated Gas Usage: 4184 - 7627
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc7c5E7d7d5C6e49Be1CC835ac67E774e164D7811.sol:1263

function getFeeRateAll()public view returns (uint32[] memory){

        return FeeRates;

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:23:44.350242
Transaction Length: 1
Severity: High
Contract: CollateralPool
Function name: getCollateralAndPremiumBalances(address,uint256,address[],uint256[],uint256[])
PC address: 3660
Estimated Gas Usage: 445 - 540
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc7c5E7d7d5C6e49Be1CC835ac67E774e164D7811.sol:9

e: contracts\modules\

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:23:49.132266
Transaction Length: 1
Severity: High
Contract: CollateralPool
Function name: getCollateralAndPremiumBalances(address,uint256,address[],uint256[],uint256[])
PC address: 3662
Estimated Gas Usage: 445 - 540
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc7c5E7d7d5C6e49Be1CC835ac67E774e164D7811.sol:3



*/



// File: contracts\modules\S

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:24:26.000177
Transaction Length: 1
Severity: High
Contract: CollateralPool
Function name: getCollateralAndPremiumBalances(address,uint256,address[],uint256[],uint256[])
PC address: 3808
Estimated Gas Usage: 778 - 3555
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc7c5E7d7d5C6e49Be1CC835ac67E774e164D7811.sol:9

e: contracts\modules\

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:24:34.517454
Transaction Length: 1
Severity: High
Contract: CollateralPool
Function name: getCollateralAndPremiumBalances(address,uint256,address[],uint256[],uint256[])
PC address: 3810
Estimated Gas Usage: 778 - 3555
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc7c5E7d7d5C6e49Be1CC835ac67E774e164D7811.sol:3



*/



// File: contracts\modules\S

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:05:56.189875
Transaction Length: 1
Severity: Low
Contract: CollateralPool
Function name: calculateFee(uint256,uint256)
PC address: 10987
Estimated Gas Usage: 760 - 855
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xc7c5E7d7d5C6e49Be1CC835ac67E774e164D7811.sol:1369

FeeRates[feeType]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:44.041452
Transaction Length: 1
Severity: High
Contract: CollateralPool
Function name: getFeeRateAll()
PC address: 11416
Estimated Gas Usage: 1715 - 2613
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc7c5E7d7d5C6e49Be1CC835ac67E774e164D7811.sol:1265

return FeeRates

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:31.341035
Transaction Length: 1
Severity: High
Contract: CollateralPool
Function name: getFeeRateAll()
PC address: 11429
Estimated Gas Usage: 1715 - 2613
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc7c5E7d7d5C6e49Be1CC835ac67E774e164D7811.sol:1265

return FeeRates

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:47.095185
Transaction Length: 1
Severity: High
Contract: CollateralPool
Function name: getFeeRateAll()
PC address: 11443
Estimated Gas Usage: 1715 - 2613
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc7c5E7d7d5C6e49Be1CC835ac67E774e164D7811.sol:1265

return FeeRates

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x2b84ac57440941a1219fb5c020f3a4ac134a736c.sol
Total states:149
2.75554
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xC6d7522545671b161D5CE9ff7586e5daCB2aA987.sol
Total states:272
72.521327
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.082632
Transaction Length: 0
Severity: High
Contract: FarmPrdzRfi96
Function name: constructor
PC address: 430
Estimated Gas Usage: 82565 - 406328
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xC6d7522545671b161D5CE9ff7586e5daCB2aA987.sol:38

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.526006
Transaction Length: 0
Severity: Low
Contract: FarmPrdzRfi96
Function name: constructor
PC address: 444
Estimated Gas Usage: 82575 - 406338
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xC6d7522545671b161D5CE9ff7586e5daCB2aA987.sol:39

assert(c >= a)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x619108560f0a3a0f2b38840b40e9456070294fa02.sol
Total states:426
0.786882
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x576773cd0b51294997ec4e4ff96c93d5e3ae9038.sol
Total states:2476
4.168774
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x3ddbbfb6f2003f670735bcd44beadd0e0056df99.sol
Total states:11074
27.368293
==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.694070
Transaction Length: 1
Severity: High
Contract: pBASEDPYLONVault
Function name: availableWithdraw(address)
PC address: 1955
Estimated Gas Usage: 1110 - 1395
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0x3ddbbfb6f2003f670735bcd44beadd0e0056df99.sol:642

_rewardCount - 1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.615425
Transaction Length: 1
Severity: Low
Contract: pBASEDPYLONVault
Function name: addressIndices(uint256)
PC address: 2467
Estimated Gas Usage: 679 - 774
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x3ddbbfb6f2003f670735bcd44beadd0e0056df99.sol:458

address[] public addressIndices

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.426803
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3244
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3ddbbfb6f2003f670735bcd44beadd0e0056df99.sol:214

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.424518
Transaction Length: 1
Severity: High
Contract: pBASEDPYLONVault
Function name: deposit(uint256)
PC address: 5816
Estimated Gas Usage: 11866 - 52386
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3ddbbfb6f2003f670735bcd44beadd0e0056df99.sol:252

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x457a04d3ec4314eeaff263502a212a35f19d59d7.sol
Total states:30
0.243891
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x8a6c1dda95a802eae1267439c91cdb2a3a7009b0.sol
Total states:426
0.667744
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x5f8a35021f1c9be802000ca141d7eeee577df7fd.sol
Total states:426
0.599027
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xcafc98f5fab7a171634c2330151fbc3c256e331a.sol
Total states:12965
85.740739
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.642324
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleAccess
Function name: interpolate(uint256,uint256,uint256,uint256,uint256)
PC address: 2339
Estimated Gas Usage: 997 - 1848
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcafc98f5fab7a171634c2330151fbc3c256e331a.sol:148

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:25.475000
Transaction Length: 1
Severity: Low
Contract: LidStaking
Function name: stakeHandlers(uint256)
PC address: 6118
Estimated Gas Usage: 790 - 885
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xcafc98f5fab7a171634c2330151fbc3c256e331a.sol:405

IStakeHandler[] public stakeHandlers

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.667074
Transaction Length: 2
Severity: High
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6315
Estimated Gas Usage: 1699 - 2124
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0xcafc98f5fab7a171634c2330151fbc3c256e331a.sol:555

stakeHandlers.length-1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:07.612326
Transaction Length: 2
Severity: Low
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6326
Estimated Gas Usage: 1709 - 2134
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xcafc98f5fab7a171634c2330151fbc3c256e331a.sol:555

stakeHandlers[stakeHandlers.length-1]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.430408
Transaction Length: 1
Severity: High
Contract: LidStaking
Function name: findTaxAmount(uint256,uint256)
PC address: 13348
Estimated Gas Usage: 474 - 569
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcafc98f5fab7a171634c2330151fbc3c256e331a.sol:148

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x7f784fd50a648702bc3970cbf1e9b80a9e56a4db.sol
Total states:36397
207.409461
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.047663
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1004
Estimated Gas Usage: 417 - 512
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x7f784fd50a648702bc3970cbf1e9b80a9e56a4db.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.713314
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1006
Estimated Gas Usage: 417 - 512
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x7f784fd50a648702bc3970cbf1e9b80a9e56a4db.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.764139
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1089
Estimated Gas Usage: 593 - 688
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x7f784fd50a648702bc3970cbf1e9b80a9e56a4db.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:18.763450
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1091
Estimated Gas Usage: 593 - 688
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x7f784fd50a648702bc3970cbf1e9b80a9e56a4db.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.835135
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1272
Estimated Gas Usage: 462 - 557
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x7f784fd50a648702bc3970cbf1e9b80a9e56a4db.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.506184
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1274
Estimated Gas Usage: 462 - 557
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x7f784fd50a648702bc3970cbf1e9b80a9e56a4db.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.758922
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1357
Estimated Gas Usage: 638 - 733
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x7f784fd50a648702bc3970cbf1e9b80a9e56a4db.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:17.797452
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1359
Estimated Gas Usage: 638 - 733
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x7f784fd50a648702bc3970cbf1e9b80a9e56a4db.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.131803
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleAccess
Function name: interpolate(uint256,uint256,uint256,uint256,uint256)
PC address: 2313
Estimated Gas Usage: 997 - 1848
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x7f784fd50a648702bc3970cbf1e9b80a9e56a4db.sol:162

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.797660
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeBP(uint256)
PC address: 2585
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x7f784fd50a648702bc3970cbf1e9b80a9e56a4db.sol:784

uint[] public bonusRangeBP

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.393330
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3783
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x7f784fd50a648702bc3970cbf1e9b80a9e56a4db.sol:1266

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:03.818672
Transaction Length: 2
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3783
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x7f784fd50a648702bc3970cbf1e9b80a9e56a4db.sol:1266

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:33.713692
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeStart(uint256)
PC address: 6017
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x7f784fd50a648702bc3970cbf1e9b80a9e56a4db.sol:783

uint[] public bonusRangeStart

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:42.436543
Transaction Length: 1
Severity: Low
Contract: LidStaking
Function name: stakeHandlers(uint256)
PC address: 6118
Estimated Gas Usage: 790 - 885
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x7f784fd50a648702bc3970cbf1e9b80a9e56a4db.sol:962

IStakeHandler[] public stakeHandlers

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.656334
Transaction Length: 2
Severity: High
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6315
Estimated Gas Usage: 1699 - 2124
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0x7f784fd50a648702bc3970cbf1e9b80a9e56a4db.sol:1112

stakeHandlers.length-1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:08.355490
Transaction Length: 2
Severity: Low
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6326
Estimated Gas Usage: 1709 - 2134
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x7f784fd50a648702bc3970cbf1e9b80a9e56a4db.sol:1112

stakeHandlers[stakeHandlers.length-1]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:30.005619
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: calculateRatePerEth(uint256,uint256,uint256)
PC address: 6866
Estimated Gas Usage: 955 - 1050
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x7f784fd50a648702bc3970cbf1e9b80a9e56a4db.sol:162

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:15.005035
Transaction Length: 1
Severity: High
Contract: LidStaking
Function name: findTaxAmount(uint256,uint256)
PC address: 13348
Estimated Gas Usage: 474 - 569
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x7f784fd50a648702bc3970cbf1e9b80a9e56a4db.sol:162

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:29.034003
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPoolBPs(uint256)
PC address: 15438
Estimated Gas Usage: 722 - 817
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x7f784fd50a648702bc3970cbf1e9b80a9e56a4db.sol:1267

uint[] public tokenPoolBPs

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xe539893109ad320b6b02f59d11f06b56aa6f8603.sol
Total states:3990
544.654151
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.233862
Transaction Length: 1
Severity: High
Contract: DtaPool
Function name: transferAmount(address,uint256,string)
PC address: 619
Estimated Gas Usage: 446 - 541
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xe539893109ad320b6b02f59d11f06b56aa6f8603.sol:3

*/

//pragma solidity >=0.5.0 <0.8.

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:48.911167
Transaction Length: 1
Severity: High
Contract: DtaPool
Function name: allDate()
PC address: 1205
Estimated Gas Usage: 1250 - 2097
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xe539893109ad320b6b02f59d11f06b56aa6f8603.sol:207

function allDate() public view returns (uint[] memory) {
        return dateList;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:59.992086
Transaction Length: 1
Severity: High
Contract: DtaPool
Function name: allDate()
PC address: 1245
Estimated Gas Usage: 1400 - 2623
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xe539893109ad320b6b02f59d11f06b56aa6f8603.sol:207

function allDate() public view returns (uint[] memory) {
        return dateList;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:25.948024
Transaction Length: 1
Severity: High
Contract: DtaPool
Function name: stake(string,uint256,address)
PC address: 1341
Estimated Gas Usage: 407 - 502
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xe539893109ad320b6b02f59d11f06b56aa6f8603.sol:3

*/

//pragma solidity >=0.5.0 <0.8.

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:58.315952
Transaction Length: 1
Severity: High
Contract: DtaPool
Function name: allUserAddress(address)
PC address: 2074
Estimated Gas Usage: 1077 - 4228
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xe539893109ad320b6b02f59d11f06b56aa6f8603.sol:210

function allUserAddress(address addr) public view returns (address[] memory) {
        address[] memory addrList = new address[](100);
        uint8 flag = 0;
        for (uint i = 0; i < pllist.length; i++) {
            address s = pllist[i];
            if(pledgors[s].superiorAddr == addr && flag < 99){
              addrList[flag] = s;
              flag += 1;
            }
        }
        return addrList;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:27.705008
Transaction Length: 1
Severity: High
Contract: DtaPool
Function name: allUserAddress(address)
PC address: 2114
Estimated Gas Usage: 1227 - 4754
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xe539893109ad320b6b02f59d11f06b56aa6f8603.sol:210

function allUserAddress(address addr) public view returns (address[] memory) {
        address[] memory addrList = new address[](100);
        uint8 flag = 0;
        for (uint i = 0; i < pllist.length; i++) {
            address s = pllist[i];
            if(pledgors[s].superiorAddr == addr && flag < 99){
              addrList[flag] = s;
              flag += 1;
            }
        }
        return addrList;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:25.202334
Transaction Length: 1
Severity: High
Contract: DtaPool
Function name: allAddress()
PC address: 2169
Estimated Gas Usage: 1316 - 2163
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xe539893109ad320b6b02f59d11f06b56aa6f8603.sol:204

function allAddress() public view returns (address[] memory) {
        return pllist;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:49.788982
Transaction Length: 1
Severity: High
Contract: DtaPool
Function name: allAddress()
PC address: 2209
Estimated Gas Usage: 1466 - 2689
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xe539893109ad320b6b02f59d11f06b56aa6f8603.sol:204

function allAddress() public view returns (address[] memory) {
        return pllist;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:15.934969
Transaction Length: 1
Severity: High
Contract: DtaPool
Function name: leave(string,uint256)
PC address: 2488
Estimated Gas Usage: 384 - 479
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xe539893109ad320b6b02f59d11f06b56aa6f8603.sol:3

*/

//pragma solidity >=0.5.0 <0.8.

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:14.469899
Transaction Length: 1
Severity: Low
Contract: DtaPool
Function name: pledgor(uint256)
PC address: 4331
Estimated Gas Usage: 746 - 841
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xe539893109ad320b6b02f59d11f06b56aa6f8603.sol:40

Pledgor[] public pledgor

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:56.392329
Transaction Length: 1
Severity: Low
Contract: DtaPool
Function name: dateList(uint256)
PC address: 7240
Estimated Gas Usage: 767 - 862
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xe539893109ad320b6b02f59d11f06b56aa6f8603.sol:57

uint[] public dateList

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:56.815838
Transaction Length: 1
Severity: Low
Contract: DtaPool
Function name: pllist(uint256)
PC address: 7275
Estimated Gas Usage: 789 - 884
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xe539893109ad320b6b02f59d11f06b56aa6f8603.sol:44

address[] public pllist

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:08.305698
Transaction Length: 1
Severity: Low
Contract: DtaPool
Function name: snapshot(uint256)
PC address: 7413
Estimated Gas Usage: 701 - 796
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xe539893109ad320b6b02f59d11f06b56aa6f8603.sol:55

Snapshot[] public snapshot

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:05:41.089191
Transaction Length: 1
Severity: Low
Contract: DtaPool
Function name: approveUser(address)
PC address: 8303
Estimated Gas Usage: 1550 - 2446
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0xe539893109ad320b6b02f59d11f06b56aa6f8603.sol:188

_token.approve(addr,21000000)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xf01e3a1f7bca16145afd03538bd7a28f249fc366.sol
Total states:475
5.904931
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x7e8d536600d2a66321f8a02ddc9763520200145d.sol
Total states:1880
91.718065
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.264742
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShip(address[])
PC address: 360
Estimated Gas Usage: 342 - 437
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x7e8d536600d2a66321f8a02ddc9763520200145d.sol:5

penzeppelin-solidity/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.580905
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShip(address[])
PC address: 362
Estimated Gas Usage: 342 - 437
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x7e8d536600d2a66321f8a02ddc9763520200145d.sol:3

*/

// File: openzeppelin-solidity/c

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:36.834508
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShipWithHowMany(address[],uint256)
PC address: 776
Estimated Gas Usage: 341 - 436
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x7e8d536600d2a66321f8a02ddc9763520200145d.sol:5

penzeppelin-solidity/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:39.627699
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShipWithHowMany(address[],uint256)
PC address: 778
Estimated Gas Usage: 341 - 436
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x7e8d536600d2a66321f8a02ddc9763520200145d.sol:3

*/

// File: openzeppelin-solidity/c

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:29.320792
Transaction Length: 1
Severity: Low
Contract: BeneficiaryOperations
Function name: allOperations(uint256)
PC address: 1715
Estimated Gas Usage: 701 - 796
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x7e8d536600d2a66321f8a02ddc9763520200145d.sol:386

bytes32[] public allOperations

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:26.701883
Transaction Length: 1
Severity: Low
Contract: BeneficiaryOperations
Function name: beneficiaries(uint256)
PC address: 4636
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x7e8d536600d2a66321f8a02ddc9763520200145d.sol:385

address[] public beneficiaries

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x26018c89851f49cbb75dad8a98c91bcae54e7106.sol
Total states:34465
241.552748
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xcd73e07b6ce1f37138226d45c5237d37e2fd214f.sol
Total states:1371
44.452857
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.339918
Transaction Length: 1
Severity: High
Contract: Referrers
Function name: removeReferrers(address[])
PC address: 291
Estimated Gas Usage: 340 - 435
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcd73e07b6ce1f37138226d45c5237d37e2fd214f.sol:9

e: @openzeppelin/cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.095446
Transaction Length: 1
Severity: High
Contract: Referrers
Function name: removeReferrers(address[])
PC address: 293
Estimated Gas Usage: 340 - 435
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcd73e07b6ce1f37138226d45c5237d37e2fd214f.sol:3



*/



// File: @openzeppelin/contr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:14.792965
Transaction Length: 1
Severity: High
Contract: Referrers
Function name: addReferrers(address[])
PC address: 475
Estimated Gas Usage: 362 - 457
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcd73e07b6ce1f37138226d45c5237d37e2fd214f.sol:9

e: @openzeppelin/cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:17.738244
Transaction Length: 1
Severity: High
Contract: Referrers
Function name: addReferrers(address[])
PC address: 477
Estimated Gas Usage: 362 - 457
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcd73e07b6ce1f37138226d45c5237d37e2fd214f.sol:3



*/



// File: @openzeppelin/contr

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x7ebDE181513CF2e24DF9e179cfceF4Ca9862f295.sol
Total states:4267
145.586813
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.661787
Transaction Length: 1
Severity: High
Contract: HCurve
Function name: addLiquidity(address,address,uint256[],uint256)
PC address: 862
Estimated Gas Usage: 382 - 477
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x7ebDE181513CF2e24DF9e179cfceF4Ca9862f295.sol:5

ocalhost/contracts/ha

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.620247
Transaction Length: 1
Severity: High
Contract: HCurve
Function name: addLiquidity(address,address,uint256[],uint256)
PC address: 864
Estimated Gas Usage: 382 - 477
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x7ebDE181513CF2e24DF9e179cfceF4Ca9862f295.sol:3

*/

// File: localhost/contracts/han

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:15.009215
Transaction Length: 1
Severity: High
Contract: HCurve
Function name: addLiquidityZap(address,uint256[],uint256)
PC address: 1035
Estimated Gas Usage: 393 - 488
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x7ebDE181513CF2e24DF9e179cfceF4Ca9862f295.sol:5

ocalhost/contracts/ha

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:19.978408
Transaction Length: 1
Severity: High
Contract: HCurve
Function name: addLiquidityZap(address,uint256[],uint256)
PC address: 1037
Estimated Gas Usage: 393 - 488
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x7ebDE181513CF2e24DF9e179cfceF4Ca9862f295.sol:3

*/

// File: localhost/contracts/han

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:09.516708
Transaction Length: 1
Severity: High
Contract: HCurve
Function name: swap(address,address,uint256,uint256,uint256[],uint256)
PC address: 1250
Estimated Gas Usage: 502 - 597
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x7ebDE181513CF2e24DF9e179cfceF4Ca9862f295.sol:5

ocalhost/contracts/ha

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:14.162272
Transaction Length: 1
Severity: High
Contract: HCurve
Function name: swap(address,address,uint256,uint256,uint256[],uint256)
PC address: 1252
Estimated Gas Usage: 502 - 597
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x7ebDE181513CF2e24DF9e179cfceF4Ca9862f295.sol:3

*/

// File: localhost/contracts/han

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x7b63771fdc7ae30bad88b84cf902161ef3c39f80.sol
Total states:3620
5.795703
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xe9a5a5efcc2115d5b95d8b871b5f4361e614866f.sol
Total states:654
0.540231
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x40941b4ac3bb204c4dfd37cd5124ed7d4dbe5228.sol
Total states:426
0.757624
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xeb02a1b9981b771dbf53500a9ba9bc01469452c3.sol
Total states:77
3.100146
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xcd0957127d271d77bd0476d9e97873378eb14c44.sol
Total states:3786
164.614519
==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:00.870860
Transaction Length: 1
Severity: Medium
Contract: MerkleTreeWithHistory
Function name: hashLeftRight(uint256,uint256)
PC address: 582
Estimated Gas Usage: 3995 - 74061
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 1428
Offset: 1643
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../new/0xcd0957127d271d77bd0476d9e97873378eb14c44.sol:131

function hashLeftRight(uint256 left, uint256 right) public pure returns (uint256 mimc_hash) {
    uint256 k = 21888242871839275222246405745257275088548364400416034343698204186575808495617;
    uint256 R = 0;
    uint256 C = 0;

    R = addmod(R, left, k);
    (R, C) = MiMC.MiMCSponge(R, C, 0);

    R = addmod(R, right, k);
    (R, C) = MiMC.MiMCSponge(R, C, 0);

    mimc_hash = R;
  }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.421559
Transaction Length: 1
Severity: High
Contract: MerkleTreeWithHistory
Function name: initialize(uint256,uint256,uint256[],uint256)
PC address: 756
Estimated Gas Usage: 416 - 511
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcd0957127d271d77bd0476d9e97873378eb14c44.sol:6

88P                  

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.977637
Transaction Length: 1
Severity: High
Contract: MerkleTreeWithHistory
Function name: initialize(uint256,uint256,uint256[],uint256)
PC address: 758
Estimated Gas Usage: 416 - 511
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcd0957127d271d77bd0476d9e97873378eb14c44.sol:3

*/

/*
* d888888P                   

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.613766
Transaction Length: 1
Severity: High
Contract: Mixer
Function name: migrateState(uint256[],uint256[])
PC address: 1082
Estimated Gas Usage: 452 - 547
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcd0957127d271d77bd0476d9e97873378eb14c44.sol:6

88P                  

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.427662
Transaction Length: 1
Severity: High
Contract: Mixer
Function name: migrateState(uint256[],uint256[])
PC address: 1084
Estimated Gas Usage: 452 - 547
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcd0957127d271d77bd0476d9e97873378eb14c44.sol:3

*/

/*
* d888888P                   

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.190139
Transaction Length: 1
Severity: High
Contract: Mixer
Function name: migrateState(uint256[],uint256[])
PC address: 1167
Estimated Gas Usage: 628 - 723
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcd0957127d271d77bd0476d9e97873378eb14c44.sol:6

88P                  

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:27.082376
Transaction Length: 1
Severity: High
Contract: Mixer
Function name: migrateState(uint256[],uint256[])
PC address: 1169
Estimated Gas Usage: 628 - 723
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcd0957127d271d77bd0476d9e97873378eb14c44.sol:3

*/

/*
* d888888P                   

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:37.144868
Transaction Length: 1
Severity: High
Contract: Mixer
Function name: initialize(address,uint256,uint8,uint256,address,uint256[],uint256)
PC address: 1506
Estimated Gas Usage: 516 - 611
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcd0957127d271d77bd0476d9e97873378eb14c44.sol:6

88P                  

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:41.631436
Transaction Length: 1
Severity: High
Contract: Mixer
Function name: initialize(address,uint256,uint8,uint256,address,uint256[],uint256)
PC address: 1508
Estimated Gas Usage: 516 - 611
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcd0957127d271d77bd0476d9e97873378eb14c44.sol:3

*/

/*
* d888888P                   

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:04.369022
Transaction Length: 1
Severity: High
Contract: Mixer
Function name: zeros()
PC address: 1757
Estimated Gas Usage: 1272 - 2119
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcd0957127d271d77bd0476d9e97873378eb14c44.sol:218

function zeros() public view returns(uint256[] memory) {
    return _zeros;
  }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:13.149666
Transaction Length: 1
Severity: High
Contract: Mixer
Function name: zeros()
PC address: 1797
Estimated Gas Usage: 1422 - 2645
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcd0957127d271d77bd0476d9e97873378eb14c44.sol:218

function zeros() public view returns(uint256[] memory) {
    return _zeros;
  }

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:37.215746
Transaction Length: 1
Severity: Low
Contract: MerkleTreeWithHistory
Function name: isKnownRoot(uint256)
PC address: 2427
Estimated Gas Usage: 1188 - 1283
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xcd0957127d271d77bd0476d9e97873378eb14c44.sol:180

_roots[i]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:41.763069
Transaction Length: 1
Severity: Low
Contract: MerkleTreeWithHistory
Function name: getLastRoot()
PC address: 2577
Estimated Gas Usage: 1065 - 1160
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xcd0957127d271d77bd0476d9e97873378eb14c44.sol:207

_roots[current_root]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:22.386489
Transaction Length: 1
Severity: High
Contract: MerkleTreeWithHistory
Function name: initialize(uint256,uint256,uint256[],uint256)
PC address: 2640
Estimated Gas Usage: 35003 - 161970
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcd0957127d271d77bd0476d9e97873378eb14c44.sol:101

contract MerkleTreeWithHistory is Initializable {
  uint256 public levels;

  uint8 constant ROOT_HISTORY_SIZE = 100;
  uint256[] private _roots;
  uint256 public current_root = 0;

  uint256[] private _filled_subtrees;
  uint256[] private _zeros;

  uint32 public next_index = 0;

  function initialize(
    uint256 tree_levels,
    uint256 zero_value,
    uint256[] memory filled_subtrees,
    uint256 lastRoot
  ) initializer public {
    levels = tree_levels;
    _zeros.push(zero_value);

    for (uint8 i = 1; i < levels; i++) {
      _zeros.push(hashLeftRight(_zeros[i-1], _zeros[i-1]));
    }

    _roots = new uint256[](ROOT_HISTORY_SIZE);
    _filled_subtrees = filled_subtrees;
    _roots[0] = lastRoot;
  }

  function hashLeftRight(uint256 left, uint256 right) public pure returns (uint256 mimc_hash) {
    uint256 k = 21888242871839275222246405745257275088548364400416034343698204186575808495617;
    uint256 R = 0;
    uint256 C = 0;

    R = addmod(R, left, k);
    (R, C) = MiMC.MiMCSponge(R, C, 0);

    R = addmod(R, right, k);
    (R, C) = MiMC.MiMCSponge(R, C, 0);

    mimc_hash = R;
  }

  function _insert(uint256 leaf) internal {
    uint32 current_index = next_index;
    require(current_index != 2**(levels - 1), "Merkle tree is full");
    next_index += 1;
    uint256 current_level_hash = leaf;
    uint256 left;
    uint256 right;

    for (uint256 i = 0; i < levels; i++) {
      if (current_index % 2 == 0) {
        left = current_level_hash;
        right = _zeros[i];

        _filled_subtrees[i] = current_level_hash;
      } else {
        left = _filled_subtrees[i];
        right = current_level_hash;
      }

      current_level_hash = hashLeftRight(left, right);

      current_index /= 2;
    }

    current_root = (current_root + 1) % ROOT_HISTORY_SIZE;
    _roots[current_root] = current_level_hash;
  }

  function isKnownRoot(uint256 root) public view returns(bool) {
    if (root == 0) {
      return false;
    }
    // search most recent first
    uint256 i;
    for(i = current_root; i < 2**256 - 1; i--) {
      if (root == _roots[i]) {
        return true;
      }
    }

    // process the rest of roots
    for(i = ROOT_HISTORY_SIZE - 1; i > current_root; i--) {
      if (root == _roots[i]) {
        return true;
      }
    }
    return false;

    // or we can do that in other way
    //   uint256 i = _current_root;
    //   do {
    //       if (root == _roots[i]) {
    //           return true;
    //       }
    //       if (i == 0) {
    //           i = ROOT_HISTORY_SIZE;
    //       }
    //       i--;
    //   } while (i != _current_root);
  }

  function getLastRoot() public view returns(uint256) {
    return _roots[current_root];
  }

  function roots() public view returns(uint256[] memory) {
    return _roots;
  }

  function filled_subtrees() public view returns(uint256[] memory) {
    return _filled_subtrees;
  }

  function zeros() public view returns(uint256[] memory) {
    return _zeros;
  }
}

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:20.379721
Transaction Length: 1
Severity: High
Contract: MerkleTreeWithHistory
Function name: initialize(uint256,uint256,uint256[],uint256)
PC address: 2642
Estimated Gas Usage: 35003 - 161970
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcd0957127d271d77bd0476d9e97873378eb14c44.sol:101

contract MerkleTreeWithHistory is Initializable {
  uint256 public levels;

  uint8 constant ROOT_HISTORY_SIZE = 100;
  uint256[] private _roots;
  uint256 public current_root = 0;

  uint256[] private _filled_subtrees;
  uint256[] private _zeros;

  uint32 public next_index = 0;

  function initialize(
    uint256 tree_levels,
    uint256 zero_value,
    uint256[] memory filled_subtrees,
    uint256 lastRoot
  ) initializer public {
    levels = tree_levels;
    _zeros.push(zero_value);

    for (uint8 i = 1; i < levels; i++) {
      _zeros.push(hashLeftRight(_zeros[i-1], _zeros[i-1]));
    }

    _roots = new uint256[](ROOT_HISTORY_SIZE);
    _filled_subtrees = filled_subtrees;
    _roots[0] = lastRoot;
  }

  function hashLeftRight(uint256 left, uint256 right) public pure returns (uint256 mimc_hash) {
    uint256 k = 21888242871839275222246405745257275088548364400416034343698204186575808495617;
    uint256 R = 0;
    uint256 C = 0;

    R = addmod(R, left, k);
    (R, C) = MiMC.MiMCSponge(R, C, 0);

    R = addmod(R, right, k);
    (R, C) = MiMC.MiMCSponge(R, C, 0);

    mimc_hash = R;
  }

  function _insert(uint256 leaf) internal {
    uint32 current_index = next_index;
    require(current_index != 2**(levels - 1), "Merkle tree is full");
    next_index += 1;
    uint256 current_level_hash = leaf;
    uint256 left;
    uint256 right;

    for (uint256 i = 0; i < levels; i++) {
      if (current_index % 2 == 0) {
        left = current_level_hash;
        right = _zeros[i];

        _filled_subtrees[i] = current_level_hash;
      } else {
        left = _filled_subtrees[i];
        right = current_level_hash;
      }

      current_level_hash = hashLeftRight(left, right);

      current_index /= 2;
    }

    current_root = (current_root + 1) % ROOT_HISTORY_SIZE;
    _roots[current_root] = current_level_hash;
  }

  function isKnownRoot(uint256 root) public view returns(bool) {
    if (root == 0) {
      return false;
    }
    // search most recent first
    uint256 i;
    for(i = current_root; i < 2**256 - 1; i--) {
      if (root == _roots[i]) {
        return true;
      }
    }

    // process the rest of roots
    for(i = ROOT_HISTORY_SIZE - 1; i > current_root; i--) {
      if (root == _roots[i]) {
        return true;
      }
    }
    return false;

    // or we can do that in other way
    //   uint256 i = _current_root;
    //   do {
    //       if (root == _roots[i]) {
    //           return true;
    //       }
    //       if (i == 0) {
    //           i = ROOT_HISTORY_SIZE;
    //       }
    //       i--;
    //   } while (i != _current_root);
  }

  function getLastRoot() public view returns(uint256) {
    return _roots[current_root];
  }

  function roots() public view returns(uint256[] memory) {
    return _roots;
  }

  function filled_subtrees() public view returns(uint256[] memory) {
    return _filled_subtrees;
  }

  function zeros() public view returns(uint256[] memory) {
    return _zeros;
  }
}

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x0b635CD35fC3AF8eA29f84155FA03dC9AD0Bab27.sol
Total states:3409
243.95485
==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:30.431546
Transaction Length: 1
Severity: High
Contract: Math
Function name: safeSub(uint256,uint256)
PC address: 820
Estimated Gas Usage: 309 - 404
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0x0b635CD35fC3AF8eA29f84155FA03dC9AD0Bab27.sol:109

x - y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:31.272342
Transaction Length: 1
Severity: High
Contract: Memberlist
Function name: updateMembers(address[],uint256)
PC address: 827
Estimated Gas Usage: 407 - 502
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x0b635CD35fC3AF8eA29f84155FA03dC9AD0Bab27.sol:5

d using https://dapp.

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:33.993648
Transaction Length: 1
Severity: High
Contract: Memberlist
Function name: updateMembers(address[],uint256)
PC address: 829
Estimated Gas Usage: 407 - 502
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x0b635CD35fC3AF8eA29f84155FA03dC9AD0Bab27.sol:3

*/

// Verified using https://dapp.t

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:32.490083
Transaction Length: 1
Severity: Low
Contract: Math
Function name: safeDiv(uint256,uint256)
PC address: 959
Estimated Gas Usage: 324 - 419
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x0b635CD35fC3AF8eA29f84155FA03dC9AD0Bab27.sol:117

x / y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.054189
Transaction Length: 1
Severity: High
Contract: Math
Function name: rdiv(uint256,uint256)
PC address: 985
Estimated Gas Usage: 382 - 477
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x0b635CD35fC3AF8eA29f84155FA03dC9AD0Bab27.sol:113

x * y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:20.042929
Transaction Length: 1
Severity: High
Contract: Math
Function name: rdiv(uint256,uint256)
PC address: 1128
Estimated Gas Usage: 496 - 591
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x0b635CD35fC3AF8eA29f84155FA03dC9AD0Bab27.sol:105

x + y

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:40.602019
Transaction Length: 1
Severity: High
Contract: Memberlist
Function name: safeSub(uint256,uint256)
PC address: 2809
Estimated Gas Usage: 332 - 427
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0x0b635CD35fC3AF8eA29f84155FA03dC9AD0Bab27.sol:109

x - y

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:54.870566
Transaction Length: 1
Severity: Low
Contract: Memberlist
Function name: safeDiv(uint256,uint256)
PC address: 2948
Estimated Gas Usage: 347 - 442
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x0b635CD35fC3AF8eA29f84155FA03dC9AD0Bab27.sol:117

x / y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.315775
Transaction Length: 1
Severity: High
Contract: Memberlist
Function name: rdiv(uint256,uint256)
PC address: 2998
Estimated Gas Usage: 450 - 545
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x0b635CD35fC3AF8eA29f84155FA03dC9AD0Bab27.sol:113

x * y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.501113
Transaction Length: 1
Severity: High
Contract: Memberlist
Function name: rdiv(uint256,uint256)
PC address: 3141
Estimated Gas Usage: 564 - 659
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x0b635CD35fC3AF8eA29f84155FA03dC9AD0Bab27.sol:105

x + y

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol
Total states:21393
1077.966171
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.416681
Transaction Length: 1
Severity: High
Contract: Module
Function name: getModuleAddress(string)
PC address: 416
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.670679
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 511
Estimated Gas Usage: 364 - 459
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.105389
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 513
Estimated Gas Usage: 364 - 459
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.031196
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 596
Estimated Gas Usage: 540 - 635
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:18.089723
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 598
Estimated Gas Usage: 540 - 635
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:31.230080
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 681
Estimated Gas Usage: 716 - 811
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:52.585932
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 683
Estimated Gas Usage: 716 - 811
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:11.585252
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 766
Estimated Gas Usage: 892 - 987
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:42.033568
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 768
Estimated Gas Usage: 892 - 987
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.748726
Transaction Length: 1
Severity: High
Contract: CompoundProtocol
Function name: handleDeposit(address[],uint256[])
PC address: 1413
Estimated Gas Usage: 430 - 525
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.379169
Transaction Length: 1
Severity: High
Contract: CompoundProtocol_USDC
Function name: handleDeposit(address[],uint256[])
PC address: 1413
Estimated Gas Usage: 430 - 525
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.250601
Transaction Length: 1
Severity: High
Contract: CompoundProtocol
Function name: handleDeposit(address[],uint256[])
PC address: 1415
Estimated Gas Usage: 430 - 525
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.064876
Transaction Length: 1
Severity: High
Contract: CompoundProtocol_USDC
Function name: handleDeposit(address[],uint256[])
PC address: 1415
Estimated Gas Usage: 430 - 525
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:13.502379
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: getModuleAddress(string)
PC address: 1453
Estimated Gas Usage: 451 - 546
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:15.968291
Transaction Length: 1
Severity: High
Contract: CompoundProtocol
Function name: handleDeposit(address[],uint256[])
PC address: 1561
Estimated Gas Usage: 763 - 3540
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:32.523651
Transaction Length: 1
Severity: High
Contract: CompoundProtocol_USDC
Function name: handleDeposit(address[],uint256[])
PC address: 1561
Estimated Gas Usage: 763 - 3540
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:28.338768
Transaction Length: 1
Severity: High
Contract: CompoundProtocol
Function name: handleDeposit(address[],uint256[])
PC address: 1563
Estimated Gas Usage: 763 - 3540
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:46.341223
Transaction Length: 1
Severity: High
Contract: CompoundProtocol_USDC
Function name: handleDeposit(address[],uint256[])
PC address: 1563
Estimated Gas Usage: 763 - 3540
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:48.863687
Transaction Length: 1
Severity: High
Contract: CompoundProtocol
Function name: getModuleAddress(string)
PC address: 1845
Estimated Gas Usage: 407 - 502
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:03.156918
Transaction Length: 1
Severity: High
Contract: CompoundProtocol_USDC
Function name: getModuleAddress(string)
PC address: 1845
Estimated Gas Usage: 407 - 502
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:14.329358
Transaction Length: 1
Severity: High
Contract: CompoundProtocol
Function name: withdraw(address,uint256[])
PC address: 2136
Estimated Gas Usage: 484 - 579
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:29.081970
Transaction Length: 1
Severity: High
Contract: CompoundProtocol_USDC
Function name: withdraw(address,uint256[])
PC address: 2136
Estimated Gas Usage: 484 - 579
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:17.927702
Transaction Length: 1
Severity: High
Contract: CompoundProtocol
Function name: withdraw(address,uint256[])
PC address: 2138
Estimated Gas Usage: 484 - 579
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:32.801416
Transaction Length: 1
Severity: High
Contract: CompoundProtocol_USDC
Function name: withdraw(address,uint256[])
PC address: 2138
Estimated Gas Usage: 484 - 579
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:16.555744
Transaction Length: 1
Severity: High
Contract: CompoundProtocol
Function name: supportedTokens()
PC address: 2569
Estimated Gas Usage: 988 - 4657
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol:1402

function supportedTokens() public view returns(address[] memory){
        address[] memory tokens = new address[](1);
        tokens[0] = address(baseToken);
        return tokens;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:29.429816
Transaction Length: 1
Severity: High
Contract: CompoundProtocol_USDC
Function name: supportedTokens()
PC address: 2569
Estimated Gas Usage: 988 - 4657
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol:1402

function supportedTokens() public view returns(address[] memory){
        address[] memory tokens = new address[](1);
        tokens[0] = address(baseToken);
        return tokens;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:39.481691
Transaction Length: 1
Severity: High
Contract: CompoundProtocol
Function name: supportedTokens()
PC address: 2609
Estimated Gas Usage: 1138 - 5183
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol:1402

function supportedTokens() public view returns(address[] memory){
        address[] memory tokens = new address[](1);
        tokens[0] = address(baseToken);
        return tokens;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:54.878350
Transaction Length: 1
Severity: High
Contract: CompoundProtocol_USDC
Function name: supportedTokens()
PC address: 2609
Estimated Gas Usage: 1138 - 5183
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol:1402

function supportedTokens() public view returns(address[] memory){
        address[] memory tokens = new address[](1);
        tokens[0] = address(baseToken);
        return tokens;
    }

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:55.809416
Transaction Length: 1
Severity: Low
Contract: CompoundProtocol
Function name: balanceOf(address)
PC address: 6632
Estimated Gas Usage: 2032 - 3163
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol:1379

cToken.balanceOfUnderlying(address(this))

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:01:17.158359
Transaction Length: 1
Severity: Low
Contract: CompoundProtocol_USDC
Function name: balanceOf(address)
PC address: 6632
Estimated Gas Usage: 2032 - 3163
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol:1379

cToken.balanceOfUnderlying(address(this))

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.765374
Transaction Length: 1
Severity: High
Contract: CompoundProtocol_USDC
Function name: normalizedBalance()
PC address: 16386
Estimated Gas Usage: 5661 - 43288
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol:294

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.692321
Transaction Length: 1
Severity: High
Contract: CompoundProtocol
Function name: normalizedBalance()
PC address: 16715
Estimated Gas Usage: 5661 - 43288
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x07CB94E333322327BAE229DD089BE2c77630254C.sol:294

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x2eb349a47633fd8c951be525dcbfefd9ca982703.sol
Total states:149
2.652848
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x5c99f74586D71d2C1063172CBd4aB317A31848F8.sol
Total states:18680
147.162807
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.827340
Transaction Length: 1
Severity: High
Contract: bestyearn
Function name: bulkTransfer(address[],uint256[])
PC address: 757
Estimated Gas Usage: 408 - 503
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5c99f74586D71d2C1063172CBd4aB317A31848F8.sol:5

olidity ^0.5.13;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.768219
Transaction Length: 1
Severity: High
Contract: bestyearn
Function name: bulkTransfer(address[],uint256[])
PC address: 759
Estimated Gas Usage: 408 - 503
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5c99f74586D71d2C1063172CBd4aB317A31848F8.sol:3

*/

//pragma solidity ^0.5.13;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.993617
Transaction Length: 1
Severity: High
Contract: bestyearn
Function name: bulkTransfer(address[],uint256[])
PC address: 842
Estimated Gas Usage: 584 - 679
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5c99f74586D71d2C1063172CBd4aB317A31848F8.sol:5

olidity ^0.5.13;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:24.041929
Transaction Length: 1
Severity: High
Contract: bestyearn
Function name: bulkTransfer(address[],uint256[])
PC address: 844
Estimated Gas Usage: 584 - 679
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5c99f74586D71d2C1063172CBd4aB317A31848F8.sol:3

*/

//pragma solidity ^0.5.13;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:36.778262
Transaction Length: 1
Severity: High
Contract: bestyearn
Function name: transferAndCall(address,uint256,bytes)
PC address: 1417
Estimated Gas Usage: 511 - 606
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5c99f74586D71d2C1063172CBd4aB317A31848F8.sol:3

*/

//pragma solidity ^0.5.13;
prag

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:45.059908
Transaction Length: 1
Severity: Low
Contract: bestyearn
Function name: unfreeze(uint256)
PC address: 6428
Estimated Gas Usage: 1375 - 1660
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x5c99f74586D71d2C1063172CBd4aB317A31848F8.sol:212

_burnedAmount * FLOAT_SCALAR / info.totalFrozen

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:27.754041
Transaction Length: 2
Severity: Low
Contract: bestyearn
Function name: unfreeze(uint256)
PC address: 6428
Estimated Gas Usage: 1375 - 1660
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x5c99f74586D71d2C1063172CBd4aB317A31848F8.sol:212

_burnedAmount * FLOAT_SCALAR / info.totalFrozen

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x269081c519c270a5e57f06e22c1c9e050d395d8e.sol
Total states:16226
2072.268353
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.361454
Transaction Length: 1
Severity: High
Contract: GameBalance
Function name: stringToUint(string)
PC address: 957
Estimated Gas Usage: 431 - 526
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x269081c519c270a5e57f06e22c1c9e050d395d8e.sol:3

*/

// File: @chainlink/contracts/s

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:33.524369
Transaction Length: 1
Severity: High
Contract: GameBalance
Function name: usernameAsHash(string)
PC address: 1322
Estimated Gas Usage: 430 - 525
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x269081c519c270a5e57f06e22c1c9e050d395d8e.sol:3

*/

// File: @chainlink/contracts/s

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:08:16.115877
Transaction Length: 1
Severity: High
Contract: GameBalance
Function name: hashToUser(bytes32)
PC address: 2104
Estimated Gas Usage: 1594 - 2819
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x269081c519c270a5e57f06e22c1c9e050d395d8e.sol:2158

mapping(bytes32 => string) public hashToUser

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:10:47.757017
Transaction Length: 1
Severity: High
Contract: GameBalance
Function name: receiveApproval(address,uint256,address,bytes)
PC address: 2445
Estimated Gas Usage: 499 - 594
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x269081c519c270a5e57f06e22c1c9e050d395d8e.sol:3

*/

// File: @chainlink/contracts/s

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:12:00.012050
Transaction Length: 1
Severity: High
Contract: GameBalance
Function name: receiveApproval(address,uint256,address,bytes)
PC address: 2487
Estimated Gas Usage: 1312 - 4605
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x269081c519c270a5e57f06e22c1c9e050d395d8e.sol:2498

function receiveApproval(address from, uint256 tokens, address token, bytes memory data) notPaused public payable returns (bool) {
        string memory username;

        (username) = abi.decode(data, (string));

        deposit(from, tokens, username);

        return true;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:13:04.886759
Transaction Length: 1
Severity: High
Contract: GameBalance
Function name: changeJobId(string)
PC address: 2748
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x269081c519c270a5e57f06e22c1c9e050d395d8e.sol:3

*/

// File: @chainlink/contracts/s

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:17:16.900187
Transaction Length: 1
Severity: High
Contract: GameBalance
Function name: usernameJobId()
PC address: 3336
Estimated Gas Usage: 483 - 1613
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x269081c519c270a5e57f06e22c1c9e050d395d8e.sol:2145

string public constant usernameJobId = "3736cccf3f444c12a78583fe4bb8f7dd"

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:21:43.894371
Transaction Length: 1
Severity: High
Contract: GameBalance
Function name: batchWithdraw(bytes)
PC address: 3525
Estimated Gas Usage: 406 - 501
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x269081c519c270a5e57f06e22c1c9e050d395d8e.sol:3

*/

// File: @chainlink/contracts/s

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:02.002883
Transaction Length: 2
Severity: High
Contract: GameBalance
Function name: withdraw(uint256)
PC address: 5339
Estimated Gas Usage: 1287 - 1712
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0x269081c519c270a5e57f06e22c1c9e050d395d8e.sol:2280

withdrawableEth - 500000000000000

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:04.379738
Transaction Length: 2
Severity: High
Contract: GameBalance
Function name: withdraw(uint256)
PC address: 5673
Estimated Gas Usage: 1729 - 2154
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0x269081c519c270a5e57f06e22c1c9e050d395d8e.sol:2263

withdrawableEth -= amount

--------------------

==== Unprotected Ether Withdrawal ====
SWC ID: 105
FOUND TIME: 0:00:11.876457
Transaction Length: 2
Severity: High
Contract: GameBalance
Function name: withdraw(uint256)
PC address: 5740
Estimated Gas Usage: 7281 - 28222
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: ../../new/0x269081c519c270a5e57f06e22c1c9e050d395d8e.sol:2267

_owner.transfer(amount)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:11:56.050546
Transaction Length: 1
Severity: High
Contract: GameBalance
Function name: hashToUser(bytes32)
PC address: 9731
Estimated Gas Usage: 1312 - 4605
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x269081c519c270a5e57f06e22c1c9e050d395d8e.sol:2158

mapping(bytes32 => string) public hashToUser

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:11:45.309964
Transaction Length: 1
Severity: High
Contract: GameBalance
Function name: receiveApproval(address,uint256,address,bytes)
PC address: 10023
Estimated Gas Usage: 1312 - 4605
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x269081c519c270a5e57f06e22c1c9e050d395d8e.sol:2501

abi.decode(data, (string))

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:12:07.772461
Transaction Length: 1
Severity: High
Contract: GameBalance
Function name: receiveApproval(address,uint256,address,bytes)
PC address: 10041
Estimated Gas Usage: 1312 - 4605
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x269081c519c270a5e57f06e22c1c9e050d395d8e.sol:2501

abi.decode(data, (string))

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:11:32.502113
Transaction Length: 1
Severity: High
Contract: GameBalance
Function name: receiveApproval(address,uint256,address,bytes)
PC address: 10066
Estimated Gas Usage: 1312 - 4605
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x269081c519c270a5e57f06e22c1c9e050d395d8e.sol:2


*/

// File: @chainl

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:12:18.306301
Transaction Length: 1
Severity: High
Contract: GameBalance
Function name: receiveApproval(address,uint256,address,bytes)
PC address: 10072
Estimated Gas Usage: 1312 - 4605
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x269081c519c270a5e57f06e22c1c9e050d395d8e.sol:5

uffer.sol

//p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:12:35.500336
Transaction Length: 1
Severity: High
Contract: GameBalance
Function name: receiveApproval(address,uint256,address,bytes)
PC address: 10094
Estimated Gas Usage: 1370 - 4756
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x269081c519c270a5e57f06e22c1c9e050d395d8e.sol:13

nd expandable, and provide a variety of pri

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x5e518287ee909c285ce3564ad5229610b5fdd26d.sol
Total states:3259
4.025629
==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.211312
Transaction Length: 1
Severity: High
Contract: UniswapZAP
Function name: fallback
PC address: 1664
Estimated Gas Usage: 5189 - 75208
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0x5e518287ee909c285ce3564ad5229610b5fdd26d.sol:305

nextEmission() - now

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xc66bfe7a84adfde612d55aab0be7fe454b8e77e1.sol
Total states:1968
6.171527
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.498445
Transaction Length: 1
Severity: Low
Contract: BValveStaking
Function name: poolList(uint256)
PC address: 1825
Estimated Gas Usage: 702 - 797
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xc66bfe7a84adfde612d55aab0be7fe454b8e77e1.sol:1070

PoolList[] public poolList

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.537334
Transaction Length: 1
Severity: Low
Contract: BValveStaking
Function name: pendingRewardsFromPool(uint256,address)
PC address: 6256
Estimated Gas Usage: 958 - 2096
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xc66bfe7a84adfde612d55aab0be7fe454b8e77e1.sol:1248

poolList[_pid]

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x1280e96618349ef01571ee148d850672d72f3e51.sol
Total states:150
37.463263
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.376626
Transaction Length: 1
Severity: High
Contract: MStableStrat
Function name: setAllowances(address,address[],bool)
PC address: 480
Estimated Gas Usage: 375 - 470
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x1280e96618349ef01571ee148d850672d72f3e51.sol:5

ontracts/vaults/IStra

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.685905
Transaction Length: 1
Severity: High
Contract: MStableStrat
Function name: setAllowances(address,address[],bool)
PC address: 482
Estimated Gas Usage: 375 - 470
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x1280e96618349ef01571ee148d850672d72f3e51.sol:3

*/

// File: contracts/vaults/IStrat

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:13.872285
Transaction Length: 1
Severity: Low
Contract: MStableStrat
Function name: exchangeRewardForWant(bool)
PC address: 3392
Estimated Gas Usage: 5172 - 41905
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0x1280e96618349ef01571ee148d850672d72f3e51.sol:873

balProxy.smartSwapExactIn(
            mta,
            musd,
            exchangeAll ? swapAmt : swapAmt.mul(8000).div(DENOM),
            0,
            numPools
        )

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:15.646854
Transaction Length: 1
Severity: Low
Contract: MStableStrat
Function name: exchangeRewardForWant(bool)
PC address: 3789
Estimated Gas Usage: 8631 - 81296
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0x1280e96618349ef01571ee148d850672d72f3e51.sol:882

balProxy.smartSwapExactIn(
            musd,
            want,
            swapAmt,
            0,
            numPools
        )

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:11.443838
Transaction Length: 1
Severity: Low
Contract: MStableStrat
Function name: exitMGov()
PC address: 4064
Estimated Gas Usage: 1425 - 2131
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0x1280e96618349ef01571ee148d850672d72f3e51.sol:850

mtaGov.withdraw()

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:12.255895
Transaction Length: 1
Severity: Low
Contract: MStableStrat
Function name: exitMGov()
PC address: 4361
Estimated Gas Usage: 2609 - 39052
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0x1280e96618349ef01571ee148d850672d72f3e51.sol:853

address(this).call(
            abi.encodeWithSignature(
                "exchangeRewardForWant(bool)",
                true
            )
        )

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x4e7783f24371cc073c8d943dfeb47846d34cbfc7.sol
Total states:654
0.678948
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x633992502d7c13E8f95A8B8E44f17BA17EB2Db6D.sol
Total states:5382
21.518831
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x3Dfb98C045d4f4Be168bBE60ba2eb0A3ccf8fBC3.sol
Total states:1328
74.363576
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.375280
Transaction Length: 1
Severity: High
Contract: Resolver
Function name: getPositions(string[],address)
PC address: 2579
Estimated Gas Usage: 635 - 1013
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3Dfb98C045d4f4Be168bBE60ba2eb0A3ccf8fBC3.sol:31


  function balanceOf(address 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:14.653437
Transaction Length: 1
Severity: High
Contract: Resolver
Function name: getPositions(string[],address)
PC address: 2652
Estimated Gas Usage: 635 - 1013
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3Dfb98C045d4f4Be168bBE60ba2eb0A3ccf8fBC3.sol:39

c92;
  }

  funct

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.813376
Transaction Length: 1
Severity: High
Contract: InstaCurveGaugeResolver
Function name: getPositions(string[],address)
PC address: 2677
Estimated Gas Usage: 651 - 1029
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3Dfb98C045d4f4Be168bBE60ba2eb0A3ccf8fBC3.sol:31


  function balanceOf(address 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:15.925567
Transaction Length: 1
Severity: High
Contract: InstaCurveGaugeResolver
Function name: getPositions(string[],address)
PC address: 2750
Estimated Gas Usage: 651 - 1029
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x3Dfb98C045d4f4Be168bBE60ba2eb0A3ccf8fBC3.sol:39

c92;
  }

  funct

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x8209ed0259f99abd593e8cd26e6a14f224c6ccca.sol
Total states:10150
96.407184
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.325573
Transaction Length: 1
Severity: High
Contract: DMGYieldFarmingRouter
Function name: enableTokens(address[],address[])
PC address: 671
Estimated Gas Usage: 386 - 481
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x8209ed0259f99abd593e8cd26e6a14f224c6ccca.sol:5

openzeppelin/contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.975620
Transaction Length: 1
Severity: High
Contract: DMGYieldFarmingRouter
Function name: enableTokens(address[],address[])
PC address: 673
Estimated Gas Usage: 386 - 481
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x8209ed0259f99abd593e8cd26e6a14f224c6ccca.sol:3

*/

// File: @openzeppelin/contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.324087
Transaction Length: 1
Severity: High
Contract: DMGYieldFarmingRouter
Function name: enableTokens(address[],address[])
PC address: 756
Estimated Gas Usage: 562 - 657
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x8209ed0259f99abd593e8cd26e6a14f224c6ccca.sol:5

openzeppelin/contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:21.720384
Transaction Length: 1
Severity: High
Contract: DMGYieldFarmingRouter
Function name: enableTokens(address[],address[])
PC address: 758
Estimated Gas Usage: 562 - 657
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x8209ed0259f99abd593e8cd26e6a14f224c6ccca.sol:3

*/

// File: @openzeppelin/contracts

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xc491c6f0d3092c468770c23032d44ad9dff41989.sol
Total states:1037
6.083874
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:02.955001
Transaction Length: 1
Severity: Low
Contract: VestingVault
Function name: claim()
PC address: 717
Estimated Gas Usage: 7796 - 78294
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0xc491c6f0d3092c468770c23032d44ad9dff41989.sol:138

escrow.claim(vaults[0])

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:04.105068
Transaction Length: 1
Severity: Low
Contract: VestingVault
Function name: claim()
PC address: 973
Estimated Gas Usage: 10293 - 115592
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0xc491c6f0d3092c468770c23032d44ad9dff41989.sol:139

VestingStrategy(vaults[0]).withdraw(crv)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:05.147494
Transaction Length: 1
Severity: Low
Contract: VestingVault
Function name: vaults(uint256)
PC address: 1392
Estimated Gas Usage: 700 - 795
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xc491c6f0d3092c468770c23032d44ad9dff41989.sol:132

address[] public vaults = [0x8816B2Fb982281c36E6c535B9e56B7a4417e68cF,
                                0xBE197E668D13746BB92E675dEa2868FF14dA0b73,
                                0x2De055fec2b826ed4A7478CeDDBefF82C1EdFA70]

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x2e4bfa61391230013c30ded7384dd80e282859c8.sol
Total states:3568
13.910554
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.558233
Transaction Length: 1
Severity: Low
Contract: Authorizable
Function name: authorities(uint256)
PC address: 472
Estimated Gas Usage: 805 - 900
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x2e4bfa61391230013c30ded7384dd80e282859c8.sol:2356

address[] public authorities

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.433526
Transaction Length: 1
Severity: Low
Contract: ERC20BridgeProxy
Function name: authorities(uint256)
PC address: 1015
Estimated Gas Usage: 827 - 922
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x2e4bfa61391230013c30ded7384dd80e282859c8.sol:2356

address[] public authorities

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x9605373acd82d2b9d0b39e0037d2b462db38fd10.sol
Total states:10402
104.722162
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.898014
Transaction Length: 1
Severity: Low
Contract: Doubler
Function name: users(uint256)
PC address: 2361
Estimated Gas Usage: 702 - 797
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x9605373acd82d2b9d0b39e0037d2b462db38fd10.sol:198

User[] public users

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xe422c577fe8debbec1c3b1ae5774c3b259a2ee76.sol
Total states:1880
91.810207
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.280366
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShip(address[])
PC address: 360
Estimated Gas Usage: 342 - 437
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xe422c577fe8debbec1c3b1ae5774c3b259a2ee76.sol:5

penzeppelin-solidity/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.343588
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShip(address[])
PC address: 362
Estimated Gas Usage: 342 - 437
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xe422c577fe8debbec1c3b1ae5774c3b259a2ee76.sol:3

*/

// File: openzeppelin-solidity/c

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:35.004303
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShipWithHowMany(address[],uint256)
PC address: 776
Estimated Gas Usage: 341 - 436
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xe422c577fe8debbec1c3b1ae5774c3b259a2ee76.sol:5

penzeppelin-solidity/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:37.707250
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShipWithHowMany(address[],uint256)
PC address: 778
Estimated Gas Usage: 341 - 436
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xe422c577fe8debbec1c3b1ae5774c3b259a2ee76.sol:3

*/

// File: openzeppelin-solidity/c

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:27.479314
Transaction Length: 1
Severity: Low
Contract: BeneficiaryOperations
Function name: allOperations(uint256)
PC address: 1715
Estimated Gas Usage: 701 - 796
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xe422c577fe8debbec1c3b1ae5774c3b259a2ee76.sol:386

bytes32[] public allOperations

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:26.722916
Transaction Length: 1
Severity: Low
Contract: BeneficiaryOperations
Function name: beneficiaries(uint256)
PC address: 4636
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xe422c577fe8debbec1c3b1ae5774c3b259a2ee76.sol:385

address[] public beneficiaries

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x5ff99a7127fb6948c3fb9fddb2d18163f8b0629d2.sol
Total states:12855
243.899379
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.052718
Transaction Length: 1
Severity: High
Contract: Module
Function name: getModuleAddress(string)
PC address: 416
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5ff99a7127fb6948c3fb9fddb2d18163f8b0629d2.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.242408
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 511
Estimated Gas Usage: 364 - 459
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5ff99a7127fb6948c3fb9fddb2d18163f8b0629d2.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.961292
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 513
Estimated Gas Usage: 364 - 459
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5ff99a7127fb6948c3fb9fddb2d18163f8b0629d2.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.533944
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 596
Estimated Gas Usage: 540 - 635
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5ff99a7127fb6948c3fb9fddb2d18163f8b0629d2.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:16.835116
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 598
Estimated Gas Usage: 540 - 635
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5ff99a7127fb6948c3fb9fddb2d18163f8b0629d2.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:28.731515
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 681
Estimated Gas Usage: 716 - 811
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5ff99a7127fb6948c3fb9fddb2d18163f8b0629d2.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:44.799297
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 683
Estimated Gas Usage: 716 - 811
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5ff99a7127fb6948c3fb9fddb2d18163f8b0629d2.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:02.784197
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 766
Estimated Gas Usage: 892 - 987
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5ff99a7127fb6948c3fb9fddb2d18163f8b0629d2.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:25.138788
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 768
Estimated Gas Usage: 892 - 987
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5ff99a7127fb6948c3fb9fddb2d18163f8b0629d2.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:56.267281
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: getModuleAddress(string)
PC address: 1453
Estimated Gas Usage: 451 - 546
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5ff99a7127fb6948c3fb9fddb2d18163f8b0629d2.sol:3

*/

// File: @openzeppelin\contract

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x0eab6f04d173d055676e68876c22fab00ad9fe83.sol
Total states:22501
267.949311
==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.085342
Transaction Length: 1
Severity: High
Contract: Periods
Function name: getCurrentPeriod()
PC address: 2579
Estimated Gas Usage: 1102 - 1857
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0x0eab6f04d173d055676e68876c22fab00ad9fe83.sol:349

_total_periods-1

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.063445
Transaction Length: 1
Severity: High
Contract: Subscriptions
Function name: getCurrentPeriod()
PC address: 6527
Estimated Gas Usage: 1147 - 1902
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0x0eab6f04d173d055676e68876c22fab00ad9fe83.sol:349

_total_periods-1

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.305362
Transaction Length: 1
Severity: High
Contract: Cert
Function name: getCurrentPeriod()
PC address: 16501
Estimated Gas Usage: 1236 - 1991
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0x0eab6f04d173d055676e68876c22fab00ad9fe83.sol:349

_total_periods-1

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xbe0c05097932cabeeaa4773bb50ee7cf168a7de4.sol
Total states:2330
52.721121
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.815587
Transaction Length: 1
Severity: High
Contract: MultisigVault
Function name: external_call(address,uint256,bytes)
PC address: 221
Estimated Gas Usage: 356 - 451
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xbe0c05097932cabeeaa4773bb50ee7cf168a7de4.sol:3

*/

// File: contracts/IMultisigCar

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:25.387535
Transaction Length: 1
Severity: Low
Contract: MultisigVault
Function name: approve(address,address,uint256)
PC address: 1167
Estimated Gas Usage: 1687 - 2773
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0xbe0c05097932cabeeaa4773bb50ee7cf168a7de4.sol:49

multisigCarrier.approveFrom(msg.sender, destination, currencyAddress, amount)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.712273
Transaction Length: 1
Severity: High
Contract: MultisigCarrier
Function name: setVaultInfo(address,uint8,address[])
PC address: 1640
Estimated Gas Usage: 494 - 589
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xbe0c05097932cabeeaa4773bb50ee7cf168a7de4.sol:5

ontracts/IMultisigCar

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.805582
Transaction Length: 1
Severity: High
Contract: MultisigCarrier
Function name: setVaultInfo(address,uint8,address[])
PC address: 1642
Estimated Gas Usage: 494 - 589
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xbe0c05097932cabeeaa4773bb50ee7cf168a7de4.sol:3

*/

// File: contracts/IMultisigCarr

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x084314184599c71f03a1b15edb8161a1f72c01d4.sol
Total states:367
1146.733595
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.273886
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12Staging
Function name: getBalances()
PC address: 2652
Estimated Gas Usage: 549 - 737
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x084314184599c71f03a1b15edb8161a1f72c01d4.sol:5

dity 0.5.17; //

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.553333
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12Staging
Function name: getBalances()
PC address: 2655
Estimated Gas Usage: 549 - 737
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x084314184599c71f03a1b15edb8161a1f72c01d4.sol:3



//pragma solidity 0.5.17; // optimization

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:05.067592
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12Staging
Function name: getImplementation()
PC address: 8959
Estimated Gas Usage: 1889 - 36453
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x084314184599c71f03a1b15edb8161a1f72c01d4.sol:5

ns: 200, evm version: istan

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:44.867808
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12Staging
Function name: getImplementation()
PC address: 8962
Estimated Gas Usage: 1232 - 35889
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x084314184599c71f03a1b15edb8161a1f72c01d4.sol:5

mization runs: 200, evm version: istanbul
pragma so

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:48.314589
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12Staging
Function name: getImplementation()
PC address: 8975
Estimated Gas Usage: 1232 - 35889
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x084314184599c71f03a1b15edb8161a1f72c01d4.sol:7

icBatchCalls

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:52.073373
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12Staging
Function name: getImplementation()
PC address: 9075
Estimated Gas Usage: 1246 - 35996
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x084314184599c71f03a1b15edb8161a1f72c01d4.sol:1796

abi.decode(returnData, (address))

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:08.429315
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12Staging
Function name: getImplementation()
PC address: 9084
Estimated Gas Usage: 1246 - 35996
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x084314184599c71f03a1b15edb8161a1f72c01d4.sol:1796

abi.decode(returnData, (address))

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:11:41.049218
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12Staging
Function name: escape()
PC address: 13539
Estimated Gas Usage: 1889 - 36453
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x084314184599c71f03a1b15edb8161a1f72c01d4.sol:5

dity 0.5.17; //

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:11:32.857777
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12Staging
Function name: escape()
PC address: 13542
Estimated Gas Usage: 1889 - 36453
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x084314184599c71f03a1b15edb8161a1f72c01d4.sol:3



//pragma solidity 0.5.17; // optimization

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:11:36.755463
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12Staging
Function name: escape()
PC address: 13554
Estimated Gas Usage: 1889 - 36453
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x084314184599c71f03a1b15edb8161a1f72c01d4.sol:1320

_ESCAPE_HATCH_REGISTRY.getEscapeHatch()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:18.342722
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12Staging
Function name: executeActionWithAtomicBatchCalls((address,bytes)[],uint256,bytes,bytes)
PC address: 31188
Estimated Gas Usage: 722 - 1100
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x084314184599c71f03a1b15edb8161a1f72c01d4.sol:78

ns (bytes32 actionID);

  func

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:12.857663
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12Staging
Function name: executeActionWithAtomicBatchCalls((address,bytes)[],uint256,bytes,bytes)
PC address: 31947
Estimated Gas Usage: 722 - 1100
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0x084314184599c71f03a1b15edb8161a1f72c01d4.sol:248

iew returns (bytes3

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:03:12.454814
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12Staging
Function name: getImplementation()
PC address: 32169
Estimated Gas Usage: 1246 - 35996
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0x084314184599c71f03a1b15edb8161a1f72c01d4.sol:294

DTokenInterface {
  // 

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:11:41.729611
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12Staging
Function name: escape()
PC address: 33455
Estimated Gas Usage: 1889 - 36453
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0x084314184599c71f03a1b15edb8161a1f72c01d4.sol:513

6c1d19D4a2e9Eb0cE3606eB

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.816233
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12Staging
Function name: executeActionWithAtomicBatchCalls((address,bytes)[],uint256,bytes,bytes)
PC address: 38221
Estimated Gas Usage: 549 - 737
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x084314184599c71f03a1b15edb8161a1f72c01d4.sol:1247

s memory returnDa

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xf5ce0c13f9287d37adea719628821e4c20edaa2a.sol
Total states:15386
129.171679
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:04.256425
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3645
Estimated Gas Usage: 1025 - 1500
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xf5ce0c13f9287d37adea719628821e4c20edaa2a.sol:56

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:36.698420
Transaction Length: 2
Severity: High
Contract: ERC20Pausable
Function name: increaseAllowance(address,uint256)
PC address: 5504
Estimated Gas Usage: 1070 - 1545
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xf5ce0c13f9287d37adea719628821e4c20edaa2a.sol:56

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xCE92FbAC689710bCa1e1c8DB265e9B06BCB85c08.sol
Total states:3248
8.257524
==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.009877
Transaction Length: 0
Severity: Medium
Contract: DegoVoterProxy
Function name: constructor
PC address: 18
Estimated Gas Usage: 42 - 137
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../new/0xCE92FbAC689710bCa1e1c8DB265e9B06BCB85c08.sol:58

tx.origin

--------------------

==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.004798
Transaction Length: 0
Severity: Medium
Contract: Governance
Function name: constructor
PC address: 18
Estimated Gas Usage: 42 - 137
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../new/0xCE92FbAC689710bCa1e1c8DB265e9B06BCB85c08.sol:58

tx.origin

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xef47223f77d726826c866f56e3a6000914289702.sol
Total states:5848
974.245973
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.134462
Transaction Length: 1
Severity: High
Contract: WDXStacking
Function name: buyStatus(uint8,address[])
PC address: 915
Estimated Gas Usage: 439 - 534
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xef47223f77d726826c866f56e3a6000914289702.sol:5

olidity ^0.5.17;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.642061
Transaction Length: 1
Severity: High
Contract: WDXStacking
Function name: buyStatus(uint8,address[])
PC address: 917
Estimated Gas Usage: 439 - 534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xef47223f77d726826c866f56e3a6000914289702.sol:3

*/

//pragma solidity ^0.5.17;
pragm

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:01:37.254743
Transaction Length: 1
Severity: Medium
Contract: WDXStacking
Function name: sendToStaking(uint256)
PC address: 1111
Estimated Gas Usage: 51713 - 305268
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 4753
Offset: 5182
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../new/0xef47223f77d726826c866f56e3a6000914289702.sol:165

function sendToStaking(uint256 numberOfTokens) public returns(bool) {
        require(numberOfTokens > 0, "You need to sell at least some tokens");

        uint256 allowance = tokenContract.allowance(msg.sender, address(this));
        require(allowance >= numberOfTokens, "Check the token allowance");


        tokenContract.transferFrom(msg.sender, address(this), numberOfTokens);
        if (stakes[address(msg.sender)].amount > 0) {
            computeAmount();
            stakes[address(msg.sender)].amount = stakes[address(msg.sender)].amount + numberOfTokens;
            return true;
        }
        stakes[address(msg.sender)] = Stake(
            now, //start_time
            numberOfTokens, //amount

            now, //week_starts_at
            0, //week_withdrawal_amount
            now, //last_withdrawal_time

            now, //last_compute_time
            0, //last_percent
            0, //pure_profit
            stakes[address(msg.sender)].status //status
        );
        return true;
    }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:13:43.880631
Transaction Length: 2
Severity: Medium
Contract: WDXStacking
Function name: sendToStaking(uint256)
PC address: 1111
Estimated Gas Usage: 51713 - 305268
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 4753
Offset: 5182
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../new/0xef47223f77d726826c866f56e3a6000914289702.sol:165

function sendToStaking(uint256 numberOfTokens) public returns(bool) {
        require(numberOfTokens > 0, "You need to sell at least some tokens");

        uint256 allowance = tokenContract.allowance(msg.sender, address(this));
        require(allowance >= numberOfTokens, "Check the token allowance");


        tokenContract.transferFrom(msg.sender, address(this), numberOfTokens);
        if (stakes[address(msg.sender)].amount > 0) {
            computeAmount();
            stakes[address(msg.sender)].amount = stakes[address(msg.sender)].amount + numberOfTokens;
            return true;
        }
        stakes[address(msg.sender)] = Stake(
            now, //start_time
            numberOfTokens, //amount

            now, //week_starts_at
            0, //week_withdrawal_amount
            now, //last_withdrawal_time

            now, //last_compute_time
            0, //last_percent
            0, //pure_profit
            stakes[address(msg.sender)].status //status
        );
        return true;
    }

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:51.498142
Transaction Length: 1
Severity: Low
Contract: WDXStacking
Function name: sendToStaking(uint256)
PC address: 5182
Estimated Gas Usage: 3851 - 39829
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0xef47223f77d726826c866f56e3a6000914289702.sol:172

tokenContract.transferFrom(msg.sender, address(this), numberOfTokens)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:12:24.397444
Transaction Length: 2
Severity: Low
Contract: WDXStacking
Function name: sendToStaking(uint256)
PC address: 5182
Estimated Gas Usage: 3851 - 39829
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0xef47223f77d726826c866f56e3a6000914289702.sol:172

tokenContract.transferFrom(msg.sender, address(this), numberOfTokens)

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:02:18.063179
Transaction Length: 2
Severity: High
Contract: WDXStacking
Function name: getFromStaking(uint256)
PC address: 6049
Estimated Gas Usage: 2525 - 3380
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0xef47223f77d726826c866f56e3a6000914289702.sol:94

now - stake_last_compute_time

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:06:14.250183
Transaction Length: 2
Severity: High
Contract: WDXStacking
Function name: getFromStaking(uint256)
PC address: 6089
Estimated Gas Usage: 2770 - 3625
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0xef47223f77d726826c866f56e3a6000914289702.sol:100

now - stake_start_time

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xd20770105592629e49f90eb360a03ddb08c7e207.sol
Total states:2301
2.095729
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.039592
Transaction Length: 0
Severity: High
Contract: ERC20
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xd20770105592629e49f90eb360a03ddb08c7e207.sol:12

ily result
 * in bugs, because programmers 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.041719
Transaction Length: 0
Severity: High
Contract: WarLordToken
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xd20770105592629e49f90eb360a03ddb08c7e207.sol:12

ily result
 * in bugs, because programmers 

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xd4553Ee5693A926E0b9f5B0726ee51773F97df85.sol
Total states:4440
19.450119
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.642513
Transaction Length: 1
Severity: High
Contract: OSM
Function name: kiss(address[])
PC address: 498
Estimated Gas Usage: 408 - 503
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xd4553Ee5693A926E0b9f5B0726ee51773F97df85.sol:5

ol -- mixin for inlin

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.196666
Transaction Length: 1
Severity: High
Contract: OSM
Function name: kiss(address[])
PC address: 500
Estimated Gas Usage: 408 - 503
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xd4553Ee5693A926E0b9f5B0726ee51773F97df85.sol:3

*/

/// math.sol -- mixin for inline

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.278438
Transaction Length: 1
Severity: High
Contract: OSM
Function name: diss(address[])
PC address: 761
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xd4553Ee5693A926E0b9f5B0726ee51773F97df85.sol:5

ol -- mixin for inlin

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.614498
Transaction Length: 1
Severity: High
Contract: OSM
Function name: diss(address[])
PC address: 763
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xd4553Ee5693A926E0b9f5B0726ee51773F97df85.sol:3

*/

/// math.sol -- mixin for inline

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xd0c59798f986d333554688cd667033d469c2398e.sol
Total states:426
0.872452
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xcbf0db1968f6b157af366e057c1e5d54d1d37b3c.sol
Total states:10402
104.886124
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.994661
Transaction Length: 1
Severity: Low
Contract: Doubler
Function name: users(uint256)
PC address: 2361
Estimated Gas Usage: 702 - 797
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xcbf0db1968f6b157af366e057c1e5d54d1d37b3c.sol:198

User[] public users

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x34194a17d9d02bdabe930b27919ce797cfb065bf.sol
Total states:1322
73.342279
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.830818
Transaction Length: 1
Severity: High
Contract: TimeLock
Function name: addParameters(address[],uint256[],uint256[])
PC address: 857
Estimated Gas Usage: 384 - 479
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x34194a17d9d02bdabe930b27919ce797cfb065bf.sol:5

olidity ^0.6.0;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.608784
Transaction Length: 1
Severity: High
Contract: TimeLock
Function name: addParameters(address[],uint256[],uint256[])
PC address: 859
Estimated Gas Usage: 384 - 479
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x34194a17d9d02bdabe930b27919ce797cfb065bf.sol:3

*/

//pragma solidity ^0.6.0;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.523306
Transaction Length: 1
Severity: High
Contract: TimeLock
Function name: addParameters(address[],uint256[],uint256[])
PC address: 942
Estimated Gas Usage: 560 - 655
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x34194a17d9d02bdabe930b27919ce797cfb065bf.sol:5

olidity ^0.6.0;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:20.021132
Transaction Length: 1
Severity: High
Contract: TimeLock
Function name: addParameters(address[],uint256[],uint256[])
PC address: 944
Estimated Gas Usage: 560 - 655
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x34194a17d9d02bdabe930b27919ce797cfb065bf.sol:3

*/

//pragma solidity ^0.6.0;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:33.173071
Transaction Length: 1
Severity: High
Contract: TimeLock
Function name: addParameters(address[],uint256[],uint256[])
PC address: 1027
Estimated Gas Usage: 736 - 831
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x34194a17d9d02bdabe930b27919ce797cfb065bf.sol:5

olidity ^0.6.0;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:56.721764
Transaction Length: 1
Severity: High
Contract: TimeLock
Function name: addParameters(address[],uint256[],uint256[])
PC address: 1029
Estimated Gas Usage: 736 - 831
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x34194a17d9d02bdabe930b27919ce797cfb065bf.sol:3

*/

//pragma solidity ^0.6.0;
pragma

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x7729b6278ac7c6c1fcf40d8d505e37488fbc0ec02.sol
Total states:3685
113.351073
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xd1400d2c740d061434fa46c9e0f818bd14147e61.sol
Total states:3585
157.317597
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.427028
Transaction Length: 1
Severity: High
Contract: LexGuildLocker
Function name: registerLocker(address,address[],address,address,uint256[],uint256,uint256,uint256,bytes32)
PC address: 355
Estimated Gas Usage: 352 - 447
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xd1400d2c740d061434fa46c9e0f818bd14147e61.sol:6

     ████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.710084
Transaction Length: 1
Severity: High
Contract: LexGuildLocker
Function name: registerLocker(address,address[],address,address,uint256[],uint256,uint256,uint256,bytes32)
PC address: 357
Estimated Gas Usage: 352 - 447
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xd1400d2c740d061434fa46c9e0f818bd14147e61.sol:3

*/

/*
██╗     █████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.715029
Transaction Length: 1
Severity: High
Contract: LexGuildLocker
Function name: registerLocker(address,address[],address,address,uint256[],uint256,uint256,uint256,bytes32)
PC address: 504
Estimated Gas Usage: 594 - 689
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xd1400d2c740d061434fa46c9e0f818bd14147e61.sol:6

     ████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:20.180476
Transaction Length: 1
Severity: High
Contract: LexGuildLocker
Function name: registerLocker(address,address[],address,address,uint256[],uint256,uint256,uint256,bytes32)
PC address: 506
Estimated Gas Usage: 594 - 689
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xd1400d2c740d061434fa46c9e0f818bd14147e61.sol:3

*/

/*
██╗     █████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:09.625585
Transaction Length: 1
Severity: High
Contract: LexGuildLocker
Function name: resolve(uint256,uint256,uint256[],bytes32)
PC address: 1471
Estimated Gas Usage: 394 - 489
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xd1400d2c740d061434fa46c9e0f818bd14147e61.sol:6

     ████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:14.060885
Transaction Length: 1
Severity: High
Contract: LexGuildLocker
Function name: resolve(uint256,uint256,uint256[],bytes32)
PC address: 1473
Estimated Gas Usage: 394 - 489
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xd1400d2c740d061434fa46c9e0f818bd14147e61.sol:3

*/

/*
██╗     █████

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:06.674212
Transaction Length: 1
Severity: Low
Contract: LexGuildLocker
Function name: registerLocker(address,address[],address,address,uint256[],uint256,uint256,uint256,bytes32)
PC address: 1730
Estimated Gas Usage: 846 - 941
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xd1400d2c740d061434fa46c9e0f818bd14147e61.sol:185

batch[i]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:28.788357
Transaction Length: 1
Severity: High
Contract: LexGuildLocker
Function name: registerLocker(address,address[],address,address,uint256[],uint256,uint256,uint256,bytes32)
PC address: 9688
Estimated Gas Usage: 1414 - 1509
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xd1400d2c740d061434fa46c9e0f818bd14147e61.sol:87

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:36.591883
Transaction Length: 1
Severity: High
Contract: LexGuildLocker
Function name: registerLocker(address,address[],address,address,uint256[],uint256,uint256,uint256,bytes32)
PC address: 9739
Estimated Gas Usage: 1157 - 1252
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xd1400d2c740d061434fa46c9e0f818bd14147e61.sol:105

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xded5059195a7feb96f151271d038517d9736e5d7.sol
Total states:1454
80.310576
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.747235
Transaction Length: 1
Severity: High
Contract: DivideContract
Function name: registerRecipientsInfo(address[],uint256[])
PC address: 1747
Estimated Gas Usage: 406 - 501
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xded5059195a7feb96f151271d038517d9736e5d7.sol:5

penzeppelin-solidity/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.511808
Transaction Length: 1
Severity: High
Contract: DivideContract
Function name: registerRecipientsInfo(address[],uint256[])
PC address: 1749
Estimated Gas Usage: 406 - 501
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xded5059195a7feb96f151271d038517d9736e5d7.sol:3

*/

// File: openzeppelin-solidity/c

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.064885
Transaction Length: 1
Severity: High
Contract: DivideContract
Function name: registerRecipientsInfo(address[],uint256[])
PC address: 1895
Estimated Gas Usage: 739 - 3516
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xded5059195a7feb96f151271d038517d9736e5d7.sol:5

penzeppelin-solidity/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:27.299681
Transaction Length: 1
Severity: High
Contract: DivideContract
Function name: registerRecipientsInfo(address[],uint256[])
PC address: 1897
Estimated Gas Usage: 739 - 3516
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xded5059195a7feb96f151271d038517d9736e5d7.sol:3

*/

// File: openzeppelin-solidity/c

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x4e538b49ba7f6068b0d5ada08e80bda5524bc28f.sol
Total states:1458
76.382306
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.186924
Transaction Length: 1
Severity: High
Contract: GotScammed
Function name: swapExactTokensForTokens(address[])
PC address: 243
Estimated Gas Usage: 318 - 413
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x4e538b49ba7f6068b0d5ada08e80bda5524bc28f.sol:5

olidity ^0.6.6;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.357848
Transaction Length: 1
Severity: High
Contract: GotScammed
Function name: swapExactTokensForTokens(address[])
PC address: 245
Estimated Gas Usage: 318 - 413
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x4e538b49ba7f6068b0d5ada08e80bda5524bc28f.sol:3

*/

//pragma solidity ^0.6.6;
pragma

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:55.711600
Transaction Length: 2
Severity: Low
Contract: GotScammed
Function name: swapExactTokensForTokens(address[])
PC address: 942
Estimated Gas Usage: 1318 - 1743
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x4e538b49ba7f6068b0d5ada08e80bda5524bc28f.sol:58

path[0]

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:00:17.785283
Transaction Length: 2
Severity: Medium
Contract: GotScammed
Function name: swapExactTokensForTokens(address[])
PC address: 1169
Estimated Gas Usage: 2637 - 3768
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../new/0x4e538b49ba7f6068b0d5ada08e80bda5524bc28f.sol:59

tkn.balanceOf(address(this))

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.253435
Transaction Length: 1
Severity: High
Contract: GotScammed
Function name: queue()
PC address: 2300
Estimated Gas Usage: 6142 - 26567
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x4e538b49ba7f6068b0d5ada08e80bda5524bc28f.sol:52

block.timestamp + 600

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:44.811487
Transaction Length: 2
Severity: Low
Contract: GotScammed
Function name: swapExactTokensForTokens(address[])
PC address: 2498
Estimated Gas Usage: 3834 - 44699
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x4e538b49ba7f6068b0d5ada08e80bda5524bc28f.sol:84

amounts[0]

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xdc0897529568b142d8a7a82cf6893948b7f47123.sol
Total states:367
1129.698421
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.469894
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12
Function name: getBalances()
PC address: 2652
Estimated Gas Usage: 549 - 737
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xdc0897529568b142d8a7a82cf6893948b7f47123.sol:5

dity 0.5.17; //

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.745988
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12
Function name: getBalances()
PC address: 2655
Estimated Gas Usage: 549 - 737
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xdc0897529568b142d8a7a82cf6893948b7f47123.sol:3



//pragma solidity 0.5.17; // optimization

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:57.760740
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12
Function name: getImplementation()
PC address: 8953
Estimated Gas Usage: 1889 - 36453
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xdc0897529568b142d8a7a82cf6893948b7f47123.sol:5

ns: 200, evm version: istan

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:45.671127
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12
Function name: getImplementation()
PC address: 8956
Estimated Gas Usage: 1232 - 35889
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xdc0897529568b142d8a7a82cf6893948b7f47123.sol:5

mization runs: 200, evm version: istanbul
pragma so

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:48.648406
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12
Function name: getImplementation()
PC address: 8969
Estimated Gas Usage: 1232 - 35889
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xdc0897529568b142d8a7a82cf6893948b7f47123.sol:7

icBatchCalls

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:45.009053
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12
Function name: getImplementation()
PC address: 9069
Estimated Gas Usage: 1246 - 35996
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xdc0897529568b142d8a7a82cf6893948b7f47123.sol:1798

abi.decode(returnData, (address))

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:00.890500
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12
Function name: getImplementation()
PC address: 9078
Estimated Gas Usage: 1246 - 35996
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xdc0897529568b142d8a7a82cf6893948b7f47123.sol:1798

abi.decode(returnData, (address))

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:11:29.840345
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12
Function name: escape()
PC address: 13533
Estimated Gas Usage: 1889 - 36453
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xdc0897529568b142d8a7a82cf6893948b7f47123.sol:5

dity 0.5.17; //

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:11:21.865937
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12
Function name: escape()
PC address: 13536
Estimated Gas Usage: 1889 - 36453
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xdc0897529568b142d8a7a82cf6893948b7f47123.sol:3



//pragma solidity 0.5.17; // optimization

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:11:26.319726
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12
Function name: escape()
PC address: 13548
Estimated Gas Usage: 1889 - 36453
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xdc0897529568b142d8a7a82cf6893948b7f47123.sol:1322

_ESCAPE_HATCH_REGISTRY.getEscapeHatch()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:22.170960
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12
Function name: executeActionWithAtomicBatchCalls((address,bytes)[],uint256,bytes,bytes)
PC address: 31182
Estimated Gas Usage: 722 - 1100
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xdc0897529568b142d8a7a82cf6893948b7f47123.sol:78

ns (bytes32 actionID);

  func

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:12.659206
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12
Function name: executeActionWithAtomicBatchCalls((address,bytes)[],uint256,bytes,bytes)
PC address: 31941
Estimated Gas Usage: 722 - 1100
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0xdc0897529568b142d8a7a82cf6893948b7f47123.sol:248

iew returns (bytes3

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:03:06.066011
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12
Function name: getImplementation()
PC address: 32163
Estimated Gas Usage: 1246 - 35996
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0xdc0897529568b142d8a7a82cf6893948b7f47123.sol:294

DTokenInterface {
  // 

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:11:30.409109
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12
Function name: escape()
PC address: 33449
Estimated Gas Usage: 1889 - 36453
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../new/0xdc0897529568b142d8a7a82cf6893948b7f47123.sol:514

20Interface(
    0xA0b8

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.019904
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12
Function name: executeActionWithAtomicBatchCalls((address,bytes)[],uint256,bytes,bytes)
PC address: 38215
Estimated Gas Usage: 549 - 737
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xdc0897529568b142d8a7a82cf6893948b7f47123.sol:1249

nal returns (bool

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xc85306056a212863b6f6413bba6669d62a70f31a.sol
Total states:4358
10.774324
==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:00.508942
Transaction Length: 1
Severity: Medium
Contract: Lottery
Function name: init(address)
PC address: 635
Estimated Gas Usage: 15432 - 125641
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 2426
Offset: 2975
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../new/0xc85306056a212863b6f6413bba6669d62a70f31a.sol:130

function init(address liqToken) public isAdmin{
    require(lastDrawing==0,"must be before any dispersal");
    liquidityToken=ERC20(liqToken);
    startingLiquidityTokens=liquidityToken.balanceOf(address(this));
  }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:00.487940
Transaction Length: 2
Severity: Medium
Contract: Lottery
Function name: init(address)
PC address: 635
Estimated Gas Usage: 15438 - 125647
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 2426
Offset: 2975
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../new/0xc85306056a212863b6f6413bba6669d62a70f31a.sol:130

function init(address liqToken) public isAdmin{
    require(lastDrawing==0,"must be before any dispersal");
    liquidityToken=ERC20(liqToken);
    startingLiquidityTokens=liquidityToken.balanceOf(address(this));
  }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.931579
Transaction Length: 2
Severity: High
Contract: Lottery
Function name: setWinningIndex1(bytes32)
PC address: 5932
Estimated Gas Usage: 9224 - 64211
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc85306056a212863b6f6413bba6669d62a70f31a.sol:140

block.number+1

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x41097f634ff8998153644cc04a6016280b0b6406.sol
Total states:475
5.764258
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xBc39429B98EE55D2e4F77b852F22ad3C90255203.sol
Total states:9233
31.395112
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x7aed3c28fa8f6580cbb6f5ed14888b8d923608dc.sol
Total states:44520
261.244458
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.646838
Transaction Length: 1
Severity: High
Contract: PRNCToken
Function name: batchTransfer(address[],uint256[])
PC address: 1272
Estimated Gas Usage: 385 - 480
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x7aed3c28fa8f6580cbb6f5ed14888b8d923608dc.sol:5

olidity 0.5.17;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.382428
Transaction Length: 1
Severity: High
Contract: PRNCToken
Function name: batchTransfer(address[],uint256[])
PC address: 1274
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x7aed3c28fa8f6580cbb6f5ed14888b8d923608dc.sol:3

*/

//pragma solidity 0.5.17;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.189550
Transaction Length: 1
Severity: High
Contract: PRNCToken
Function name: batchTransfer(address[],uint256[])
PC address: 1357
Estimated Gas Usage: 561 - 656
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x7aed3c28fa8f6580cbb6f5ed14888b8d923608dc.sol:5

olidity 0.5.17;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:26.477610
Transaction Length: 1
Severity: High
Contract: PRNCToken
Function name: batchTransfer(address[],uint256[])
PC address: 1359
Estimated Gas Usage: 561 - 656
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x7aed3c28fa8f6580cbb6f5ed14888b8d923608dc.sol:3

*/

//pragma solidity 0.5.17;
pragma

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:04.290315
Transaction Length: 1
Severity: Low
Contract: StandardToken
Function name: burnFrom(address,uint256)
PC address: 5663
Estimated Gas Usage: 884 - 1169
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x7aed3c28fa8f6580cbb6f5ed14888b8d923608dc.sol:49

assert(b <= a)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:24.132542
Transaction Length: 2
Severity: Low
Contract: StandardToken
Function name: burnFrom(address,uint256)
PC address: 5663
Estimated Gas Usage: 884 - 1169
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x7aed3c28fa8f6580cbb6f5ed14888b8d923608dc.sol:49

assert(b <= a)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:20.997460
Transaction Length: 2
Severity: High
Contract: StandardToken
Function name: increaseApproval(address,uint256)
PC address: 5681
Estimated Gas Usage: 980 - 1455
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x7aed3c28fa8f6580cbb6f5ed14888b8d923608dc.sol:56

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:27.967497
Transaction Length: 2
Severity: Low
Contract: StandardToken
Function name: increaseApproval(address,uint256)
PC address: 5694
Estimated Gas Usage: 990 - 1465
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x7aed3c28fa8f6580cbb6f5ed14888b8d923608dc.sol:57

assert(c >= a)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:04.350762
Transaction Length: 1
Severity: Low
Contract: PRNCToken
Function name: burnFrom(address,uint256)
PC address: 7077
Estimated Gas Usage: 907 - 1192
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x7aed3c28fa8f6580cbb6f5ed14888b8d923608dc.sol:49

assert(b <= a)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:56.054176
Transaction Length: 2
Severity: Low
Contract: PRNCToken
Function name: burnFrom(address,uint256)
PC address: 7077
Estimated Gas Usage: 907 - 1192
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x7aed3c28fa8f6580cbb6f5ed14888b8d923608dc.sol:49

assert(b <= a)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:22.722640
Transaction Length: 2
Severity: High
Contract: PRNCToken
Function name: increaseApproval(address,uint256)
PC address: 7095
Estimated Gas Usage: 958 - 1433
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x7aed3c28fa8f6580cbb6f5ed14888b8d923608dc.sol:56

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:59.937450
Transaction Length: 2
Severity: Low
Contract: PRNCToken
Function name: increaseApproval(address,uint256)
PC address: 7108
Estimated Gas Usage: 968 - 1443
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x7aed3c28fa8f6580cbb6f5ed14888b8d923608dc.sol:57

assert(c >= a)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x5e602265a972ae4d3ba11f21afbb676b4ed251911.sol
Total states:426
0.668393
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x6eb47d6d3c3faa8cefb0a389941f22644e554f7d.sol
Total states:2324
1.868751
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x5ba7caa4ea791add309625025594881425662a20.sol
Total states:305
3.723335
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x6fafad57060201d8fac9d190d4f42ef1e68494c2.sol
Total states:24490
88.647162
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.097844
Transaction Length: 0
Severity: High
Contract: LexAIR
Function name: constructor
PC address: 110
Estimated Gas Usage: 257 - 3030
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x6fafad57060201d8fac9d190d4f42ef1e68494c2.sol:10

█████╗

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.113085
Transaction Length: 0
Severity: High
Contract: LexAIR
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x6fafad57060201d8fac9d190d4f42ef1e68494c2.sol:9

█╔██╗ 
███████╗█

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.922420
Transaction Length: 1
Severity: High
Contract: LexAIR
Function name: updateMessage(string)
PC address: 275
Estimated Gas Usage: 319 - 414
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x6fafad57060201d8fac9d190d4f42ef1e68494c2.sol:3

*/

/*
██╗     ████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.947464
Transaction Length: 1
Severity: High
Contract: LexAIR
Function name: deregister(address[],bytes32)
PC address: 394
Estimated Gas Usage: 341 - 436
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x6fafad57060201d8fac9d190d4f42ef1e68494c2.sol:6

     ████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.787212
Transaction Length: 1
Severity: High
Contract: LexAIR
Function name: deregister(address[],bytes32)
PC address: 396
Estimated Gas Usage: 341 - 436
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x6fafad57060201d8fac9d190d4f42ef1e68494c2.sol:3

*/

/*
██╗     █████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:15.383850
Transaction Length: 1
Severity: High
Contract: LexAIR
Function name: register(address[],bytes32)
PC address: 735
Estimated Gas Usage: 318 - 413
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x6fafad57060201d8fac9d190d4f42ef1e68494c2.sol:6

     ████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:18.417829
Transaction Length: 1
Severity: High
Contract: LexAIR
Function name: register(address[],bytes32)
PC address: 737
Estimated Gas Usage: 318 - 413
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x6fafad57060201d8fac9d190d4f42ef1e68494c2.sol:3

*/

/*
██╗     █████

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x7b1be7f8e6431514b20029cb7f2242ff9081b4b2.sol
Total states:1367
2.982965
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x4F9845130168743Cb8f602FEFE82d2bcB6B9FEe9.sol
Total states:1999
2.896308
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xe4f6da994a9694ae64de34858f19440b4ff32ac6.sol
Total states:18680
144.590713
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.823527
Transaction Length: 1
Severity: High
Contract: HeritageFi
Function name: bulkTransfer(address[],uint256[])
PC address: 757
Estimated Gas Usage: 408 - 503
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xe4f6da994a9694ae64de34858f19440b4ff32ac6.sol:5

olidity ^0.5.17;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.887256
Transaction Length: 1
Severity: High
Contract: HeritageFi
Function name: bulkTransfer(address[],uint256[])
PC address: 759
Estimated Gas Usage: 408 - 503
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xe4f6da994a9694ae64de34858f19440b4ff32ac6.sol:3

*/

//pragma solidity ^0.5.17;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.744513
Transaction Length: 1
Severity: High
Contract: HeritageFi
Function name: bulkTransfer(address[],uint256[])
PC address: 842
Estimated Gas Usage: 584 - 679
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xe4f6da994a9694ae64de34858f19440b4ff32ac6.sol:5

olidity ^0.5.17;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:26.076903
Transaction Length: 1
Severity: High
Contract: HeritageFi
Function name: bulkTransfer(address[],uint256[])
PC address: 844
Estimated Gas Usage: 584 - 679
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xe4f6da994a9694ae64de34858f19440b4ff32ac6.sol:3

*/

//pragma solidity ^0.5.17;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:40.217248
Transaction Length: 1
Severity: High
Contract: HeritageFi
Function name: transferAndCall(address,uint256,bytes)
PC address: 1417
Estimated Gas Usage: 511 - 606
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xe4f6da994a9694ae64de34858f19440b4ff32ac6.sol:3

*/

//pragma solidity ^0.5.17;
prag

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:46.445976
Transaction Length: 1
Severity: Low
Contract: HeritageFi
Function name: unfreeze(uint256)
PC address: 6434
Estimated Gas Usage: 1375 - 1660
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xe4f6da994a9694ae64de34858f19440b4ff32ac6.sol:212

_burnedAmount * FLOAT_SCALAR / info.totalFrozen

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:24.401873
Transaction Length: 2
Severity: Low
Contract: HeritageFi
Function name: unfreeze(uint256)
PC address: 6434
Estimated Gas Usage: 1375 - 1660
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xe4f6da994a9694ae64de34858f19440b4ff32ac6.sol:212

_burnedAmount * FLOAT_SCALAR / info.totalFrozen

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xbca5fc48d3d0310204965f6d22764add6989ca06.sol
Total states:3620
6.032401
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xd1902581868163BEf61776cfD27228EE5074be8F.sol
Total states:10702
14.797331
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.071194
Transaction Length: 1
Severity: Low
Contract: StakingRewardsAccrualCapped
Function name: kyfInstancesArray(uint256)
PC address: 4522
Estimated Gas Usage: 790 - 885
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xd1902581868163BEf61776cfD27228EE5074be8F.sol:1111

address[] public kyfInstancesArray

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xBf198A82F39Ec0E989F33D16Aa86A6A9660e9776.sol
Total states:537
3.46091
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xe6bb2220819569b8e9d8265c49ca6c79e15a1559.sol
Total states:2632
11.900721
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x4e72b11b92308f6ada9b212274b07f70fcd0def4.sol
Total states:8674
34.223983
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.212262
Transaction Length: 1
Severity: Low
Contract: Layer2Base
Function name: EROs(uint256)
PC address: 4148
Estimated Gas Usage: 746 - 841
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x4e72b11b92308f6ada9b212274b07f70fcd0def4.sol:1389

Data.Request[] public EROs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.195380
Transaction Length: 1
Severity: Low
Contract: Layer2Storage
Function name: EROs(uint256)
PC address: 4148
Estimated Gas Usage: 746 - 841
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x4e72b11b92308f6ada9b212274b07f70fcd0def4.sol:1389

Data.Request[] public EROs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.658228
Transaction Length: 1
Severity: Low
Contract: Layer2Base
Function name: URBs(uint256)
PC address: 4631
Estimated Gas Usage: 723 - 818
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x4e72b11b92308f6ada9b212274b07f70fcd0def4.sol:1394

Data.RequestBlock[] public URBs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.680228
Transaction Length: 1
Severity: Low
Contract: Layer2Storage
Function name: URBs(uint256)
PC address: 4631
Estimated Gas Usage: 723 - 818
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x4e72b11b92308f6ada9b212274b07f70fcd0def4.sol:1394

Data.RequestBlock[] public URBs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:02.236843
Transaction Length: 1
Severity: Low
Contract: Layer2Base
Function name: ORBs(uint256)
PC address: 5009
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x4e72b11b92308f6ada9b212274b07f70fcd0def4.sol:1393

Data.RequestBlock[] public ORBs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:02.536481
Transaction Length: 1
Severity: Low
Contract: Layer2Storage
Function name: ORBs(uint256)
PC address: 5009
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x4e72b11b92308f6ada9b212274b07f70fcd0def4.sol:1393

Data.RequestBlock[] public ORBs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:02.605707
Transaction Length: 1
Severity: Low
Contract: Layer2Base
Function name: ERUs(uint256)
PC address: 5209
Estimated Gas Usage: 766 - 861
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x4e72b11b92308f6ada9b212274b07f70fcd0def4.sol:1390

Data.Request[] public ERUs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:02.889836
Transaction Length: 1
Severity: Low
Contract: Layer2Storage
Function name: ERUs(uint256)
PC address: 5209
Estimated Gas Usage: 766 - 861
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x4e72b11b92308f6ada9b212274b07f70fcd0def4.sol:1390

Data.Request[] public ERUs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:03.469244
Transaction Length: 1
Severity: Low
Contract: SubmitHandler
Function name: EROs(uint256)
PC address: 9197
Estimated Gas Usage: 790 - 885
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x4e72b11b92308f6ada9b212274b07f70fcd0def4.sol:1389

Data.Request[] public EROs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:03.990435
Transaction Length: 1
Severity: Low
Contract: SubmitHandler
Function name: URBs(uint256)
PC address: 9680
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x4e72b11b92308f6ada9b212274b07f70fcd0def4.sol:1394

Data.RequestBlock[] public URBs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:04.637461
Transaction Length: 1
Severity: Low
Contract: SubmitHandler
Function name: ORBs(uint256)
PC address: 10058
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x4e72b11b92308f6ada9b212274b07f70fcd0def4.sol:1393

Data.RequestBlock[] public ORBs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:05.020561
Transaction Length: 1
Severity: Low
Contract: SubmitHandler
Function name: ERUs(uint256)
PC address: 10258
Estimated Gas Usage: 766 - 861
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0x4e72b11b92308f6ada9b212274b07f70fcd0def4.sol:1390

Data.Request[] public ERUs

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x06d1f34fd7c055ae5ca39aa8c6a8e10100a45c01.sol
Total states:2849
18.01298
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.283981
Transaction Length: 1
Severity: High
Contract: Invoker
Function name: invoke(address,bytes,address,uint256)
PC address: 559
Estimated Gas Usage: 395 - 490
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x06d1f34fd7c055ae5ca39aa8c6a8e10100a45c01.sol:3



*/



// File: @openzeppelin/cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.829082
Transaction Length: 1
Severity: High
Contract: Invoker
Function name: setLiquidityProxies(address,address[])
PC address: 2195
Estimated Gas Usage: 373 - 468
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x06d1f34fd7c055ae5ca39aa8c6a8e10100a45c01.sol:9

e: @openzeppelin/cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.519154
Transaction Length: 1
Severity: High
Contract: Invoker
Function name: setLiquidityProxies(address,address[])
PC address: 2197
Estimated Gas Usage: 373 - 468
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x06d1f34fd7c055ae5ca39aa8c6a8e10100a45c01.sol:3



*/



// File: @openzeppelin/contr

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x5d4c6a60d80bad2bad174ab4da5d7e5a2097d6cc.sol
Total states:17674
692.393521
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.018695
Transaction Length: 1
Severity: High
Contract: Module
Function name: getModuleAddress(string)
PC address: 416
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5d4c6a60d80bad2bad174ab4da5d7e5a2097d6cc.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.313981
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 511
Estimated Gas Usage: 364 - 459
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5d4c6a60d80bad2bad174ab4da5d7e5a2097d6cc.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.613322
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 513
Estimated Gas Usage: 364 - 459
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5d4c6a60d80bad2bad174ab4da5d7e5a2097d6cc.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.273008
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 596
Estimated Gas Usage: 540 - 635
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5d4c6a60d80bad2bad174ab4da5d7e5a2097d6cc.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:19.265916
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 598
Estimated Gas Usage: 540 - 635
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5d4c6a60d80bad2bad174ab4da5d7e5a2097d6cc.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:31.488987
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 681
Estimated Gas Usage: 716 - 811
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5d4c6a60d80bad2bad174ab4da5d7e5a2097d6cc.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:52.024392
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 683
Estimated Gas Usage: 716 - 811
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5d4c6a60d80bad2bad174ab4da5d7e5a2097d6cc.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:12.639296
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 766
Estimated Gas Usage: 892 - 987
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5d4c6a60d80bad2bad174ab4da5d7e5a2097d6cc.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:36.417410
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 768
Estimated Gas Usage: 892 - 987
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5d4c6a60d80bad2bad174ab4da5d7e5a2097d6cc.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:08.893040
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: getModuleAddress(string)
PC address: 1453
Estimated Gas Usage: 451 - 546
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5d4c6a60d80bad2bad174ab4da5d7e5a2097d6cc.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.302737
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_renBTC
Function name: handleDeposit(address[],uint256[])
PC address: 1711
Estimated Gas Usage: 452 - 547
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5d4c6a60d80bad2bad174ab4da5d7e5a2097d6cc.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.178548
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_renBTC
Function name: handleDeposit(address[],uint256[])
PC address: 1713
Estimated Gas Usage: 452 - 547
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5d4c6a60d80bad2bad174ab4da5d7e5a2097d6cc.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:15.305227
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_renBTC
Function name: handleDeposit(address[],uint256[])
PC address: 1859
Estimated Gas Usage: 785 - 3562
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5d4c6a60d80bad2bad174ab4da5d7e5a2097d6cc.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:28.187294
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_renBTC
Function name: handleDeposit(address[],uint256[])
PC address: 1861
Estimated Gas Usage: 785 - 3562
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5d4c6a60d80bad2bad174ab4da5d7e5a2097d6cc.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:34.558063
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_renBTC
Function name: getModuleAddress(string)
PC address: 2143
Estimated Gas Usage: 407 - 502
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5d4c6a60d80bad2bad174ab4da5d7e5a2097d6cc.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:08.424254
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_renBTC
Function name: withdraw(address,uint256[])
PC address: 2508
Estimated Gas Usage: 397 - 492
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5d4c6a60d80bad2bad174ab4da5d7e5a2097d6cc.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:12.868863
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_renBTC
Function name: withdraw(address,uint256[])
PC address: 2510
Estimated Gas Usage: 397 - 492
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5d4c6a60d80bad2bad174ab4da5d7e5a2097d6cc.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:40.649014
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_renBTC
Function name: supportedTokens()
PC address: 3015
Estimated Gas Usage: 1250 - 2097
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5d4c6a60d80bad2bad174ab4da5d7e5a2097d6cc.sol:1597

function supportedTokens() public view returns(address[] memory){
        return _registeredTokens;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:11.929299
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_renBTC
Function name: supportedTokens()
PC address: 3055
Estimated Gas Usage: 1400 - 2623
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5d4c6a60d80bad2bad174ab4da5d7e5a2097d6cc.sol:1597

function supportedTokens() public view returns(address[] memory){
        return _registeredTokens;
    }

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x6afba805ab9740ecd93e4e5cc2ef4eac37654914.sol
Total states:426
0.850778
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x5b4f9ed98002Cb15Dc5d1166Cf0e80cF58b8a181.sol
Total states:1179
0.920239
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.127189
Transaction Length: 0
Severity: High
Contract: MultisigVaultETH
Function name: constructor
PC address: 120
Estimated Gas Usage: 287 - 3153
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0x5b4f9ed98002Cb15Dc5d1166Cf0e80cF58b8a181.sol:14

olidity wrap on overf

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xcd9af4fcb3b0eac14bff9f2753f627d43ee08da9.sol
Total states:1880
95.07851
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.300123
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShip(address[])
PC address: 360
Estimated Gas Usage: 342 - 437
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcd9af4fcb3b0eac14bff9f2753f627d43ee08da9.sol:5

penzeppelin-solidity/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.022457
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShip(address[])
PC address: 362
Estimated Gas Usage: 342 - 437
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcd9af4fcb3b0eac14bff9f2753f627d43ee08da9.sol:3

*/

// File: openzeppelin-solidity/c

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:37.036641
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShipWithHowMany(address[],uint256)
PC address: 776
Estimated Gas Usage: 341 - 436
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcd9af4fcb3b0eac14bff9f2753f627d43ee08da9.sol:5

penzeppelin-solidity/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:39.920416
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShipWithHowMany(address[],uint256)
PC address: 778
Estimated Gas Usage: 341 - 436
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcd9af4fcb3b0eac14bff9f2753f627d43ee08da9.sol:3

*/

// File: openzeppelin-solidity/c

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:29.428212
Transaction Length: 1
Severity: Low
Contract: BeneficiaryOperations
Function name: allOperations(uint256)
PC address: 1715
Estimated Gas Usage: 701 - 796
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xcd9af4fcb3b0eac14bff9f2753f627d43ee08da9.sol:386

bytes32[] public allOperations

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:30.018808
Transaction Length: 1
Severity: Low
Contract: BeneficiaryOperations
Function name: beneficiaries(uint256)
PC address: 4636
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xcd9af4fcb3b0eac14bff9f2753f627d43ee08da9.sol:385

address[] public beneficiaries

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x5cd2aaab38ad597f807e404f78cf52af423325f5.sol
Total states:654
0.538628
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0x6feef983562a28ecfe80b8854c4dcd4af0899d36.sol
Total states:1237
3.482107
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:01.476901
Transaction Length: 1
Severity: Low
Contract: ESDRouterV1
Function name: addLiquidityUSDCOnly(uint256)
PC address: 1279
Estimated Gas Usage: 2046 - 3037
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../new/0x6feef983562a28ecfe80b8854c4dcd4af0899d36.sol:340

usdcToken.transferFrom(msg.sender, address(this), usdcAmountToAdd)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xc85306056a212863b6f6413bba6669d62a70f31a2.sol
Total states:4358
11.072781
==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:00.511969
Transaction Length: 1
Severity: Medium
Contract: Lottery
Function name: init(address)
PC address: 635
Estimated Gas Usage: 15432 - 125641
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 2426
Offset: 2975
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../new/0xc85306056a212863b6f6413bba6669d62a70f31a2.sol:130

function init(address liqToken) public isAdmin{
    require(lastDrawing==0,"must be before any dispersal");
    liquidityToken=ERC20(liqToken);
    startingLiquidityTokens=liquidityToken.balanceOf(address(this));
  }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:00.729182
Transaction Length: 2
Severity: Medium
Contract: Lottery
Function name: init(address)
PC address: 635
Estimated Gas Usage: 15438 - 125647
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 2426
Offset: 2975
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../new/0xc85306056a212863b6f6413bba6669d62a70f31a2.sol:130

function init(address liqToken) public isAdmin{
    require(lastDrawing==0,"must be before any dispersal");
    liquidityToken=ERC20(liqToken);
    startingLiquidityTokens=liquidityToken.balanceOf(address(this));
  }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.337968
Transaction Length: 2
Severity: High
Contract: Lottery
Function name: setWinningIndex1(bytes32)
PC address: 5932
Estimated Gas Usage: 9224 - 64211
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc85306056a212863b6f6413bba6669d62a70f31a2.sol:140

block.number+1

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xcf8f32e032f432b02393636b2092a6bef975fbf9.sol
Total states:480
1.547944
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.075107
Transaction Length: 0
Severity: High
Contract: TokenContract
Function name: constructor
PC address: 166
Estimated Gas Usage: 11191 - 54624
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xcf8f32e032f432b02393636b2092a6bef975fbf9.sol:13

ions, this simplifies the implementation of

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xbdB687373A205bb7eD379A1c85940E8C162f8930.sol
Total states:20618
684.446984
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.574090
Transaction Length: 1
Severity: High
Contract: HashRegistrar
Function name: invalidateName(string)
PC address: 588
Estimated Gas Usage: 386 - 481
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xbdB687373A205bb7eD379A1c85940E8C162f8930.sol:3

*/

//pragma solidity >=0.4.24;
pra

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.905007
Transaction Length: 1
Severity: High
Contract: ERC721
Function name: safeTransferFrom(address,address,uint256,bytes)
PC address: 1136
Estimated Gas Usage: 477 - 572
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xbdB687373A205bb7eD379A1c85940E8C162f8930.sol:3

*/

//pragma solidity >=0.4.24;
pra

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:37.544432
Transaction Length: 1
Severity: High
Contract: HashRegistrar
Function name: eraseNode(bytes32[])
PC address: 1967
Estimated Gas Usage: 340 - 435
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xbdB687373A205bb7eD379A1c85940E8C162f8930.sol:5

olidity >=0.4.24;
pra

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:41.400982
Transaction Length: 1
Severity: High
Contract: HashRegistrar
Function name: eraseNode(bytes32[])
PC address: 1969
Estimated Gas Usage: 340 - 435
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xbdB687373A205bb7eD379A1c85940E8C162f8930.sol:3

*/

//pragma solidity >=0.4.24;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.161477
Transaction Length: 1
Severity: High
Contract: BaseRegistrarImplementation
Function name: safeTransferFrom(address,address,uint256,bytes)
PC address: 2062
Estimated Gas Usage: 478 - 573
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xbdB687373A205bb7eD379A1c85940E8C162f8930.sol:3

*/

//pragma solidity >=0.4.24;
pra

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:54.607655
Transaction Length: 1
Severity: High
Contract: HashRegistrar
Function name: startAuctions(bytes32[])
PC address: 2101
Estimated Gas Usage: 362 - 457
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xbdB687373A205bb7eD379A1c85940E8C162f8930.sol:5

olidity >=0.4.24;
pra

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:57.885184
Transaction Length: 1
Severity: High
Contract: HashRegistrar
Function name: startAuctions(bytes32[])
PC address: 2103
Estimated Gas Usage: 362 - 457
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xbdB687373A205bb7eD379A1c85940E8C162f8930.sol:3

*/

//pragma solidity >=0.4.24;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:05.799534
Transaction Length: 1
Severity: High
Contract: HashRegistrar
Function name: startAuctionsAndBid(bytes32[],bytes32)
PC address: 2425
Estimated Gas Usage: 426 - 521
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xbdB687373A205bb7eD379A1c85940E8C162f8930.sol:5

olidity >=0.4.24;
pra

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:08.674894
Transaction Length: 1
Severity: High
Contract: HashRegistrar
Function name: startAuctionsAndBid(bytes32[],bytes32)
PC address: 2427
Estimated Gas Usage: 426 - 521
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xbdB687373A205bb7eD379A1c85940E8C162f8930.sol:3

*/

//pragma solidity >=0.4.24;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.305259
Transaction Length: 1
Severity: High
Contract: HashRegistrar
Function name: releaseDeed(bytes32)
PC address: 3477
Estimated Gas Usage: 1001 - 1946
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xbdB687373A205bb7eD379A1c85940E8C162f8930.sol:596

registryStarted + ((launchLength * (uint(_hash) >> 128)) >> 128)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:03.753257
Transaction Length: 1
Severity: Low
Contract: BaseRegistrarImplementation
Function name: available(uint256)
PC address: 5717
Estimated Gas Usage: 3349 - 38526
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../new/0xbdB687373A205bb7eD379A1c85940E8C162f8930.sol:1486

previousRegistrar.state(bytes32(id)) == Registrar.Mode.Open

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:24.435943
Transaction Length: 1
Severity: High
Contract: HashRegistrar
Function name: startAuctions(bytes32[])
PC address: 14872
Estimated Gas Usage: 1574 - 4630
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xbdB687373A205bb7eD379A1c85940E8C162f8930.sol:253

registryStarted + (365 * 4) * 1 days

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xc6de3a7e4112d5a62a8466af223c6f27e7f4efd2.sol
Total states:77
2.843416
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xc4caf58fafcb947eec3c99d6d92c49d437b2f93a.sol
Total states:447
0.869404
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../new/0xc4cec1a714ad2658df2060134ce03caeb1865912.sol
Total states:1986
20.224775
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.195231
Transaction Length: 1
Severity: High
Contract: StrategyAddTwoSidesOptimal
Function name: execute(address,uint256,bytes)
PC address: 726
Estimated Gas Usage: 376 - 471
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../new/0xc4cec1a714ad2658df2060134ce03caeb1865912.sol:3

*/

// File: openzeppelin-solidity-

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:00.179349
Transaction Length: 0
Severity: Medium
Contract: StrategyAddTwoSidesOptimal
Function name: constructor
PC address: 867
Estimated Gas Usage: 38791 - 235224
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 375
Offset: 664
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../new/0xc4cec1a714ad2658df2060134ce03caeb1865912.sol:619

contract StrategyAddTwoSidesOptimal is Ownable, ReentrancyGuard, Strategy {
    using SafeToken for address;
    using SafeMath for uint256;

    IUniswapV2Factory public factory;
    IUniswapV2Router02 public router;
    address public weth;
    address public goblin;

    /// @dev Create a new add two-side optimal strategy instance.
    /// @param _router The Uniswap router smart contract.
    constructor(IUniswapV2Router02 _router, address _goblin) public {
        factory = IUniswapV2Factory(_router.factory());
        router = _router;
        weth = _router.WETH();
        goblin = _goblin;
    }
    
    /// @dev Throws if called by any account other than the goblin.
    modifier onlyGoblin() {
        require(isGoblin(), "caller is not the goblin");
        _;
    }

    /// @dev Returns true if the caller is the current goblin.
    function isGoblin() public view returns (bool) {
        return msg.sender == goblin;
    }

    /// @dev Compute optimal deposit amount
    /// @param amtA amount of token A desired to deposit
    /// @param amtB amonut of token B desired to deposit
    /// @param resA amount of token A in reserve
    /// @param resB amount of token B in reserve
    function optimalDeposit(
        uint256 amtA,
        uint256 amtB,
        uint256 resA,
        uint256 resB
    ) internal pure returns (uint256 swapAmt, bool isReversed) {
        if (amtA.mul(resB) >= amtB.mul(resA)) {
            swapAmt = _optimalDepositA(amtA, amtB, resA, resB);
            isReversed = false;
        } else {
            swapAmt = _optimalDepositA(amtB, amtA, resB, resA);
            isReversed = true;
        }
    }

    /// @dev Compute optimal deposit amount helper
    /// @param amtA amount of token A desired to deposit
    /// @param amtB amonut of token B desired to deposit
    /// @param resA amount of token A in reserve
    /// @param resB amount of token B in reserve
    function _optimalDepositA(
        uint256 amtA,
        uint256 amtB,
        uint256 resA,
        uint256 resB
    ) internal pure returns (uint256) {
        require(amtA.mul(resB) >= amtB.mul(resA), "Reversed");

        uint256 a = 997;
        uint256 b = uint256(1997).mul(resA);
        uint256 _c = (amtA.mul(resB)).sub(amtB.mul(resA));
        uint256 c = _c.mul(1000).div(amtB.add(resB)).mul(resA);

        uint256 d = a.mul(c).mul(4);
        uint256 e = Math.sqrt(b.mul(b).add(d));

        uint256 numerator = e.sub(b);
        uint256 denominator = a.mul(2);

        return numerator.div(denominator);
    }

    /// @dev Execute worker strategy. Take LP tokens + ETH. Return LP tokens + ETH.
    /// @param user User address
    /// @param data Extra calldata information passed along to this strategy.
    function execute(address user, uint256, /* debt */ bytes calldata data) 
        external         
        payable  
        onlyGoblin       
        nonReentrant 
    {
        // 1. Find out what farming token we are dealing with.
        (address fToken, uint256 fAmount, uint256 minLPAmount) = abi.decode(data, (address, uint256, uint256));
        IUniswapV2Pair lpToken = IUniswapV2Pair(factory.getPair(fToken, weth));        
        // 2. Compute the optimal amount of ETH and fToken to be converted.  
        if (fAmount > 0) {  
            fToken.safeTransferFrom(user, address(this), fAmount);            
        }
        uint256 ethBalance = address(this).balance;
        uint256 swapAmt;
        bool isReversed;
        {
            (uint256 r0, uint256 r1, ) = lpToken.getReserves();
            (uint256 ethReserve, uint256 fReserve) = lpToken.token0() == weth ? (r0, r1) : (r1, r0);
            (swapAmt, isReversed) = optimalDeposit(ethBalance, fToken.myBalance(), ethReserve, fReserve);
        }
        // 3. Convert between ETH and farming tokens
        fToken.safeApprove(address(router), 0);
        fToken.safeApprove(address(router), uint256(-1));
        address[] memory path = new address[](2);
        (path[0], path[1]) = isReversed ? (fToken, weth) : (weth, fToken);
        if (isReversed) {
            router.swapExactTokensForETH(swapAmt, 0, path, address(this), now); // farming tokens to ETH
        } else {
            router.swapExactETHForTokens.value(swapAmt)(0, path, address(this), now); // ETH to farming tokens
        }
        // 4. Mint more LP tokens and return all LP tokens to the sender.
        (,, uint256 moreLPAmount) = router.addLiquidityETH.value(address(this).balance)(
            fToken, fToken.myBalance(), 0, 0, address(this), now
        );
        require(moreLPAmount >= minLPAmount, "insufficient LP tokens received");
        lpToken.transfer(msg.sender, lpToken.balanceOf(address(this)));
    }

    /// @dev Recover ERC20 tokens that were accidentally sent to this smart contract.
    /// @param token The token contract. Can be anything. This contract should not hold ERC20 tokens.
    /// @param to The address to send the tokens to.
    /// @param value The number of tokens to transfer to `to`.
    function recover(address token, address to, uint256 value) external onlyOwner nonReentrant {
        token.safeTransfer(to, value);
    }

    function() external payable {}
}

--------------------

