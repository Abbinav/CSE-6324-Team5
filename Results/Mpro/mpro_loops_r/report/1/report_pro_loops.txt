$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x87fe247d21642756dfc84028624196eaaa253934.sol
Total states:77
3.312333
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x1154D3A781e83cF44a1F11e67b1F70611Ce52953.sol
Total states:4414
5.757202
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x77a660753874723fa48460a179992cd29a5e617a.sol
Total states:50661
178.060229
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.826576
Transaction Length: 2
Severity: High
Contract: StandardToken
Function name: increaseApproval(address,uint256)
PC address: 4101
Estimated Gas Usage: 955 - 1430
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x77a660753874723fa48460a179992cd29a5e617a.sol:117

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:32.100267
Transaction Length: 2
Severity: Low
Contract: StandardToken
Function name: increaseApproval(address,uint256)
PC address: 4114
Estimated Gas Usage: 965 - 1440
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x77a660753874723fa48460a179992cd29a5e617a.sol:118

assert(c >= a)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.160558
Transaction Length: 2
Severity: High
Contract: MintableToken
Function name: increaseApproval(address,uint256)
PC address: 5869
Estimated Gas Usage: 955 - 1430
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x77a660753874723fa48460a179992cd29a5e617a.sol:117

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:32.402280
Transaction Length: 2
Severity: Low
Contract: MintableToken
Function name: increaseApproval(address,uint256)
PC address: 5882
Estimated Gas Usage: 965 - 1440
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x77a660753874723fa48460a179992cd29a5e617a.sol:118

assert(c >= a)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:02.819363
Transaction Length: 1
Severity: Low
Contract: FTIToken
Function name: contract_addr(uint256)
PC address: 6593
Estimated Gas Usage: 345 - 440
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x77a660753874723fa48460a179992cd29a5e617a.sol:374

address[5] public contract_addr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.019962
Transaction Length: 2
Severity: High
Contract: OptionsToken
Function name: increaseApproval(address,uint256)
PC address: 6601
Estimated Gas Usage: 955 - 1430
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x77a660753874723fa48460a179992cd29a5e617a.sol:117

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:33.793038
Transaction Length: 2
Severity: Low
Contract: OptionsToken
Function name: increaseApproval(address,uint256)
PC address: 6614
Estimated Gas Usage: 965 - 1440
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x77a660753874723fa48460a179992cd29a5e617a.sol:118

assert(c >= a)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:03.506260
Transaction Length: 1
Severity: Low
Contract: ContractableToken
Function name: contract_addr(uint256)
PC address: 7330
Estimated Gas Usage: 300 - 395
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x77a660753874723fa48460a179992cd29a5e617a.sol:374

address[5] public contract_addr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.202294
Transaction Length: 2
Severity: High
Contract: FTIToken
Function name: increaseApproval(address,uint256)
PC address: 7815
Estimated Gas Usage: 955 - 1430
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x77a660753874723fa48460a179992cd29a5e617a.sol:117

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:16.803832
Transaction Length: 2
Severity: Low
Contract: FTIToken
Function name: increaseApproval(address,uint256)
PC address: 7828
Estimated Gas Usage: 965 - 1440
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x77a660753874723fa48460a179992cd29a5e617a.sol:118

assert(c >= a)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.105533
Transaction Length: 2
Severity: High
Contract: ContractableToken
Function name: increaseApproval(address,uint256)
PC address: 8552
Estimated Gas Usage: 977 - 1452
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x77a660753874723fa48460a179992cd29a5e617a.sol:117

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:34.707044
Transaction Length: 2
Severity: Low
Contract: ContractableToken
Function name: increaseApproval(address,uint256)
PC address: 8565
Estimated Gas Usage: 987 - 1462
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x77a660753874723fa48460a179992cd29a5e617a.sol:118

assert(c >= a)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x8d704d4107cbe5ebe8c0236c5506b30bf8bad305.sol
Total states:272
83.023309
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.065125
Transaction Length: 0
Severity: High
Contract: VaultProRata
Function name: constructor
PC address: 408
Estimated Gas Usage: 82423 - 403508
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x8d704d4107cbe5ebe8c0236c5506b30bf8bad305.sol:34

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.612061
Transaction Length: 0
Severity: Low
Contract: VaultProRata
Function name: constructor
PC address: 422
Estimated Gas Usage: 82433 - 403518
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x8d704d4107cbe5ebe8c0236c5506b30bf8bad305.sol:35

assert(c >= a)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0xa90249101da7cdf0bc01795b9609c37719075275.sol
Total states:5149
63.244041
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.907721
Transaction Length: 1
Severity: High
Contract: UpsweepV1
Function name: reveal(uint8,string)
PC address: 1312
Estimated Gas Usage: 395 - 490
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xa90249101da7cdf0bc01795b9609c37719075275.sol:3

*/

//pragma solidity ^0.5.2;
pragm

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:23.182063
Transaction Length: 1
Severity: Low
Contract: UpsweepV1
Function name: balancesById(uint256,uint256)
PC address: 8333
Estimated Gas Usage: 412 - 697
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xa90249101da7cdf0bc01795b9609c37719075275.sol:53

mapping(uint => uint8[20]) public balancesById

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:28.751642
Transaction Length: 1
Severity: Low
Contract: UpsweepV1
Function name: bottleneckById(uint256,uint256)
PC address: 8389
Estimated Gas Usage: 434 - 719
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xa90249101da7cdf0bc01795b9609c37719075275.sol:54

mapping(uint => uint8[20]) public bottleneckById

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol
Total states:42108
472.120801
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:27.097931
Transaction Length: 1
Severity: High
Contract: Auction
Function name: disturbuteTokens(uint256,address[])
PC address: 3065
Estimated Gas Usage: 458 - 553
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:5

ontracts/InterFaces/I

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:31.886588
Transaction Length: 1
Severity: High
Contract: Auction
Function name: disturbuteTokens(uint256,address[])
PC address: 3067
Estimated Gas Usage: 458 - 553
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:3

*/

// File: contracts/InterFaces/IA

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:03.813569
Transaction Length: 1
Severity: Low
Contract: AuctionFundCollector
Function name: contributeWithEtherBehalf(address)
PC address: 9917
Estimated Gas Usage: 5965 - 77023
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1316

IWhiteList(whiteListAddress).addWalletBehalfExchange(msg.sender,_whom)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:06.343821
Transaction Length: 2
Severity: Low
Contract: AuctionFundCollector
Function name: contributeWithEtherBehalf(address)
PC address: 9917
Estimated Gas Usage: 5983 - 77041
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1316

IWhiteList(whiteListAddress).addWalletBehalfExchange(msg.sender,_whom)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:01:25.231272
Transaction Length: 1
Severity: Low
Contract: Auction
Function name: contributeWithEtherBehalf(address)
PC address: 14353
Estimated Gas Usage: 5943 - 77001
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1316

IWhiteList(whiteListAddress).addWalletBehalfExchange(msg.sender,_whom)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:01:47.040096
Transaction Length: 2
Severity: Low
Contract: Auction
Function name: contributeWithEtherBehalf(address)
PC address: 14353
Estimated Gas Usage: 5943 - 77001
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1316

IWhiteList(whiteListAddress).addWalletBehalfExchange(msg.sender,_whom)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x1940E2A20525B103dCC9884902b0186371227393.sol
Total states:3078
76.503309
==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.281240
Transaction Length: 1
Severity: High
Contract: Math
Function name: safeSub(uint256,uint256)
PC address: 601
Estimated Gas Usage: 527 - 622
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x1940E2A20525B103dCC9884902b0186371227393.sol:110

x - y

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:07.213500
Transaction Length: 1
Severity: Low
Contract: Math
Function name: safeDiv(uint256,uint256)
PC address: 689
Estimated Gas Usage: 542 - 637
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x1940E2A20525B103dCC9884902b0186371227393.sol:118

x / y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.931877
Transaction Length: 1
Severity: High
Contract: Math
Function name: rdiv(uint256,uint256)
PC address: 715
Estimated Gas Usage: 600 - 695
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x1940E2A20525B103dCC9884902b0186371227393.sol:114

x * y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.546926
Transaction Length: 1
Severity: High
Contract: Math
Function name: safeAdd(uint256,uint256)
PC address: 807
Estimated Gas Usage: 593 - 688
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x1940E2A20525B103dCC9884902b0186371227393.sol:106

x + y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:40.629634
Transaction Length: 1
Severity: High
Contract: Tranche
Function name: calcDisburse(address)
PC address: 4275
Estimated Gas Usage: 2548 - 37442
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x1940E2A20525B103dCC9884902b0186371227393.sol:5

sing https://da

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:38.701327
Transaction Length: 1
Severity: High
Contract: Tranche
Function name: calcDisburse(address)
PC address: 4278
Estimated Gas Usage: 2548 - 37442
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x1940E2A20525B103dCC9884902b0186371227393.sol:3



// Verified using https://dapp.tools

// 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:39.783077
Transaction Length: 1
Severity: High
Contract: Tranche
Function name: calcDisburse(address)
PC address: 4290
Estimated Gas Usage: 2548 - 37442
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x1940E2A20525B103dCC9884902b0186371227393.sol:310

epochTicker.lastEpochExecuted()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:44.837560
Transaction Length: 1
Severity: High
Contract: Tranche
Function name: tokenSupply()
PC address: 6164
Estimated Gas Usage: 2253 - 37147
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x1940E2A20525B103dCC9884902b0186371227393.sol:5

sing https://da

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:43.457566
Transaction Length: 1
Severity: High
Contract: Tranche
Function name: tokenSupply()
PC address: 6167
Estimated Gas Usage: 2253 - 37147
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x1940E2A20525B103dCC9884902b0186371227393.sol:3



// Verified using https://dapp.tools

// 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:44.202482
Transaction Length: 1
Severity: High
Contract: Tranche
Function name: tokenSupply()
PC address: 6179
Estimated Gas Usage: 2253 - 37147
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x1940E2A20525B103dCC9884902b0186371227393.sol:257

token.totalSupply()

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:47.482277
Transaction Length: 1
Severity: High
Contract: Tranche
Function name: safeSub(uint256,uint256)
PC address: 8512
Estimated Gas Usage: 595 - 690
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x1940E2A20525B103dCC9884902b0186371227393.sol:110

x - y

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:50.073280
Transaction Length: 1
Severity: Low
Contract: Tranche
Function name: safeDiv(uint256,uint256)
PC address: 8642
Estimated Gas Usage: 543 - 638
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x1940E2A20525B103dCC9884902b0186371227393.sol:118

x / y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:53.472147
Transaction Length: 1
Severity: High
Contract: Tranche
Function name: balance()
PC address: 8866
Estimated Gas Usage: 2912 - 38231
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x1940E2A20525B103dCC9884902b0186371227393.sol:5

sing https://da

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:51.728740
Transaction Length: 1
Severity: High
Contract: Tranche
Function name: balance()
PC address: 8869
Estimated Gas Usage: 2912 - 38231
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x1940E2A20525B103dCC9884902b0186371227393.sol:3



// Verified using https://dapp.tools

// 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:52.555333
Transaction Length: 1
Severity: High
Contract: Tranche
Function name: balance()
PC address: 8881
Estimated Gas Usage: 2912 - 38231
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x1940E2A20525B103dCC9884902b0186371227393.sol:253

currency.balanceOf(self)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:14.160414
Transaction Length: 1
Severity: High
Contract: Tranche
Function name: rmul(uint256,uint256)
PC address: 9230
Estimated Gas Usage: 636 - 731
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x1940E2A20525B103dCC9884902b0186371227393.sol:114

x * y

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:41.444582
Transaction Length: 1
Severity: High
Contract: Tranche
Function name: calcDisburse(address)
PC address: 13393
Estimated Gas Usage: 2548 - 37442
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x1940E2A20525B103dCC9884902b0186371227393.sol:81

 == 1); _; }
}

////// 

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0xfF535F02CE0Df35D52c7A1bdace447101D2514D3.sol
Total states:407
9.038234
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x8cad8fc4ff9f6478a0011cc369b098bea857cdec.sol
Total states:3610
81.653757
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.042392
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: initialize(uint256,uint256,address[],uint256[],address)
PC address: 787
Estimated Gas Usage: 461 - 556
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x8cad8fc4ff9f6478a0011cc369b098bea857cdec.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.673569
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: initialize(uint256,uint256,address[],uint256[],address)
PC address: 789
Estimated Gas Usage: 461 - 556
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x8cad8fc4ff9f6478a0011cc369b098bea857cdec.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:14.055493
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: initialize(uint256,uint256,address[],uint256[],address)
PC address: 872
Estimated Gas Usage: 637 - 732
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x8cad8fc4ff9f6478a0011cc369b098bea857cdec.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:23.676321
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: initialize(uint256,uint256,address[],uint256[],address)
PC address: 874
Estimated Gas Usage: 637 - 732
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x8cad8fc4ff9f6478a0011cc369b098bea857cdec.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:32.705906
Transaction Length: 1
Severity: Medium
Contract: LidTeamLock
Function name: startRelease()
PC address: 1025
Estimated Gas Usage: 20818 - 150697
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 4521
Offset: 4885
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop1/0x8cad8fc4ff9f6478a0011cc369b098bea857cdec.sol:694

function startRelease() external {

        require(releaseStart == 0, "Has already started.");

        require(address(this).balance != 0, "Must have some ether deposited.");

        require(lidToken.balanceOf(address(this)) != 0, "Must have some lid deposited.");

        startingLid = lidToken.balanceOf(address(this));

        startingEth = address(this).balance;

        releaseStart = now.add(24 hours);

    }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:00.673787
Transaction Length: 2
Severity: Medium
Contract: LidTeamLock
Function name: startRelease()
PC address: 1025
Estimated Gas Usage: 20818 - 150697
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 4521
Offset: 4885
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop1/0x8cad8fc4ff9f6478a0011cc369b098bea857cdec.sol:694

function startRelease() external {

        require(releaseStart == 0, "Has already started.");

        require(address(this).balance != 0, "Must have some ether deposited.");

        require(lidToken.balanceOf(address(this)) != 0, "Must have some lid deposited.");

        startingLid = lidToken.balanceOf(address(this));

        startingEth = address(this).balance;

        releaseStart = now.add(24 hours);

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:33.972046
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 1163
Estimated Gas Usage: 407 - 502
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x8cad8fc4ff9f6478a0011cc369b098bea857cdec.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:36.853848
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 1165
Estimated Gas Usage: 407 - 502
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x8cad8fc4ff9f6478a0011cc369b098bea857cdec.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:42.517944
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 1248
Estimated Gas Usage: 583 - 678
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x8cad8fc4ff9f6478a0011cc369b098bea857cdec.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:55.016888
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 1250
Estimated Gas Usage: 583 - 678
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x8cad8fc4ff9f6478a0011cc369b098bea857cdec.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.771734
Transaction Length: 1
Severity: Low
Contract: LidTeamLock
Function name: teamMemberBPs(uint256)
PC address: 1624
Estimated Gas Usage: 679 - 774
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x8cad8fc4ff9f6478a0011cc369b098bea857cdec.sol:572

uint[] public teamMemberBPs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:18.113763
Transaction Length: 1
Severity: Low
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 5028
Estimated Gas Usage: 1070 - 1165
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x8cad8fc4ff9f6478a0011cc369b098bea857cdec.sol:720

teamMemberAddresses[0]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:18.573174
Transaction Length: 1
Severity: Low
Contract: LidTeamLock
Function name: teamMemberAddresses(uint256)
PC address: 5599
Estimated Gas Usage: 678 - 773
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x8cad8fc4ff9f6478a0011cc369b098bea857cdec.sol:570

address payable[] public teamMemberAddresses

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:31.717856
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: startRelease()
PC address: 6647
Estimated Gas Usage: 15758 - 125637
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x8cad8fc4ff9f6478a0011cc369b098bea857cdec.sol:186

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x49d184cb5665e197286db0379d1ee84a37a44fd8.sol
Total states:1721
2.201298
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0xe353b9104d6b6135042ca147f19a39b3388bacc4.sol
Total states:654
0.608933
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0xf3a3601406227c93ee3460834ad8f23f457f0c33.sol
Total states:14395
57.087796
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.466315
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1004
Estimated Gas Usage: 417 - 512
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xf3a3601406227c93ee3460834ad8f23f457f0c33.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.650528
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1006
Estimated Gas Usage: 417 - 512
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xf3a3601406227c93ee3460834ad8f23f457f0c33.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:14.203496
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1089
Estimated Gas Usage: 593 - 688
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xf3a3601406227c93ee3460834ad8f23f457f0c33.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:22.627909
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1091
Estimated Gas Usage: 593 - 688
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xf3a3601406227c93ee3460834ad8f23f457f0c33.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.000622
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeBP(uint256)
PC address: 2585
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xf3a3601406227c93ee3460834ad8f23f457f0c33.sol:629

uint[] public bonusRangeBP

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:36.147492
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeStart(uint256)
PC address: 6017
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xf3a3601406227c93ee3460834ad8f23f457f0c33.sol:628

uint[] public bonusRangeStart

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:33.407872
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: calculateRatePerEth(uint256,uint256,uint256)
PC address: 6866
Estimated Gas Usage: 955 - 1050
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xf3a3601406227c93ee3460834ad8f23f457f0c33.sol:163

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0xB0DC5E382651A35a7d7d5ec2034De3c2E6C86b1a.sol
Total states:18383
808.831465
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.871665
Transaction Length: 1
Severity: High
Contract: Cryptography
Function name: recover(bytes32,bytes)
PC address: 170
Estimated Gas Usage: 323 - 418
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xB0DC5E382651A35a7d7d5ec2034De3c2E6C86b1a.sol:3

*/

// File: contracts/common/Valid

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.861848
Transaction Length: 1
Severity: High
Contract: WithEntry
Function name: recover(bytes32,bytes)
PC address: 170
Estimated Gas Usage: 323 - 418
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xB0DC5E382651A35a7d7d5ec2034De3c2E6C86b1a.sol:3

*/

// File: contracts/common/Valid

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.820981
Transaction Length: 1
Severity: High
Contract: MerkleProof
Function name: checkProofOrdered(bytes,bytes32,bytes32,uint256)
PC address: 193
Estimated Gas Usage: 296 - 391
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xB0DC5E382651A35a7d7d5ec2034De3c2E6C86b1a.sol:3

*/

// File: contracts/common/Valid

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:00.189189
Transaction Length: 1
Severity: Medium
Contract: RegistryLogic
Function name: switchOff()
PC address: 288
Estimated Gas Usage: 11676 - 102987
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 1619
Offset: 1899
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop1/0xB0DC5E382651A35a7d7d5ec2034De3c2E6C86b1a.sol:495

function switchOff() external onlyOwner {
    uint32 totalAppsCount = GluonView(gluon).totalAppsCount();
    for (uint32 i = 2; i < totalAppsCount; i++) {
      AppState appState = AppState(GluonView(gluon).current(i));
      require(!appState.isOn(), "One of the apps is still ON");
    }
    switchOff_();
  }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:04.530651
Transaction Length: 2
Severity: Medium
Contract: RegistryLogic
Function name: switchOff()
PC address: 288
Estimated Gas Usage: 11676 - 102987
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 1619
Offset: 1899
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop1/0xB0DC5E382651A35a7d7d5ec2034De3c2E6C86b1a.sol:495

function switchOff() external onlyOwner {
    uint32 totalAppsCount = GluonView(gluon).totalAppsCount();
    for (uint32 i = 2; i < totalAppsCount; i++) {
      AppState appState = AppState(GluonView(gluon).current(i));
      require(!appState.isOn(), "One of the apps is still ON");
    }
    switchOff_();
  }

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.647946
Transaction Length: 1
Severity: Low
Contract: SubChain
Function name: subChains(uint256)
PC address: 431
Estimated Gas Usage: 634 - 729
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xB0DC5E382651A35a7d7d5ec2034De3c2E6C86b1a.sol:25

address[] public subChains

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.894135
Transaction Length: 2
Severity: Low
Contract: SubChain
Function name: subChains(uint256)
PC address: 431
Estimated Gas Usage: 634 - 729
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xB0DC5E382651A35a7d7d5ec2034De3c2E6C86b1a.sol:25

address[] public subChains

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.911905
Transaction Length: 1
Severity: High
Contract: RegistryLogic
Function name: debit(address,bytes)
PC address: 906
Estimated Gas Usage: 396 - 491
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xB0DC5E382651A35a7d7d5ec2034De3c2E6C86b1a.sol:3

*/

// File: contracts/common/Valid

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:06.462467
Transaction Length: 1
Severity: Medium
Contract: RegistryLogic
Function name: translate(address)
PC address: 1262
Estimated Gas Usage: 4566 - 74726
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 4666
Offset: 4967
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop1/0xB0DC5E382651A35a7d7d5ec2034De3c2E6C86b1a.sol:469

function translate(address apiKey) public view returns (address) {
    address account = data.accounts(apiKey);
    if (account == address(0x0)) account = old.translate(apiKey);
    return account;
  }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:12.695268
Transaction Length: 2
Severity: Medium
Contract: RegistryLogic
Function name: translate(address)
PC address: 1262
Estimated Gas Usage: 4566 - 74726
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 4666
Offset: 4967
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop1/0xB0DC5E382651A35a7d7d5ec2034De3c2E6C86b1a.sol:469

function translate(address apiKey) public view returns (address) {
    address account = data.accounts(apiKey);
    if (account == address(0x0)) account = old.translate(apiKey);
    return account;
  }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:15.269846
Transaction Length: 1
Severity: High
Contract: MerkleProof
Function name: checkProofOrdered(bytes,bytes32,bytes32,uint256)
PC address: 1359
Estimated Gas Usage: 1224 - 5313
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xB0DC5E382651A35a7d7d5ec2034De3c2E6C86b1a.sol:96

abi.encodePacked(abi.encodePacked(element, hash))

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:07:53.732656
Transaction Length: 1
Severity: High
Contract: MerkleProof
Function name: checkProofOrdered(bytes,bytes32,bytes32,uint256)
PC address: 1536
Estimated Gas Usage: 1249 - 5668
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xB0DC5E382651A35a7d7d5ec2034De3c2E6C86b1a.sol:99

abi.encodePacked(abi.encodePacked(hash, element))

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:10.498178
Transaction Length: 2
Severity: Low
Contract: RegistryLogic
Function name: upgrade()
PC address: 5934
Estimated Gas Usage: 9246 - 31809
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop1/0xB0DC5E382651A35a7d7d5ec2034De3c2E6C86b1a.sol:385

appGovernance.activate(id)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x3aD683B550b75942B0Bc89c1E1E7fF5D64A2Cc24.sol
Total states:1508
23.198337
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol
Total states:1104
6.679188
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.448064
Transaction Length: 1
Severity: Low
Contract: LoihiStorage
Function name: reserves(uint256)
PC address: 1334
Estimated Gas Usage: 767 - 862
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol:187

address[] public reserves

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.846084
Transaction Length: 1
Severity: Low
Contract: LoihiStorage
Function name: numeraires(uint256)
PC address: 1491
Estimated Gas Usage: 700 - 795
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol:186

address[] public numeraires

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.338092
Transaction Length: 1
Severity: Low
Contract: LoihiStorage
Function name: derivatives(uint256)
PC address: 1596
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol:185

address[] public derivatives

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x3a72d1595f3c2765d9c5f8fcc6d6bf88fb08a739.sol
Total states:426
0.791448
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x2545ca44b7220e4a640b40696e7318b360e18920.sol
Total states:2709
12.119644
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0xad81748b316716070005c6664e8ef562dfb9d6022.sol
Total states:736
1.397793
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x2f34e7326319d9f250161b2c2c479f22621390a7.sol
Total states:1781
2.479699
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0xa784a7e961e6d400e2ce1f66f6468be5fe2ad0fb.sol
Total states:16824
34.932446
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.716688
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3044
Estimated Gas Usage: 989 - 1464
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xa784a7e961e6d400e2ce1f66f6468be5fe2ad0fb.sol:38

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.484659
Transaction Length: 1
Severity: Low
Contract: BOCClassic
Function name: lockState(address,uint256)
PC address: 4015
Estimated Gas Usage: 830 - 1115
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xa784a7e961e6d400e2ce1f66f6468be5fe2ad0fb.sol:319

lockInfo[_holder][_idx]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.382084
Transaction Length: 2
Severity: High
Contract: BOCClassic
Function name: increaseAllowance(address,uint256)
PC address: 11746
Estimated Gas Usage: 968 - 1443
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xa784a7e961e6d400e2ce1f66f6468be5fe2ad0fb.sol:38

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x1d2dcb87edc36c5078659fae40d70e503a7fe7b8.sol
Total states:2324
1.830056
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x52f6373a7c534153d005382c25b5c23b94a76b19.sol
Total states:18066
29.627456
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.364904
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3244
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x52f6373a7c534153d005382c25b5c23b94a76b19.sol:134

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:05.661575
Transaction Length: 1
Severity: Low
Contract: SpringField
Function name: stakers(uint256)
PC address: 8265
Estimated Gas Usage: 788 - 883
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x52f6373a7c534153d005382c25b5c23b94a76b19.sol:556

address[] public stakers

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.166368
Transaction Length: 1
Severity: High
Contract: SpringField
Function name: enter(uint256)
PC address: 9939
Estimated Gas Usage: 42946 - 187108
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x52f6373a7c534153d005382c25b5c23b94a76b19.sol:134

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol
Total states:20921
143.018022
==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:41.777907
Transaction Length: 2
Severity: Medium
Contract: PooledStaking
Function name: changeDependentContractAddress()
PC address: 968
Estimated Gas Usage: 32191 - 205455
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 5147
Offset: 5444
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop1/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol:1428

function changeDependentContractAddress() public {

    token = NXMToken(master.tokenAddress());
    tokenController = ITokenController(master.getLatestAddress("TC"));

    if (!initialized) {
      initialize();
    }

    if (REWARD_ROUNDS_START == 0) {
      initializeRewardRoundsStart();
    }
  }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.551300
Transaction Length: 1
Severity: High
Contract: PooledStaking
Function name: requestUnstake(address[],uint256[],uint256)
PC address: 2425
Estimated Gas Usage: 386 - 481
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.164097
Transaction Length: 1
Severity: High
Contract: PooledStaking
Function name: requestUnstake(address[],uint256[],uint256)
PC address: 2427
Estimated Gas Usage: 386 - 481
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.800173
Transaction Length: 1
Severity: High
Contract: PooledStaking
Function name: requestUnstake(address[],uint256[],uint256)
PC address: 2510
Estimated Gas Usage: 562 - 657
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:23.420934
Transaction Length: 1
Severity: High
Contract: PooledStaking
Function name: requestUnstake(address[],uint256[],uint256)
PC address: 2512
Estimated Gas Usage: 562 - 657
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:37.131432
Transaction Length: 1
Severity: High
Contract: PooledStaking
Function name: depositAndStake(uint256,address[],uint256[])
PC address: 3108
Estimated Gas Usage: 412 - 507
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:42.281000
Transaction Length: 1
Severity: High
Contract: PooledStaking
Function name: depositAndStake(uint256,address[],uint256[])
PC address: 3110
Estimated Gas Usage: 412 - 507
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:50.192730
Transaction Length: 1
Severity: High
Contract: PooledStaking
Function name: depositAndStake(uint256,address[],uint256[])
PC address: 3193
Estimated Gas Usage: 588 - 683
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:00.807715
Transaction Length: 1
Severity: High
Contract: PooledStaking
Function name: depositAndStake(uint256,address[],uint256[])
PC address: 3195
Estimated Gas Usage: 588 - 683
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:17.203107
Transaction Length: 1
Severity: High
Contract: PooledStaking
Function name: pushRewards(address[])
PC address: 4565
Estimated Gas Usage: 384 - 479
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:20.560490
Transaction Length: 1
Severity: High
Contract: PooledStaking
Function name: pushRewards(address[])
PC address: 4567
Estimated Gas Usage: 384 - 479
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol:3

*/

/**
 *Submitted for verification

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:04.071705
Transaction Length: 1
Severity: Low
Contract: PooledStaking
Function name: initialize()
PC address: 10776
Estimated Gas Usage: 2014 - 3145
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop1/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol:1412

tokenController.addToWhitelist(address(this))

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:53.222403
Transaction Length: 2
Severity: Low
Contract: PooledStaking
Function name: changeDependentContractAddress()
PC address: 10776
Estimated Gas Usage: 17504 - 129314
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop1/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol:1412

tokenController.addToWhitelist(address(this))

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:14.191759
Transaction Length: 1
Severity: Low
Contract: PooledStaking
Function name: contractStakerAtIndex(address,uint256)
PC address: 21609
Estimated Gas Usage: 915 - 1200
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol:618

contractStakers[contractAddress][stakerIndex]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:15.359293
Transaction Length: 1
Severity: Low
Contract: PooledStaking
Function name: stakerContractAtIndex(address,uint256)
PC address: 22203
Estimated Gas Usage: 899 - 1184
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol:649

stakers[staker].contracts[contractIndex]

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x333efdc7465f516744186a007378fc005cb0b456.sol
Total states:138
317.813057
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.495872
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: convertOddToCvpAndSendToPayout(address[])
PC address: 514
Estimated Gas Usage: 364 - 459
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x333efdc7465f516744186a007378fc005cb0b456.sol:6

/powerpool.finance/



--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.770378
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: convertOddToCvpAndSendToPayout(address[])
PC address: 516
Estimated Gas Usage: 364 - 459
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x333efdc7465f516744186a007378fc005cb0b456.sol:3

*/

/*
https://powerpool.finance/

 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:10.734051
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: getEthAndTokensIn(uint256,address[])
PC address: 991
Estimated Gas Usage: 390 - 485
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x333efdc7465f516744186a007378fc005cb0b456.sol:6

/powerpool.finance/



--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:14.217486
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: getEthAndTokensIn(uint256,address[])
PC address: 993
Estimated Gas Usage: 390 - 485
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x333efdc7465f516744186a007378fc005cb0b456.sol:3

*/

/*
https://powerpool.finance/

 

--------------------

==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:15.011739
Transaction Length: 1
Severity: Medium
Contract: EthPiptSwap
Function name: convertOddToCvpAndSendToPayout(address[])
PC address: 3217
Estimated Gas Usage: 574 - 3351
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../contracts/m_loop/loop1/0x333efdc7465f516744186a007378fc005cb0b456.sol:856

tx.origin

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:58.969734
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: swapEthToPipt()
PC address: 6285
Estimated Gas Usage: 2976 - 38248
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x333efdc7465f516744186a007378fc005cb0b456.sol:6

werpool.finance

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:09.518608
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: swapEthToPipt()
PC address: 6288
Estimated Gas Usage: 3069 - 38434
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x333efdc7465f516744186a007378fc005cb0b456.sol:3



/*
https://powerpool.finance/

          

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:12.507177
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: swapEthToPipt()
PC address: 6309
Estimated Gas Usage: 3069 - 38434
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x333efdc7465f516744186a007378fc005cb0b456.sol:750

pipt.getCurrentTokens()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:03.464017
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: swapEthToPipt()
PC address: 6334
Estimated Gas Usage: 3069 - 38434
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x333efdc7465f516744186a007378fc005cb0b456.sol:2


*/

/*
https://power

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:15.473979
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: swapEthToPipt()
PC address: 6340
Estimated Gas Usage: 3069 - 38434
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x333efdc7465f516744186a007378fc005cb0b456.sol:8

r wrr
        

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:25.351066
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: swapEthToPipt()
PC address: 6360
Estimated Gas Usage: 3127 - 38585
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x333efdc7465f516744186a007378fc005cb0b456.sol:10

prrrr0    r0
        

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:29.240984
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: swapEthToPipt()
PC address: 6362
Estimated Gas Usage: 3127 - 38585
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x333efdc7465f516744186a007378fc005cb0b456.sol:10

wrrr pp   pr  prrrr0  prrrr0    r0
        r

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:04:57.368876
Transaction Length: 1
Severity: Low
Contract: EthPiptSwap
Function name: getEthAndTokensIn(uint256,address[])
PC address: 6967
Estimated Gas Usage: 3152 - 41149
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x333efdc7465f516744186a007378fc005cb0b456.sol:896

tokens[0]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.952098
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: getAmountOut(uint256,uint256,uint256)
PC address: 16919
Estimated Gas Usage: 500 - 595
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x333efdc7465f516744186a007378fc005cb0b456.sol:289

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:06.822737
Transaction Length: 1
Severity: High
Contract: EthPiptSwap
Function name: swapEthToPipt()
PC address: 17364
Estimated Gas Usage: 3069 - 38434
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x333efdc7465f516744186a007378fc005cb0b456.sol:251

sub(a, b, "SafeMath: subtraction overflow")

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x181cfd48e5d22233e8b5c5dd3908123a2d9ef733.sol
Total states:1742
2.981899
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:02.255886
Transaction Length: 1
Severity: Low
Contract: YFMSVault
Function name: stakers(uint256)
PC address: 5093
Estimated Gas Usage: 766 - 861
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x181cfd48e5d22233e8b5c5dd3908123a2d9ef733.sol:89

address[] public stakers

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x3721dcd1c1793f945006a967a91da81562d1b588.sol
Total states:1986
19.951695
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.167235
Transaction Length: 1
Severity: High
Contract: StrategyAddTwoSidesOptimal
Function name: execute(address,uint256,bytes)
PC address: 726
Estimated Gas Usage: 376 - 471
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x3721dcd1c1793f945006a967a91da81562d1b588.sol:3

*/

// File: openzeppelin-solidity-

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:00.189840
Transaction Length: 0
Severity: Medium
Contract: StrategyAddTwoSidesOptimal
Function name: constructor
PC address: 867
Estimated Gas Usage: 38791 - 235224
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 375
Offset: 664
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop1/0x3721dcd1c1793f945006a967a91da81562d1b588.sol:619

contract StrategyAddTwoSidesOptimal is Ownable, ReentrancyGuard, Strategy {
    using SafeToken for address;
    using SafeMath for uint256;

    IUniswapV2Factory public factory;
    IUniswapV2Router02 public router;
    address public weth;
    address public goblin;

    /// @dev Create a new add two-side optimal strategy instance.
    /// @param _router The Uniswap router smart contract.
    constructor(IUniswapV2Router02 _router, address _goblin) public {
        factory = IUniswapV2Factory(_router.factory());
        router = _router;
        weth = _router.WETH();
        goblin = _goblin;
    }
    
    /// @dev Throws if called by any account other than the goblin.
    modifier onlyGoblin() {
        require(isGoblin(), "caller is not the goblin");
        _;
    }

    /// @dev Returns true if the caller is the current goblin.
    function isGoblin() public view returns (bool) {
        return msg.sender == goblin;
    }

    /// @dev Compute optimal deposit amount
    /// @param amtA amount of token A desired to deposit
    /// @param amtB amonut of token B desired to deposit
    /// @param resA amount of token A in reserve
    /// @param resB amount of token B in reserve
    function optimalDeposit(
        uint256 amtA,
        uint256 amtB,
        uint256 resA,
        uint256 resB
    ) internal pure returns (uint256 swapAmt, bool isReversed) {
        if (amtA.mul(resB) >= amtB.mul(resA)) {
            swapAmt = _optimalDepositA(amtA, amtB, resA, resB);
            isReversed = false;
        } else {
            swapAmt = _optimalDepositA(amtB, amtA, resB, resA);
            isReversed = true;
        }
    }

    /// @dev Compute optimal deposit amount helper
    /// @param amtA amount of token A desired to deposit
    /// @param amtB amonut of token B desired to deposit
    /// @param resA amount of token A in reserve
    /// @param resB amount of token B in reserve
    function _optimalDepositA(
        uint256 amtA,
        uint256 amtB,
        uint256 resA,
        uint256 resB
    ) internal pure returns (uint256) {
        require(amtA.mul(resB) >= amtB.mul(resA), "Reversed");

        uint256 a = 997;
        uint256 b = uint256(1997).mul(resA);
        uint256 _c = (amtA.mul(resB)).sub(amtB.mul(resA));
        uint256 c = _c.mul(1000).div(amtB.add(resB)).mul(resA);

        uint256 d = a.mul(c).mul(4);
        uint256 e = Math.sqrt(b.mul(b).add(d));

        uint256 numerator = e.sub(b);
        uint256 denominator = a.mul(2);

        return numerator.div(denominator);
    }

    /// @dev Execute worker strategy. Take LP tokens + ETH. Return LP tokens + ETH.
    /// @param user User address
    /// @param data Extra calldata information passed along to this strategy.
    function execute(address user, uint256, /* debt */ bytes calldata data) 
        external         
        payable  
        onlyGoblin       
        nonReentrant 
    {
        // 1. Find out what farming token we are dealing with.
        (address fToken, uint256 fAmount, uint256 minLPAmount) = abi.decode(data, (address, uint256, uint256));
        IUniswapV2Pair lpToken = IUniswapV2Pair(factory.getPair(fToken, weth));        
        // 2. Compute the optimal amount of ETH and fToken to be converted.  
        if (fAmount > 0) {  
            fToken.safeTransferFrom(user, address(this), fAmount);            
        }
        uint256 ethBalance = address(this).balance;
        uint256 swapAmt;
        bool isReversed;
        {
            (uint256 r0, uint256 r1, ) = lpToken.getReserves();
            (uint256 ethReserve, uint256 fReserve) = lpToken.token0() == weth ? (r0, r1) : (r1, r0);
            (swapAmt, isReversed) = optimalDeposit(ethBalance, fToken.myBalance(), ethReserve, fReserve);
        }
        // 3. Convert between ETH and farming tokens
        fToken.safeApprove(address(router), 0);
        fToken.safeApprove(address(router), uint256(-1));
        address[] memory path = new address[](2);
        (path[0], path[1]) = isReversed ? (fToken, weth) : (weth, fToken);
        if (isReversed) {
            router.swapExactTokensForETH(swapAmt, 0, path, address(this), now); // farming tokens to ETH
        } else {
            router.swapExactETHForTokens.value(swapAmt)(0, path, address(this), now); // ETH to farming tokens
        }
        // 4. Mint more LP tokens and return all LP tokens to the sender.
        (,, uint256 moreLPAmount) = router.addLiquidityETH.value(address(this).balance)(
            fToken, fToken.myBalance(), 0, 0, address(this), now
        );
        require(moreLPAmount >= minLPAmount, "insufficient LP tokens received");
        lpToken.transfer(msg.sender, lpToken.balanceOf(address(this)));
    }

    /// @dev Recover ERC20 tokens that were accidentally sent to this smart contract.
    /// @param token The token contract. Can be anything. This contract should not hold ERC20 tokens.
    /// @param to The address to send the tokens to.
    /// @param value The number of tokens to transfer to `to`.
    function recover(address token, address to, uint256 value) external onlyOwner nonReentrant {
        token.safeTransfer(to, value);
    }

    function() external payable {}
}

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x71151b7ae78459093f1b29583f2b24aef603cb70.sol
Total states:2905
26.411637
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.357985
Transaction Length: 1
Severity: High
Contract: Treasury
Function name: convertToDefaultToken(address[],uint256)
PC address: 1481
Estimated Gas Usage: 384 - 479
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x71151b7ae78459093f1b29583f2b24aef603cb70.sol:5

ontracts/SafeMath.sol

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.438158
Transaction Length: 1
Severity: High
Contract: Treasury
Function name: convertToDefaultToken(address[],uint256)
PC address: 1483
Estimated Gas Usage: 384 - 479
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x71151b7ae78459093f1b29583f2b24aef603cb70.sol:3

*/

// File: contracts/SafeMath.sol


--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:22.598318
Transaction Length: 1
Severity: Low
Contract: Treasury
Function name: convertToDefaultToken(address[],uint256)
PC address: 4286
Estimated Gas Usage: 946 - 1371
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x71151b7ae78459093f1b29583f2b24aef603cb70.sol:678

routeDetails[0]

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x5F705b4f5bcbD3A3536B20420cC581cbBE280bFF.sol
Total states:28040
185.961209
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:59.658950
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3645
Estimated Gas Usage: 1025 - 1500
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x5F705b4f5bcbD3A3536B20420cC581cbBE280bFF.sol:60

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:45.176078
Transaction Length: 2
Severity: High
Contract: ERC20Burnable
Function name: increaseAllowance(address,uint256)
PC address: 3818
Estimated Gas Usage: 1025 - 1500
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x5F705b4f5bcbD3A3536B20420cC581cbBE280bFF.sol:60

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:35.438928
Transaction Length: 2
Severity: High
Contract: ERC20Pausable
Function name: increaseAllowance(address,uint256)
PC address: 6145
Estimated Gas Usage: 1511 - 2316
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x5F705b4f5bcbD3A3536B20420cC581cbBE280bFF.sol:60

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x307463106fd5259ddf0754bee997baa97f34b7b9.sol
Total states:18086
226.869561
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:03:23.125494
Transaction Length: 1
Severity: Low
Contract: MainnetAUsdtToUsdtAssimilator
Function name: outputRawAndGetBalance(address,uint256)
PC address: 2348
Estimated Gas Usage: 2827 - 37955
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop1/0x307463106fd5259ddf0754bee997baa97f34b7b9.sol:1060

pool.deposit(address(usdt), _amount, 0)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:03:25.858562
Transaction Length: 1
Severity: Low
Contract: MainnetAUsdtToUsdtAssimilator
Function name: intakeRawAndGetBalance(uint256)
PC address: 4082
Estimated Gas Usage: 4801 - 75607
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop1/0x307463106fd5259ddf0754bee997baa97f34b7b9.sol:1009

_ausdt.transferFrom(msg.sender, address(this), _amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:03:28.289885
Transaction Length: 1
Severity: Low
Contract: MainnetAUsdtToUsdtAssimilator
Function name: intakeRawAndGetBalance(uint256)
PC address: 4371
Estimated Gas Usage: 6471 - 111839
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop1/0x307463106fd5259ddf0754bee997baa97f34b7b9.sol:1013

_ausdt.redeem(_amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:03:30.586158
Transaction Length: 1
Severity: Low
Contract: MainnetAUsdtToUsdtAssimilator
Function name: outputRaw(address,uint256)
PC address: 5332
Estimated Gas Usage: 2811 - 37939
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop1/0x307463106fd5259ddf0754bee997baa97f34b7b9.sol:1081

pool.deposit(address(usdt), _amount, 0)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:03:42.816717
Transaction Length: 1
Severity: Low
Contract: MainnetAUsdtToUsdtAssimilator
Function name: intakeRaw(uint256)
PC address: 6005
Estimated Gas Usage: 4886 - 75692
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop1/0x307463106fd5259ddf0754bee997baa97f34b7b9.sol:1030

_ausdt.transferFrom(msg.sender, address(this), _amount)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x091dcd914fceb1d47423e532955d1e62d1b2daef.sol
Total states:5931
175.111829
==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:07.526671
Transaction Length: 1
Severity: Medium
Contract: GenArt721Minter
Function name: getYourBalanceOfProjectERC20(uint256)
PC address: 787
Estimated Gas Usage: 4075 - 73905
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 5444
Offset: 5655
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop1/0x091dcd914fceb1d47423e532955d1e62d1b2daef.sol:436

function getYourBalanceOfProjectERC20(uint256 _projectId) public view returns (uint256){

    uint256 balance = ERC20(artblocksContract.projectIdToCurrencyAddress(_projectId)).balanceOf(msg.sender);

    return balance;

  }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:01:20.685911
Transaction Length: 1
Severity: Medium
Contract: GenArt721Minter
Function name: checkYourAllowanceOfProjectERC20(uint256)
PC address: 932
Estimated Gas Usage: 4150 - 74075
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 5889
Offset: 6152
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop1/0x091dcd914fceb1d47423e532955d1e62d1b2daef.sol:446

function checkYourAllowanceOfProjectERC20(uint256 _projectId) public view returns (uint256){

    uint256 remaining = ERC20(artblocksContract.projectIdToCurrencyAddress(_projectId)).allowance(msg.sender, address(this));

    return remaining;

  }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.246176
Transaction Length: 1
Severity: High
Contract: GenArt721Minter
Function name: purchase(uint256)
PC address: 1510
Estimated Gas Usage: 2569 - 38263
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x091dcd914fceb1d47423e532955d1e62d1b2daef.sol:486

abi.encodePacked("ETH")

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:13.614827
Transaction Length: 1
Severity: High
Contract: GenArt721Minter
Function name: purchase(uint256)
PC address: 1561
Estimated Gas Usage: 2569 - 38263
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x091dcd914fceb1d47423e532955d1e62d1b2daef.sol:3

ication at Etherscan.

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.830098
Transaction Length: 1
Severity: High
Contract: GenArt721Minter
Function name: purchaseTo(address,uint256)
PC address: 1757
Estimated Gas Usage: 2426 - 37979
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x091dcd914fceb1d47423e532955d1e62d1b2daef.sol:9

ontracts/libs/S

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.150335
Transaction Length: 1
Severity: High
Contract: GenArt721Minter
Function name: purchaseTo(address,uint256)
PC address: 1760
Estimated Gas Usage: 2569 - 38263
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x091dcd914fceb1d47423e532955d1e62d1b2daef.sol:5

*/



// File contracts/libs/SafeMath.sol



--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:15.845021
Transaction Length: 1
Severity: High
Contract: GenArt721Minter
Function name: purchase(uint256)
PC address: 1781
Estimated Gas Usage: 2569 - 38263
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x091dcd914fceb1d47423e532955d1e62d1b2daef.sol:486

artblocksContract.projectIdToCurrencySymbol(_projectId)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.287597
Transaction Length: 1
Severity: High
Contract: GenArt721Minter
Function name: purchase(uint256)
PC address: 1806
Estimated Gas Usage: 2569 - 38263
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x091dcd914fceb1d47423e532955d1e62d1b2daef.sol:3

0

*/



// File cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:18.180110
Transaction Length: 1
Severity: High
Contract: GenArt721Minter
Function name: purchase(uint256)
PC address: 1812
Estimated Gas Usage: 2569 - 38263
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x091dcd914fceb1d47423e532955d1e62d1b2daef.sol:13

ile: openzeppe

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:21.228911
Transaction Length: 1
Severity: High
Contract: GenArt721Minter
Function name: purchase(uint256)
PC address: 1834
Estimated Gas Usage: 2627 - 38414
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x091dcd914fceb1d47423e532955d1e62d1b2daef.sol:24

ations with added overflow

 * checks.

 *


--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:43.521107
Transaction Length: 1
Severity: High
Contract: GenArt721Minter
Function name: purchase(uint256)
PC address: 1952
Estimated Gas Usage: 2815 - 38976
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x091dcd914fceb1d47423e532955d1e62d1b2daef.sol:486

abi.encodePacked(artblocksContract.projectIdToCurrencySymbol(_projectId))

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x1368581bb74c87119a84979f8652e28932ce925e.sol
Total states:1986
20.372837
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.181144
Transaction Length: 1
Severity: High
Contract: StrategyAddTwoSidesOptimal
Function name: execute(address,uint256,bytes)
PC address: 726
Estimated Gas Usage: 376 - 471
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x1368581bb74c87119a84979f8652e28932ce925e.sol:3

*/

// File: openzeppelin-solidity-

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:00.180048
Transaction Length: 0
Severity: Medium
Contract: StrategyAddTwoSidesOptimal
Function name: constructor
PC address: 867
Estimated Gas Usage: 38791 - 235224
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 375
Offset: 664
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop1/0x1368581bb74c87119a84979f8652e28932ce925e.sol:619

contract StrategyAddTwoSidesOptimal is Ownable, ReentrancyGuard, Strategy {
    using SafeToken for address;
    using SafeMath for uint256;

    IUniswapV2Factory public factory;
    IUniswapV2Router02 public router;
    address public weth;
    address public goblin;

    /// @dev Create a new add two-side optimal strategy instance.
    /// @param _router The Uniswap router smart contract.
    constructor(IUniswapV2Router02 _router, address _goblin) public {
        factory = IUniswapV2Factory(_router.factory());
        router = _router;
        weth = _router.WETH();
        goblin = _goblin;
    }
    
    /// @dev Throws if called by any account other than the goblin.
    modifier onlyGoblin() {
        require(isGoblin(), "caller is not the goblin");
        _;
    }

    /// @dev Returns true if the caller is the current goblin.
    function isGoblin() public view returns (bool) {
        return msg.sender == goblin;
    }

    /// @dev Compute optimal deposit amount
    /// @param amtA amount of token A desired to deposit
    /// @param amtB amonut of token B desired to deposit
    /// @param resA amount of token A in reserve
    /// @param resB amount of token B in reserve
    function optimalDeposit(
        uint256 amtA,
        uint256 amtB,
        uint256 resA,
        uint256 resB
    ) internal pure returns (uint256 swapAmt, bool isReversed) {
        if (amtA.mul(resB) >= amtB.mul(resA)) {
            swapAmt = _optimalDepositA(amtA, amtB, resA, resB);
            isReversed = false;
        } else {
            swapAmt = _optimalDepositA(amtB, amtA, resB, resA);
            isReversed = true;
        }
    }

    /// @dev Compute optimal deposit amount helper
    /// @param amtA amount of token A desired to deposit
    /// @param amtB amonut of token B desired to deposit
    /// @param resA amount of token A in reserve
    /// @param resB amount of token B in reserve
    function _optimalDepositA(
        uint256 amtA,
        uint256 amtB,
        uint256 resA,
        uint256 resB
    ) internal pure returns (uint256) {
        require(amtA.mul(resB) >= amtB.mul(resA), "Reversed");

        uint256 a = 997;
        uint256 b = uint256(1997).mul(resA);
        uint256 _c = (amtA.mul(resB)).sub(amtB.mul(resA));
        uint256 c = _c.mul(1000).div(amtB.add(resB)).mul(resA);

        uint256 d = a.mul(c).mul(4);
        uint256 e = Math.sqrt(b.mul(b).add(d));

        uint256 numerator = e.sub(b);
        uint256 denominator = a.mul(2);

        return numerator.div(denominator);
    }

    /// @dev Execute worker strategy. Take LP tokens + ETH. Return LP tokens + ETH.
    /// @param user User address
    /// @param data Extra calldata information passed along to this strategy.
    function execute(address user, uint256, /* debt */ bytes calldata data) 
        external         
        payable  
        onlyGoblin       
        nonReentrant 
    {
        // 1. Find out what farming token we are dealing with.
        (address fToken, uint256 fAmount, uint256 minLPAmount) = abi.decode(data, (address, uint256, uint256));
        IUniswapV2Pair lpToken = IUniswapV2Pair(factory.getPair(fToken, weth));        
        // 2. Compute the optimal amount of ETH and fToken to be converted.  
        if (fAmount > 0) {  
            fToken.safeTransferFrom(user, address(this), fAmount);            
        }
        uint256 ethBalance = address(this).balance;
        uint256 swapAmt;
        bool isReversed;
        {
            (uint256 r0, uint256 r1, ) = lpToken.getReserves();
            (uint256 ethReserve, uint256 fReserve) = lpToken.token0() == weth ? (r0, r1) : (r1, r0);
            (swapAmt, isReversed) = optimalDeposit(ethBalance, fToken.myBalance(), ethReserve, fReserve);
        }
        // 3. Convert between ETH and farming tokens
        fToken.safeApprove(address(router), 0);
        fToken.safeApprove(address(router), uint256(-1));
        address[] memory path = new address[](2);
        (path[0], path[1]) = isReversed ? (fToken, weth) : (weth, fToken);
        if (isReversed) {
            router.swapExactTokensForETH(swapAmt, 0, path, address(this), now); // farming tokens to ETH
        } else {
            router.swapExactETHForTokens.value(swapAmt)(0, path, address(this), now); // ETH to farming tokens
        }
        // 4. Mint more LP tokens and return all LP tokens to the sender.
        (,, uint256 moreLPAmount) = router.addLiquidityETH.value(address(this).balance)(
            fToken, fToken.myBalance(), 0, 0, address(this), now
        );
        require(moreLPAmount >= minLPAmount, "insufficient LP tokens received");
        lpToken.transfer(msg.sender, lpToken.balanceOf(address(this)));
    }

    /// @dev Recover ERC20 tokens that were accidentally sent to this smart contract.
    /// @param token The token contract. Can be anything. This contract should not hold ERC20 tokens.
    /// @param to The address to send the tokens to.
    /// @param value The number of tokens to transfer to `to`.
    function recover(address token, address to, uint256 value) external onlyOwner nonReentrant {
        token.safeTransfer(to, value);
    }

    function() external payable {}
}

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x191fc78635cc1409e922978629c51a0572bd2759.sol
Total states:16493
41.665994
==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.977856
Transaction Length: 1
Severity: High
Contract: QuickCash
Function name: transferFrom(address,address,uint256)
PC address: 8734
Estimated Gas Usage: 1429 - 2044
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x191fc78635cc1409e922978629c51a0572bd2759.sol:14

x - y

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol
Total states:43926
6715.004486
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.128967
Transaction Length: 1
Severity: High
Contract: ClaimIssuer
Function name: isClaimRevoked(bytes)
PC address: 754
Estimated Gas Usage: 408 - 503
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:3



*/



// File: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:48.216915
Transaction Length: 1
Severity: High
Contract: ClaimIssuer
Function name: isClaimValid(address,bytes32,uint256,bytes,bytes)
PC address: 1030
Estimated Gas Usage: 517 - 612
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:3



*/



// File: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.749386
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchSetAddressFrozen(address[],bool[])
PC address: 1082
Estimated Gas Usage: 386 - 481
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:9

e: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.214348
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchSetAddressFrozen(address[],bool[])
PC address: 1084
Estimated Gas Usage: 386 - 481
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:3



*/



// File: @onchain-id/solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.854779
Transaction Length: 1
Severity: High
Contract: ERC734
Function name: execute(address,uint256,bytes)
PC address: 1102
Estimated Gas Usage: 399 - 494
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:3



*/



// File: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.011716
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchSetAddressFrozen(address[],bool[])
PC address: 1167
Estimated Gas Usage: 562 - 657
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:9

e: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:27.709530
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchSetAddressFrozen(address[],bool[])
PC address: 1169
Estimated Gas Usage: 562 - 657
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:3



*/



// File: @onchain-id/solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:59.404156
Transaction Length: 1
Severity: High
Contract: ClaimIssuer
Function name: isClaimValid(address,bytes32,uint256,bytes,bytes)
PC address: 1181
Estimated Gas Usage: 859 - 3636
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:3



*/



// File: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.086521
Transaction Length: 1
Severity: High
Contract: Identity
Function name: addClaim(uint256,uint256,address,bytes,bytes,string)
PC address: 1396
Estimated Gas Usage: 450 - 545
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:3



*/



// File: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:14.706277
Transaction Length: 1
Severity: High
Contract: Identity
Function name: addClaim(uint256,uint256,address,bytes,bytes,string)
PC address: 1547
Estimated Gas Usage: 792 - 3569
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:3



*/



// File: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:29.900318
Transaction Length: 1
Severity: High
Contract: ERC734
Function name: getKeyPurposes(bytes32)
PC address: 1601
Estimated Gas Usage: 1442 - 2479
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:423

function getKeyPurposes(bytes32 _key)

    public

    view

    returns(uint256[] memory _purposes)

    {

        return (keys[_key].purposes);

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:43.788231
Transaction Length: 1
Severity: High
Contract: ERC734
Function name: getKeyPurposes(bytes32)
PC address: 1641
Estimated Gas Usage: 1592 - 3005
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:423

function getKeyPurposes(bytes32 _key)

    public

    view

    returns(uint256[] memory _purposes)

    {

        return (keys[_key].purposes);

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:35.441920
Transaction Length: 1
Severity: High
Contract: Identity
Function name: addClaim(uint256,uint256,address,bytes,bytes,string)
PC address: 1698
Estimated Gas Usage: 1134 - 6593
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:3



*/



// File: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:04.777167
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchForcedTransfer(address[],address[],uint256[])
PC address: 1826
Estimated Gas Usage: 452 - 547
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:9

e: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:08.725204
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchForcedTransfer(address[],address[],uint256[])
PC address: 1828
Estimated Gas Usage: 452 - 547
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:3



*/



// File: @onchain-id/solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:14.548479
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchForcedTransfer(address[],address[],uint256[])
PC address: 1911
Estimated Gas Usage: 628 - 723
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:9

e: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:28.328785
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchForcedTransfer(address[],address[],uint256[])
PC address: 1913
Estimated Gas Usage: 628 - 723
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:3



*/



// File: @onchain-id/solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:54.180564
Transaction Length: 1
Severity: High
Contract: Identity
Function name: execute(address,uint256,bytes)
PC address: 1947
Estimated Gas Usage: 421 - 516
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:3



*/



// File: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:51.811604
Transaction Length: 1
Severity: High
Contract: Identity
Function name: execute(address,uint256,bytes)
PC address: 1989
Estimated Gas Usage: 19184 - 83569
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:645

function execute(address _to, uint256 _value, bytes memory _data)

    public

    payable

    returns (uint256 executionId)

    {

        require(!executions[executionNonce].executed, "Already executed");

        executions[executionNonce].to = _to;

        executions[executionNonce].value = _value;

        executions[executionNonce].data = _data;



        emit ExecutionRequested(executionNonce, _to, _value, _data);



        if (keyHasPurpose(keccak256(abi.encode(msg.sender)), 2)) {

            approve(executionNonce, true);

        }



        executionNonce++;

        return executionNonce-1;

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:46.769528
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchForcedTransfer(address[],address[],uint256[])
PC address: 1996
Estimated Gas Usage: 804 - 899
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:9

e: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:13.072250
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchForcedTransfer(address[],address[],uint256[])
PC address: 1998
Estimated Gas Usage: 804 - 899
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:3



*/



// File: @onchain-id/solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:33.074135
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchUnfreezePartialTokens(address[],uint256[])
PC address: 2117
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:9

e: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:36.629322
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchUnfreezePartialTokens(address[],uint256[])
PC address: 2119
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:3



*/



// File: @onchain-id/solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:42.134683
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchUnfreezePartialTokens(address[],uint256[])
PC address: 2202
Estimated Gas Usage: 539 - 634
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:9

e: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:57.757958
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchUnfreezePartialTokens(address[],uint256[])
PC address: 2204
Estimated Gas Usage: 539 - 634
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:3



*/



// File: @onchain-id/solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:47:55.393364
Transaction Length: 1
Severity: High
Contract: Identity
Function name: getClaim(bytes32)
PC address: 2314
Estimated Gas Usage: 5415 - 8771
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:1325

function getClaim(bytes32 _claimId)

    public

    view

    returns(

        uint256 topic,

        uint256 scheme,

        address issuer,

        bytes memory signature,

        bytes memory data,

        string memory uri

    )

    {

        return (

            claims[_claimId].topic,

            claims[_claimId].scheme,

            claims[_claimId].issuer,

            claims[_claimId].signature,

            claims[_claimId].data,

            claims[_claimId].uri

        );

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:18:51.949140
Transaction Length: 1
Severity: High
Contract: Identity
Function name: getClaim(bytes32)
PC address: 2416
Estimated Gas Usage: 5569 - 9301
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:1325

function getClaim(bytes32 _claimId)

    public

    view

    returns(

        uint256 topic,

        uint256 scheme,

        address issuer,

        bytes memory signature,

        bytes memory data,

        string memory uri

    )

    {

        return (

            claims[_claimId].topic,

            claims[_claimId].scheme,

            claims[_claimId].issuer,

            claims[_claimId].signature,

            claims[_claimId].data,

            claims[_claimId].uri

        );

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:14:02.980903
Transaction Length: 1
Severity: High
Contract: Identity
Function name: getClaim(bytes32)
PC address: 2518
Estimated Gas Usage: 5723 - 9831
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:1325

function getClaim(bytes32 _claimId)

    public

    view

    returns(

        uint256 topic,

        uint256 scheme,

        address issuer,

        bytes memory signature,

        bytes memory data,

        string memory uri

    )

    {

        return (

            claims[_claimId].topic,

            claims[_claimId].scheme,

            claims[_claimId].issuer,

            claims[_claimId].signature,

            claims[_claimId].data,

            claims[_claimId].uri

        );

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:33.188886
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchTransfer(address[],uint256[])
PC address: 2673
Estimated Gas Usage: 430 - 525
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:9

e: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:37.022965
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchTransfer(address[],uint256[])
PC address: 2675
Estimated Gas Usage: 430 - 525
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:3



*/



// File: @onchain-id/solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:43.804594
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchTransfer(address[],uint256[])
PC address: 2758
Estimated Gas Usage: 606 - 701
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:9

e: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:02.547043
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchTransfer(address[],uint256[])
PC address: 2760
Estimated Gas Usage: 606 - 701
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:3



*/



// File: @onchain-id/solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.848682
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3044
Estimated Gas Usage: 989 - 1464
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:2017

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:34.225687
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchFreezePartialTokens(address[],uint256[])
PC address: 4219
Estimated Gas Usage: 450 - 545
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:9

e: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:37.975335
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchFreezePartialTokens(address[],uint256[])
PC address: 4221
Estimated Gas Usage: 450 - 545
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:3



*/



// File: @onchain-id/solidit

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:44.828163
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchFreezePartialTokens(address[],uint256[])
PC address: 4304
Estimated Gas Usage: 626 - 721
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:9

e: @onchain-id/solidi

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:04.455588
Transaction Length: 1
Severity: High
Contract: TransferManager
Function name: batchFreezePartialTokens(address[],uint256[])
PC address: 4306
Estimated Gas Usage: 626 - 721
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:3



*/



// File: @onchain-id/solidit

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:01.502426
Transaction Length: 1
Severity: Low
Contract: TransferManager
Function name: batchSetAddressFrozen(address[],bool[])
PC address: 5155
Estimated Gas Usage: 763 - 858
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:3724

freeze[i]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:04:11.035995
Transaction Length: 2
Severity: Low
Contract: TransferManager
Function name: batchSetAddressFrozen(address[],bool[])
PC address: 5155
Estimated Gas Usage: 763 - 858
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:3724

freeze[i]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:15.115472
Transaction Length: 1
Severity: High
Contract: ClaimIssuer
Function name: isClaimValid(address,bytes32,uint256,bytes,bytes)
PC address: 5311
Estimated Gas Usage: 1375 - 7681
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:1562

abi.encode(_identity, claimTopic, data)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:03:31.268273
Transaction Length: 1
Severity: Low
Contract: TransferManager
Function name: batchUnfreezePartialTokens(address[],uint256[])
PC address: 7908
Estimated Gas Usage: 740 - 835
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:3838

amounts[i]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:04:52.938032
Transaction Length: 2
Severity: Low
Contract: TransferManager
Function name: batchUnfreezePartialTokens(address[],uint256[])
PC address: 7908
Estimated Gas Usage: 740 - 835
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:3838

amounts[i]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:03:31.840281
Transaction Length: 1
Severity: Low
Contract: TransferManager
Function name: claimsNotInNewAddress(uint256)
PC address: 8404
Estimated Gas Usage: 702 - 797
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:3132

bytes32[] public claimsNotInNewAddress

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:04:55.361436
Transaction Length: 2
Severity: Low
Contract: TransferManager
Function name: claimsNotInNewAddress(uint256)
PC address: 8404
Estimated Gas Usage: 702 - 797
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:3132

bytes32[] public claimsNotInNewAddress

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:04:30.836965
Transaction Length: 1
Severity: Low
Contract: TransferManager
Function name: batchTransfer(address[],uint256[])
PC address: 8994
Estimated Gas Usage: 807 - 902
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:3316

_values[i]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:05:16.471810
Transaction Length: 2
Severity: Low
Contract: TransferManager
Function name: batchTransfer(address[],uint256[])
PC address: 8994
Estimated Gas Usage: 807 - 902
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:3316

_values[i]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:20.005349
Transaction Length: 1
Severity: High
Contract: Identity
Function name: execute(address,uint256,bytes)
PC address: 10576
Estimated Gas Usage: 19184 - 83569
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:661

executions[executionNonce].data = _data

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:50.816158
Transaction Length: 1
Severity: High
Contract: Identity
Function name: execute(address,uint256,bytes)
PC address: 12318
Estimated Gas Usage: 14140 - 58525
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:1065

contract Identity is ERC734, IERC735 {



    mapping (bytes32 => Claim) private claims;

    mapping (uint256 => bytes32[]) private claimsByTopic;



    /**

       * @notice Implementation of the addClaim function from the ERC-735 standard

       *  Require that the msg.sender has claim signer key.

       *

       * @param _topic The type of claim

       * @param _scheme The scheme with which this claim SHOULD be verified or how it should be processed.

       * @param _issuer The issuers identity contract address, or the address used to sign the above signature.

       * @param _signature Signature which is the proof that the claim issuer issued a claim of topic for this identity.

       * it MUST be a signed message of the following structure: keccak256(address identityHolder_address, uint256 _ topic, bytes data)

       * or keccak256(abi.encode(identityHolder_address, topic, data))

       * @param _data The hash of the claim data, sitting in another location, a bit-mask, call data, or actual data based on the claim scheme.

       * @param _uri The location of the claim, this can be HTTP links, swarm hashes, IPFS hashes, and such.

       *

       * @return Returns claimRequestId: COULD be send to the approve function, to approve or reject this claim.

       * triggers ClaimAdded event.

       */



    function addClaim(

        uint256 _topic,

        uint256 _scheme,

        address _issuer,

        bytes memory _signature,

        bytes memory _data,

        string memory _uri

    )

    public

    returns (bytes32 claimRequestId)

    {

        bytes32 claimId = keccak256(abi.encode(_issuer, _topic));



        if (msg.sender != address(this)) {

            require(keyHasPurpose(keccak256(abi.encode(msg.sender)), 3), "Permissions: Sender does not have claim signer key");

        }



        if (claims[claimId].issuer != _issuer) {

            claimsByTopic[_topic].push(claimId);

            claims[claimId].topic = _topic;

            claims[claimId].scheme = _scheme;

            claims[claimId].issuer = _issuer;

            claims[claimId].signature = _signature;

            claims[claimId].data = _data;

            claims[claimId].uri = _uri;



            emit ClaimAdded(

                claimId,

                _topic,

                _scheme,

                _issuer,

                _signature,

                _data,

                _uri

            );

        } else {

            claims[claimId].topic = _topic;

            claims[claimId].scheme = _scheme;

            claims[claimId].issuer = _issuer;

            claims[claimId].signature = _signature;

            claims[claimId].data = _data;

            claims[claimId].uri = _uri;



            emit ClaimChanged(

                claimId,

                _topic,

                _scheme,

                _issuer,

                _signature,

                _data,

                _uri

            );

        }



        return claimId;

    }



    /**

       * @notice Implementation of the removeClaim function from the ERC-735 standard

       * Require that the msg.sender has management key.

       * Can only be removed by the claim issuer, or the claim holder itself.

       *

       * @param _claimId The identity of the claim i.e. keccak256(address issuer_address + uint256 topic)

       *

       * @return Returns TRUE when the claim was removed.

       * triggers ClaimRemoved event

       */



    function removeClaim(bytes32 _claimId) public returns (bool success) {

        if (msg.sender != address(this)) {

            require(keyHasPurpose(keccak256(abi.encode(msg.sender)), 1), "Permissions: Sender does not have CLAIM key");

        }



        if (claims[_claimId].topic == 0) {

            revert("NonExisting: There is no claim with this ID");

        }



        uint claimIndex = 0;

        while (claimsByTopic[claims[_claimId].topic][claimIndex] != _claimId) {

            claimIndex++;

        }



        claimsByTopic[claims[_claimId].topic][claimIndex] = claimsByTopic[claims[_claimId].topic][claimsByTopic[claims[_claimId].topic].length - 1];

        claimsByTopic[claims[_claimId].topic].pop();



        emit ClaimRemoved(

            _claimId,

            claims[_claimId].topic,

            claims[_claimId].scheme,

            claims[_claimId].issuer,

            claims[_claimId].signature,

            claims[_claimId].data,

            claims[_claimId].uri

        );



        delete claims[_claimId];



        return true;

    }



    /**

        * @notice Implementation of the getClaim function from the ERC-735 standard.

        *

        * @param _claimId The identity of the claim i.e. keccak256(address issuer_address + uint256 topic)

        *

        * @return Returns all the parameters of the claim for the specified _claimId (topic, scheme, signature, issuer, data, uri) .

        */



    function getClaim(bytes32 _claimId)

    public

    view

    returns(

        uint256 topic,

        uint256 scheme,

        address issuer,

        bytes memory signature,

        bytes memory data,

        string memory uri

    )

    {

        return (

            claims[_claimId].topic,

            claims[_claimId].scheme,

            claims[_claimId].issuer,

            claims[_claimId].signature,

            claims[_claimId].data,

            claims[_claimId].uri

        );

    }



    /**

        * @notice Implementation of the getClaimIdsByTopic function from the ERC-735 standard.

        * used to get all the claims from the specified topic

        *

        * @param _topic The identity of the claim i.e. keccak256(address issuer_address + uint256 topic)

        *

        * @return Returns an array of claim IDs by topic.

        */



    function getClaimIdsByTopic(uint256 _topic)

    public

    view

    returns(bytes32[] memory claimIds)

    {

        return claimsByTopic[_topic];

    }

}

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:37.083929
Transaction Length: 1
Severity: High
Contract: Identity
Function name: execute(address,uint256,bytes)
PC address: 12332
Estimated Gas Usage: 19184 - 83569
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:1065

contract Identity is ERC734, IERC735 {



    mapping (bytes32 => Claim) private claims;

    mapping (uint256 => bytes32[]) private claimsByTopic;



    /**

       * @notice Implementation of the addClaim function from the ERC-735 standard

       *  Require that the msg.sender has claim signer key.

       *

       * @param _topic The type of claim

       * @param _scheme The scheme with which this claim SHOULD be verified or how it should be processed.

       * @param _issuer The issuers identity contract address, or the address used to sign the above signature.

       * @param _signature Signature which is the proof that the claim issuer issued a claim of topic for this identity.

       * it MUST be a signed message of the following structure: keccak256(address identityHolder_address, uint256 _ topic, bytes data)

       * or keccak256(abi.encode(identityHolder_address, topic, data))

       * @param _data The hash of the claim data, sitting in another location, a bit-mask, call data, or actual data based on the claim scheme.

       * @param _uri The location of the claim, this can be HTTP links, swarm hashes, IPFS hashes, and such.

       *

       * @return Returns claimRequestId: COULD be send to the approve function, to approve or reject this claim.

       * triggers ClaimAdded event.

       */



    function addClaim(

        uint256 _topic,

        uint256 _scheme,

        address _issuer,

        bytes memory _signature,

        bytes memory _data,

        string memory _uri

    )

    public

    returns (bytes32 claimRequestId)

    {

        bytes32 claimId = keccak256(abi.encode(_issuer, _topic));



        if (msg.sender != address(this)) {

            require(keyHasPurpose(keccak256(abi.encode(msg.sender)), 3), "Permissions: Sender does not have claim signer key");

        }



        if (claims[claimId].issuer != _issuer) {

            claimsByTopic[_topic].push(claimId);

            claims[claimId].topic = _topic;

            claims[claimId].scheme = _scheme;

            claims[claimId].issuer = _issuer;

            claims[claimId].signature = _signature;

            claims[claimId].data = _data;

            claims[claimId].uri = _uri;



            emit ClaimAdded(

                claimId,

                _topic,

                _scheme,

                _issuer,

                _signature,

                _data,

                _uri

            );

        } else {

            claims[claimId].topic = _topic;

            claims[claimId].scheme = _scheme;

            claims[claimId].issuer = _issuer;

            claims[claimId].signature = _signature;

            claims[claimId].data = _data;

            claims[claimId].uri = _uri;



            emit ClaimChanged(

                claimId,

                _topic,

                _scheme,

                _issuer,

                _signature,

                _data,

                _uri

            );

        }



        return claimId;

    }



    /**

       * @notice Implementation of the removeClaim function from the ERC-735 standard

       * Require that the msg.sender has management key.

       * Can only be removed by the claim issuer, or the claim holder itself.

       *

       * @param _claimId The identity of the claim i.e. keccak256(address issuer_address + uint256 topic)

       *

       * @return Returns TRUE when the claim was removed.

       * triggers ClaimRemoved event

       */



    function removeClaim(bytes32 _claimId) public returns (bool success) {

        if (msg.sender != address(this)) {

            require(keyHasPurpose(keccak256(abi.encode(msg.sender)), 1), "Permissions: Sender does not have CLAIM key");

        }



        if (claims[_claimId].topic == 0) {

            revert("NonExisting: There is no claim with this ID");

        }



        uint claimIndex = 0;

        while (claimsByTopic[claims[_claimId].topic][claimIndex] != _claimId) {

            claimIndex++;

        }



        claimsByTopic[claims[_claimId].topic][claimIndex] = claimsByTopic[claims[_claimId].topic][claimsByTopic[claims[_claimId].topic].length - 1];

        claimsByTopic[claims[_claimId].topic].pop();



        emit ClaimRemoved(

            _claimId,

            claims[_claimId].topic,

            claims[_claimId].scheme,

            claims[_claimId].issuer,

            claims[_claimId].signature,

            claims[_claimId].data,

            claims[_claimId].uri

        );



        delete claims[_claimId];



        return true;

    }



    /**

        * @notice Implementation of the getClaim function from the ERC-735 standard.

        *

        * @param _claimId The identity of the claim i.e. keccak256(address issuer_address + uint256 topic)

        *

        * @return Returns all the parameters of the claim for the specified _claimId (topic, scheme, signature, issuer, data, uri) .

        */



    function getClaim(bytes32 _claimId)

    public

    view

    returns(

        uint256 topic,

        uint256 scheme,

        address issuer,

        bytes memory signature,

        bytes memory data,

        string memory uri

    )

    {

        return (

            claims[_claimId].topic,

            claims[_claimId].scheme,

            claims[_claimId].issuer,

            claims[_claimId].signature,

            claims[_claimId].data,

            claims[_claimId].uri

        );

    }



    /**

        * @notice Implementation of the getClaimIdsByTopic function from the ERC-735 standard.

        * used to get all the claims from the specified topic

        *

        * @param _topic The identity of the claim i.e. keccak256(address issuer_address + uint256 topic)

        *

        * @return Returns an array of claim IDs by topic.

        */



    function getClaimIdsByTopic(uint256 _topic)

    public

    view

    returns(bytes32[] memory claimIds)

    {

        return claimsByTopic[_topic];

    }

}

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:30.101277
Transaction Length: 1
Severity: High
Contract: Identity
Function name: execute(address,uint256,bytes)
PC address: 12349
Estimated Gas Usage: 29324 - 133895
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:1065

contract Identity is ERC734, IERC735 {



    mapping (bytes32 => Claim) private claims;

    mapping (uint256 => bytes32[]) private claimsByTopic;



    /**

       * @notice Implementation of the addClaim function from the ERC-735 standard

       *  Require that the msg.sender has claim signer key.

       *

       * @param _topic The type of claim

       * @param _scheme The scheme with which this claim SHOULD be verified or how it should be processed.

       * @param _issuer The issuers identity contract address, or the address used to sign the above signature.

       * @param _signature Signature which is the proof that the claim issuer issued a claim of topic for this identity.

       * it MUST be a signed message of the following structure: keccak256(address identityHolder_address, uint256 _ topic, bytes data)

       * or keccak256(abi.encode(identityHolder_address, topic, data))

       * @param _data The hash of the claim data, sitting in another location, a bit-mask, call data, or actual data based on the claim scheme.

       * @param _uri The location of the claim, this can be HTTP links, swarm hashes, IPFS hashes, and such.

       *

       * @return Returns claimRequestId: COULD be send to the approve function, to approve or reject this claim.

       * triggers ClaimAdded event.

       */



    function addClaim(

        uint256 _topic,

        uint256 _scheme,

        address _issuer,

        bytes memory _signature,

        bytes memory _data,

        string memory _uri

    )

    public

    returns (bytes32 claimRequestId)

    {

        bytes32 claimId = keccak256(abi.encode(_issuer, _topic));



        if (msg.sender != address(this)) {

            require(keyHasPurpose(keccak256(abi.encode(msg.sender)), 3), "Permissions: Sender does not have claim signer key");

        }



        if (claims[claimId].issuer != _issuer) {

            claimsByTopic[_topic].push(claimId);

            claims[claimId].topic = _topic;

            claims[claimId].scheme = _scheme;

            claims[claimId].issuer = _issuer;

            claims[claimId].signature = _signature;

            claims[claimId].data = _data;

            claims[claimId].uri = _uri;



            emit ClaimAdded(

                claimId,

                _topic,

                _scheme,

                _issuer,

                _signature,

                _data,

                _uri

            );

        } else {

            claims[claimId].topic = _topic;

            claims[claimId].scheme = _scheme;

            claims[claimId].issuer = _issuer;

            claims[claimId].signature = _signature;

            claims[claimId].data = _data;

            claims[claimId].uri = _uri;



            emit ClaimChanged(

                claimId,

                _topic,

                _scheme,

                _issuer,

                _signature,

                _data,

                _uri

            );

        }



        return claimId;

    }



    /**

       * @notice Implementation of the removeClaim function from the ERC-735 standard

       * Require that the msg.sender has management key.

       * Can only be removed by the claim issuer, or the claim holder itself.

       *

       * @param _claimId The identity of the claim i.e. keccak256(address issuer_address + uint256 topic)

       *

       * @return Returns TRUE when the claim was removed.

       * triggers ClaimRemoved event

       */



    function removeClaim(bytes32 _claimId) public returns (bool success) {

        if (msg.sender != address(this)) {

            require(keyHasPurpose(keccak256(abi.encode(msg.sender)), 1), "Permissions: Sender does not have CLAIM key");

        }



        if (claims[_claimId].topic == 0) {

            revert("NonExisting: There is no claim with this ID");

        }



        uint claimIndex = 0;

        while (claimsByTopic[claims[_claimId].topic][claimIndex] != _claimId) {

            claimIndex++;

        }



        claimsByTopic[claims[_claimId].topic][claimIndex] = claimsByTopic[claims[_claimId].topic][claimsByTopic[claims[_claimId].topic].length - 1];

        claimsByTopic[claims[_claimId].topic].pop();



        emit ClaimRemoved(

            _claimId,

            claims[_claimId].topic,

            claims[_claimId].scheme,

            claims[_claimId].issuer,

            claims[_claimId].signature,

            claims[_claimId].data,

            claims[_claimId].uri

        );



        delete claims[_claimId];



        return true;

    }



    /**

        * @notice Implementation of the getClaim function from the ERC-735 standard.

        *

        * @param _claimId The identity of the claim i.e. keccak256(address issuer_address + uint256 topic)

        *

        * @return Returns all the parameters of the claim for the specified _claimId (topic, scheme, signature, issuer, data, uri) .

        */



    function getClaim(bytes32 _claimId)

    public

    view

    returns(

        uint256 topic,

        uint256 scheme,

        address issuer,

        bytes memory signature,

        bytes memory data,

        string memory uri

    )

    {

        return (

            claims[_claimId].topic,

            claims[_claimId].scheme,

            claims[_claimId].issuer,

            claims[_claimId].signature,

            claims[_claimId].data,

            claims[_claimId].uri

        );

    }



    /**

        * @notice Implementation of the getClaimIdsByTopic function from the ERC-735 standard.

        * used to get all the claims from the specified topic

        *

        * @param _topic The identity of the claim i.e. keccak256(address issuer_address + uint256 topic)

        *

        * @return Returns an array of claim IDs by topic.

        */



    function getClaimIdsByTopic(uint256 _topic)

    public

    view

    returns(bytes32[] memory claimIds)

    {

        return claimsByTopic[_topic];

    }

}

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:05:40.757012
Transaction Length: 1
Severity: Low
Contract: TransferManager
Function name: batchFreezePartialTokens(address[],uint256[])
PC address: 16383
Estimated Gas Usage: 827 - 922
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:3782

amounts[i]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:05:42.065548
Transaction Length: 2
Severity: Low
Contract: TransferManager
Function name: batchFreezePartialTokens(address[],uint256[])
PC address: 16383
Estimated Gas Usage: 827 - 922
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:3782

amounts[i]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:18.495691
Transaction Length: 2
Severity: High
Contract: TransferManager
Function name: increaseAllowance(address,uint256)
PC address: 18797
Estimated Gas Usage: 1012 - 1487
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xdd553c35e1dd65ec04abe9b4107c2630b6f10563.sol:2017

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x28681d373aF03A0Eb00ACE262c5dad9A0C65F276.sol
Total states:4368
573.140831
==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.005737
Transaction Length: 0
Severity: Medium
Contract: Governance
Function name: constructor
PC address: 18
Estimated Gas Usage: 42 - 137
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../contracts/m_loop/loop1/0x28681d373aF03A0Eb00ACE262c5dad9A0C65F276.sol:639

tx.origin

--------------------

==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.030731
Transaction Length: 0
Severity: Medium
Contract: LPTokenWrapper
Function name: constructor
PC address: 241
Estimated Gas Usage: 16419 - 77504
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../contracts/m_loop/loop1/0x28681d373aF03A0Eb00ACE262c5dad9A0C65F276.sol:639

tx.origin

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.270663
Transaction Length: 0
Severity: High
Contract: UniswapReward
Function name: constructor
PC address: 516
Estimated Gas Usage: 37837 - 179912
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x28681d373aF03A0Eb00ACE262c5dad9A0C65F276.sol:796

now + 365 days

--------------------

==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.719493
Transaction Length: 0
Severity: Medium
Contract: UniswapReward
Function name: constructor
PC address: 582
Estimated Gas Usage: 78340 - 380745
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../contracts/m_loop/loop1/0x28681d373aF03A0Eb00ACE262c5dad9A0C65F276.sol:639

tx.origin

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.757533
Transaction Length: 1
Severity: High
Contract: LPTokenWrapper
Function name: stake(uint256,string)
PC address: 873
Estimated Gas Usage: 411 - 506
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x28681d373aF03A0Eb00ACE262c5dad9A0C65F276.sol:3

*/

/***
 *    ██████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.630462
Transaction Length: 1
Severity: High
Contract: UniswapReward
Function name: stake(uint256,string)
PC address: 2435
Estimated Gas Usage: 456 - 551
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x28681d373aF03A0Eb00ACE262c5dad9A0C65F276.sol:3

*/

/***
 *    ██████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:54.564841
Transaction Length: 1
Severity: High
Contract: UniswapReward
Function name: seize(address,uint256)
PC address: 13914
Estimated Gas Usage: 2651 - 5713
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x28681d373aF03A0Eb00ACE262c5dad9A0C65F276.sol:544

address(token).call(abi.encodeWithSelector(SELECTOR, to, value))

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:06:41.326432
Transaction Length: 1
Severity: Medium
Contract: UniswapReward
Function name: seize(address,uint256)
PC address: 13931
Estimated Gas Usage: 2976 - 7118
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../contracts/m_loop/loop1/0x28681d373aF03A0Eb00ACE262c5dad9A0C65F276.sol:544

address(token).call(abi.encodeWithSelector(SELECTOR, to, value))

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0xe1f6d0f809BE316f89CdFe837997B77f46D1a9ED.sol
Total states:18680
147.652318
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.852172
Transaction Length: 1
Severity: High
Contract: goalfinance
Function name: bulkTransfer(address[],uint256[])
PC address: 757
Estimated Gas Usage: 408 - 503
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xe1f6d0f809BE316f89CdFe837997B77f46D1a9ED.sol:5

olidity ^0.5.13;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.965124
Transaction Length: 1
Severity: High
Contract: goalfinance
Function name: bulkTransfer(address[],uint256[])
PC address: 759
Estimated Gas Usage: 408 - 503
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xe1f6d0f809BE316f89CdFe837997B77f46D1a9ED.sol:3

*/

//pragma solidity ^0.5.13;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.582031
Transaction Length: 1
Severity: High
Contract: goalfinance
Function name: bulkTransfer(address[],uint256[])
PC address: 842
Estimated Gas Usage: 584 - 679
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xe1f6d0f809BE316f89CdFe837997B77f46D1a9ED.sol:5

olidity ^0.5.13;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:26.520225
Transaction Length: 1
Severity: High
Contract: goalfinance
Function name: bulkTransfer(address[],uint256[])
PC address: 844
Estimated Gas Usage: 584 - 679
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xe1f6d0f809BE316f89CdFe837997B77f46D1a9ED.sol:3

*/

//pragma solidity ^0.5.13;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:45.345656
Transaction Length: 1
Severity: High
Contract: goalfinance
Function name: transferAndCall(address,uint256,bytes)
PC address: 1417
Estimated Gas Usage: 511 - 606
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xe1f6d0f809BE316f89CdFe837997B77f46D1a9ED.sol:3

*/

//pragma solidity ^0.5.13;
prag

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:51.827586
Transaction Length: 1
Severity: Low
Contract: goalfinance
Function name: unfreeze(uint256)
PC address: 6429
Estimated Gas Usage: 1375 - 1660
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xe1f6d0f809BE316f89CdFe837997B77f46D1a9ED.sol:212

_burnedAmount * FLOAT_SCALAR / info.totalFrozen

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:22.205271
Transaction Length: 2
Severity: Low
Contract: goalfinance
Function name: unfreeze(uint256)
PC address: 6429
Estimated Gas Usage: 1375 - 1660
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xe1f6d0f809BE316f89CdFe837997B77f46D1a9ED.sol:212

_burnedAmount * FLOAT_SCALAR / info.totalFrozen

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x881041242edbb74642d4944d08f9d3fe59306bff.sol
Total states:426
0.822943
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0xc4583235e541fab2544e35a1152396df8c3b9e07.sol
Total states:2324
1.829558
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x190804ae027b6fa084defc47cfae6bc589d4d14b.sol
Total states:911
1.290448
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.127421
Transaction Length: 0
Severity: High
Contract: StablePriceOracle
Function name: constructor
PC address: 120
Estimated Gas Usage: 287 - 3153
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x190804ae027b6fa084defc47cfae6bc589d4d14b.sol:13

on of "user permissio

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x7adcacc6d4b3cb8fe456b57ef6d9a9ab3368d0e8.sol
Total states:1880
90.818111
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.271787
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShip(address[])
PC address: 360
Estimated Gas Usage: 342 - 437
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x7adcacc6d4b3cb8fe456b57ef6d9a9ab3368d0e8.sol:5

penzeppelin-solidity/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.623891
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShip(address[])
PC address: 362
Estimated Gas Usage: 342 - 437
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x7adcacc6d4b3cb8fe456b57ef6d9a9ab3368d0e8.sol:3

*/

// File: openzeppelin-solidity/c

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:35.692599
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShipWithHowMany(address[],uint256)
PC address: 776
Estimated Gas Usage: 341 - 436
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x7adcacc6d4b3cb8fe456b57ef6d9a9ab3368d0e8.sol:5

penzeppelin-solidity/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:38.531655
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShipWithHowMany(address[],uint256)
PC address: 778
Estimated Gas Usage: 341 - 436
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x7adcacc6d4b3cb8fe456b57ef6d9a9ab3368d0e8.sol:3

*/

// File: openzeppelin-solidity/c

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:28.315525
Transaction Length: 1
Severity: Low
Contract: BeneficiaryOperations
Function name: allOperations(uint256)
PC address: 1715
Estimated Gas Usage: 701 - 796
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x7adcacc6d4b3cb8fe456b57ef6d9a9ab3368d0e8.sol:386

bytes32[] public allOperations

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:25.616323
Transaction Length: 1
Severity: Low
Contract: BeneficiaryOperations
Function name: beneficiaries(uint256)
PC address: 4636
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x7adcacc6d4b3cb8fe456b57ef6d9a9ab3368d0e8.sol:385

address[] public beneficiaries

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0xF9C8ca8FE9E00786bEE5D914072Eea5A0510F5Fd.sol
Total states:1328
77.836414
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.215080
Transaction Length: 1
Severity: High
Contract: Resolver
Function name: getPositions(string[],address)
PC address: 2557
Estimated Gas Usage: 635 - 1013
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xF9C8ca8FE9E00786bEE5D914072Eea5A0510F5Fd.sol:32

on balanceOf(address user) ext

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:15.432954
Transaction Length: 1
Severity: High
Contract: Resolver
Function name: getPositions(string[],address)
PC address: 2630
Estimated Gas Usage: 635 - 1013
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xF9C8ca8FE9E00786bEE5D914072Eea5A0510F5Fd.sol:41


  function getCu

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.943542
Transaction Length: 1
Severity: High
Contract: InstaCurveGaugeResolver
Function name: getPositions(string[],address)
PC address: 2655
Estimated Gas Usage: 651 - 1029
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xF9C8ca8FE9E00786bEE5D914072Eea5A0510F5Fd.sol:32

on balanceOf(address user) ext

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:16.552856
Transaction Length: 1
Severity: High
Contract: InstaCurveGaugeResolver
Function name: getPositions(string[],address)
PC address: 2728
Estimated Gas Usage: 651 - 1029
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xF9C8ca8FE9E00786bEE5D914072Eea5A0510F5Fd.sol:41


  function getCu

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0xf9f794CE408b206fd63FC2CA9D2f7224B24d9516.sol
Total states:504
3.332895
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:00.613219
Transaction Length: 1
Severity: Low
Contract: SpellAction
Function name: execute()
PC address: 215
Estimated Gas Usage: 939 - 1315
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop1/0xf9f794CE408b206fd63FC2CA9D2f7224B24d9516.sol:100

PotAbstract(MCD_POT).drip()

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:01.579905
Transaction Length: 1
Severity: Low
Contract: SpellAction
Function name: execute()
PC address: 458
Estimated Gas Usage: 2612 - 37645
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop1/0xf9f794CE408b206fd63FC2CA9D2f7224B24d9516.sol:106

PotAbstract(MCD_POT).file("dsr", ZERO_PCT_RATE)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.755499
Transaction Length: 1
Severity: High
Contract: SpellAction
Function name: execute()
PC address: 644
Estimated Gas Usage: 4958 - 108460
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xf9f794CE408b206fd63FC2CA9D2f7224B24d9516.sol:5

(C) 2020 Maker 

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0xcce695ec0e874dee88a0a92f0a2dc430abe3c19a.sol
Total states:2324
1.791941
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0xE0384c1741c051333BC28585321217d9B8E9d9882.sol
Total states:1055
2.506242
==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.005832
Transaction Length: 0
Severity: Medium
Contract: Governance
Function name: constructor
PC address: 18
Estimated Gas Usage: 42 - 137
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../contracts/m_loop/loop1/0xE0384c1741c051333BC28585321217d9B8E9d9882.sol:220

tx.origin

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x7c490872bef3d0683d8da030c1ad5e9c13e88b48.sol
Total states:149
2.71139
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x647d2460d8cb322fc5328afbf9dd402af2d1ba11.sol
Total states:77
3.272112
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x80c09d3cc108fa52b7b63cdcc071daebc059a494.sol
Total states:3620
5.854681
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0xbb6e1141d2c228f9cfcbe9c72f5889b1be616936.sol
Total states:3647
85.044831
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.006660
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: initialize(uint256,uint256,address[],uint256[],address)
PC address: 798
Estimated Gas Usage: 439 - 534
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xbb6e1141d2c228f9cfcbe9c72f5889b1be616936.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.937476
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: initialize(uint256,uint256,address[],uint256[],address)
PC address: 800
Estimated Gas Usage: 439 - 534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xbb6e1141d2c228f9cfcbe9c72f5889b1be616936.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.657109
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: initialize(uint256,uint256,address[],uint256[],address)
PC address: 883
Estimated Gas Usage: 615 - 710
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xbb6e1141d2c228f9cfcbe9c72f5889b1be616936.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:22.675707
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: initialize(uint256,uint256,address[],uint256[],address)
PC address: 885
Estimated Gas Usage: 615 - 710
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xbb6e1141d2c228f9cfcbe9c72f5889b1be616936.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:34.434519
Transaction Length: 1
Severity: Medium
Contract: LidTeamLock
Function name: startRelease()
PC address: 1036
Estimated Gas Usage: 20796 - 150675
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 4623
Offset: 4987
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop1/0xbb6e1141d2c228f9cfcbe9c72f5889b1be616936.sol:694

function startRelease() external {

        require(releaseStart == 0, "Has already started.");

        require(address(this).balance != 0, "Must have some ether deposited.");

        require(lidToken.balanceOf(address(this)) != 0, "Must have some lid deposited.");

        startingLid = lidToken.balanceOf(address(this));

        startingEth = address(this).balance;

        releaseStart = now.add(24 hours);

    }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:00.624752
Transaction Length: 2
Severity: Medium
Contract: LidTeamLock
Function name: startRelease()
PC address: 1036
Estimated Gas Usage: 20796 - 150675
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 4623
Offset: 4987
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop1/0xbb6e1141d2c228f9cfcbe9c72f5889b1be616936.sol:694

function startRelease() external {

        require(releaseStart == 0, "Has already started.");

        require(address(this).balance != 0, "Must have some ether deposited.");

        require(lidToken.balanceOf(address(this)) != 0, "Must have some lid deposited.");

        startingLid = lidToken.balanceOf(address(this));

        startingEth = address(this).balance;

        releaseStart = now.add(24 hours);

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:35.629178
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 1174
Estimated Gas Usage: 385 - 480
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xbb6e1141d2c228f9cfcbe9c72f5889b1be616936.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:38.630024
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 1176
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xbb6e1141d2c228f9cfcbe9c72f5889b1be616936.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:44.526034
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 1259
Estimated Gas Usage: 561 - 656
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xbb6e1141d2c228f9cfcbe9c72f5889b1be616936.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:59.638583
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 1261
Estimated Gas Usage: 561 - 656
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xbb6e1141d2c228f9cfcbe9c72f5889b1be616936.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.813666
Transaction Length: 1
Severity: Low
Contract: LidTeamLock
Function name: teamMemberBPs(uint256)
PC address: 1726
Estimated Gas Usage: 746 - 841
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xbb6e1141d2c228f9cfcbe9c72f5889b1be616936.sol:572

uint[] public teamMemberBPs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:20.731424
Transaction Length: 1
Severity: Low
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 5130
Estimated Gas Usage: 1048 - 1143
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xbb6e1141d2c228f9cfcbe9c72f5889b1be616936.sol:736

teamMemberAddresses[0]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:21.144880
Transaction Length: 1
Severity: Low
Contract: LidTeamLock
Function name: teamMemberAddresses(uint256)
PC address: 5701
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xbb6e1141d2c228f9cfcbe9c72f5889b1be616936.sol:570

address payable[] public teamMemberAddresses

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:21.769728
Transaction Length: 1
Severity: Low
Contract: LidTeamLock
Function name: migrateMember(uint256,address)
PC address: 6593
Estimated Gas Usage: 755 - 850
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xbb6e1141d2c228f9cfcbe9c72f5889b1be616936.sol:714

teamMemberAddresses[0]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:33.416882
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: startRelease()
PC address: 7187
Estimated Gas Usage: 15736 - 125615
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xbb6e1141d2c228f9cfcbe9c72f5889b1be616936.sol:186

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x54b6dbae1e882c5d1fc3547c540f2cf881d9272a.sol
Total states:9788
22.319607
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.255441
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3244
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x54b6dbae1e882c5d1fc3547c540f2cf881d9272a.sol:58

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x4f6990b63500ae3b1cd0b689756503199c10149c.sol
Total states:195
1177.816972
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:41.251519
Transaction Length: 1
Severity: High
Contract: Core
Function name: whitelistTokens(address[])
PC address: 887
Estimated Gas Usage: 364 - 459
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x4f6990b63500ae3b1cd0b689756503199c10149c.sol:9

ma solidity 0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:44.708970
Transaction Length: 1
Severity: High
Contract: Core
Function name: whitelistTokens(address[])
PC address: 889
Estimated Gas Usage: 364 - 459
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x4f6990b63500ae3b1cd0b689756503199c10149c.sol:3



*/



//pragma solidity 0.5.17;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:09.918704
Transaction Length: 1
Severity: High
Contract: Core
Function name: whitelistPeak(address,uint256[],uint256,bool)
PC address: 1096
Estimated Gas Usage: 441 - 536
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x4f6990b63500ae3b1cd0b689756503199c10149c.sol:9

ma solidity 0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:14.476991
Transaction Length: 1
Severity: High
Contract: Core
Function name: whitelistPeak(address,uint256[],uint256,bool)
PC address: 1098
Estimated Gas Usage: 441 - 536
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x4f6990b63500ae3b1cd0b689756503199c10149c.sol:3



*/



//pragma solidity 0.5.17;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.165039
Transaction Length: 1
Severity: High
Contract: Core
Function name: currentSystemState()
PC address: 2994
Estimated Gas Usage: 2276 - 37170
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x4f6990b63500ae3b1cd0b689756503199c10149c.sol:9

solidity 0.5.17

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.785778
Transaction Length: 1
Severity: High
Contract: Core
Function name: currentSystemState()
PC address: 2997
Estimated Gas Usage: 2322 - 37309
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x4f6990b63500ae3b1cd0b689756503199c10149c.sol:5

*/



//pragma solidity 0.5.17;
pragma soli

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.477414
Transaction Length: 1
Severity: High
Contract: Core
Function name: totalSystemAssets()
PC address: 3018
Estimated Gas Usage: 2322 - 37309
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x4f6990b63500ae3b1cd0b689756503199c10149c.sol:728

oracle.getPriceFeed()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.069967
Transaction Length: 1
Severity: High
Contract: Core
Function name: totalSystemAssets()
PC address: 3043
Estimated Gas Usage: 2322 - 37309
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x4f6990b63500ae3b1cd0b689756503199c10149c.sol:3

5

*/



//pragma sol

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.323506
Transaction Length: 1
Severity: High
Contract: Core
Function name: totalSystemAssets()
PC address: 3049
Estimated Gas Usage: 2322 - 37309
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x4f6990b63500ae3b1cd0b689756503199c10149c.sol:10

=0.5 <0.7.17;


--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.449084
Transaction Length: 1
Severity: High
Contract: Core
Function name: totalSystemAssets()
PC address: 3069
Estimated Gas Usage: 2380 - 37460
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x4f6990b63500ae3b1cd0b689756503199c10149c.sol:20

s the amount of token

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.549161
Transaction Length: 1
Severity: High
Contract: Core
Function name: totalSystemAssets()
PC address: 3071
Estimated Gas Usage: 2380 - 37460
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x4f6990b63500ae3b1cd0b689756503199c10149c.sol:19

/**
     * @dev Returns the amount of tokens

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:38.232397
Transaction Length: 1
Severity: High
Contract: Core
Function name: dusdToUsd(uint256,bool)
PC address: 13475
Estimated Gas Usage: 2367 - 37354
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x4f6990b63500ae3b1cd0b689756503199c10149c.sol:185

div(a, b, "SafeMath: division by zero")

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x633992502d7c13E8f95A8B8E44f17BA17EB2Db6D2.sol
Total states:5382
22.121187
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0xc540e6e4b95d2fbe481810a89f9088c0cab514bd.sol
Total states:38890
89.76379
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.915968
Transaction Length: 1
Severity: Low
Contract: LockableToken
Function name: grantedLocks(address,uint256)
PC address: 2420
Estimated Gas Usage: 820 - 1105
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xc540e6e4b95d2fbe481810a89f9088c0cab514bd.sol:526

mapping (address => Lock[]) public grantedLocks

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.709163
Transaction Length: 1
Severity: Low
Contract: DCASHToken
Function name: grantedLocks(address,uint256)
PC address: 2887
Estimated Gas Usage: 798 - 1083
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xc540e6e4b95d2fbe481810a89f9088c0cab514bd.sol:526

mapping (address => Lock[]) public grantedLocks

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.309579
Transaction Length: 2
Severity: High
Contract: StandardToken
Function name: increaseAllowance(address,uint256)
PC address: 4619
Estimated Gas Usage: 1474 - 2279
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xc540e6e4b95d2fbe481810a89f9088c0cab514bd.sol:265

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.111026
Transaction Length: 2
Severity: High
Contract: MintableToken
Function name: increaseAllowance(address,uint256)
PC address: 5093
Estimated Gas Usage: 1496 - 2301
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xc540e6e4b95d2fbe481810a89f9088c0cab514bd.sol:265

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.626217
Transaction Length: 2
Severity: High
Contract: BurnableToken
Function name: increaseAllowance(address,uint256)
PC address: 5241
Estimated Gas Usage: 1496 - 2301
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xc540e6e4b95d2fbe481810a89f9088c0cab514bd.sol:265

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.686059
Transaction Length: 2
Severity: High
Contract: LockableToken
Function name: increaseAllowance(address,uint256)
PC address: 6998
Estimated Gas Usage: 1518 - 2323
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xc540e6e4b95d2fbe481810a89f9088c0cab514bd.sol:265

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.716254
Transaction Length: 2
Severity: High
Contract: DCASHToken
Function name: increaseAllowance(address,uint256)
PC address: 7543
Estimated Gas Usage: 1452 - 2257
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xc540e6e4b95d2fbe481810a89f9088c0cab514bd.sol:265

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x34905bf0a490df50680a82a5ab089a963ee11224.sol
Total states:4506
32.635575
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.993297
Transaction Length: 1
Severity: High
Contract: Core
Function name: whitelistTokens(address[])
PC address: 963
Estimated Gas Usage: 408 - 503
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x34905bf0a490df50680a82a5ab089a963ee11224.sol:9

ma solidity 0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.192170
Transaction Length: 1
Severity: High
Contract: Core
Function name: whitelistTokens(address[])
PC address: 965
Estimated Gas Usage: 408 - 503
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x34905bf0a490df50680a82a5ab089a963ee11224.sol:3



*/



//pragma solidity 0.5.17;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.880446
Transaction Length: 1
Severity: High
Contract: Core
Function name: whitelistPeak(address,uint256[],bool)
PC address: 1172
Estimated Gas Usage: 418 - 513
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x34905bf0a490df50680a82a5ab089a963ee11224.sol:9

ma solidity 0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:15.078685
Transaction Length: 1
Severity: High
Contract: Core
Function name: whitelistPeak(address,uint256[],bool)
PC address: 1174
Estimated Gas Usage: 418 - 513
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x34905bf0a490df50680a82a5ab089a963ee11224.sol:3



*/



//pragma solidity 0.5.17;
pr

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:19.634090
Transaction Length: 1
Severity: Low
Contract: Core
Function name: systemCoins(uint256)
PC address: 9745
Estimated Gas Usage: 723 - 818
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x34905bf0a490df50680a82a5ab089a963ee11224.sol:472

address[] public systemCoins

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:21.768690
Transaction Length: 1
Severity: Low
Contract: Core
Function name: peaksAddresses(uint256)
PC address: 10602
Estimated Gas Usage: 701 - 796
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x34905bf0a490df50680a82a5ab089a963ee11224.sol:487

address[] public peaksAddresses

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:21.993009
Transaction Length: 1
Severity: High
Contract: Core
Function name: syncSystem()
PC address: 14675
Estimated Gas Usage: 2239 - 37133
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x34905bf0a490df50680a82a5ab089a963ee11224.sol:9

solidity 0.5.17

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0xd29e369886b583319a37eb7d8d420ff031c0373b.sol
Total states:1986
20.541305
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.177599
Transaction Length: 1
Severity: High
Contract: StrategyAddTwoSidesOptimal
Function name: execute(address,uint256,bytes)
PC address: 726
Estimated Gas Usage: 376 - 471
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xd29e369886b583319a37eb7d8d420ff031c0373b.sol:3

*/

// File: openzeppelin-solidity-

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:00.178039
Transaction Length: 0
Severity: Medium
Contract: StrategyAddTwoSidesOptimal
Function name: constructor
PC address: 867
Estimated Gas Usage: 38791 - 235224
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 375
Offset: 664
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop1/0xd29e369886b583319a37eb7d8d420ff031c0373b.sol:619

contract StrategyAddTwoSidesOptimal is Ownable, ReentrancyGuard, Strategy {
    using SafeToken for address;
    using SafeMath for uint256;

    IUniswapV2Factory public factory;
    IUniswapV2Router02 public router;
    address public weth;
    address public goblin;

    /// @dev Create a new add two-side optimal strategy instance.
    /// @param _router The Uniswap router smart contract.
    constructor(IUniswapV2Router02 _router, address _goblin) public {
        factory = IUniswapV2Factory(_router.factory());
        router = _router;
        weth = _router.WETH();
        goblin = _goblin;
    }
    
    /// @dev Throws if called by any account other than the goblin.
    modifier onlyGoblin() {
        require(isGoblin(), "caller is not the goblin");
        _;
    }

    /// @dev Returns true if the caller is the current goblin.
    function isGoblin() public view returns (bool) {
        return msg.sender == goblin;
    }

    /// @dev Compute optimal deposit amount
    /// @param amtA amount of token A desired to deposit
    /// @param amtB amonut of token B desired to deposit
    /// @param resA amount of token A in reserve
    /// @param resB amount of token B in reserve
    function optimalDeposit(
        uint256 amtA,
        uint256 amtB,
        uint256 resA,
        uint256 resB
    ) internal pure returns (uint256 swapAmt, bool isReversed) {
        if (amtA.mul(resB) >= amtB.mul(resA)) {
            swapAmt = _optimalDepositA(amtA, amtB, resA, resB);
            isReversed = false;
        } else {
            swapAmt = _optimalDepositA(amtB, amtA, resB, resA);
            isReversed = true;
        }
    }

    /// @dev Compute optimal deposit amount helper
    /// @param amtA amount of token A desired to deposit
    /// @param amtB amonut of token B desired to deposit
    /// @param resA amount of token A in reserve
    /// @param resB amount of token B in reserve
    function _optimalDepositA(
        uint256 amtA,
        uint256 amtB,
        uint256 resA,
        uint256 resB
    ) internal pure returns (uint256) {
        require(amtA.mul(resB) >= amtB.mul(resA), "Reversed");

        uint256 a = 997;
        uint256 b = uint256(1997).mul(resA);
        uint256 _c = (amtA.mul(resB)).sub(amtB.mul(resA));
        uint256 c = _c.mul(1000).div(amtB.add(resB)).mul(resA);

        uint256 d = a.mul(c).mul(4);
        uint256 e = Math.sqrt(b.mul(b).add(d));

        uint256 numerator = e.sub(b);
        uint256 denominator = a.mul(2);

        return numerator.div(denominator);
    }

    /// @dev Execute worker strategy. Take LP tokens + ETH. Return LP tokens + ETH.
    /// @param user User address
    /// @param data Extra calldata information passed along to this strategy.
    function execute(address user, uint256, /* debt */ bytes calldata data) 
        external         
        payable  
        onlyGoblin       
        nonReentrant 
    {
        // 1. Find out what farming token we are dealing with.
        (address fToken, uint256 fAmount, uint256 minLPAmount) = abi.decode(data, (address, uint256, uint256));
        IUniswapV2Pair lpToken = IUniswapV2Pair(factory.getPair(fToken, weth));        
        // 2. Compute the optimal amount of ETH and fToken to be converted.  
        if (fAmount > 0) {  
            fToken.safeTransferFrom(user, address(this), fAmount);            
        }
        uint256 ethBalance = address(this).balance;
        uint256 swapAmt;
        bool isReversed;
        {
            (uint256 r0, uint256 r1, ) = lpToken.getReserves();
            (uint256 ethReserve, uint256 fReserve) = lpToken.token0() == weth ? (r0, r1) : (r1, r0);
            (swapAmt, isReversed) = optimalDeposit(ethBalance, fToken.myBalance(), ethReserve, fReserve);
        }
        // 3. Convert between ETH and farming tokens
        fToken.safeApprove(address(router), 0);
        fToken.safeApprove(address(router), uint256(-1));
        address[] memory path = new address[](2);
        (path[0], path[1]) = isReversed ? (fToken, weth) : (weth, fToken);
        if (isReversed) {
            router.swapExactTokensForETH(swapAmt, 0, path, address(this), now); // farming tokens to ETH
        } else {
            router.swapExactETHForTokens.value(swapAmt)(0, path, address(this), now); // ETH to farming tokens
        }
        // 4. Mint more LP tokens and return all LP tokens to the sender.
        (,, uint256 moreLPAmount) = router.addLiquidityETH.value(address(this).balance)(
            fToken, fToken.myBalance(), 0, 0, address(this), now
        );
        require(moreLPAmount >= minLPAmount, "insufficient LP tokens received");
        lpToken.transfer(msg.sender, lpToken.balanceOf(address(this)));
    }

    /// @dev Recover ERC20 tokens that were accidentally sent to this smart contract.
    /// @param token The token contract. Can be anything. This contract should not hold ERC20 tokens.
    /// @param to The address to send the tokens to.
    /// @param value The number of tokens to transfer to `to`.
    function recover(address token, address to, uint256 value) external onlyOwner nonReentrant {
        token.safeTransfer(to, value);
    }

    function() external payable {}
}

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0xb30e0b440eb666fa42281ec224f6d6b34f4d031e.sol
Total states:5340
64.009438
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:13.934468
Transaction Length: 1
Severity: Low
Contract: UniswapZAP
Function name: fallback
PC address: 1249
Estimated Gas Usage: 2242 - 3656
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop1/0xb30e0b440eb666fa42281ec224f6d6b34f4d031e.sol:274

_WETH.deposit.value(msg.value)()

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:48.165863
Transaction Length: 2
Severity: Low
Contract: UniswapZAP
Function name: fallback
PC address: 1249
Estimated Gas Usage: 2242 - 3656
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop1/0xb30e0b440eb666fa42281ec224f6d6b34f4d031e.sol:274

_WETH.deposit.value(msg.value)()

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:00:38.405530
Transaction Length: 2
Severity: Medium
Contract: UniswapZAP
Function name: addLiquidityETHOnly(address)
PC address: 1249
Estimated Gas Usage: 1776 - 2860
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../contracts/m_loop/loop1/0xb30e0b440eb666fa42281ec224f6d6b34f4d031e.sol:274

_WETH.deposit.value(msg.value)()

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x1098633D31B6fe64a5964d289F549503E0c7b7F73.sol
Total states:1104
6.687496
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.461363
Transaction Length: 1
Severity: Low
Contract: LoihiStorage
Function name: reserves(uint256)
PC address: 1334
Estimated Gas Usage: 767 - 862
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x1098633D31B6fe64a5964d289F549503E0c7b7F73.sol:186

address[] public reserves

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.868077
Transaction Length: 1
Severity: Low
Contract: LoihiStorage
Function name: numeraires(uint256)
PC address: 1491
Estimated Gas Usage: 700 - 795
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x1098633D31B6fe64a5964d289F549503E0c7b7F73.sol:185

address[] public numeraires

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.364206
Transaction Length: 1
Severity: Low
Contract: LoihiStorage
Function name: derivatives(uint256)
PC address: 1596
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x1098633D31B6fe64a5964d289F549503E0c7b7F73.sol:184

address[] public derivatives

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x1098633D31B6fe64a5964d289F549503E0c7b7F7.sol
Total states:1104
6.574094
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.462427
Transaction Length: 1
Severity: Low
Contract: LoihiStorage
Function name: reserves(uint256)
PC address: 1334
Estimated Gas Usage: 767 - 862
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x1098633D31B6fe64a5964d289F549503E0c7b7F7.sol:186

address[] public reserves

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.875541
Transaction Length: 1
Severity: Low
Contract: LoihiStorage
Function name: numeraires(uint256)
PC address: 1491
Estimated Gas Usage: 700 - 795
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x1098633D31B6fe64a5964d289F549503E0c7b7F7.sol:185

address[] public numeraires

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.370896
Transaction Length: 1
Severity: Low
Contract: LoihiStorage
Function name: derivatives(uint256)
PC address: 1596
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x1098633D31B6fe64a5964d289F549503E0c7b7F7.sol:184

address[] public derivatives

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x10f62065e73b11beb8ec75b7506c18e17f946be5.sol
Total states:426
0.885685
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x7ccf879361a594685cbcad53de5926dc0477876e.sol
Total states:22501
271.454562
==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.052595
Transaction Length: 1
Severity: High
Contract: Periods
Function name: getCurrentPeriod()
PC address: 2579
Estimated Gas Usage: 1102 - 1857
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x7ccf879361a594685cbcad53de5926dc0477876e.sol:349

_total_periods-1

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.062134
Transaction Length: 1
Severity: High
Contract: Subscriptions
Function name: getCurrentPeriod()
PC address: 6527
Estimated Gas Usage: 1147 - 1902
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x7ccf879361a594685cbcad53de5926dc0477876e.sol:349

_total_periods-1

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.304171
Transaction Length: 1
Severity: High
Contract: Cert
Function name: getCurrentPeriod()
PC address: 16501
Estimated Gas Usage: 1236 - 1991
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x7ccf879361a594685cbcad53de5926dc0477876e.sol:349

_total_periods-1

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x72b6aca6158ae91c312445bc7cba6d2a79206c3e.sol
Total states:35189
146.454705
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.124845
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1004
Estimated Gas Usage: 417 - 512
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x72b6aca6158ae91c312445bc7cba6d2a79206c3e.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.511258
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1006
Estimated Gas Usage: 417 - 512
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x72b6aca6158ae91c312445bc7cba6d2a79206c3e.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.837365
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1089
Estimated Gas Usage: 593 - 688
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x72b6aca6158ae91c312445bc7cba6d2a79206c3e.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:23.336987
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1091
Estimated Gas Usage: 593 - 688
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x72b6aca6158ae91c312445bc7cba6d2a79206c3e.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.833740
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1261
Estimated Gas Usage: 462 - 557
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x72b6aca6158ae91c312445bc7cba6d2a79206c3e.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.860793
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1263
Estimated Gas Usage: 462 - 557
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x72b6aca6158ae91c312445bc7cba6d2a79206c3e.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.255061
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1346
Estimated Gas Usage: 638 - 733
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x72b6aca6158ae91c312445bc7cba6d2a79206c3e.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:18.968385
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1348
Estimated Gas Usage: 638 - 733
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x72b6aca6158ae91c312445bc7cba6d2a79206c3e.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.881931
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeBP(uint256)
PC address: 2585
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x72b6aca6158ae91c312445bc7cba6d2a79206c3e.sol:784

uint[] public bonusRangeBP

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.386706
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3691
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x72b6aca6158ae91c312445bc7cba6d2a79206c3e.sol:1226

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:03.967631
Transaction Length: 2
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3691
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x72b6aca6158ae91c312445bc7cba6d2a79206c3e.sol:1226

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:37.827097
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeStart(uint256)
PC address: 6017
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x72b6aca6158ae91c312445bc7cba6d2a79206c3e.sol:783

uint[] public bonusRangeStart

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:13.087955
Transaction Length: 1
Severity: Low
Contract: LidStaking
Function name: stakeHandlers(uint256)
PC address: 6118
Estimated Gas Usage: 790 - 885
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x72b6aca6158ae91c312445bc7cba6d2a79206c3e.sol:961

IStakeHandler[] public stakeHandlers

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.821918
Transaction Length: 2
Severity: High
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6315
Estimated Gas Usage: 1699 - 2124
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x72b6aca6158ae91c312445bc7cba6d2a79206c3e.sol:1111

stakeHandlers.length-1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:08.259357
Transaction Length: 2
Severity: Low
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6326
Estimated Gas Usage: 1709 - 2134
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x72b6aca6158ae91c312445bc7cba6d2a79206c3e.sol:1111

stakeHandlers[stakeHandlers.length-1]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:34.499558
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: calculateRatePerEth(uint256,uint256,uint256)
PC address: 6866
Estimated Gas Usage: 955 - 1050
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x72b6aca6158ae91c312445bc7cba6d2a79206c3e.sol:162

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.300724
Transaction Length: 1
Severity: High
Contract: LidStaking
Function name: findTaxAmount(uint256,uint256)
PC address: 13348
Estimated Gas Usage: 474 - 569
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x72b6aca6158ae91c312445bc7cba6d2a79206c3e.sol:162

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:31.399454
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPoolBPs(uint256)
PC address: 15578
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x72b6aca6158ae91c312445bc7cba6d2a79206c3e.sol:1227

uint[] public tokenPoolBPs

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0xcd9a9783ec3e181836f19bbd3dc37908ea203905.sol
Total states:2324
1.924086
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x6a2c9f1e5a2b7bef07f2af6a83b6fdce1df003a3.sol
Total states:13659
319.467793
==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:03:44.832367
Transaction Length: 2
Severity: Medium
Contract: etherATM
Function name: fallback()
PC address: 125
Estimated Gas Usage: 38111 - 227523
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 565
Offset: 886
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop1/0x6a2c9f1e5a2b7bef07f2af6a83b6fdce1df003a3.sol:14

contract etherATM {

    struct Person {

        address payable etherAddress;

        uint256 amount;

    }



    Person[] public persons;



    uint256 public payoutIdx = 0;

    uint256 public collectedFees;

    uint256 public balance = 0;



    address payable owner;



    modifier onlyowner {

        if (msg.sender == owner) _;

    }



    constructor() public {

        owner = 0xF51a48488be6AbEFFb56d4B1B666C19F2F66Cf1e;

    }



    function enter() public payable {

        if (msg.value < 0.8 ether) {

            msg.sender.transfer(msg.value);

            return;

        }

        uint256 amount;

        if (msg.value > 40 ether) {

            msg.sender.transfer(msg.value - 40 ether);

            amount = 40 ether;

        } else {

            amount = msg.value;

        }



        uint256 idx = persons.length;

        persons.length += 1;

        persons[idx].etherAddress = msg.sender;

        persons[idx].amount = amount;



        if (idx != 0) {

            collectedFees += 0;

            owner.transfer(collectedFees);

            collectedFees = 0;

            balance += amount;

        } else {

            balance += amount;

        }



        while (balance > (persons[payoutIdx].amount / 100) * 180) {

            uint256 transactionAmount = (persons[payoutIdx].amount / 100) * 180;

            persons[payoutIdx].etherAddress.transfer(transactionAmount);

            balance -= transactionAmount;

            payoutIdx += 1;

        }

    }



    function() external {

        enter();

    }



    function setOwner(address payable _owner) internal onlyowner {

        owner = _owner;

    }

}

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:14.102983
Transaction Length: 1
Severity: Low
Contract: etherATM
Function name: persons(uint256)
PC address: 1269
Estimated Gas Usage: 656 - 751
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x6a2c9f1e5a2b7bef07f2af6a83b6fdce1df003a3.sol:26

Person[] public persons

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0xbabf02ff4d487d2cd482582875f12b6b5952a67e.sol
Total states:8157
18.378591
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x3D1BE3fEf769399CcE7e504E85324d622F23Cf85.sol
Total states:2301
2.152027
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.038680
Transaction Length: 0
Severity: High
Contract: ERC20
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x3D1BE3fEf769399CcE7e504E85324d622F23Cf85.sol:12

ns; to access them see `ERC20Detailed`.
 */

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.042974
Transaction Length: 0
Severity: High
Contract: TulipToken
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x3D1BE3fEf769399CcE7e504E85324d622F23Cf85.sol:12

ns; to access them see `ERC20Detailed`.
 */

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0xCCe54a99CB6eF7600e2f17e9A0b161e5300D02Be.sol
Total states:41678
451.94266
==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:00.377883
Transaction Length: 1
Severity: Medium
Contract: VoteProxy
Function name: freeAll()
PC address: 349
Estimated Gas Usage: 9777 - 150153
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 1496
Offset: 1637
Offset: 1944
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop1/0xCCe54a99CB6eF7600e2f17e9A0b161e5300D02Be.sol:852

function freeAll() public auth {
        chief.free(chief.deposits(address(this)));
        gov.push(cold, gov.balanceOf(address(this)));
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.436602
Transaction Length: 1
Severity: High
Contract: DSChiefApprovals
Function name: etch(address[])
PC address: 707
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xCCe54a99CB6eF7600e2f17e9A0b161e5300D02Be.sol:5

sol -- API for the ER

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.250033
Transaction Length: 1
Severity: High
Contract: DSChiefApprovals
Function name: etch(address[])
PC address: 709
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xCCe54a99CB6eF7600e2f17e9A0b161e5300D02Be.sol:3

*/

/// erc20.sol -- API for the ERC

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.925405
Transaction Length: 1
Severity: High
Contract: VoteProxy
Function name: vote(address[])
PC address: 717
Estimated Gas Usage: 384 - 479
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xCCe54a99CB6eF7600e2f17e9A0b161e5300D02Be.sol:5

sol -- API for the ER

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.670221
Transaction Length: 1
Severity: High
Contract: VoteProxy
Function name: vote(address[])
PC address: 719
Estimated Gas Usage: 384 - 479
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xCCe54a99CB6eF7600e2f17e9A0b161e5300D02Be.sol:3

*/

/// erc20.sol -- API for the ERC

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:00.251188
Transaction Length: 0
Severity: Low
Contract: VoteProxy
Function name: constructor
PC address: 1065
Estimated Gas Usage: 33385 - 208626
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop1/0xCCe54a99CB6eF7600e2f17e9A0b161e5300D02Be.sol:833

gov.approve(address(chief), uint256(-1))

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.389930
Transaction Length: 1
Severity: High
Contract: DSChief
Function name: etch(address[])
PC address: 1231
Estimated Gas Usage: 386 - 481
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xCCe54a99CB6eF7600e2f17e9A0b161e5300D02Be.sol:5

sol -- API for the ER

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.453895
Transaction Length: 1
Severity: High
Contract: DSChief
Function name: etch(address[])
PC address: 1233
Estimated Gas Usage: 386 - 481
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xCCe54a99CB6eF7600e2f17e9A0b161e5300D02Be.sol:3

*/

/// erc20.sol -- API for the ERC

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:00.330159
Transaction Length: 0
Severity: Low
Contract: VoteProxy
Function name: constructor
PC address: 1391
Estimated Gas Usage: 35933 - 246491
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop1/0xCCe54a99CB6eF7600e2f17e9A0b161e5300D02Be.sol:834

iou.approve(address(chief), uint256(-1))

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:00.382770
Transaction Length: 0
Severity: Medium
Contract: VoteProxy
Function name: constructor
PC address: 1467
Estimated Gas Usage: 37224 - 284272
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 418
Offset: 676
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop1/0xCCe54a99CB6eF7600e2f17e9A0b161e5300D02Be.sol:819

contract VoteProxy {
    address public cold;
    address public hot;
    DSToken public gov;
    DSToken public iou;
    DSChief public chief;

    constructor(DSChief _chief, address _cold, address _hot) public {
        chief = _chief;
        cold = _cold;
        hot = _hot;

        gov = chief.GOV();
        iou = chief.IOU();
        gov.approve(address(chief), uint256(-1));
        iou.approve(address(chief), uint256(-1));
    }

    modifier auth() {
        require(msg.sender == hot || msg.sender == cold, "Sender must be a Cold or Hot Wallet");
        _;
    }

    function lock(uint256 wad) public auth {
        gov.pull(cold, wad);   // mkr from cold
        chief.lock(wad);       // mkr out, ious in
    }

    function free(uint256 wad) public auth {
        chief.free(wad);       // ious out, mkr in
        gov.push(cold, wad);   // mkr to cold
    }

    function freeAll() public auth {
        chief.free(chief.deposits(address(this)));
        gov.push(cold, gov.balanceOf(address(this)));
    }

    function vote(address[] memory yays) public auth returns (bytes32) {
        return chief.vote(yays);
    }

    function vote(bytes32 slate) public auth {
        chief.vote(slate);
    }
}

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x75a660c394d69cf386d8cc290c2eca39faa72404.sol
Total states:77
3.420527
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0xc7d80e916469d317237c19dd8bbab55757243ee7.sol
Total states:2324
1.817862
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0xcEe014dE7992D0C5C8a10c6769A12C81b69d0063.sol
Total states:5938
23.792014
==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:04.416888
Transaction Length: 1
Severity: Medium
Contract: RewardProxyActions
Function name: claimReward(address)
PC address: 144
Estimated Gas Usage: 5139 - 108825
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 250
Offset: 409
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop1/0xcEe014dE7992D0C5C8a10c6769A12C81b69d0063.sol:1271

function claimReward(address rewarder) public {
        uint256 reward = StakingRewards(rewarder).getReward();
        IERC20(StakingRewards(rewarder).gov()).transfer(msg.sender, reward);
    }

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:00:01.710603
Transaction Length: 1
Severity: Medium
Contract: RewardProxyActions
Function name: claimReward(address)
PC address: 250
Estimated Gas Usage: 1019 - 1395
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../contracts/m_loop/loop1/0xcEe014dE7992D0C5C8a10c6769A12C81b69d0063.sol:1272

StakingRewards(rewarder).getReward()

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:04.274562
Transaction Length: 1
Severity: Low
Contract: RewardProxyActions
Function name: claimReward(address)
PC address: 630
Estimated Gas Usage: 4314 - 73814
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop1/0xcEe014dE7992D0C5C8a10c6769A12C81b69d0063.sol:1273

IERC20(StakingRewards(rewarder).gov()).transfer(msg.sender, reward)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0xb898ceae9b41ff87b2bc22a41e63755604fe4771.sol
Total states:2759
86.661967
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.356317
Transaction Length: 1
Severity: High
Contract: CryptoLott
Function name: playerRegister(string,uint64[])
PC address: 1740
Estimated Gas Usage: 360 - 455
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xb898ceae9b41ff87b2bc22a41e63755604fe4771.sol:3



*/



//pragma solidity >=0.5.0 <

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.108451
Transaction Length: 1
Severity: High
Contract: CryptoLott
Function name: playerRegister(string,uint64[])
PC address: 1889
Estimated Gas Usage: 702 - 3479
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xb898ceae9b41ff87b2bc22a41e63755604fe4771.sol:9

ma solidity >=0.5.0 <

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:25.683655
Transaction Length: 1
Severity: High
Contract: CryptoLott
Function name: playerRegister(string,uint64[])
PC address: 1891
Estimated Gas Usage: 702 - 3479
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xb898ceae9b41ff87b2bc22a41e63755604fe4771.sol:3



*/



//pragma solidity >=0.5.0 <0

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:49.796180
Transaction Length: 1
Severity: High
Contract: CryptoLott
Function name: playerRegister(string,uint64[])
PC address: 5099
Estimated Gas Usage: 2369 - 8674
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xb898ceae9b41ff87b2bc22a41e63755604fe4771.sol:280

minPrice * numbers.length

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0xce868872e3a3479bead233af3eb184a80a2b7a34.sol
Total states:10807
20.740377
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.676452
Transaction Length: 1
Severity: Low
Contract: TokenVaultStorage
Function name: spenders(uint256)
PC address: 611
Estimated Gas Usage: 656 - 751
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xce868872e3a3479bead233af3eb184a80a2b7a34.sol:51

address[] public spenders

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.747711
Transaction Length: 1
Severity: Low
Contract: TokenRegistery
Function name: spenders(uint256)
PC address: 4501
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xce868872e3a3479bead233af3eb184a80a2b7a34.sol:51

address[] public spenders

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.766509
Transaction Length: 1
Severity: Low
Contract: TokenSpenders
Function name: spenders(uint256)
PC address: 4707
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xce868872e3a3479bead233af3eb184a80a2b7a34.sol:51

address[] public spenders

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.922160
Transaction Length: 1
Severity: Low
Contract: TokenVault
Function name: spenders(uint256)
PC address: 7386
Estimated Gas Usage: 767 - 862
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xce868872e3a3479bead233af3eb184a80a2b7a34.sol:51

address[] public spenders

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:00:06.286784
Transaction Length: 1
Severity: Medium
Contract: TokenVault
Function name: depositeToken(address,address,uint256)
PC address: 12549
Estimated Gas Usage: 1262 - 1828
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../contracts/m_loop/loop1/0xce868872e3a3479bead233af3eb184a80a2b7a34.sol:376

_token.transfer(_to, _amount)

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:00:04.013295
Transaction Length: 1
Severity: Medium
Contract: TokenVault
Function name: depositeToken(address,address,uint256)
PC address: 12944
Estimated Gas Usage: 1295 - 1956
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../contracts/m_loop/loop1/0xce868872e3a3479bead233af3eb184a80a2b7a34.sol:379

_token.transferFrom(_from, _to, _amount)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x3FF5c0A14121Ca39211C95f6cEB221b86A90729E.sol
Total states:1695
40.101517
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x47b7b0983bf3b1d8d5b773006809edcb208af191.sol
Total states:1214
239.458008
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.306121
Transaction Length: 1
Severity: High
Contract: PickleVoteProxy
Function name: sqrt(uint256)
PC address: 1141
Estimated Gas Usage: 319 - 414
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x47b7b0983bf3b1d8d5b773006809edcb208af191.sol:84

x + 1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:03:59.072213
Transaction Length: 1
Severity: Low
Contract: PickleVoteProxy
Function name: sqrt(uint256)
PC address: 1181
Estimated Gas Usage: 371 - 466
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x47b7b0983bf3b1d8d5b773006809edcb208af191.sol:88

x / z

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0xaa7b4ee26fa21e2a9e49559779894bec982cd87c.sol
Total states:4414
5.866036
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x514dfb37fd6f9d8f0bf653828aada3fd1d96bf8c.sol
Total states:10402
103.931765
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:02.102221
Transaction Length: 1
Severity: Low
Contract: ETH_2X
Function name: users(uint256)
PC address: 2361
Estimated Gas Usage: 702 - 797
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x514dfb37fd6f9d8f0bf653828aada3fd1d96bf8c.sol:234

User[] public users

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x48c7c3392e1c542641d14516f2bda078e242df79.sol
Total states:18066
32.651652
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.971007
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3244
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x48c7c3392e1c542641d14516f2bda078e242df79.sol:134

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:05.908138
Transaction Length: 1
Severity: Low
Contract: SpringField
Function name: stakers(uint256)
PC address: 8265
Estimated Gas Usage: 788 - 883
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x48c7c3392e1c542641d14516f2bda078e242df79.sol:556

address[] public stakers

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.262388
Transaction Length: 1
Severity: High
Contract: SpringField
Function name: enter(uint256)
PC address: 9939
Estimated Gas Usage: 42946 - 187108
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x48c7c3392e1c542641d14516f2bda078e242df79.sol:134

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x5e602265a972ae4d3ba11f21afbb676b4ed25191.sol
Total states:426
0.795252
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x350c8b96cf7cbb04a4508abff2e995a013875a7e.sol
Total states:55558
244.956225
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.078997
Transaction Length: 0
Severity: High
Contract: MultiSigWallet
Function name: constructor
PC address: 110
Estimated Gas Usage: 257 - 3030
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x350c8b96cf7cbb04a4508abff2e995a013875a7e.sol:26

 *  Events

     */



--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.094339
Transaction Length: 0
Severity: High
Contract: MultiSigWallet
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x350c8b96cf7cbb04a4508abff2e995a013875a7e.sol:20

llet {



    /*

     *  Events

     */

 

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x24d48513eac38449ec7c310a79584f87785f856f.sol
Total states:55558
250.700305
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.077985
Transaction Length: 0
Severity: High
Contract: MultiSigWallet
Function name: constructor
PC address: 110
Estimated Gas Usage: 257 - 3030
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x24d48513eac38449ec7c310a79584f87785f856f.sol:26

 *  Events

     */



--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.093310
Transaction Length: 0
Severity: High
Contract: MultiSigWallet
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x24d48513eac38449ec7c310a79584f87785f856f.sol:20

llet {



    /*

     *  Events

     */

 

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x8fff32c2fc7e5c904ee05374e0b484d7313ebfd0.sol
Total states:10936
29.291267
==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.714179
Transaction Length: 1
Severity: High
Contract: pTUSDVault
Function name: availableWithdraw(address)
PC address: 1869
Estimated Gas Usage: 1088 - 1373
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x8fff32c2fc7e5c904ee05374e0b484d7313ebfd0.sol:640

_rewardCount - 1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.923939
Transaction Length: 1
Severity: Low
Contract: pTUSDVault
Function name: addressIndices(uint256)
PC address: 2343
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x8fff32c2fc7e5c904ee05374e0b484d7313ebfd0.sol:456

address[] public addressIndices

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.977724
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3244
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x8fff32c2fc7e5c904ee05374e0b484d7313ebfd0.sol:214

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.837175
Transaction Length: 1
Severity: High
Contract: pTUSDVault
Function name: deposit(uint256)
PC address: 5691
Estimated Gas Usage: 11933 - 52453
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x8fff32c2fc7e5c904ee05374e0b484d7313ebfd0.sol:252

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0xbeb49ad4e0ef9b3a56cc4a280fa4f5bc41ee3ef9.sol
Total states:17208
75.577681
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:15.134894
Transaction Length: 1
Severity: High
Contract: ProtocolSettings
Function name: getLoanPoolsList(uint256,uint256)
PC address: 15523
Estimated Gas Usage: 621 - 716
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xbeb49ad4e0ef9b3a56cc4a280fa4f5bc41ee3ef9.sol:189

start + count

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0xbf5243de081c697f0f24568ab86eb643d8a0700f.sol
Total states:13378
49.391822
==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.068183
Transaction Length: 0
Severity: Medium
Contract: IBNEST
Function name: constructor
PC address: 256
Estimated Gas Usage: 27547 - 129290
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../contracts/m_loop/loop1/0xbf5243de081c697f0f24568ab86eb643d8a0700f.sol:335

tx.origin

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.889178
Transaction Length: 2
Severity: High
Contract: StandardToken
Function name: increaseApproval(address,uint256)
PC address: 5840
Estimated Gas Usage: 955 - 1430
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xbf5243de081c697f0f24568ab86eb643d8a0700f.sol:119

_a + _b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:17.484435
Transaction Length: 2
Severity: Low
Contract: StandardToken
Function name: increaseApproval(address,uint256)
PC address: 5853
Estimated Gas Usage: 965 - 1440
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xbf5243de081c697f0f24568ab86eb643d8a0700f.sol:120

assert(c >= _a)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.736510
Transaction Length: 2
Severity: High
Contract: IBNEST
Function name: increaseApproval(address,uint256)
PC address: 7665
Estimated Gas Usage: 977 - 1452
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xbf5243de081c697f0f24568ab86eb643d8a0700f.sol:119

_a + _b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:21.024369
Transaction Length: 2
Severity: Low
Contract: IBNEST
Function name: increaseApproval(address,uint256)
PC address: 7678
Estimated Gas Usage: 987 - 1462
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xbf5243de081c697f0f24568ab86eb643d8a0700f.sol:120

assert(c >= _a)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x0ee7ee94903b46e7860c5011e6c52f535439d2f4.sol
Total states:18334
2720.574709
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.647123
Transaction Length: 1
Severity: High
Contract: master
Function name: airdrop(address,address[],uint256[])
PC address: 458
Estimated Gas Usage: 375 - 470
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x0ee7ee94903b46e7860c5011e6c52f535439d2f4.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.709373
Transaction Length: 1
Severity: High
Contract: master
Function name: airdrop(address,address[],uint256[])
PC address: 460
Estimated Gas Usage: 375 - 470
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x0ee7ee94903b46e7860c5011e6c52f535439d2f4.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:16.400783
Transaction Length: 1
Severity: High
Contract: master
Function name: airdrop(address,address[],uint256[])
PC address: 606
Estimated Gas Usage: 717 - 3494
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x0ee7ee94903b46e7860c5011e6c52f535439d2f4.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:27.836726
Transaction Length: 1
Severity: High
Contract: master
Function name: airdrop(address,address[],uint256[])
PC address: 608
Estimated Gas Usage: 717 - 3494
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x0ee7ee94903b46e7860c5011e6c52f535439d2f4.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:14.649485
Transaction Length: 1
Severity: High
Contract: master
Function name: name()
PC address: 790
Estimated Gas Usage: 1914 - 3044
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x0ee7ee94903b46e7860c5011e6c52f535439d2f4.sol:72

function name() public view returns(string memory) {
        return _name;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:11:02.043182
Transaction Length: 1
Severity: High
Contract: master
Function name: symbol()
PC address: 1757
Estimated Gas Usage: 1957 - 3087
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x0ee7ee94903b46e7860c5011e6c52f535439d2f4.sol:76

function symbol() public view returns(string memory) {
        return _symbol;
    }

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:14:06.511521
Transaction Length: 1
Severity: Low
Contract: master
Function name: decreaseAllowance(address,uint256)
PC address: 9553
Estimated Gas Usage: 973 - 1448
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x0ee7ee94903b46e7860c5011e6c52f535439d2f4.sol:44

assert(b <= a)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:27:56.734298
Transaction Length: 2
Severity: Low
Contract: master
Function name: decreaseAllowance(address,uint256)
PC address: 9553
Estimated Gas Usage: 973 - 1448
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x0ee7ee94903b46e7860c5011e6c52f535439d2f4.sol:44

assert(b <= a)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:18:55.359737
Transaction Length: 2
Severity: High
Contract: master
Function name: increaseAllowance(address,uint256)
PC address: 9571
Estimated Gas Usage: 1003 - 1478
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x0ee7ee94903b46e7860c5011e6c52f535439d2f4.sol:49

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:25:42.606937
Transaction Length: 2
Severity: Low
Contract: master
Function name: increaseAllowance(address,uint256)
PC address: 9584
Estimated Gas Usage: 1013 - 1488
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x0ee7ee94903b46e7860c5011e6c52f535439d2f4.sol:50

assert(c >= a)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol
Total states:10775
201.846504
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.244941
Transaction Length: 1
Severity: High
Contract: SLErc20
Function name: getCash()
PC address: 12580
Estimated Gas Usage: 2505 - 37494
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol:5

racts/Comptroll

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.122811
Transaction Length: 1
Severity: High
Contract: SLErc20
Function name: getCash()
PC address: 12583
Estimated Gas Usage: 2505 - 37494
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol:3



// File: contracts/ComptrollerInterface.s

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.700944
Transaction Length: 1
Severity: High
Contract: SLErc20
Function name: getCash()
PC address: 12595
Estimated Gas Usage: 2505 - 37494
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol:2780

token.balanceOf(address(this))

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:02.780273
Transaction Length: 1
Severity: High
Contract: SLErc20
Function name: getCash()
PC address: 28487
Estimated Gas Usage: 2505 - 37494
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol:254

emed
     */
    event 

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x294309E42e1b3863a316BEb52df91B1CcB15eef9.sol
Total states:3078
79.218042
==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.536736
Transaction Length: 1
Severity: High
Contract: Math
Function name: safeSub(uint256,uint256)
PC address: 601
Estimated Gas Usage: 527 - 622
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x294309E42e1b3863a316BEb52df91B1CcB15eef9.sol:110

x - y

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:07.472078
Transaction Length: 1
Severity: Low
Contract: Math
Function name: safeDiv(uint256,uint256)
PC address: 689
Estimated Gas Usage: 542 - 637
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x294309E42e1b3863a316BEb52df91B1CcB15eef9.sol:118

x / y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.966132
Transaction Length: 1
Severity: High
Contract: Math
Function name: rdiv(uint256,uint256)
PC address: 715
Estimated Gas Usage: 600 - 695
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x294309E42e1b3863a316BEb52df91B1CcB15eef9.sol:114

x * y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.782376
Transaction Length: 1
Severity: High
Contract: Math
Function name: safeAdd(uint256,uint256)
PC address: 807
Estimated Gas Usage: 593 - 688
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x294309E42e1b3863a316BEb52df91B1CcB15eef9.sol:106

x + y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:42.543412
Transaction Length: 1
Severity: High
Contract: Tranche
Function name: calcDisburse(address)
PC address: 4275
Estimated Gas Usage: 2548 - 37442
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x294309E42e1b3863a316BEb52df91B1CcB15eef9.sol:5

sing https://da

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:40.501234
Transaction Length: 1
Severity: High
Contract: Tranche
Function name: calcDisburse(address)
PC address: 4278
Estimated Gas Usage: 2548 - 37442
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x294309E42e1b3863a316BEb52df91B1CcB15eef9.sol:3



// Verified using https://dapp.tools

// 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:41.643063
Transaction Length: 1
Severity: High
Contract: Tranche
Function name: calcDisburse(address)
PC address: 4290
Estimated Gas Usage: 2548 - 37442
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x294309E42e1b3863a316BEb52df91B1CcB15eef9.sol:310

epochTicker.lastEpochExecuted()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:46.977929
Transaction Length: 1
Severity: High
Contract: Tranche
Function name: tokenSupply()
PC address: 6164
Estimated Gas Usage: 2253 - 37147
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x294309E42e1b3863a316BEb52df91B1CcB15eef9.sol:5

sing https://da

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:45.518954
Transaction Length: 1
Severity: High
Contract: Tranche
Function name: tokenSupply()
PC address: 6167
Estimated Gas Usage: 2253 - 37147
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x294309E42e1b3863a316BEb52df91B1CcB15eef9.sol:3



// Verified using https://dapp.tools

// 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:46.307569
Transaction Length: 1
Severity: High
Contract: Tranche
Function name: tokenSupply()
PC address: 6179
Estimated Gas Usage: 2253 - 37147
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x294309E42e1b3863a316BEb52df91B1CcB15eef9.sol:257

token.totalSupply()

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:49.688213
Transaction Length: 1
Severity: High
Contract: Tranche
Function name: safeSub(uint256,uint256)
PC address: 8512
Estimated Gas Usage: 595 - 690
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x294309E42e1b3863a316BEb52df91B1CcB15eef9.sol:110

x - y

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:52.356320
Transaction Length: 1
Severity: Low
Contract: Tranche
Function name: safeDiv(uint256,uint256)
PC address: 8642
Estimated Gas Usage: 543 - 638
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x294309E42e1b3863a316BEb52df91B1CcB15eef9.sol:118

x / y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:55.908508
Transaction Length: 1
Severity: High
Contract: Tranche
Function name: balance()
PC address: 8866
Estimated Gas Usage: 2912 - 38231
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x294309E42e1b3863a316BEb52df91B1CcB15eef9.sol:5

sing https://da

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:54.079604
Transaction Length: 1
Severity: High
Contract: Tranche
Function name: balance()
PC address: 8869
Estimated Gas Usage: 2912 - 38231
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x294309E42e1b3863a316BEb52df91B1CcB15eef9.sol:3



// Verified using https://dapp.tools

// 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:54.946275
Transaction Length: 1
Severity: High
Contract: Tranche
Function name: balance()
PC address: 8881
Estimated Gas Usage: 2912 - 38231
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x294309E42e1b3863a316BEb52df91B1CcB15eef9.sol:253

currency.balanceOf(self)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:14.963102
Transaction Length: 1
Severity: High
Contract: Tranche
Function name: rmul(uint256,uint256)
PC address: 9230
Estimated Gas Usage: 636 - 731
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x294309E42e1b3863a316BEb52df91B1CcB15eef9.sol:114

x * y

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:43.411813
Transaction Length: 1
Severity: High
Contract: Tranche
Function name: calcDisburse(address)
PC address: 13393
Estimated Gas Usage: 2548 - 37442
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x294309E42e1b3863a316BEb52df91B1CcB15eef9.sol:81

 == 1); _; }
}

////// 

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x3c2ce84e7b253fb2c52a73b152db5cbe5ec62a6e.sol
Total states:16824
36.290678
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.778437
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3044
Estimated Gas Usage: 989 - 1464
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x3c2ce84e7b253fb2c52a73b152db5cbe5ec62a6e.sol:74

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.879833
Transaction Length: 1
Severity: Low
Contract: SectorOfLand
Function name: lockState(address,uint256)
PC address: 4016
Estimated Gas Usage: 830 - 1115
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x3c2ce84e7b253fb2c52a73b152db5cbe5ec62a6e.sol:636

lockInfo[_holder][_idx]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.552186
Transaction Length: 2
Severity: High
Contract: SectorOfLand
Function name: increaseAllowance(address,uint256)
PC address: 11747
Estimated Gas Usage: 968 - 1443
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x3c2ce84e7b253fb2c52a73b152db5cbe5ec62a6e.sol:74

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x035663085dca095f5b1c94f6ecc5e81415381002.sol
Total states:1021
5.983316
==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:00:05.604943
Transaction Length: 1
Severity: Medium
Contract: ControllerMaster
Function name: save(address)
PC address: 977
Estimated Gas Usage: 5935 - 109716
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../contracts/m_loop/loop1/0x035663085dca095f5b1c94f6ecc5e81415381002.sol:34

IIStrategy(_strategy).withdraw(
                IIStrategy(_strategy).balanceOf()
            )

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x667fF577BF5E5D9d438D7f7C90d11d3f0f00A364.sol
Total states:537
3.53283
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x9548c495afd48593c3c5100e2b41b5f30c021fc8.sol
Total states:1351
220.101247
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.098532
Transaction Length: 1
Severity: High
Contract: BulkSender
Function name: multisendToken(address,address[],uint256[])
PC address: 304
Estimated Gas Usage: 351 - 446
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x9548c495afd48593c3c5100e2b41b5f30c021fc8.sol:9

ma solidity ^0.5.16;


--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.921215
Transaction Length: 1
Severity: High
Contract: BulkSender
Function name: multisendToken(address,address[],uint256[])
PC address: 306
Estimated Gas Usage: 351 - 446
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x9548c495afd48593c3c5100e2b41b5f30c021fc8.sol:3



*/



//pragma solidity ^0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:20.885534
Transaction Length: 1
Severity: High
Contract: BulkSender
Function name: multisendToken(address,address[],uint256[])
PC address: 452
Estimated Gas Usage: 693 - 3470
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x9548c495afd48593c3c5100e2b41b5f30c021fc8.sol:9

ma solidity ^0.5.16;


--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:31.924748
Transaction Length: 1
Severity: High
Contract: BulkSender
Function name: multisendToken(address,address[],uint256[])
PC address: 454
Estimated Gas Usage: 693 - 3470
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x9548c495afd48593c3c5100e2b41b5f30c021fc8.sol:3



*/



//pragma solidity ^0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:51.630106
Transaction Length: 1
Severity: High
Contract: BulkSender
Function name: bulksend(address[],uint256[])
PC address: 636
Estimated Gas Usage: 316 - 411
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x9548c495afd48593c3c5100e2b41b5f30c021fc8.sol:9

ma solidity ^0.5.16;


--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:55.232886
Transaction Length: 1
Severity: High
Contract: BulkSender
Function name: bulksend(address[],uint256[])
PC address: 638
Estimated Gas Usage: 316 - 411
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x9548c495afd48593c3c5100e2b41b5f30c021fc8.sol:3



*/



//pragma solidity ^0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:21.538168
Transaction Length: 1
Severity: High
Contract: BulkSender
Function name: bulksend(address[],uint256[])
PC address: 784
Estimated Gas Usage: 649 - 3426
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x9548c495afd48593c3c5100e2b41b5f30c021fc8.sol:9

ma solidity ^0.5.16;


--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:37.678959
Transaction Length: 1
Severity: High
Contract: BulkSender
Function name: bulksend(address[],uint256[])
PC address: 786
Estimated Gas Usage: 649 - 3426
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x9548c495afd48593c3c5100e2b41b5f30c021fc8.sol:3



*/



//pragma solidity ^0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:20.066525
Transaction Length: 1
Severity: High
Contract: BulkSender
Function name: multisendToken2(address,address[],uint256[])
PC address: 1100
Estimated Gas Usage: 417 - 512
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x9548c495afd48593c3c5100e2b41b5f30c021fc8.sol:9

ma solidity ^0.5.16;


--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:25.601151
Transaction Length: 1
Severity: High
Contract: BulkSender
Function name: multisendToken2(address,address[],uint256[])
PC address: 1102
Estimated Gas Usage: 417 - 512
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x9548c495afd48593c3c5100e2b41b5f30c021fc8.sol:3



*/



//pragma solidity ^0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:54.779352
Transaction Length: 1
Severity: High
Contract: BulkSender
Function name: multisendToken2(address,address[],uint256[])
PC address: 1248
Estimated Gas Usage: 750 - 3527
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x9548c495afd48593c3c5100e2b41b5f30c021fc8.sol:9

ma solidity ^0.5.16;


--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:05.892032
Transaction Length: 1
Severity: High
Contract: BulkSender
Function name: multisendToken2(address,address[],uint256[])
PC address: 1250
Estimated Gas Usage: 750 - 3527
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x9548c495afd48593c3c5100e2b41b5f30c021fc8.sol:3



*/



//pragma solidity ^0.5.16;
p

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x52d829076ddaefb5742c26478551f9f1fc4c14fe.sol
Total states:149
2.706679
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x991f36d2fec39d442ab6ba43f110704414d91b62.sol
Total states:20925
202.092376
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.861696
Transaction Length: 1
Severity: High
Contract: Token
Function name: bulkTransfer(address[],uint256[])
PC address: 735
Estimated Gas Usage: 408 - 503
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x991f36d2fec39d442ab6ba43f110704414d91b62.sol:5

olidity ^0.5.13;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.789452
Transaction Length: 1
Severity: High
Contract: Token
Function name: bulkTransfer(address[],uint256[])
PC address: 737
Estimated Gas Usage: 408 - 503
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x991f36d2fec39d442ab6ba43f110704414d91b62.sol:3

*/

//pragma solidity ^0.5.13;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.257932
Transaction Length: 1
Severity: High
Contract: Token
Function name: bulkTransfer(address[],uint256[])
PC address: 820
Estimated Gas Usage: 584 - 679
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x991f36d2fec39d442ab6ba43f110704414d91b62.sol:5

olidity ^0.5.13;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:23.876260
Transaction Length: 1
Severity: High
Contract: Token
Function name: bulkTransfer(address[],uint256[])
PC address: 822
Estimated Gas Usage: 584 - 679
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x991f36d2fec39d442ab6ba43f110704414d91b62.sol:3

*/

//pragma solidity ^0.5.13;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:42.045819
Transaction Length: 1
Severity: High
Contract: Token
Function name: transferAndCall(address,uint256,bytes)
PC address: 1277
Estimated Gas Usage: 489 - 584
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x991f36d2fec39d442ab6ba43f110704414d91b62.sol:3

*/

//pragma solidity ^0.5.13;
prag

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:41.163213
Transaction Length: 1
Severity: Low
Contract: Token
Function name: unstake(uint256)
PC address: 5728
Estimated Gas Usage: 1353 - 1638
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x991f36d2fec39d442ab6ba43f110704414d91b62.sol:253

(_feeAmount * FLOAT_SCALAR) /
            info.totalStaked

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:18.997950
Transaction Length: 2
Severity: Low
Contract: Token
Function name: unstake(uint256)
PC address: 5728
Estimated Gas Usage: 1353 - 1638
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x991f36d2fec39d442ab6ba43f110704414d91b62.sol:253

(_feeAmount * FLOAT_SCALAR) /
            info.totalStaked

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x57b8ac23309d36b8cde4e2b8d2509bfd5f6daaab.sol
Total states:3610
83.937367
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.009587
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: initialize(uint256,uint256,address[],uint256[],address)
PC address: 787
Estimated Gas Usage: 461 - 556
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x57b8ac23309d36b8cde4e2b8d2509bfd5f6daaab.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.992049
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: initialize(uint256,uint256,address[],uint256[],address)
PC address: 789
Estimated Gas Usage: 461 - 556
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x57b8ac23309d36b8cde4e2b8d2509bfd5f6daaab.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:14.589848
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: initialize(uint256,uint256,address[],uint256[],address)
PC address: 872
Estimated Gas Usage: 637 - 732
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x57b8ac23309d36b8cde4e2b8d2509bfd5f6daaab.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:24.564591
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: initialize(uint256,uint256,address[],uint256[],address)
PC address: 874
Estimated Gas Usage: 637 - 732
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x57b8ac23309d36b8cde4e2b8d2509bfd5f6daaab.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:33.963387
Transaction Length: 1
Severity: Medium
Contract: LidTeamLock
Function name: startRelease()
PC address: 1025
Estimated Gas Usage: 20818 - 150697
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 4521
Offset: 4885
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop1/0x57b8ac23309d36b8cde4e2b8d2509bfd5f6daaab.sol:694

function startRelease() external {

        require(releaseStart == 0, "Has already started.");

        require(address(this).balance != 0, "Must have some ether deposited.");

        require(lidToken.balanceOf(address(this)) != 0, "Must have some lid deposited.");

        startingLid = lidToken.balanceOf(address(this));

        startingEth = address(this).balance;

        releaseStart = now.add(24 hours);

    }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:00.675262
Transaction Length: 2
Severity: Medium
Contract: LidTeamLock
Function name: startRelease()
PC address: 1025
Estimated Gas Usage: 20818 - 150697
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 4521
Offset: 4885
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop1/0x57b8ac23309d36b8cde4e2b8d2509bfd5f6daaab.sol:694

function startRelease() external {

        require(releaseStart == 0, "Has already started.");

        require(address(this).balance != 0, "Must have some ether deposited.");

        require(lidToken.balanceOf(address(this)) != 0, "Must have some lid deposited.");

        startingLid = lidToken.balanceOf(address(this));

        startingEth = address(this).balance;

        releaseStart = now.add(24 hours);

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:35.170202
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 1163
Estimated Gas Usage: 407 - 502
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x57b8ac23309d36b8cde4e2b8d2509bfd5f6daaab.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:38.230859
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 1165
Estimated Gas Usage: 407 - 502
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x57b8ac23309d36b8cde4e2b8d2509bfd5f6daaab.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:43.846537
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 1248
Estimated Gas Usage: 583 - 678
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x57b8ac23309d36b8cde4e2b8d2509bfd5f6daaab.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:57.131282
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 1250
Estimated Gas Usage: 583 - 678
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x57b8ac23309d36b8cde4e2b8d2509bfd5f6daaab.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.773657
Transaction Length: 1
Severity: Low
Contract: LidTeamLock
Function name: teamMemberBPs(uint256)
PC address: 1624
Estimated Gas Usage: 679 - 774
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x57b8ac23309d36b8cde4e2b8d2509bfd5f6daaab.sol:572

uint[] public teamMemberBPs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:20.335989
Transaction Length: 1
Severity: Low
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 5028
Estimated Gas Usage: 1070 - 1165
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x57b8ac23309d36b8cde4e2b8d2509bfd5f6daaab.sol:720

teamMemberAddresses[0]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:20.806090
Transaction Length: 1
Severity: Low
Contract: LidTeamLock
Function name: teamMemberAddresses(uint256)
PC address: 5599
Estimated Gas Usage: 678 - 773
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x57b8ac23309d36b8cde4e2b8d2509bfd5f6daaab.sol:570

address payable[] public teamMemberAddresses

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:32.917451
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: startRelease()
PC address: 6647
Estimated Gas Usage: 15758 - 125637
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x57b8ac23309d36b8cde4e2b8d2509bfd5f6daaab.sol:186

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x021868c129a953a39846e1b9d47b7249407be584.sol
Total states:426
0.90727
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0xc672d13d806de8e23d9965fb5dcae145dfcde92e.sol
Total states:52549
1343.64808
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.854645
Transaction Length: 1
Severity: High
Contract: AccessChecker
Function name: getModuleAddress(string)
PC address: 416
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xc672d13d806de8e23d9965fb5dcae145dfcde92e.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.310575
Transaction Length: 1
Severity: High
Contract: Module
Function name: getModuleAddress(string)
PC address: 416
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xc672d13d806de8e23d9965fb5dcae145dfcde92e.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.353442
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(string,string,uint8)
PC address: 1000
Estimated Gas Usage: 409 - 504
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xc672d13d806de8e23d9965fb5dcae145dfcde92e.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.879370
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(string,string,uint8)
PC address: 1151
Estimated Gas Usage: 751 - 3528
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xc672d13d806de8e23d9965fb5dcae145dfcde92e.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.488706
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[],uint256)
PC address: 2226
Estimated Gas Usage: 429 - 524
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xc672d13d806de8e23d9965fb5dcae145dfcde92e.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.367748
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[],uint256)
PC address: 2228
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xc672d13d806de8e23d9965fb5dcae145dfcde92e.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.812115
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[])
PC address: 2357
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xc672d13d806de8e23d9965fb5dcae145dfcde92e.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:15.085284
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[])
PC address: 2359
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xc672d13d806de8e23d9965fb5dcae145dfcde92e.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.048615
Transaction Length: 1
Severity: High
Contract: InvestingModule
Function name: deposit(address,address[],uint256[])
PC address: 2437
Estimated Gas Usage: 507 - 602
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xc672d13d806de8e23d9965fb5dcae145dfcde92e.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.112171
Transaction Length: 1
Severity: High
Contract: SavingsModule
Function name: deposit(address,address[],uint256[])
PC address: 2437
Estimated Gas Usage: 507 - 602
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xc672d13d806de8e23d9965fb5dcae145dfcde92e.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.362205
Transaction Length: 1
Severity: High
Contract: InvestingModule
Function name: deposit(address,address[],uint256[])
PC address: 2439
Estimated Gas Usage: 507 - 602
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xc672d13d806de8e23d9965fb5dcae145dfcde92e.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.069661
Transaction Length: 1
Severity: High
Contract: SavingsModule
Function name: deposit(address,address[],uint256[])
PC address: 2439
Estimated Gas Usage: 507 - 602
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xc672d13d806de8e23d9965fb5dcae145dfcde92e.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:30.896543
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: getModuleAddress(string)
PC address: 2526
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xc672d13d806de8e23d9965fb5dcae145dfcde92e.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:21.210835
Transaction Length: 1
Severity: High
Contract: InvestingModule
Function name: deposit(address,address[],uint256[])
PC address: 2585
Estimated Gas Usage: 840 - 3617
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xc672d13d806de8e23d9965fb5dcae145dfcde92e.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:22.429527
Transaction Length: 1
Severity: High
Contract: SavingsModule
Function name: deposit(address,address[],uint256[])
PC address: 2585
Estimated Gas Usage: 840 - 3617
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xc672d13d806de8e23d9965fb5dcae145dfcde92e.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:33.798484
Transaction Length: 1
Severity: High
Contract: InvestingModule
Function name: deposit(address,address[],uint256[])
PC address: 2587
Estimated Gas Usage: 840 - 3617
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xc672d13d806de8e23d9965fb5dcae145dfcde92e.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:36.370902
Transaction Length: 1
Severity: High
Contract: SavingsModule
Function name: deposit(address,address[],uint256[])
PC address: 2587
Estimated Gas Usage: 840 - 3617
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xc672d13d806de8e23d9965fb5dcae145dfcde92e.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:25.074379
Transaction Length: 1
Severity: High
Contract: InvestingModule
Function name: getModuleAddress(string)
PC address: 2950
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xc672d13d806de8e23d9965fb5dcae145dfcde92e.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:36.277174
Transaction Length: 1
Severity: High
Contract: SavingsModule
Function name: getModuleAddress(string)
PC address: 2950
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xc672d13d806de8e23d9965fb5dcae145dfcde92e.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:20.901689
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(address,string,string)
PC address: 3179
Estimated Gas Usage: 485 - 580
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xc672d13d806de8e23d9965fb5dcae145dfcde92e.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.161775
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3249
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xc672d13d806de8e23d9965fb5dcae145dfcde92e.sol:34

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:41.322206
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(address,string,string)
PC address: 3330
Estimated Gas Usage: 827 - 3604
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xc672d13d806de8e23d9965fb5dcae145dfcde92e.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.397415
Transaction Length: 1
Severity: Low
Contract: DistributionToken
Function name: distributions(uint256)
PC address: 3405
Estimated Gas Usage: 724 - 819
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xc672d13d806de8e23d9965fb5dcae145dfcde92e.sol:1323

Distribution[] public distributions

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.515495
Transaction Length: 2
Severity: High
Contract: ERC20Burnable
Function name: increaseAllowance(address,uint256)
PC address: 3429
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xc672d13d806de8e23d9965fb5dcae145dfcde92e.sol:34

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.853191
Transaction Length: 2
Severity: High
Contract: ERC20Mintable
Function name: increaseAllowance(address,uint256)
PC address: 4214
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xc672d13d806de8e23d9965fb5dcae145dfcde92e.sol:34

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:36.522394
Transaction Length: 1
Severity: Low
Contract: PoolToken
Function name: distributions(uint256)
PC address: 6392
Estimated Gas Usage: 768 - 863
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xc672d13d806de8e23d9965fb5dcae145dfcde92e.sol:1323

Distribution[] public distributions

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.095645
Transaction Length: 2
Severity: High
Contract: DistributionToken
Function name: increaseAllowance(address,uint256)
PC address: 6759
Estimated Gas Usage: 1104 - 1579
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0xc672d13d806de8e23d9965fb5dcae145dfcde92e.sol:34

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:54.186643
Transaction Length: 1
Severity: Low
Contract: InvestingModule
Function name: registeredPoolTokens()
PC address: 14663
Estimated Gas Usage: 1220 - 1691
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xc672d13d806de8e23d9965fb5dcae145dfcde92e.sol:2322

registeredProtocols[i]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:59.082490
Transaction Length: 1
Severity: Low
Contract: SavingsModule
Function name: registeredPoolTokens()
PC address: 14663
Estimated Gas Usage: 1220 - 1691
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xc672d13d806de8e23d9965fb5dcae145dfcde92e.sol:2322

registeredProtocols[i]

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0xeb724ac5d7488a29d6cf76262a1db561f068b2df.sol
Total states:1061
26.757205
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.613429
Transaction Length: 1
Severity: Low
Contract: etherATM
Function name: persons(uint256)
PC address: 753
Estimated Gas Usage: 678 - 773
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0xeb724ac5d7488a29d6cf76262a1db561f068b2df.sol:28

Person[] public persons

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x4f20fd6d8ef9ed98a4eaa58a3d6450d7952acab5.sol
Total states:3463
5.032735
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.039209
Transaction Length: 0
Severity: High
Contract: ERC20
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x4f20fd6d8ef9ed98a4eaa58a3d6450d7952acab5.sol:12

ns; to access them see `ERC20Detailed`.
 */

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.041854
Transaction Length: 0
Severity: High
Contract: TulipToken
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x4f20fd6d8ef9ed98a4eaa58a3d6450d7952acab5.sol:12

ns; to access them see `ERC20Detailed`.
 */

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x9c50fee33c9fa86d2a8d178860b08ec5694a6353.sol
Total states:2632
12.054069
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x7729b6278ac7c6c1fcf40d8d505e37488fbc0ec03.sol
Total states:3685
108.712379
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x9236088b5c0718932099eEb3dB07117e8D042471.sol
Total states:120
249.855261
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.286542
Transaction Length: 1
Severity: High
Contract: PublicResolver
Function name: setDNSRecords(bytes32,bytes)
PC address: 561
Estimated Gas Usage: 391 - 486
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x9236088b5c0718932099eEb3dB07117e8D042471.sol:3

*/

/**
 *Submitted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.473185
Transaction Length: 1
Severity: High
Contract: PublicResolver
Function name: setText(bytes32,string,string)
PC address: 692
Estimated Gas Usage: 413 - 508
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x9236088b5c0718932099eEb3dB07117e8D042471.sol:3

*/

/**
 *Submitted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:17.701462
Transaction Length: 1
Severity: High
Contract: PublicResolver
Function name: setText(bytes32,string,string)
PC address: 777
Estimated Gas Usage: 589 - 684
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x9236088b5c0718932099eEb3dB07117e8D042471.sol:3

*/

/**
 *Submitted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:33.116902
Transaction Length: 1
Severity: High
Contract: PublicResolver
Function name: ABI(bytes32,uint256)
PC address: 1099
Estimated Gas Usage: 832 - 2152
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x9236088b5c0718932099eEb3dB07117e8D042471.sol:116

function ABI(bytes32 node, uint256 contentTypes) external view returns (uint256, bytes memory) {
        mapping(uint256=>bytes) storage abiset = abis[node];

        for (uint256 contentType = 1; contentType <= contentTypes; contentType <<= 1) {
            if ((contentType & contentTypes) != 0 && abiset[contentType].length > 0) {
                return (contentType, abiset[contentType]);
            }
        }

        return (0, bytes(""));
    }

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x800933440fe46a5f74cc3f88165bf0727664e0e82.sol
Total states:14395
55.800207
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.968703
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1004
Estimated Gas Usage: 417 - 512
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x800933440fe46a5f74cc3f88165bf0727664e0e82.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.084975
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1006
Estimated Gas Usage: 417 - 512
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x800933440fe46a5f74cc3f88165bf0727664e0e82.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.918019
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1089
Estimated Gas Usage: 593 - 688
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x800933440fe46a5f74cc3f88165bf0727664e0e82.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:21.452089
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1091
Estimated Gas Usage: 593 - 688
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x800933440fe46a5f74cc3f88165bf0727664e0e82.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.787703
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeBP(uint256)
PC address: 2585
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x800933440fe46a5f74cc3f88165bf0727664e0e82.sol:629

uint[] public bonusRangeBP

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:35.218970
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeStart(uint256)
PC address: 6017
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop1/0x800933440fe46a5f74cc3f88165bf0727664e0e82.sol:628

uint[] public bonusRangeStart

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:32.463320
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: calculateRatePerEth(uint256,uint256,uint256)
PC address: 6866
Estimated Gas Usage: 955 - 1050
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop1/0x800933440fe46a5f74cc3f88165bf0727664e0e82.sol:163

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop1/0x2cbe8406380e784ea1a24aeedfbf79788e2721ac.sol
Total states:5340
61.619646
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:14.153439
Transaction Length: 1
Severity: Low
Contract: UniswapZAP
Function name: fallback
PC address: 1249
Estimated Gas Usage: 2242 - 3656
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop1/0x2cbe8406380e784ea1a24aeedfbf79788e2721ac.sol:274

_WETH.deposit.value(msg.value)()

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:45.565981
Transaction Length: 2
Severity: Low
Contract: UniswapZAP
Function name: fallback
PC address: 1249
Estimated Gas Usage: 2242 - 3656
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop1/0x2cbe8406380e784ea1a24aeedfbf79788e2721ac.sol:274

_WETH.deposit.value(msg.value)()

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:00:36.893923
Transaction Length: 2
Severity: Medium
Contract: UniswapZAP
Function name: addLiquidityETHOnly(address)
PC address: 1249
Estimated Gas Usage: 1776 - 2860
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../contracts/m_loop/loop1/0x2cbe8406380e784ea1a24aeedfbf79788e2721ac.sol:274

_WETH.deposit.value(msg.value)()

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/noloop/noloop1/0x532e68fdd932811f35577edc6653f4852ace5c64.sol
Total states:3586
5.989653
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/noloop/noloop1/0x17d5c3ffe2a7c7a1e4567c7501d166b0532c8826.sol
Total states:1389
2.207331
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/noloop/noloop1/0xa56913df48decb9b4815dddf307a31f07ef1f19a.sol
Total states:13173
26.591566
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.056832
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3244
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/noloop/noloop1/0xa56913df48decb9b4815dddf307a31f07ef1f19a.sol:145

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/noloop/noloop1/0x6AC7575A340a3DAb2Ae9ca07c4DbFC6bf8E7E281.sol
Total states:3825
22.15658
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.461426
Transaction Length: 0
Severity: Low
Contract: CRVStrategySwerve
Function name: salvage(address,address,uint256)
PC address: 800
Estimated Gas Usage: 48750 - 234010
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/noloop/noloop1/0x6AC7575A340a3DAb2Ae9ca07c4DbFC6bf8E7E281.sol:1159

function setArbTolerance(uint256 tolerance) external onlyGovernance {
    require(tolerance <= 100, "at most 100");
    arbTolerance = tolerance;
  }

--------------------

