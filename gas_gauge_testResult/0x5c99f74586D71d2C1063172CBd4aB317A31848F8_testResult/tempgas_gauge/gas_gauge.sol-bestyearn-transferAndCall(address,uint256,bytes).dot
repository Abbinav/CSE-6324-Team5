digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_transferred = _transfer(msg.sender,_to,_tokens)

IRs:
TMP_38(uint256) = INTERNAL_CALL, bestyearn._transfer(address,address,uint256)(msg.sender,_to,_tokens)
_transferred(uint256) := TMP_38(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_size = extcodesize(uint256)(_to)

IRs:
REF_36 -> CODESIZE _to
_size(uint32) := REF_36(uint256)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_size > 0

IRs:
TMP_39(bool) = _size > 0
CONDITION TMP_39"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(Callable(_to).tokenCallback(msg.sender,_transferred,_data))

IRs:
TMP_40 = CONVERT _to to Callable
TMP_41(bool) = HIGH_LEVEL_CALL, dest:TMP_40(Callable), function:tokenCallback, arguments:['msg.sender', '_transferred', '_data']  
TMP_42(None) = SOLIDITY_CALL require(bool)(TMP_41)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
}
