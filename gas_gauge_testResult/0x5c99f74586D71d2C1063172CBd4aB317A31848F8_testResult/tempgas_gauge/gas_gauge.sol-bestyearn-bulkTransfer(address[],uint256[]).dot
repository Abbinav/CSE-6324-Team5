digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_receivers.length == _amounts.length)

IRs:
REF_38 -> LENGTH _receivers
REF_39 -> LENGTH _amounts
TMP_43(bool) = REF_38 == REF_39
TMP_44(None) = SOLIDITY_CALL require(bool)(TMP_43)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < _receivers.length

IRs:
REF_40 -> LENGTH _receivers
TMP_45(bool) = i < REF_40
CONDITION TMP_45"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_transfer(msg.sender,_receivers[i],_amounts[i])

IRs:
REF_41(address) -> _receivers[i]
REF_42(uint256) -> _amounts[i]
TMP_46(uint256) = INTERNAL_CALL, bestyearn._transfer(address,address,uint256)(msg.sender,REF_41,REF_42)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
i ++

IRs:
TMP_47(uint256) := i(uint256)
i(uint256) = i (c)+ 1"];
7->5;
}
