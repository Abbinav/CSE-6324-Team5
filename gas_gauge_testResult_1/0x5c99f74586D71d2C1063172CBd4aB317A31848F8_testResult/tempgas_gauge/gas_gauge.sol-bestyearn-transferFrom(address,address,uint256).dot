digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(info.users[_from].allowance[msg.sender] >= _tokens)

IRs:
REF_28(mapping(address => bestyearn.User)) -> info.users
REF_29(bestyearn.User) -> REF_28[_from]
REF_30(mapping(address => uint256)) -> REF_29.allowance
REF_31(uint256) -> REF_30[msg.sender]
TMP_35(bool) = REF_31 >= _tokens
TMP_36(None) = SOLIDITY_CALL require(bool)(TMP_35)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
info.users[_from].allowance[msg.sender] -= _tokens

IRs:
REF_32(mapping(address => bestyearn.User)) -> info.users
REF_33(bestyearn.User) -> REF_32[_from]
REF_34(mapping(address => uint256)) -> REF_33.allowance
REF_35(uint256) -> REF_34[msg.sender]
REF_35(-> info) = REF_35 (c)- _tokens"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_transfer(_from,_to,_tokens)

IRs:
TMP_37(uint256) = INTERNAL_CALL, bestyearn._transfer(address,address,uint256)(_from,_to,_tokens)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
}
